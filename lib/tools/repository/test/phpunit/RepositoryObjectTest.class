<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision: 1.3 $ $Date: 2006/01/10 04:38:42 $
 * @package RepositoryTools
 * @subpackage PHPUnit
 * @author Jozef Selesi <selesi at gmail dot com>
 */

GalleryCoreApi::requireOnce('lib/tools/repository/classes/RepositoryObject.class');
GalleryCoreApi::requireOnce(
    'lib/tools/repository/test/phpunit/RepositoryTestTemplate.class');

/**
 * Test RepositoryObject functionality
 *
 * @package RepositoryTools
 * @subpackage PHPUnit
 */
class RepositoryObjectTest extends GalleryTestCase {

    function testOutputDir() {
	global $gallery;

	$object = new RepositoryObject();

	$platform = new UnitTestPlatform();
	/* Test an invalid directory. */
	$platform->setReply('is_dir', array('invalidDirectory'), false);

	/* Test setting a valid directory. */
	$platform->setReply('is_dir', array('validDirectory'), true);
	$platform->setReply('realpath', array('validDirectory'), 'validDirectory');
	$gallery->setPlatform($platform);

	$ret = $object->setOutputDir('invalidDirectory');
	$this->assert($ret, 'Output directory set to non-existent directory.');

	$ret = $object->setOutputDir('validDirectory');
	$this->assert(!$ret, 'Error returned on a valid directory.');

	/* Output directory should always end with a directory separator. */
	$this->assert(preg_match('/\/$/', $object->getOutputDir()),
	    'Directory separator not appended to output directory path.');

	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testWriteToDisk() {
	global $gallery;

	$outputPath = 'outputDirectory/output.file';
	$processedTemplateContents = 'Some contents used for testing.';
	$templateVariableContents = 'Some template variable contents.';

	$object = new RepositoryObject();
	$object->setOutputFile('output.file');
	$object->_outputDir = 'outputDirectory/';

	$platform = new UnitTestPlatform();
	$platform->setReply('file_exists', array($outputPath), true);

	$platform->setReply('file_exists', array($outputPath), false);
	$platform->setReply('file_put_contents', array($outputPath, $templateVariableContents),
	    true);

	$platform->setReply('file_exists', array($outputPath), false);
	$platform->setReply('file_put_contents', array($outputPath, $processedTemplateContents),
	    true);
	$gallery->setPlatform($platform);

	/* Test that an existing file is not overwritten by default. */
	$ret = $object->writeToDisk();
	if ($ret) {
	    $this->failWithStatus($ret);
	}
	$this->assert(!$object->wasFileWritten(), 'Existing file overwritten.');

	/* Test overwriting an existing file with a template variable contents. */
	$object->setTemplate(new RepositoryTestTemplate('', $templateVariableContents));
	$ret = $object->writeToDisk(true);
	if ($ret) {
	    $this->failWithStatus($ret);
	}
	$this->assert($object->wasFileWritten(), 'Existing file not overwritten.');

	/* Test overwriting an existing file with a processed template. */
	$object->setTemplate(new RepositoryTestTemplate($processedTemplateContents));
	$object->setTemplateFile('test.tpl');
	$ret = $object->writeToDisk(true);
	if ($ret) {
	    $this->failWithStatus($ret);
	}
	$this->assert($object->wasFileWritten(), 'Existing file not overwritten.');

	$this->assert($platform->isComplete(), $platform->getRemaining());
    }
}
?>
