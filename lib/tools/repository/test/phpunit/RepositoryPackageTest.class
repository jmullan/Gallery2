<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * @version $Revision: 1.3 $ $Date: 2006/01/10 04:38:42 $
 * @package RepositoryTools
 * @subpackage PHPUnit
 * @author Jozef Selesi <selesi at gmail dot com>
 */

GalleryCoreApi::requireOnce('lib/tools/repository/classes/RepositoryObject.class');
GalleryCoreApi::requireOnce('lib/tools/repository/classes/RepositoryPackage.class');
GalleryCoreApi::requireOnce(
    'lib/tools/repository/test/phpunit/RepositoryTestTemplate.class');

/**
 * Test RepositoryPackage functionality
 *
 * @package RepositoryTools
 * @subpackage PHPUnit
 */
class RepositoryPackageTest extends GalleryTestCase {
    var $_package;
    var $_expectedPackageData;

    /**
     * Prepare a RepositoryPackage for testing.
     */
    function setUp() {
	parent::setUp();

	$this->_package = new RepositoryPackage();
	$this->_package->setTemplate(new RepositoryTestTemplate());
	$this->_package->setTemplateFile('test.tpl');
	$this->_package->_outputDir = 'someoutputdir/';

	/* Prepare the data we expect from the methods tested for comparison. */
	$this->_expectedPackageData['package1'] = array(
	    0 => array('random' => 'random'),
	    1 => array('directories' => array('dir1', 'dir2')),
	    2 => array('files' => array(array('path' => 'file1',
				   'data' => base64_encode('pluginDirectory/file1')),
			     array('path' => 'file2',
				   'data' => base64_encode('pluginDirectory/file2')))));

	$this->_expectedPackageData['package2'] = array (
	    3 => array('random' => 'random'),
	    4 => array('directories' => array('dir2', 'dir3')),
	    5 => array('files' => array(array('path' => 'file2',
				   'data' => base64_encode('pluginDirectory/file2')),
			     array('path' => 'file3',
				   'data' => base64_encode('pluginDirectory/file3')))));
	}

    /**
     * Test if valid data is being created for a package.
     *
     * We do not test how the final package looks like, because it may change
     * if the templates are changed, but instead check if valid data is being
     * put in the template. This is done by saving the data that is sent to
     * replaceVariable by using a mock template.
     */
    function testCreateSinglePackage() {
	global $gallery;
	
	$testDescriptor = new RepositoryPackageTestDescriptor();
	$expectedPackagePath = sprintf('%s%s-%s-%s-%s.package', 'someoutputdir/',
	    $testDescriptor->getPluginType(), $testDescriptor->getPluginVersion(),
	    $testDescriptor->getBuildTimestamp(), 'package1');

	$platform = new UnitTestPlatform();
	$platform->setReply('file_get_contents', array('pluginDirectory/file1'),
	    'pluginDirectory/file1');
	$platform->setReply('file_get_contents', array('pluginDirectory/file2'),
	    'pluginDirectory/file2');
	$platform->setReply('file_exists', array($expectedPackagePath), true);
	$gallery->setPlatform($platform);

	/* Send data to template. */
	$this->_package->_descriptor = $testDescriptor;
	$ret = $this->_package->writeSinglePackageToDisk('package1');
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	/* Get data from template. */
	$templateVariables = $this->_package->_template->getVariables();
	$this->assertEquals($this->_expectedPackageData['package1'], $templateVariables, '');

	/* Verify that the package was named appropriately. */
	$packagePath = $this->_package->getOutputDir() . $this->_package->getOutputFile();
	$this->assertEquals($expectedPackagePath, $packagePath, 'Package written to wrong path []');

	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testCreateAllPackages() {
	global $gallery;
	
	$this->_package->_descriptor = new RepositoryPackageTestDescriptor();

	$platform = new UnitTestPlatform();
	$platform->setReply('file_get_contents', array('pluginDirectory/file1'),
	    'pluginDirectory/file1');
	$platform->setReply('file_get_contents', array('pluginDirectory/file2'),
	    'pluginDirectory/file2');
	$platform->setReply('file_exists',
	    array('someoutputdir/testplugin-1.0.0-19700411131300-package1.package'), false);
	$platform->setReply('file_put_contents',
	    array('someoutputdir/testplugin-1.0.0-19700411131300-package1.package', ''), true);
	$platform->setReply('file_get_contents', array('pluginDirectory/file2'),
	    'pluginDirectory/file2');
	$platform->setReply('file_get_contents', array('pluginDirectory/file3'),
	    'pluginDirectory/file3');
	$platform->setReply('file_exists',
	    array('someoutputdir/testplugin-1.0.0-19700411131300-package2.package'), false);
	$platform->setReply('file_put_contents',
	    array('someoutputdir/testplugin-1.0.0-19700411131300-package2.package', ''), true);
	$gallery->setPlatform($platform);

	/* Send data to template. */
	list ($ret, $packagesWritten) = $this->_package->writeAllPackagesToDisk();
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	$this->assertEquals(array('packagesWritten' => array('package1', 'package2'),
				  'packagesSkipped' => array()),
			    $packagesWritten, 'Unexpected list of written packages.');

	/* Get data from template. */
	$templateVariables = $this->_package->_template->getVariables();

	$this->assertEquals($this->_expectedPackageData['package1']
	    + $this->_expectedPackageData['package2'], $templateVariables, 'package data');

	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testGetPackageFileName() {
	$this->_package->_descriptor = new RepositoryPackageTestDescriptor();

	$this->assertEquals('testplugin-1.0.0-19700411131300-base.package',
			    $this->_package->getPackageFileName('base'),
			    'Unexpected package file name generated.');

	$this->assertEquals('testplugin-1.0.0-19700411131300-test.package',
			    $this->_package->getPackageFileName('test'),
			    'Unexpected package file name generated.');

	$this->assertEquals('testplugin-lang-en_EN-2.2-2.2.package',
			    $this->_package->getPackageFileName('lang-en_EN'),
			    'Unexpected package file name generated.');
    }

    /**
     * Test if getRandomString returns a string of the specified length.
     */
    function testGetRandomString() {
	$length = rand(0, 50);
	$randomString = RepositoryPackage::getRandomString($length);

	$this->assert(is_string($randomString), 'Returned value is not a string.');
	$this->assert(strlen($randomString) == $length,
	    'Returned string is not of specified length.');
    }
}

class RepositoryPackageTestDescriptor {
    var $_packages;
    var $_directories;
    var $_files;

    var $_pluginId;
    var $_pluginType;
    var $_pluginDir;
    var $_pluginVersion;

    function RepositoryPackageTestDescriptor() {
	$this->_packages = array('package1', 'package2');

	$this->_directories = array(
	    'package1' => array('dir1', 'dir2'),
	    'package2' => array('dir2', 'dir3'));

	$this->_files = array(
	    'package1' => array('file1', 'file2'),
	    'package2' => array('file2', 'file3'));

	$this->_pluginId = 'testplugin';
	$this->_pluginVersion = '1.0.0';
	$this->_pluginDir = 'pluginDirectory/';
	$this->_pluginType = 'module';
	$this->_pluginBuildTimestamp = '19700411131300';
	$this->_pluginStringsRevision = '2.2';
    }

    function getPackages() {
	return $this->_packages;
    }

    function getDirectoriesInPackage($package) {
	return isset($this->_directories[$package]) ? $this->_directories[$package] : 'error';
    }

    function getFilesInPackage($package) {
    	return isset($this->_files[$package]) ? $this->_files[$package] : 'error';
    }

    function getPluginId() {
	return $this->_pluginId;
    }

    function getPluginType() {
	return $this->_pluginId;
    }

    function getPluginVersion() {
	return $this->_pluginVersion;
    }

    function getPluginDir() {
	return $this->_pluginDir;
    }

    function getBuildTimestamp() {
	return $this->_pluginBuildTimestamp;
    }

    function getStringsRevision() {
	return $this->_pluginStringsRevision;
    }

    function getLanguageRevision($languageCode) {
	return $this->_pluginStringsRevision;
    }
}
?>
