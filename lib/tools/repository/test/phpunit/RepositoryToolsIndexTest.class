<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision: 1.3 $ $Date: 2006/01/10 04:38:42 $
 * @package RepositoryTools
 * @subpackage PHPUnit
 * @author Jozef Selesi <selesi at gmail dot com>
 */

GalleryCoreApi::requireOnce('lib/tools/repository/classes/RepositoryObject.class');
GalleryCoreApi::requireOnce('lib/tools/repository/classes/RepositoryIndex.class');
GalleryCoreApi::requireOnce(
    'lib/tools/repository/test/phpunit/RepositoryTestTemplate.class');

/**
 * Test RepositoryIndex functionality
 *
 * @package RepositoryTools
 * @subpackage PHPUnit
 */
class RepositoryToolsIndexTest extends GalleryTestCase {

    /**
     * Test that a valid index is being generated and a valid plugin info
     * structure is created based on the index.
     */
    function testIndexGeneration() {
	global $gallery;

	$index = new RepositoryIndex();
	$index->_outputDir = 'repositorydir/';
	$index->setOutputFile('testindex');
	$index->setTemplate(new RepositoryTestTemplate());
	$index->setTemplateFile('test.tpl');
	$index->setUtilities(new GalleryRepositoryUtilities());
	/*
	 * The values given to the test platform contructor in the first
	 * array will be returned by readdir in the order specified. False
	 * indicates that there are no more files in the directory. The
	 * second array contains files and their contents which will be
	 * used by fread().
	 */
	include(dirname(__FILE__) . '/../data/SampleDescriptors.inc');
	$gallery->setPlatform(new RepositoryToolsIndexTestPlatform(array(
	    'module.descriptor', 'module2.descriptor', false, 'theme.descriptor', false), array(
	    'repositorydir/modules/module.descriptor' => serialize($sampleModuleDescriptor),
	    'repositorydir/themes/theme.descriptor' => serialize($sampleThemeDescriptor),
	    'repositorydir/modules/module2.descriptor' => serialize($sampleModule2Descriptor))));

	/* Generate the index. */
	list ($ret, $pluginsInIndex) = $index->generate();
	if ($ret) {
	    $this->failWithStatus($ret);
	}
	$this->assertEquals(array('themes' => 1, 'modules' => 1), $pluginsInIndex,
	    'Incorrect number of plugins in index.');

	/* Verify that the index is valid. */
	include(dirname(__FILE__) . '/../data/SampleIndex.inc');
	$this->assertEquals($sampleIndex, $index->_index, 'Generated index differs from expected.');
	$this->assert(md5(serialize($sampleIndex)) == $index->_indexHash,
	    'Generated hash differs from expected.');

	list ($ret, $pluginInfo) = $index->getPluginInfo();
	if ($ret) {
	    $this->failWithStatus($ret);
	}
	$this->assertEquals(array(
	    0 => array(
		'type' => 'modules',
		'id' => 'testModule',
		'version' => '1.0.0',
		'requiredCoreApi' => array('1', '2'),
		'requiredPluginApi' => array('3', '4')),
	    1 => array(
		'type' => 'themes',
		'id' => 'testTheme',
		'version' => '1.0.0',
		'requiredCoreApi' => array('1', '2'),
		'requiredPluginApi' => array('3', '4'))
	    ), $pluginInfo, 'Plugin information incorrect.');
    }
}

class RepositoryToolsIndexTestPlatform {
    var $_directories;
    var $_directoryIndex;
    var $_writtenData;

    function RepositoryToolsIndexTestPlatform($directories, $fileData) {
	$this->_directories = $directories;
	$this->_directoryIndex = -1;

	foreach ($fileData as $path => $fileContents) {
	    $this->_writtenData[$path] = $fileContents;
	}

	/* Get $sampleIndex from a separate file. */
	include(dirname(__FILE__) . '/../data/SampleIndex.inc');
	$this->_writtenData['repositorydir/index'] = serialize($sampleIndex);
    }

    function setFileContents($path, $fileContents) {
	$this->_writtenData[$path] = $fileContents;
    }

    function opendir($path) {
	return preg_match('/repositorydir\/[modules|themes]/', $path) ? $path : false;
    }

    function is_dir($path) {
	return true;
    }

    function realpath($path) {
	return preg_match('/\/$/', $path) ? substr($path, 0, strlen($path)-1) : $path;
    }

    function readdir($path) {
	$this->_directoryIndex++;
	return $this->_directories[$this->_directoryIndex];
    }

    function filesize($path) {
	return 10;
    }

    function file_get_contents($path) {
	$data = isset($this->_writtenData[$path]) ? $this->_writtenData[$path] : false;
	return $data;
    }

    function file_put_contents($path, $contents) {
	$this->_writtenData[$path] = $contents;
	return true;
    }

    function file_exists($path) {
    	return false;
    }
}
?>
