<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package RepositoryTools
 * @subpackage PHPUnit
 * @author Jozef Selesi <selesi at gmail dot com>
 */

GalleryCoreApi::requireOnce('lib/tools/repository/classes/RepositoryObject.class');
GalleryCoreApi::requireOnce('lib/tools/repository/classes/RepositoryDescriptor.class');
GalleryCoreApi::requireOnce(
    'lib/tools/repository/test/phpunit/RepositoryTestTemplate.class');

/**
 * Test RepositoryDescriptor functionality
 *
 * @package RepositoryTools
 * @subpackage PHPUnit
 */
class RepositoryDescriptorTest extends GalleryTestCase {
    var $_testModule;

    function setUp() {
	parent::setUp();
	global $gallery;

	/* This maps to ../data/MANIFEST */
	$this->_canonicalFileMetaData = array(
	    'files' => array(
		'MANIFEST' => array(
		    'bytes' => '12121', 'hash' => '381282740',
		    'packages' => array('base')),
		'file.1' => array(
		    'bytes' => '11111', 'hash' => '12345', 'packages' => array('base')),
		'file.2' => array(
		    'bytes' => '11111', 'hash' => '12345', 'packages' => array('base')),
		'po/strings.raw' => array(
		    'bytes' => '11111', 'hash' => '12345', 'packages' => array('base')),
		'po/aa.po' => array(
		    'bytes' => '11111', 'hash' => '12345', 'packages' => array('lang-aa')),
		'locale/aa/LC_MESSAGES/test.mo' => array(
		    'bytes' => '11111', 'hash' => '12345', 'packages' => array('lang-aa')),
		'test/phpunit/file.test' => array(
		    'bytes' => '11111', 'hash' => '12345', 'packages' => array())),
	    'directories' => array(
		'po' => array('packages' => array('base')),
		'locale/aa/LC_MESSAGES' => array('packages' => array('lang-aa')),
		'locale/aa' => array('packages' => array('lang-aa')),
		'locale' => array('packages' => array('base')),
		'test/phpunit' => array('packages' => array()),
		'test' => array('packages' => array())),
	    'header' => array(
		'stringsRevision' => '22222'));

	$gallery->_translator = new RepositoryDescriptorTestTranslator();
    }

    function _getDescriptorWithFakeFileMetadata() {
	$data = array();
	$utils = new RepositoryDescriptorTestUtilities();
	$g2Base = dirname(dirname(dirname(dirname(dirname(dirname(__FILE__))))));
	$utils->setGetFirstBytesFromFile(
	    array($g2Base . '/modules/testModule/MANIFEST', 128),
	    '# $' . 'Revision: 14604 $');
	$utils->setGetFirstBytesFromFile(
	    array($g2Base . '/modules/testModule/po/aa.po', 128),
	    '# $' . 'Id: de.po 14444 2006-09-03 08:03:07Z bharat $');
	$descriptor = new RepositoryDescriptor_FakeFileMetaDataTest($this->_canonicalFileMetaData);
	$descriptor->setUtilities($utils);
	$descriptor->setTemplate(new RepositoryTestTemplate());
	return $descriptor;
    }

    /**
     * Test that a valid descriptor is being generated.
     */
    function testDescriptorGeneration() {
	$descriptor = $this->_getDescriptorWithFakeFileMetadata();
	$ret = $descriptor->generate(new RepositoryDescriptorTestPlugin());
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	$this->assertEquals(
	    array('header' => array(
		      'stringsRevision' => '22222',
		      'buildTimestamp' => '14604'),
		  'descriptions' => array(
		      'en_US' => array(
			  'name' => 'Test Module',
			  'description' => 'This is a test module.',
			  'groupLabel' => 'Test Group'),
		      'pt_BR' => array(
			  'name' => 'pt_BR-modules_testModule-Test Module',
			  'description' => 'pt_BR-modules_testModule-This is a test module.',
			  'groupLabel' => 'pt_BR-modules_testModule-Test Group'),
		      'pt_PT' => array(
			  'name' => 'pt_PT-modules_testModule-Test Module',
			  'description' => 'pt_PT-modules_testModule-This is a test module.',
			  'groupLabel' => 'pt_PT-modules_testModule-Test Group')),
		  'files' => array(
		      'MANIFEST' => array(
			  'bytes' => '12121', 'hash' => '381282740',
			  'packages' => array('base')),
		      'file.1' => array(
			  'bytes' => '11111', 'hash' => '12345', 'packages' => array('base')),
		      'file.2' => array(
			  'bytes' => '11111', 'hash' => '12345', 'packages' => array('base')),
		      'po/strings.raw' => array(
			  'bytes' => '11111', 'hash' => '12345', 'packages' => array('base')),
		      'po/aa.po' => array(
			  'bytes' => '11111', 'hash' => '12345', 'packages' => array('lang-aa')),
		      'locale/aa/LC_MESSAGES/test.mo' => array(
			  'bytes' => '11111', 'hash' => '12345', 'packages' => array('lang-aa')),
		      'test/phpunit/file.test' => array(
			  'bytes' => '11111', 'hash' => '12345', 'packages' => array())),
		  'directories' => array(
		      'locale/aa/LC_MESSAGES' => array('packages' => array('lang-aa')),
		      'locale/aa' => array('packages' => array('lang-aa')),
		      'po' => array('packages' => array('base')),
		      'locale' => array('packages' => array('base')),
		      'test' => array('packages' => array()),
		      'test/phpunit' => array('packages' => array())),
		  'languages' => array('22222' => array('aa' => '14444'))),
	    $descriptor->_data,
	    'Descriptor does not match expected data.');
    }

    function testGetFileMetaData() {
	global $gallery;

	$testDataDir = dirname(dirname(__FILE__)) . '/data/';
	$data = array();
	$descriptor = new RepositoryDescriptor();
	$utils = new RepositoryDescriptorTestUtilities();
	$utils->setGetFirstBytesFromFile(
	    array($testDataDir . 'po/strings.raw', 128),
	    '# $' . 'Id: strings.raw 22222 2006-07-08 23:55:12Z bharat $');
	$descriptor->setUtilities($utils);

	$platform = new UnitTestPlatform();
	$platform->setReply('filesize', array($testDataDir . 'MANIFEST'), 12121);
	$platform->setReply('file_get_contents', array($testDataDir . 'MANIFEST'), 'manifest_data');
	$gallery->setPlatform($platform);

	$descriptor->getFileMetaData(dirname(dirname(__FILE__)) . '/data/', $data);

	// debug
	$this->assertEquals($this->_canonicalFileMetaData['directories'], $data['directories']);

	$this->assertEquals($this->_canonicalFileMetaData, $data);
    }

    function testGetDirectoriesInPackage() {
	$descriptor = $this->_getDescriptorWithFakeFileMetadata();
	$ret = $descriptor->generate(new RepositoryDescriptorTestPlugin());
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	$this->assertEquals(
	    array('locale', 'po'),
	    $descriptor->getDirectoriesInPackage('base'));

	/*
	 * It's important that parent dirs show up before child dirs because we'll be calling
	 * mkdir on them in this order.
	 */
	$this->assertEquals(
	    array('locale/aa', 'locale/aa/LC_MESSAGES'),
	    $descriptor->getDirectoriesInPackage('lang-aa'));
    }

    function testGetFilesInPackage() {
	$descriptor = $this->_getDescriptorWithFakeFileMetadata();
	$ret = $descriptor->generate(new RepositoryDescriptorTestPlugin());
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	$this->assertEquals(
	    array('MANIFEST', 'file.1', 'file.2', 'po/strings.raw'),
	    $descriptor->getFilesInPackage('base'));

	$this->assertEquals(
	    array('locale/aa/LC_MESSAGES/test.mo', 'po/aa.po'),
	    $descriptor->getFilesInPackage('lang-aa'));
    }

    function testGetPackages() {
	$descriptor = $this->_getDescriptorWithFakeFileMetadata();
	$ret = $descriptor->generate(new RepositoryDescriptorTestPlugin());
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	$this->assertEquals(
	    array('base', 'lang-aa'),
	    $descriptor->getPackages());
    }
}

class RepositoryDescriptor_FakeFileMetaDataTest extends RepositoryDescriptor{
    function RepositoryDescriptor_FakeFileMetaDataTest($metaData) {
	$this->_metaData = $metaData;
    }

    function getFileMetaData($pluginDir, &$data) {
	$data = array_merge($data, $this->_metaData);
	return null;
    }
}

class RepositoryDescriptorTestPlugin {
    function getId() {
	return 'testModule';
    }

    function getName() {
	return 'Test Module';
    }

    function getDescription() {
	return 'This is a test module.';
    }

    function getVersion() {
	return '1.0.0';
    }

    function getPluginType() {
	return 'module';
    }

    function getRequiredModuleApi() {
	return array(3, 4);
    }

    function getRequiredCoreApi() {
	return array(1, 2);
    }

    function getGroup() {
	return array('group' => 'testGroup', 'groupLabel' => 'Test Group');
    }
}

class RepositoryDescriptorTestTranslator {
    var $_languageCode;

    function init($languageCode) {
	$this->_languageCode = $languageCode;
    }

    function getLanguageData() {
	return array(array('pt' => array('BR' => 'Desc3', 'PT' => 'Desc4')), array());
    }

    function translateDomain($domain, $string) {
	return array(null, sprintf(
	    '%s-%s-%s', $this->_languageCode, $domain, $string['text']));
    }
}

class RepositoryDescriptorTestUtilities {
    function setGetFirstBytesFromFile($expected, $reply) {
	$this->_matches[serialize($expected)] = $reply;
    }

    function getFirstBytesFromFile($file, $bytes) {
	return array(null, $this->_matches[serialize(array($file, $bytes))]);
    }

    function extractRevision($string) {
	preg_match('/([\d]{5})/', $string, $matches);
	return array(null, $matches[0]);
    }
}
?>
