<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * $Id: RepositoryPackage.class,v 1.4 2006/01/10 04:38:42 mindless Exp $
 */

/**
 * This class provides methods for creating plugin packages.
 *
 * @author Jozef Selesi <selesi at gmail dot com>
 *
 * @version $Revision: 1.4 $ $Date: 2006/01/10 04:38:42 $
 * @package RepositoryTools
 * @subpackage Classes
 * @module RepositoryPackage
 */
class RepositoryPackage extends RepositoryObject {

    /**
     * A RepositoryDescriptor object, used for getting meta data for package generation.
     *
     * @var object
     * @access private
     */
    var $_descriptor;

    /**
     * Initializes the package generator.
     *
     * This method should be called after instantiating the class. It
     * loads the package templates and sets the output directory.
     *
     * @param object RepositoryDescriptor an initialized RepositoryDescriptor
     * @param string output directory
     * @return object GalleryStatus a status code
     */
    function init($descriptor, $outputDir) {
	parent::init();

	$ret = $this->setOutputDir($outputDir);
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$this->_descriptor = $descriptor;

	$this->setTemplateFile('package.tpl');
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return null;
    }

    /**
     * Writes all possible packages for this plugin to the repository.
     *
     * @param boolean specifies whether to overwrite existing packages
     * @return array object GalleryStatus a status code
     *		     array packages created for this plugin
     */
    function writeAllPackagesToDisk($overwritePackages = false) {
	$packagesWritten = array();
	$packagesSkipped = array();

	foreach ($this->_descriptor->getPackages() as $packageType) {
	    $ret = $this->writeSinglePackageToDisk($packageType, $overwritePackages);
	    if ($ret) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    if ($this->_wasFileWritten) {
		$packagesWritten[] = $packageType;
	    } else {
		$packagesSkipped[] = $packageType;
	    }
	}

	return array(null, array('packagesWritten' => $packagesWritten,
						     'packagesSkipped' => $packagesSkipped));
    }

    /**
     * Writes the specified package of current plugin to the repository.
     *
     * @param string package name
     * @param boolean overwrite package on disk if it already exists
     * @return object GalleryStatus a status code
     */
    function writeSinglePackageToDisk($packageType, $overwritePackage = false) {
	global $gallery;
	$RANDOM_STRING_LENGTH = 5;

	$randomString = $this->getRandomString($RANDOM_STRING_LENGTH);
	$this->_template->setVariable('random', $randomString);

	/* Directory structure creation code. */
	foreach ($this->_descriptor->getDirectoriesInPackage($packageType) as $dir) {
	    $packageDirectories[] = $dir;
	}

	/* File creation code. */
	$platform =& $gallery->getPlatform();
	foreach ($this->_descriptor->getFilesInPackage($packageType) as $file) {
	    $pluginFilePath = $this->_descriptor->getPluginDir() . $file;
	    if (false === ($fileContents = $platform->file_get_contents($pluginFilePath))) {
		return GalleryCoreApi::error(ERROR_STORAGE_FAILURE, __FILE__, __LINE__, sprintf(
					    'Error reading path [%s]', $pluginFilePath));
	    }
	    $packageFiles[] = array('path' => $file,
				    'data' => base64_encode($fileContents));
	}

	$this->_template->setVariable('directories', $packageDirectories);
	$this->_template->setVariable('files', $packageFiles);

	/* Set file name and write it to disk. */
	$this->setOutputFile($this->getPackageFileName($packageType));

	$ret = $this->writeToDisk($overwritePackage);
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return null;
    }

    /**
     * Calculates the file name of the specified package of this plugin.
     *
     * Language packages are versioned with the strings.raw and po file revisions, other packages
     * include the build timestamp - date and time of the last modified file in the plugin's CVS
     * directory. Examples:
     *
     * Package Name	File Name
     *  lang-en_EN	 pluginid-lang-en_EN-1.1-1.23.package
     *  base		 pluginid-1.0.3-20051810223141-base.package
     *
     * @param string package name
     * @return package file name
     */
    function getPackageFileName($package) {
	if (preg_match('/^lang-(.._..)$/', $package, $languageCode)) {
	    $stringsRevision = $this->_descriptor->getStringsRevision();
	    $languageCode = $languageCode[1];

	    $packageFileName = sprintf('%s-%s-%s-%s.package', $this->_descriptor->getPluginId(),
		$package, $stringsRevision,
		$this->_descriptor->getLanguageRevision($languageCode));
	} else {
	    $packageFileName = sprintf('%s-%s-%s-%s.package', $this->_descriptor->getPluginId(),
		$this->_descriptor->getPluginVersion(), $this->_descriptor->getBuildTimestamp(),
		$package);
	}
	return $packageFileName;
    }

    /**
     * Creates a random string of lower-case characters of a specified length.
     *
     * @param integer desired length
     * @return string random string
     */
    function getRandomString($length) {
	static $ASCII_LETTER_A = 97;
	static $ASCII_LETTER_Z = 122;
	$randomString = '';

	for ($i = 0; $i < $length; $i++) {
	    $randomString .= chr(rand($ASCII_LETTER_A, $ASCII_LETTER_Z));
	}
	return $randomString;
    }
}
?>
