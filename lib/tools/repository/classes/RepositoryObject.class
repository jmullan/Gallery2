<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * $Id: RepositoryObject.class,v 1.3 2006/01/10 04:38:42 mindless Exp $
 */

GalleryCoreApi::requireOnce('modules/core/classes/GalleryRepositoryUtilities.class');
GalleryCoreApi::requireOnce('modules/core/classes/GalleryTemplate.class');

/**
 * An abstract class for repository objects - descriptors, packages and indexes.
 *
 * Provides a template, methods for setting the output path and writing the
 * contents of the object to that path from the template.
 *
 * @author Jozef Selesi <selesi at gmail dot com>
 *
 * @version $Revision: 1.3 $ $Date: 2006/01/10 04:38:42 $
 * @package RepositoryTools
 * @subpackage Classes
 * @module RepositoryObject
 */
class RepositoryObject {

    /**
     * Output directory for the object's data.
     *
     * @var string
     * @access private
     */
    var $_outputDir;

    /**
     * Output file name for the object's data.
     *
     * @var string
     * @access private
     */
    var $_fileName;

    /**
     * Indicates whether a file was written during the last writeToDisk operation. Useful after
     * specifying that writeToDisk should not overwrite an existing file.
     *
     * @var boolean
     * @access private
     */
    var $_wasFileWritten;

    /**
     * Template for formatting the object's data.
     *
     * @var object GalleryTemplate
     * @access private
     */
    var $_template;

    /**
     * File name of this object's template.
     *
     * @var object RepositoryTemplate
     * @access private
     */
    var $_templateFile;

    /**
     * Repository utilities reference.
     *
     * @var object GalleryRepositoryUtilities
     * @access private
     */
    var $_utilities;

    /**
     * Initializes the repository template and utilities.
     */
    function init() {
	$this->_utilities = new GalleryRepositoryUtilities();
	$this->_template = new GalleryTemplate(dirname(__FILE__) . '/../../../..');
	$this->_template->setVariable('l10Domain', 'lib_repository');
    }

    /**
     * Sets the output directory for this object.
     *
     * Checks to make sure the specified directory exists are
     * made before setting the directory.
     *
     * @param string object output directory
     * @return object GalleryStatus a status code
     */
    function setOutputDir($outputDir) {
	global $gallery;

	$platform =& $gallery->getPlatform();
	if (!$platform->is_dir($outputDir)) {
	    return GalleryCoreApi::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__, sprintf(
		'Output directory [%s] does not exist.', $outputDir));
	}

	$this->_outputDir = $platform->realpath($outputDir) . '/';
	return null;
    }

    /**
     * Writes the contents of the object from the template to the specified path.
     *
     * If a 'contents' template variable is set, it will be directly written to the output
     * path, otherwise Smarty will process the specified template and its output will be
     * written.
     *
     * @param boolean overwrite file if it exists
     * @param object RepositoryDescriptor an initialized RepositoryDescriptor
     * @return array object GalleryStatus a status code
     *		     boolean whether the file was written to disk
     */
    function writeToDisk($overwriteFile = false) {
	global $gallery;

	$outputFilePath = $this->_outputDir . $this->_fileName;

	$platform =& $gallery->getPlatform();
	if (!($platform->file_exists($outputFilePath) && !$overwriteFile)) {
	    if ($this->_template->hasVariable('contents')) {
		/* Skip template processing. */
		$contents = $this->_template->getVariable('contents');
	    } else {
		/* Process template with Smarty. */
		$templatePath = 'lib/tools/repository/templates/' . $this->_templateFile;

		list($ret, $contents) = $this->_template->fetch('gallery:' . $templatePath);
		if ($ret) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }

	    /* Write contents to disk. */
	    if (false === $platform->file_put_contents($outputFilePath, $contents)) {
		return GalleryCoreApi::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__,
					    "Error writing to $outputFilePath");
	    }
	    $fileWritten = true;
	}
	$this->_wasFileWritten = isset($fileWritten);

	return null;
    }

    /**
     * Returns the currently set output directory.
     *
     * @return string directory
     */
    function getOutputDir() {
	return $this->_outputDir;
    }

    /**
     * Sets the template used by RepositoryObject.
     */
    function setTemplate($template) {
	$this->_template = $template;
    }

    /**
     * Sets the repository utilities used by RepositoryObject.
     */
    function setUtilities($utilities) {
	$this->_utilities = $utilities;
    }

    /**
     * Sets the output file name for serializing this object.
     */
    function setOutputFile($fileName) {
	$this->_fileName = $fileName;
    }

    /**
     * Returns the currently set file name used for serializing this object.
     *
     * @return string file name
     */
    function getOutputFile() {
	return $this->_fileName;
    }

    /**
     * Sets the template file that contains the logic for formatting this object's contents.
     */
    function setTemplateFile($fileName) {
	$this->_templateFile = $fileName;
    }

    /**
     * Indicates whether the file was actually written after a writeToDisk call.
     *
     * This is useful because writeToDisk doesn't overwrite files by default.
     *
     * @return boolean
     */
    function wasFileWritten() {
	return $this->_wasFileWritten;
    }
}
?>
