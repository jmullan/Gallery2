<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Gallery
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

class EntityCounterEventListener {

    function EntityCounterEventListener() {
	$this->_count = 0;
    }
    
    function handleEvent($event) {
	switch ($event->getEventName()) {
	case 'GalleryEntity::delete':
	    $entity = $event->getEntity();
	    //printf("<pre>Delete: %s (%s)</pre>", $entity->getId(), get_class($entity));
	    $this->_count--;
	    break;
	    
	case 'GalleryEntity::save':
	    $entity = $event->getEntity();
	    if ($entity->testPersistentFlag(STORAGE_FLAG_NEWLY_CREATED)) {
		//printf("<pre>Create: %s (%s)</pre>", $entity->getId(), get_class($entity));
		$this->_count++;
	    }
	    break;
	}

	//printf("<pre>Count: %s</pre>", print_r($this->_count, 1));
	return GalleryStatus::success();
    }

    function setCount($count) {
	$this->_count = $count;
    }

    function getCount() {
	return $this->_count;
    }
}

/**
 * Gallery specific version of PHPUnit's TestCase class.  
 * @package Gallery
 * @subpackage PHPUnit
 */
class GalleryTestCase extends TestCase {

    function GalleryTestCase($methodName) {
	$this->TestCase($methodName);
    }

    function &getEntityCounter() {
	static $_counter;
	if (!isset($_counter)) {
	    $_counter = new EntityCounterEventListener();
	}

	return $_counter;
    }

    function failWithStatus($ret) {
	global $gallery;
	
	// Fail with as much debug info as we can muster.
	$this->assert(false, $ret->getAsHtml() . $gallery->getDebugBuffer());
    }

    function setUp() {
	global $gallery;

	$counter =& GalleryTestCase::getEntityCounter();
	$counter->setCount(0);
	
	parent::setUp();

	/* Clear out any request vars, but preserve the session id */
	$this->_saveVars = array($_GET, $_POST, $_FILES, $_SERVER, $_ENV);
	$_GET = array();
	$_POST = array();
	$_FILES = array();

	$session =& $gallery->getSession();
	if (!$session->isUsingCookies()) {
	    list ($sessionKey, $sessionId) = $session->getSessionDescriptor();
	    $_GET[GALLERY_FORM_VARIABLE_PREFIX . $sessionKey] = $sessionId;
	}
	
	/*
	 * Try to ensure enough time for this test to complete.  If a test
	 * needs more time, then it should extend the limit itself.
	 */
	$gallery->guaranteeTimeLimit(30);

	/* Start with a clean slate*/
	$gallery->reset();

	$storage =& $gallery->getStorage();
	$ret = $storage->beginTransaction();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list ($ret, $this->_rootAlbumId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Save our user id */
	$this->_saveUser = $gallery->getActiveUser();

	$gallery->clearDebugBuffer();
    }

    function tearDown() {
	global $gallery;

	/* Make sure we're not hanging onto any locks */
	$lockIds = GalleryCoreApi::getLockIds();
	if (!empty($lockIds)) {
	    GalleryCoreApi::releaseAllLocks(false);
	    $this->assert(0, 'There are unreleased locks!');
	}

	$storage = $gallery->getStorage();
	$ret =& $storage->commitTransaction();
	if ($ret->isError()) {
	    $ret = $ret->wrap(__FILE__, __LINE__);
	    $this->fail($ret->getAsText());
	}

	/* Restore form vars */
	list ($_GET, $_POST, $_FILES, $_SERVER, $_ENV) = $this->_saveVars;

	/* Restore user id */
	$gallery->setActiveUser($this->_saveUser);

	parent::tearDown();
	
	$counter =& GalleryTestCase::getEntityCounter();
	$this->assert($counter->getCount() == 0,
		      sprintf('%d entities were created and not deleted <br/>' .
			      '(did you put parent::tearDown() at the <i>end</i> of your tearDown() method?',
			      $counter->getCount()));
    }

    function _getRootId() {
	return $this->_rootAlbumId;
    }

    function assert($boolean, $message=null) {
	global $gallery;
	$message = $gallery->getDebugBuffer() . $message;
	parent::assert($boolean, $message);
    }

    function assertEquals($expected, $actual, $message=null) {
	global $gallery;
	$message = $gallery->getDebugBuffer() . $message;
	parent::assertEquals($expected, $actual, $message);
    }

    /*
     * Create a random album
     *
     * @param int the id of the parent album
     * @param array fields to plug into the new instance (field => value, field => value)
     * @return array object GalleryStatus a status code
     *               object GalleryAlbumItem
     * @access private
     */
    function _createRandomAlbum($parentId, $fields=array()) {
	global $gallery;

	if (empty($parentId)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null);
	}
	
	list ($ret, $album) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryAlbumItem');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!isset($album)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	}

	list ($ret, $lockIds[]) = GalleryCoreApi::acquireReadLock($parentId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	$ret = $album->create($parentId, 'albumtest' . rand());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Change some settings */
	$album->setTitle('This is my title');
	$album->setDescription('This is a description');
	$album->setSummary('This is a summary');
	foreach ($fields as $field => $value) {
	    $func = "set$field";
	    $album->$func($value);
	}

	/* Save it */
	$ret = $album->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Leggo of our locks */
	if (isset($lockIds)) {
	    $ret = GalleryCoreApi::releaseLocks($lockIds);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	return array(GalleryStatus::success(), $album);
    }
    

    /*
     * Create a random data item
     *
     * @param int the id of the parent album
     * @return array object GalleryStatus a status code
     *               object GalleryDataItem
     * @access private
     */
    function _createRandomDataItem($parentId, $mimeType='application/unknown',
				   $fields=array(), $inputFile=__FILE__,
				   $itemClass=null) {
	global $gallery;

	if (isset($itemClass)) {
	    list ($ret, $item) = GalleryCoreApi::newFactoryInstanceById('GalleryEntity', $itemClass);
	} else {
	    list ($ret, $item) = GalleryCoreApi::newItemByMimeType($mimeType);
	}
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!isset($item)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	}

	list ($ret, $lockIds[]) = GalleryCoreApi::acquireReadLock($parentId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (get_magic_quotes_gpc()) {
	    $inputFile = addslashes($inputFile);
	}
	
	$ret = $item->create($parentId, $inputFile, $mimeType,
			     'test-' . rand(1, 5000) . '.dat');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Change some settings */
	$item->setTitle('This is my title');
	$item->setSummary('This is a summary');
	$item->setKeywords('These are some keywords');
	$item->setDescription('This is a description');

	foreach ($fields as $key => $value) {
	    eval("\$item->set$key(\$value);");
	}

	/* Save it */
	$ret = $item->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Leggo of our locks */
	if (isset($lockIds)) {
	    $ret = GalleryCoreApi::releaseLocks($lockIds);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	return array(GalleryStatus::success(), $item);
    }
    
    /*
     * Create a random data item
     *
     * @param int the id of the parent album
     * @return array object GalleryStatus a status code
     *               object GalleryDataItem
     * @access private
     */
    function _createLinkedItem($parentId, $targetItem) {
	global $gallery;

	if (!isset($targetItem)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	}

	list ($ret, $lockIds[]) = GalleryCoreApi::acquireReadLock(array($parentId, $targetItem->getId()));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$className = get_class($targetItem);
	$linkedItem = new $className();
	$ret = $linkedItem->createLink($targetItem, $parentId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Save it */
	$ret = $linkedItem->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Leggo of our locks */
	if (isset($lockIds)) {
	    $ret = GalleryCoreApi::releaseLocks($lockIds);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	return array(GalleryStatus::success(), $linkedItem);
    }
    
    function _createRandomUser($userTag=null) {
	list ($ret, $user) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryUser');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!isset($user)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	}

	if (!isset($userTag)) {
	    $userTag = rand();
	}

	$ret = $user->create('testuser-' . $userTag);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$user->setFullName('User ' . $userTag);
	$user->changePassword('password');
	$user->setEmail('user-' . $userTag . '@example.com');

	$ret = $user->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $user);
    }

    function _createRandomGroup($groupTag=null) {
	list ($ret, $group) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryGroup');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!isset($group)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	}

	if (!isset($groupTag)) {
	    $groupTag = rand();
	}
	
	$ret = $group->create('Test Group ' . $groupTag);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$ret = $group->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	return array(GalleryStatus::success(), $group);
    }
    
    function _createDerivative(&$parent, $sourceId, $type, $operations='test-operation|100', $mimeType='test/file',
			       $fields=array()) {
	global $gallery;
	$parentId = $parent->getId();

	list ($ret, $derivative) = 
	    GalleryCoreApi::newFactoryInstanceByHint('GalleryDerivative', $parent->getEntityType());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$ret = $derivative->create($parentId, $type);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Set bogus values */
	$derivative->setMimeType($mimeType);
	$derivative->setDerivativeSourceId($sourceId);
	$derivative->setDerivativeOperations($operations);

	foreach ($fields as $field => $value) {
	    $func = "set$field";
	    $derivative->$func($value);
	}
			
	$ret = $derivative->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	return array(GalleryStatus::success(), $derivative);
    }
    
    function _deleteAndVerifyEntity($id) {
	global $gallery;

	$ret = GalleryCoreApi::deleteEntityById($id);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$ret = $this->_verifyMissing($id);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }
    
    function _verifyMissing($id) {
	global $gallery;
	
	GalleryDataCache::reset();

	list ($ret, $entity) = GalleryCoreApi::loadEntitiesById($id);
	if ($ret->isError()) {
	    if (!$ret->getErrorCode() & ERROR_MISSING_OBJECT) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	} else {
	    // We failed to delete!
	    return GalleryStatus::error(ERROR_UNKNOWN, __FILE__, __LINE__);
	} 

	return GalleryStatus::success();
    }

    function _verifyEntity($entity) {
	global $gallery;
	
	GalleryDataCache::reset();

	/* Load it back from the storage */
	list ($ret, $newEntity) = GalleryCoreApi::loadEntitiesById($entity->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Verify it */
	$this->assertEquals($entity, $newEntity);

	return GalleryStatus::success();
    }

    function _createUser() {
	global $gallery;
	
	list ($ret, $user) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryUser');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	if (!isset($user)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__),
			 null);
	}
	
	$ret = $user->create('testuser-'.rand());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$ret = $user->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $user);
    }

    function _deleteUser($user) {
	global $gallery;
	$ret = GalleryCoreApi::deleteEntityById($user->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
    }
}
?>
