<?php
/*
 * $RCSfile: GalleryTestCase.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.51 $ $Date: 2005/08/31 22:40:12 $
 * @package Gallery
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Event listener that tracks how many entities were created and destroyed
 * during the test.  We can use this to track to see if a test is leaking
 * entities (ie, not doing proper cleanup).
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class EntityCounterEventListener /* extends GalleryEventListener */ {

    function EntityCounterEventListener() {
	$this->_count = 0;
	$this->_ids = array();
    }

    function handleEvent($event) {
	switch ($event->getEventName()) {
	case 'GalleryEntity::delete':
	    $entity = $event->getEntity();
	    $this->_count--;
	    break;

	case 'GalleryEntity::save':
	    $entity = $event->getEntity();
	    if ($entity->testPersistentFlag(STORAGE_FLAG_NEWLY_CREATED)) {
		$this->_count++;
		$this->_ids[$entity->getClassName()][] = $entity->getId();
	    }
	    break;
	}

	return array(GalleryStatus::success(), null);
    }

    function getRecentEntityId($className) {
	return $this->_ids[$className][sizeof($this->_ids[$className])-1];
    }

    function setCount($count) {
	$this->_count = $count;
    }

    function getCount() {
	return $this->_count;
    }
}

/**
 * Event listener wrapper for unit tests.  Some event listeners are
 * disabled by default for unit tests, but you can use
 * GalleryTestCase::_registerTestEventListener() to register one with
 * this listener, which will do dispatching for you.
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class TestEventListener /* extends GalleryEventListener */ {

    function TestEventListener() {
	$this->_eventListeners = array();
    }

    function reset() {
	foreach (array_keys($this->_eventListeners) as $eventName) {
	    $this->_eventListeners[$eventName] = array();
	}
    }

    function registerEventListener($eventName, &$listener) {
	if (!isset($this->_eventListeners[$eventName])) {
	    GalleryCoreApi::registerEventListener($eventName, $this);
	    $this->_eventListeners[$eventName] = array();
	}
	$this->_eventListeners[$eventName][] =& $listener;
    }

    function handleEvent($event) {
	$result = array();
	$list = $this->_eventListeners[$event->getEventName()];
	for ($i = 0; $i < count($list); $i++) {
	    list ($ret, $data) = $list[$i]->handleEvent($event);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    if (isset($data)) {
		$result[] = $data;
	    }
	}
	return array(GalleryStatus::success(), $result);
    }
}

/**
 * Gallery specific version of PHPUnit's TestCase class.
 * @package Gallery
 * @subpackage PHPUnit
 */
class GalleryTestCase extends TestCase {

    var $_cleanup;

    function GalleryTestCase($methodName) {
	$this->TestCase($methodName);
	$this->_cleanup = array('entity' => array(),
				'factoryModuleId' => array(),
				'toolkitId' => array(),
				'pluginParameters' => array());
    }

    function &getEntityCounter() {
	static $_counter;
	if (!isset($_counter)) {
	    $_counter = new EntityCounterEventListener();
	}

	return $_counter;
    }

    function &getTestEventListener() {
	static $_eventListener;
	if (!isset($_eventListener)) {
	    $_eventListener = new TestEventListener();
	}
	return $_eventListener;
    }

    function _registerTestEventListener($eventName, &$listener) {
	$eventListener =& $this->getTestEventListener();
	$eventListener->registerEventListener($eventName, $listener);
    }

    function failWithStatus($ret) {
	global $gallery;

	/* Fail with as much debug info as we can muster. */
	$this->assert(false, $ret->getAsHtml() . $gallery->getDebugBuffer());
    }

    function setUp() {
	global $gallery;

	$counter =& GalleryTestCase::getEntityCounter();
	$counter->setCount(0);

	GalleryDataCache::setFileCachingEnabled(false);

	parent::setUp();

	switch (strtolower(get_class($gallery->getPlatform()))) {
	case 'unixplatform':
	case 'winntplatform':
	    break;

	default:
	    $this->assert(false, 'Unknown platform in GalleryTestCase::setUp -- did you ' .
			  ' change the platform before calling parent::setUp in your test case?');
	}

	/* Save useful vars so that tests don't have to worry about overwriting them */
	$this->_saveVars[] = $_GET;
	$this->_saveVars[] = $_POST;
	$this->_saveVars[] = $_FILES;
	$this->_saveVars[] = $_COOKIE;
	$this->_saveVars[] = $_SERVER;
	$this->_saveVars[] = $_ENV;
	$this->_saveVars[] = $gallery->getPlatform();
	$this->_saveVars[] = $gallery->getActiveUser();
	$this->_saveVars[] = $gallery->getUrlGenerator();
	$this->_saveVars[] = $gallery->_config;
	$this->_saveVars[] = $gallery->_phpVm;
	$this->_saveVars[] = isset($gallery->_lockSystem) ? $gallery->_lockSystem : null;
	$this->_saveVars[] = $gallery->_storage;

	$_GET = array();
	$_POST = array();
	$_FILES = array();

	$session =& $gallery->getSession();
	if (!$session->isUsingCookies()) {
	    $_GET[GALLERY_FORM_VARIABLE_PREFIX . $session->getKey()] = $session->getId();
	}
	$this->_saveSID = $session->getId();

	/*
	 * Try to ensure enough time for this test to complete.  If a test
	 * needs more time, then it should extend the limit itself.
	 */
	$gallery->guaranteeTimeLimit(30);

	/* Start with a clean slate*/
	GalleryDataCache::reset();

	/* Preload a few things to lighten the load on our dummy platforms */
	GalleryCoreApi::fetchPluginStatus('module');
	GalleryCoreApi::fetchPluginStatus('theme');

	$storage =& $gallery->getStorage();
	$ret = $storage->beginTransaction();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list ($ret, $this->_rootAlbumId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$gallery->clearDebugBuffer();
    }

    function tearDown() {
	global $gallery;

	/* Restore saved vars */
	$_GET = array_shift($this->_saveVars);
	$_POST = array_shift($this->_saveVars);
	$_FILES = array_shift($this->_saveVars);
	$_COOKIE = array_shift($this->_saveVars);
	$_SERVER = array_shift($this->_saveVars);
	$_ENV = array_shift($this->_saveVars);
	$platform = array_shift($this->_saveVars);
	$gallery->setPlatform($platform);
	$gallery->setActiveUser(array_shift($this->_saveVars));
	$urlGenerator = array_shift($this->_saveVars);
	$gallery->setUrlGenerator($urlGenerator);
	$gallery->_config = array_shift($this->_saveVars);
	$gallery->_phpVm = array_shift($this->_saveVars);

	/* Make sure we're not hanging onto any locks */
	$lockIds = GalleryCoreApi::getLockIds();
	if (!empty($lockIds)) {
	    GalleryCoreApi::releaseAllLocks(false);
	    $this->assert(0, 'There are unreleased locks!');
	}

	$gallery->_lockSystem = array_shift($this->_saveVars);
	$gallery->_storage = array_shift($this->_saveVars);
	$gallery->_shutdownActions = null;
	$gallery->_templateAdapter = null;

	/* Do our cleanup */
	foreach ($this->_cleanup['pluginParameters'] as $cleanupPlugin) {
	    $pluginType = array_shift($cleanupPlugin);
	    $pluginId = array_shift($cleanupPlugin);
	    $pluginParams = array_shift($cleanupPlugin);

	    /* Retrieve the post-test plugin params */
	    list($ret, $newPluginParams) =
		GalleryCoreApi::fetchAllPluginParameters($pluginType, $pluginId);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    /* Remove each new key from the DB */
	    foreach ($newPluginParams as $key => $newParam) {
		if (!array_key_exists($key, $pluginParams)) {
		    $ret = GalleryCoreApi::removePluginParameter($pluginType, $pluginId, $key);
		    if ($ret->isError()) {
			/* Print the error, but continue to remove the parameters */
			print $ret->getAsHtml();
		    }
		}
	    }

	    /* Restore each key from the saved list */
	    foreach ($pluginParams as $key => $pluginParam) {
		$ret = GalleryCoreApi::setPluginParameter($pluginType, $pluginId,
							  $key, $pluginParam);
		if ($ret->isError()) {
		    /* Print the error, but continue to set the variables */
		    print $ret->getAsHtml();
		}
	    }
	}

	foreach ($this->_cleanup['entity'] as $entity) {
	    $ret = GalleryCoreApi::deleteEntityById($entity->getId());
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	foreach ($this->_cleanup['toolkitId'] as $toolkitId) {
	    $ret = GalleryCoreApi::unregisterToolkit($toolkitId);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	foreach ($this->_cleanup['factoryModuleId'] as $moduleId) {
	    $ret = GalleryCoreApi::unregisterFactoryImplementationsByModuleId($moduleId);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	$storage =& $gallery->getStorage();
	$ret = $storage->commitTransaction();
	if ($ret->isError()) {
	    $ret = $ret->wrap(__FILE__, __LINE__);
	    $this->fail($ret->getAsText());
	}

	parent::tearDown();

	GalleryDataCache::setFileCachingEnabled(true);

	$counter =& GalleryTestCase::getEntityCounter();
	$this->assert(
	    $counter->getCount() == 0,
	    sprintf('%d entities were created and not deleted <br/>' .
		    '(did you put parent::tearDown() at the <i>end</i> of your tearDown() method?',
		    $counter->getCount()));

	$session =& $gallery->getSession();
	$this->assertEquals($this->_saveSID, $session->getId(), 'Session ID changed by test');

	$eventListener =& $this->getTestEventListener();
	$eventListener->reset();

	/* Clean out any saved state in the platform */
	$gallery->_platform->resetPlatform();
    }

    function _getRootId() {
	return (int)$this->_rootAlbumId;
    }

    function _markForCleanup($entity) {
	$this->_cleanup['entity'][] = $entity;
    }

    function _markFactoryModuleForCleanup($moduleId) {
	$this->_cleanup['factoryModuleId'][] = $moduleId;
    }

    function _markToolkitForCleanup($toolkitId) {
	$this->_cleanup['toolkitId'][] = $toolkitId;
    }

    /**
     * Store plugin parameters to be restored in tearDown
     *
     * @param string pluginType
     * @param string pluginId
     * @return GalleryStatus
     */
    function _markPluginParametersForCleanup($pluginType, $pluginId) {
	list($ret, $pluginParams) =
	    GalleryCoreApi::fetchAllPluginParameters($pluginType, $pluginId);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$this->_cleanup['pluginParameters'][] = array($pluginType, $pluginId, $pluginParams);
	return GalleryStatus::success();
    }

    function assert($boolean, $message=null) {
	global $gallery;
	$message = $gallery->getDebugBuffer() . $message;
	parent::assert($boolean, $message);
    }

    function assertEquals($expected, $actual, $message=null) {
	global $gallery;
	$message = $gallery->getDebugBuffer() . $message;
	$err = $this->DeepCompare($expected, $actual);
	if ($err) {
	    $message .= sprintf('&nbsp;<br/><b>Mismatch At</b>: %s', htmlspecialchars($err));
	}
	parent::assertEquals($expected, $actual, $message);
    }

    /*
     * Create a random album
     *
     * @param int the id of the parent album
     * @param array fields to plug into the new instance (field => value, field => value)
     * @return array object GalleryStatus a status code
     *               object GalleryAlbumItem
     * @access private
     */
    function _createRandomAlbum($parentId, $fields=array()) {
	global $gallery;

	if (empty($parentId)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null);
	}

	list ($ret, $album) = GalleryCoreApi::createAlbum(
	    $parentId, 'albumtest' . rand(),
	    'This is my title', 'This is my summary',
	    'This is my description', null);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!empty($fields)) {
	    list ($ret, $lockIds[]) = GalleryCoreApi::acquireWriteLock($album->getId());
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    /* Change some settings */

	    foreach ($fields as $field => $value) {
		$func = "set$field";
		$album->$func($value);
	    }

	    /* Save it */
	    $ret = $album->save();
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    /* Leggo of our locks */
	    if (isset($lockIds)) {
		$ret = GalleryCoreApi::releaseLocks($lockIds);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
	    }
	}

	return array(GalleryStatus::success(), $album);
    }


    /*
     * Create a random data item
     *
     * @param int the id of the parent album
     * @return array object GalleryStatus a status code
     *               object GalleryDataItem
     * @access private
     */
    function _createRandomDataItem($parentId, $mimeType='application/unknown',
				   $fields=array(), $inputFile=__FILE__,
				   $itemClass=null) {
	global $gallery;

	if (isset($itemClass)) {
	    list ($ret, $item) =
		GalleryCoreApi::newFactoryInstanceById('GalleryEntity', $itemClass);
	} else {
	    list ($ret, $item) = GalleryCoreApi::newItemByMimeType($mimeType);
	}
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!isset($item)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	}

	list ($ret, $lockIds[]) = GalleryCoreApi::acquireReadLock($parentId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (get_magic_quotes_gpc()) {
	    $inputFile = addslashes($inputFile);
	}

	$ret = $item->create($parentId, $inputFile, $mimeType,
			     'test-' . rand(1, 5000) . '.dat');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Change some settings */
	$item->setTitle('This is my title');
	$item->setSummary('This is a summary');
	$item->setKeywords('These are some keywords');
	$item->setDescription('This is a description');

	foreach ($fields as $key => $value) {
	    eval("\$item->set$key(\$value);");
	}

	/* Save it */
	$ret = $item->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Leggo of our locks */
	if (isset($lockIds)) {
	    $ret = GalleryCoreApi::releaseLocks($lockIds);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	return array(GalleryStatus::success(), $item);
    }

    /*
     * Create a random data item
     *
     * @param int the id of the parent album
     * @return array object GalleryStatus a status code
     *               object GalleryDataItem
     * @access private
     */
    function _createLinkedItem($parentId, $targetItem) {
	global $gallery;

	if (!isset($targetItem)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	}

	list ($ret, $lockIds[]) =
	    GalleryCoreApi::acquireReadLock(array($parentId, $targetItem->getId()));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$className = get_class($targetItem);
	$linkedItem = new $className();
	$ret = $linkedItem->createLink($targetItem, $parentId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Save it */
	$ret = $linkedItem->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Leggo of our locks */
	if (isset($lockIds)) {
	    $ret = GalleryCoreApi::releaseLocks($lockIds);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	return array(GalleryStatus::success(), $linkedItem);
    }

    function _createRandomUser($userTag=null) {
	list ($ret, $user) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryUser');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!isset($user)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	}

	if (!isset($userTag)) {
	    $userTag = rand();
	}

	$ret = $user->create('testuser-' . $userTag);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$user->setFullName('User ' . $userTag);
	$user->changePassword('password');
	$user->setEmail('user-' . $userTag . '@example.com');

	$ret = $user->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $user);
    }

    function _createRandomGroup($groupTag=null) {
	list ($ret, $group) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryGroup');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!isset($group)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	}

	if (!isset($groupTag)) {
	    $groupTag = rand();
	}

	$ret = $group->create('Test Group ' . $groupTag);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$ret = $group->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $group);
    }

    function _createDerivative(&$parent, $sourceId, $type,
			       $operations='test-operation|100', $mimeType='test/file',
			       $fields=array()) {
	global $gallery;
	$parentId = $parent->getId();

	list ($ret, $derivative) =
	    GalleryCoreApi::newFactoryInstanceByHint('GalleryDerivative', $parent->getEntityType());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$ret = $derivative->create($parentId, $type);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Set bogus values */
	$derivative->setMimeType($mimeType);
	$derivative->setDerivativeSourceId($sourceId);
	$derivative->setDerivativeOperations($operations);

	foreach ($fields as $field => $value) {
	    $func = "set$field";
	    $derivative->$func($value);
	}

	$ret = $derivative->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $derivative);
    }

    function _deleteAndVerifyEntity($id) {
	global $gallery;

	$ret = GalleryCoreApi::deleteEntityById($id);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$ret = $this->_verifyMissing($id);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    function _verifyMissing($id) {
	global $gallery;

	GalleryDataCache::reset();

	list ($ret, $entity) = GalleryCoreApi::loadEntitiesById($id);
	if ($ret->isError()) {
	    if (!$ret->getErrorCode() & ERROR_MISSING_OBJECT) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	} else {
	    /* We failed to delete! */
	    return GalleryStatus::error(ERROR_UNKNOWN, __FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    function _verifyEntity($entity) {
	global $gallery;

	GalleryDataCache::reset();

	/* Load it back from the storage */
	list ($ret, $newEntity) = GalleryCoreApi::loadEntitiesById($entity->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Verify it */
	$this->assertEquals($entity, $newEntity);

	return GalleryStatus::success();
    }

    function _createUser($fields=array()) {
	global $gallery;

	list ($ret, $user) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryUser');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!isset($user)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__),
			 null);
	}

	$ret = $user->create('testuser-'.rand());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	foreach ($fields as $key => $value) {
	    eval("\$user->set$key(\$value);");
	}

	$ret = $user->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $user);
    }

    /**
     * Get an id that is not used for anything.
     */
    function _getUnusedId() {
	global $gallery;
	static $unusedId;
	if (!isset($unusedId)) {
	    $storage =& $gallery->getStorage();
	    list ($ret, $unusedId) = $storage->getUniqueId();
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	return array(GalleryStatus::success(), $unusedId);
    }

    function _becomeGuestUser() {
	global $gallery;

	list ($ret, $anonymousUserId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.anonymousUser');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $anonymousUser) = GalleryCoreApi::loadEntitiesById($anonymousUserId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$gallery->setActiveUser($anonymousUser);
    }

    function DeepCompare($obj1, $obj2, $context=null) {
	if (gettype($obj1) !== gettype($obj2)) {
	    return sprintf("[$context] $obj1 type (%s) !== $obj2 type (%s)",
			   gettype($obj1), gettype($obj2));
	}

	if (is_array($obj1)) {
	    $keys1 = array_keys($obj1);
	    $keys2 = array_keys($obj2);

	    while (true) {
		if (empty($keys1) && empty($keys2)) {
		    break;
		} else if (empty($keys1) && !empty($keys2)) {
		    return sprintf("[$context] extra keys in array 2: %s", join(',', $keys2));
		} else if (empty($keys2) && !empty($keys1)) {
		    return sprintf("[$context] extra keys in array 1: %s", join(',', $keys1));
		}

		$key1 = array_shift($keys1);
		$key2 = array_shift($keys2);

		if ($key1 !== $key2) {
		    return "[$context] $key1 !== $key2";
		}

		$err = $this->DeepCompare($obj1[$key1], $obj2[$key2], "$context $key1");
		if (isset($err)) {
		    return $err;
		}
	    }
	} else {
	    if ($obj1 !== $obj2) {
		return "[$context] $obj1 !== $obj2";
	    }
	}

	return null;
    }

    /**
     * Like print_r($value, 1)
     * @static
     */
    function sprint_r($value) {
	ob_start();
	print_r($value);
	$buf = ob_get_contents();
	ob_end_clean();
	return $buf;
    }
}
?>
