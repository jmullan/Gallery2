<?php
/*
 * $RCSfile: ItemEditOptionTestCase.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.8 $ $Date: 2005/08/23 03:48:56 $
 * @package Gallery
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Plugins need to have these classes loaded
 */
require_once(dirname(__FILE__) . '/../../../modules/core/classes/GalleryView.class');
require_once(dirname(__FILE__) . '/../../../modules/core/classes/GalleryController.class');
require_once(dirname(__FILE__) . '/../../../modules/core/ItemEdit.inc');

/**
 * An ItemEditOption specific version of GalleryTestCase
 * @package Gallery
 * @subpackage PHPUnit
 */
class ItemEditOptionTestCase extends GalleryTestCase {

    /**
     * The option instance
     * @access protected
     */
    var $_option;
    
    /**
     * immediate status view
     * @access private
     */
    var $_statusMonitor;

    function ItemEditOptionTestCase($methodName, $moduleName, $optionName) {
	$this->GalleryTestCase($methodName);

	list ($ret, $this->_option) =
	    GalleryCoreApi::newFactoryInstanceById('ItemEditOption', $optionName);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	if (!isset($this->_option)) {
	    return $this->failWithStatus(
			  GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__));
	}

	list ($ret, $this->_module) = GalleryCoreApi::loadPlugin('module', $moduleName);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
        $this->_statusMonitor = new ItemEditOptionTestImmediateStatusView();
    }

    function setUp() {
	parent::setUp();
    }

    function tearDown() {
	parent::tearDown();
    }

    function _handleRequestAfterEdit($form, &$item, $errorCode=null) {
	list ($ret, $preferred) = GalleryCoreApi::fetchPreferredsByItemIds(array($item->getId()));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$preferred = empty($preferred) ? null : array_shift($preferred);

	list ($ret, $error, $warning) = $this->_option->handleRequestAfterEdit(
            $form, $item, $preferred, $this->_statusMonitor);
	if (isset($errorCode)) {
	    if (($ret->getErrorCode() & $errorCode) != $errorCode) {
		$this->assert(false,
			      sprintf('Expected error code (%s) but received (%s)',
				      join(' | ', GalleryStatus::getErrorCodeConstants($errorCode)),
				      join(' | ', GalleryStatus::getErrorCodeConstants($ret->getErrorCode()))));
	    }
	} else if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	} else {
	    /* Check to make sure we got back everything we want */
	    $this->assert(isset($error) && is_array($error), 'option error results missing');

	    /* Check to make sure we got back everything we want */
	    $this->assert(isset($warning) && is_array($warning), 'option warning results missing');
	}

	return array($error, $warning);
    }

    function _translate($message) {
	return $this->_module->translate($message);
    }
}

/**
 * Test ImmediateStatusView implementation
 *
 * @package Gallery
 * @subpackage PHPUnit
 */

class ItemEditOptionTestImmediateStatusView extends GalleryView {
    function doLoadImmediateTemplate() {
	$this->_l10Domain = 'test';
	$this->_template = 'test';
	return GalleryStatus::success();
    }

    function renderHeader() {
	return GalleryStatus::success();
    }

    function renderStatusMessage($statusMessage) {
	return GalleryStatus::success();
    }

    function renderRedirect($redirectUrl) {
	return GalleryStatus::success();
    }

    function renderFooter() {
	return GalleryStatus::success();
    }

    function setMain($main) {
	return GalleryStatus::success();
    }
}

?>
