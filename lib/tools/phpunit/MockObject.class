<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Base class for mock objects (UnitTestStorage and UnitTestPlatform) that provides
 * an easy way to specify the replies for a call sequence.
 *
 * To mock up an individual class, extend MockObject and then mimic the API that you want to mock.
 * The body of each mimicked method should contain a call to MockObject::_makeReply, like this:
 *
 *
 *  function describeMap($mapName, $tryAllModules=false) {
 *      return $this->_makeReply('describeMap', array($mapName, $tryAllModules));
 *  }
 *
 * @package Gallery
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision$
 */
class MockObject {
    function MockObject() {
	$this->_className = get_class($this);
	$_GET[$this->_className] = array('replies' => array(), 'errorCount' => 0);
    }

    function setReply($function, $inputs, $outputs, $optional=false) {
	$_GET[$this->_className]['replies'][] =
	    array($function, $inputs, $outputs, $optional);
    }

    function isComplete() {
	foreach ($_GET[$this->_className]['replies'] as $reply) {
	    if (!$reply[3]) { /* ignore optional replies */
		$incomplete = true;
		break;
	    }
	}
	return empty($incomplete) && !$_GET[$this->_className]['errorCount'];
    }

    function getRemaining() {
	return 'Error count: ' . $_GET[$this->_className]['errorCount']
	    . "\nRemaining requests: " .
	    print_r($_GET[$this->_className]['replies'], true);
    }

    function _makeReply($function, $request) {
	while ($expected = array_shift($_GET[$this->_className]['replies'])) {
	    if ($expected[0] == $function && $this->_parametersMatch($expected[1], $request)) {
		$this->_called[$function][] = $request;
		return $expected[2];
	    }
	    if (!$expected[3]) {
		break; /* Not optional -- error */
	    }
	}

	$_GET[$this->_className]['errorCount']++;
	printf("Unhandled reply<br/>\n");
	printf("Received:<br/>\nFunction: %s<br/>\nRequest: <pre>%s</pre><br/>\n",
	       $function, print_r($request, true));
	printf("Expected:<br/>\nFunction: %s<br/>\nRequest: <pre>%s</pre><br/>\n",
	       $expected[0], print_r($expected[1], true));
	$ret = GalleryCoreApi::error(ERROR_STORAGE_FAILURE, __FILE__, __LINE__,
				    'Unhandled reply in UnitTestStorage');
	print $ret->getAsHtml();
    }

    function getCalled($function) {
	return $this->_called[$function];
    }

    function _parametersMatch($expected, $actual) {
	$i = 0;
	foreach ($expected as $key => $value) {
	    if ($i >= count($actual)) {
		return false;
	    }
	    if (!strncmp($key, 'fuzzy', 5)) {
		if (!preg_match($value, $actual[$i++])) {
		    return false;
		}
	    } else if ($value != $actual[$i++]) {
		return false;
	    }
	}
	return ($i == count($actual));
    }
}
?>
