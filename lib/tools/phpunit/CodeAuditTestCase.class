<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * A framework for scanning all of our source files for specific
 * patterns.  Subclasses must override the checkFile() method
 * to implement their own checks.
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class CodeAuditTestCase extends GalleryTestCase {

    function CodeAuditTestCase($methodName) {
	$this->GalleryTestCase($methodName);
	$this->_shouldHalt = false;
	$this->_baseDir = realpath(dirname(__FILE__) . '/../../..');
    }

    function testCodeAudit() {
	global $gallery;

	/* If the base gallery dir has a .svn dir, then we're all set */
	$platform =& $gallery->getPlatform();
	if (!$platform->file_exists($this->_baseDir . '/.svn/entries')) {
	    return;
	}

	$cwd = $platform->getcwd();
	if (!$platform->chdir($this->_baseDir)) {
	    return $this->assert(false, 'Unable to chdir to ' . $this->_baseDir);
	}
	list ($success, $fileList, $error) = $platform->exec(
		array(array('svn', 'status', '--non-interactive', '-v', '-q')));
	$platform->chdir($cwd);
	if (!$success) {
	    return $this->assert(false, 'svn error: ' . implode('', $error));
	}
	foreach ($fileList as $line) {
	    if (!preg_match('/^(.).....\s*\d+\s+\d+\s+\S+\s+(.*\.(?:class|inc|php|tpl|po))$/',
			    $line, $match)) {
		$this->assert(false, "Unable to parse [$line]");
		continue;
	    }

	    $file = $this->_baseDir . '/' . $match[2];
	    if ($match[1] != 'D' && $this->shouldCheckFile($file)) {
		$gallery->guaranteeTimeLimit(30);
		$buf = $platform->file_get_contents($file);
		$this->checkFile($file, $buf);
	    }

	    if ($this->_shouldHalt) {
		$this->assert(false, 'Halted prematurely');
		break;
	    }
	}

	$this->finishScan($this->_shouldHalt);
    }

    /**
     * Subclasses can call this to stop scanning.
     */
    function halt() {
	$this->_shouldHalt = true;
    }

    /**
     * Overload this method in subclasses to audit the file
     * @access protected
     */
    function checkFile($fileName, $buffer) {
    }

    /**
     * Overload this method in subclasses to run any tasks after the scan is complete.
     *
     * @param bool true if the scan was halted early
     * @access protected
     */
    function finishScan($halted) {
    }

    /**
     * Overload this method in subclasses.  If this method
     * returns true, we'll call checkFile() on it
     *
     * @return true if we should check this file
     * @access protected
     */
    function shouldCheckFile($fileName) {
	/*
	 * By default we accept everything, with the exception that we only take
	 * lib/tools/repository from the lib directory.
	 */
	if (strpos($fileName, $this->_baseDir . '/lib/') === 0) {
	    return strpos($fileName, $this->_baseDir . '/lib/tools/repository/') === 0;
	}

	return true;
    }
}
?>
