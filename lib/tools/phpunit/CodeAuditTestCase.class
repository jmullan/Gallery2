<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * A framework for scanning all of our source files for specific patterns.
 * Subclasses must override the checkFile() method to implement their own checks.
 *
 * @package Gallery
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision$ $Date$
 */
class CodeAuditTestCase extends GalleryTestCase {

    function CodeAuditTestCase($methodName) {
	$this->GalleryTestCase($methodName);
	$this->_shouldHalt = false;
	$this->_baseDir = realpath(dirname(__FILE__) . '/../../..');
    }

    function testCodeAudit() {
	global $gallery;
	$platform =& $gallery->getPlatform();

	if (!$platform->file_exists($this->_baseDir . '/.svn/entries')) {
	    $this->assert(false, 'Test skipped: .svn/entries not found');
	    return;
	}
	if (!function_exists('xml_parser_create')) {
	    $this->assert(false, 'Test skipped: PHP does not have XML support');
	    return;
	}

	$this->_scanDir($this->_baseDir);
	if ($this->_shouldHalt) {
	    $this->assert(false, 'Halted prematurely');
	}

	$this->finishScan($this->_shouldHalt);
    }

    function _scanDir($dirPath) {
	global $gallery;
	$platform =& $gallery->getPlatform();
	static $KIND;
	if (!isset($KIND)) {
	    $KIND = strtoupper('kind'); /* Won't be KIND in Turkish locale */
	}

	$parser = xml_parser_create();
	xml_parse_into_struct($parser, $platform->file_get_contents("$dirPath/.svn/entries"),
			      $xmlValues, $xmlIndex);
	xml_parser_free($parser);

	if (empty($xmlIndex['ENTRY'])) {
	    $this->assert(false, 'Unable to parse .svn/entries for dir: ' . $dirPath);
	} else {
	    $dirs = array();
	    foreach ($xmlIndex['ENTRY'] as $entry) {
		switch ($xmlValues[$entry]['attributes'][$KIND]) {
		case 'dir':
		    if (!empty($xmlValues[$entry]['attributes']['NAME'])) {
			if (empty($xmlValues[$entry]['attributes']['DELETED']) ||
			    $xmlValues[$entry]['attributes']['DELETED'] != 'true') {
			$dirs[] = $xmlValues[$entry]['attributes']['NAME'];
			} else {
			    print "Skipping deleted dir: " .
				"$dirPath/{$xmlValues[$entry]['attributes']['NAME']}<br/>";
			}
		    }
		    break;

		case 'file':
		    $file = $dirPath . '/' . $xmlValues[$entry]['attributes']['NAME'];
		    if (empty($xmlValues[$entry]['attributes']['DELETED'])
			    && $this->shouldCheckFile($file)) {
			$gallery->guaranteeTimeLimit(30);
			$buf = $platform->file_get_contents($file);
			$this->checkFile($file, $buf);

			if ($this->_shouldHalt) {
			    return;
			}
		    }
		    break;

		default:
		    $this->assert(false,
			    'Unable to parse ' . $xmlValues[$entry]['attributes'][$KIND]);
		}
	    }
	    foreach ($dirs as $dir) {
		$this->_scanDir($dirPath . '/' . $dir);
		if ($this->_shouldHalt) {
		    return;
		}
	    }
	}
    }

    /**
     * Subclasses can call this to stop scanning.
     */
    function halt() {
	$this->_shouldHalt = true;
    }

    /**
     * Overload this method in subclasses to audit the file
     * @access protected
     */
    function checkFile($fileName, $buffer) {
    }

    /**
     * Overload this method in subclasses to run any tasks after the scan is complete.
     *
     * @param bool $halted true if the scan was halted early
     * @access protected
     */
    function finishScan($halted) {
    }

    /**
     * Overload this method in subclasses.  If this method
     * returns true, we'll call checkFile() on it
     *
     * @return true if we should check this file
     * @access protected
     */
    function shouldCheckFile($fileName) {
	/*
	 * By default we accept php|inc|class|tpl|po extensions, with the exception that we only
	 * take lib/tools/repository from the lib directory.
	 */
	if (!preg_match('{\.(?:php|inc|class|tpl|po)$}', $fileName)) {
	    return false;
	}
	if (strpos($fileName, $this->_baseDir . '/lib/') === 0) {
	    return strpos($fileName, $this->_baseDir . '/lib/tools/repository/') === 0;
	}

	return true;
    }
}
?>
