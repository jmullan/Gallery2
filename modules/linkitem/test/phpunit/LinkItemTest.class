<?php
/*
 * $RCSfile: LinkItemTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.4 $ $Date: 2006/02/08 20:39:36 $
 * @package LinkItem
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Additional LinkItem tests
 * @package LinkItem
 * @subpackage PHPUnit
 */
class LinkItemTest extends GalleryTestCase {

    function setUp() {
	parent::setUp();

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);

	list ($ret, $this->_targetAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_lockId) = GalleryCoreApi::acquireReadLock(
	    array($this->_album->getId(), $this->_targetAlbum->getId()));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_link) =
	    $this->_createLinkItem($this->_album->getId(), 'http://test.com/test.html');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function _createLinkItem($parentId, $target) {
	list ($ret, $link) =
	    GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryLinkItem');
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	if (empty($link)) {
	    return array(GalleryCoreApi::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	}
	$ret = $link->create($parentId, $target);
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$ret = $link->save();
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(null, $link);
    }

    function tearDown() {
	if (isset($this->_lockId)) {
	    $ret = GalleryCoreApi::releaseLocks($this->_lockId);
	    if ($ret) {
		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	parent::tearDown();
    }

    function testMoveLink() {
	/* We don't really have anything on the filesystem; make sure move() works ok */
	$this->_markForCleanup($this->_targetAlbum);

	$ret = $this->_link->move($this->_targetAlbum->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($this->_targetAlbum->getId(), $this->_link->getParentId());
    }

    function testDeleteAlbum() {
	/* Verify delete of an album also deletes links that point to it */
	list ($ret, $link) =
	    $this->_createLinkItem($this->_album->getId(), $this->_targetAlbum->getId());
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::releaseLocks($this->_lockId);
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	unset($this->_lockId);

	$ret = GalleryCoreApi::deleteEntityById($this->_targetAlbum->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $gone) = $link->refresh();
	$this->assert(!isset($gone), 'link should be gone');
	if ($ret) {
	    $this->assertEquals(GALLERY_ERROR | ERROR_MISSING_OBJECT,
				$ret->getErrorCode(), 'expected error code');
	} else {
	    $this->assert(false, 'expected error');
	}
    }

    function testDeleteSubalbum() {
	/* Verify delete of an album also deletes links that point to its subalbums */
	list ($ret, $subalbum) = $this->_createRandomAlbum($this->_targetAlbum->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $link) =
	    $this->_createLinkItem($this->_album->getId(), $subalbum->getId());
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::releaseLocks($this->_lockId);
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	unset($this->_lockId);

	$ret = GalleryCoreApi::deleteEntityById($this->_targetAlbum->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $gone) = $link->refresh();
	$this->assert(!isset($gone), 'link should be gone');
	if ($ret) {
	    $this->assertEquals(GALLERY_ERROR | ERROR_MISSING_OBJECT,
				$ret->getErrorCode(), 'expected error code');
	} else {
	    $this->assert(false, 'expected error');
	}
    }
    
    function testShowLinkItemNoPersistentSession() {
    	global $gallery;
    	$backup = $gallery->_session;
    	/* Make sure the redirect has no sessionId in it */
    	GalleryUtilities::removeRequestVariable(SESSION_ID_PARAMETER);
	unset($_COOKIE[SESSION_ID_PARAMETER]);
	unset($_SERVER['HTTP_COOKIE']);
    	$session = new GallerySession();
    	$ret = $session->init();
    	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(false, $session->isUsingCookies(), 'isUsingCookies');
	$this->assertEquals(SESSION_TEMP_ID, $session->getId(), 'temp session id');
	
	$gallery->_phpVm = $phpVm = new LinkItemTestMockPhpVm();
	$_REQUEST['phpVmHeaders'] = array();
	$_REQUEST['phpVmExitCalls'] = 0;
	
        $this->_link->setLink($this->_targetAlbum->getId());
        $this->_markForCleanup($this->_targetAlbum);
        $this->_lockId = array($this->_lockId);
        list ($ret, $this->_lockId[]) = 
        		GalleryCoreApi::acquireWriteLock(array($this->_link->getId()));
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
        $ret = $this->_link->save();
        if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$gallery->_session = $session;
	/* Make sure it passes the onLoad conditions */
	GalleryUtilities::putRequestVariable('view', 'core.ShowItem');
	GalleryUtilities::putRequestVariable('itemId', $this->_link->getId());
	/* Make sure onLoad is called */
	GalleryDataCache::setMemoryCachingEnabled(false);
	/* Execute the test */
	list ($ret, $link) = GalleryCoreApi::loadEntitiesById($this->_link->getId());
        if ($ret) {
            $gallery->_session = $backup;
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	GalleryDataCache::setMemoryCachingEnabled(true);
	/* Verify results */
	$this->assertEquals(1, $_REQUEST['phpVmExitCalls'], 'nr of exit calls');
	$urlGenerator =& $gallery->getUrlGenerator();
	$baseUrl = $urlGenerator->getCurrentUrlDir();
	if (!empty($_REQUEST['phpVmHeaders']['Location'])) {
	    $this->assertEquals($urlGenerator->getCurrentUrlDir() . 'main.php?g2_itemId=' .
			   			$this->_targetAlbum->getId(), 
			    	trim($_REQUEST['phpVmHeaders']['Location']),
			    	'redirect URL');
	} else {
	    $this->assert(false, 'no Location header');	
	}
	
        $gallery->_session = $backup;
    }
}

class LinkItemTestMockPhpVm extends GalleryPhpVm {
    function header($string, $replace=null) {
        if ($pos = strpos($string, ':')) {
	    $_REQUEST['phpVmHeaders'][substr($string, 0, $pos)] = substr($string, $pos+1);
	} 
    }
    
    function exit_($status=null) {
	$_REQUEST['phpVmExitCalls']++;
    }
}
?>
