<?php
/*
 * $RCSfile: ImageFrameTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.11 $ $Date: 2005/08/23 03:49:44 $
 * @package ImageFrame
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Test ImageFrameInterface functionality
 *
 * @package ImageFrame
 * @subpackage PHPUnit
 */
class ImageFrameTest extends GalleryTestCase {

    function ImageFrameTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_imageframe) =
	    GalleryCoreApi::newFactoryInstance('ImageFrameInterface_1_1', 'ImageFrameImpl');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	if (!isset($this->_imageframe)) {
	    print 'Missing ImageFrameImpl';
	    return $this->failWithStatus(
		GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__));
	}
    }


    function testImageFrameList() {
	list ($ret, $list) = $this->_imageframe->getImageFrameList();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($list['none']) && isset($list['dots']) && isset($list['wood']));
    }

    function testImageFrameInit() {
	$template = new ImageFrameDummyGalleryTemplate();
	$ret = $this->_imageframe->init($template, array('none', 'dots', 'wood'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($template->data['ImageFrameData']), 'template data');
	$data = $template->data['ImageFrameData'];
	$this->assertEquals(array('idList', 'data'), array_keys($data), 'Data keys');
	$this->assertEquals('none|dots|wood', $data['idList'], 'Id list');
	$this->assertEquals(array('type' => 'style', 'style' => 'border-style: none'),
			    $data['data']['none'], 'None');
	$this->assertEquals('style', $data['data']['dots']['type'], 'Dots type');
	$this->assert(preg_match('/border.*dashed.*padding/', $data['data']['dots']['style']),
		      'Dots style');
	$this->assert(count($data['data']['wood']) > 20 && isset($data['data']['wood']['name']),
		      'Wood');
	$this->assertEquals('http', substr($data['data']['wood']['imageTL'], 0, 4), 'Wood image');
	$this->assert(isset($template->data['head']), 'head data');
	$this->assertEquals(array('modules/imageframe/templates/ImageFrameHead.tpl'),
			    $template->data['head'], 'head tpl');

	/* Another init should add data, not overwrite */
	$ret = $this->_imageframe->init($template, array('solid'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$data = $template->data['ImageFrameData'];
	$this->assertEquals('none|dots|wood|solid', $data['idList'], 'Id list 2');
    }

    function testImageFrameSample() {
	list ($ret, $url) = $this->_imageframe->getSampleUrl();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('http', substr($url, 0, 4), 'Url protocol');
	list ($ret, $url) = $this->_imageframe->getSampleUrl(12345);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('http', substr($url, 0, 4), 'Url2 protocol');
	$this->assert(preg_match('/12345/', $url), 'Url2 id');
    }

    function testSmartyCounter() {
	/*
	 * Each imageframe is rendered in a separate {g->container} call which does
	 * not pass $smarty by reference.  Hence we cannot store a counter in $smarty
	 * and have the value retained between calls to generate a unique id for each
	 * imageframe.  Luckily, {counter} stores its data in a static variable and
	 * not in $smarty so we can use it.  This unit test verifies this behavior
	 * (in case it changes in a future version of smarty).
	 */
	$smarty1 = GalleryTemplate::_getSmarty();
	$smarty2 = GalleryTemplate::_getSmarty();
	$smarty1->template_dir = dirname(dirname(__FILE__));
	$smarty2->template_dir = dirname(dirname(__FILE__));

	/* Verify these are separate instances */
	$smarty1->assign('foo', 'bar');
	$smarty2->assign('foo', 'hoho');
	$this->assertEquals('bar', $smarty1->get_template_vars('foo'));

	/* Verify {counter} works across smarty instances */
	$result = $smarty1->fetch('gallery:data/counter.tpl');
	$result[1] = trim($result[1]);
	$this->assertEquals(array(GalleryStatus::success(), '1'), $result);
	$result = $smarty2->fetch('gallery:data/counter.tpl');
	$result[1] = trim($result[1]);
	$this->assertEquals(array(GalleryStatus::success(), '2'), $result);
    }
}

/**
 * @package ImageFrame
 * @subpackage PHPUnit
 */
class ImageFrameDummyGalleryTemplate {
    var $data = array();
    function hasVariable($key) {
	return isset($this->data[$key]);
    }
    function setVariable($key, $value) {
	$this->data[$key] = $value;
    }
    function &getVariableByReference($key) {
	return $this->data[$key];
    }
    function &_getSmarty() {
	return $this;
    }
    function register_block() { }
    function register_function() { }
    function head($tpl) {
	$this->data['head'][] = $tpl;
    }
}
?>
