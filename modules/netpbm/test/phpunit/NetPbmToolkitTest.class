<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package NetPbm
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Required classes
 */
GalleryCoreApi::relativeRequireOnce('modules/netpbm/classes/NetPbmToolkitHelper.class');
GalleryCoreApi::relativeRequireOnce('modules/netpbm/classes/NetPbmToolkit.class');

/**
 * Test NetPbmToolkit functionality
 *
 * @package NetPbm
 * @subpackage PHPUnit
 */
class NetPbmToolkitTest extends GalleryTestCase {

    function NetPbmToolkitTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    /**
     * 
     */
    function setUp() {
	global $gallery;

	parent::setUp();
	
	/* Save the platform */
	$gallery->_platform = new NetPbmToolkitTestPlatform($gallery->getPlatform());
	$ret = $gallery->_platform->init();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_save = array();
	foreach (array('path', 'jpegQuality', 'pnmtojpeg', 'jheadPath') as $key) {
	    list ($ret, $this->_save[$key]) = GalleryCoreApi::getPluginParameter('module', 'netpbm', $key);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	/* Reset to the defaults -- tearDown will undo this */
	foreach (array('jpegQuality' => 75, 'pnmtojpeg' => 'ppmtojpeg', 'jheadPath' => '/usr/local/bin/')
		 as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'netpbm', $key, $value);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* Get a toolkit to work with */
	$this->_toolkit = new NetPbmToolkit();
    }

    /**
     *
     */
    function tearDown() {
	global $gallery;
	
	foreach ($this->_save as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'netpbm', $key, $value);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	parent::tearDown();
    }

    function testPerformOperations() {

	list ($ret, $mimeType) =
	    $this->_toolkit->performOperation('image/gif', 'thumbnail',
					      'testPerformOperations1.gif',
					      'testPerformOperations2.gif',
					      array(100, 100));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $mimeType) =
	    $this->_toolkit->performOperation('image/jpeg', 'thumbnail',
					      'testPerformOperations4.jpg',
					      'testPerformOperations5.jpg',
					      array(100, 100));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $mimeType) =
	    $this->_toolkit->performOperation('image/jpeg', 'thumbnail',
					      'testPerformOperations4.jpg',
					      'testPerformOperations5.jpg',
					      array(100, 100));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $mimeType) =
	    $this->_toolkit->performOperation('image/tiff', 'rotate',
					      'testPerformOperations6.tiff',
					      'testPerformOperations7.tiff',
					      array(90));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $mimeType) =
	    $this->_toolkit->performOperation('image/png', 'crop',
					      'testPerformOperations8.png',
					      'testPerformOperations9.png',
					      array('24.667', '23.5', '51.375', '52'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $mimeType) =
	    $this->_toolkit->performOperation('image/bmp', 'rotate',
					      'testPerformOperationsA.bmp',
					      'testPerformOperationsB.bmp',
					      array(180));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	// Test a basic composite operation (top right corner)
        list ($ret, $mimeType) =
            $this->_toolkit->performOperation('image/png', 'composite',
                                              'testPerformOperations10.png', // composite
                                              'testPerformOperations11.png', // composited
                                              array('testPerformOperations12.gif', // image
						    'image/gif', // mime type
						    50, 50, // image width, height
						    0, 0, // image alignment x, y
						    3));    // alignment type
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

	// Test another composite with out of range params that should get corrected
        list ($ret, $mimeType) =
            $this->_toolkit->performOperation('image/png', 'composite',
                                              'testPerformOperations10.png', // composite (200x200)
                                              'testPerformOperations11.png', // composited
                                              array('testPerformOperations12.gif', // image
						    'image/gif', // mime type
						    50, 50, // image width, height
						    151, 151, // image alignment x, y
						    0));    // alignment type
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

	// Test preserving EXIF data
	$ret = GalleryCoreApi::setPluginParameter('module', 'netpbm', 'jheadPath', '/validJheadPath/');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	list ($ret, $mimeType) =
            $this->_toolkit->performOperation('image/jpeg', 'rotate',
                                              'testPerformOperations13.jpg',
                                              'testPerformOperations13.jpg',
					      array(90));
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

	list ($ret, $mimeType) =
	    $this->_toolkit->performOperation('image/png', 'BOGUS',
					      'BOGUS',
					      'BOGUS',
					      array('BOGUS'));
	$this->assert($ret->getErrorCode() & ERROR_UNIMPLEMENTED);
    }

    function testGetProperties() {
	list ($ret, $results) =
	    $this->_toolkit->getProperty('image/gif', 'dimensions', 'testGetProperties1.gif');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(10, 20), $results);

	list ($ret, $results) =
	    $this->_toolkit->getProperty('image/gif', 'dimensions', 'testGetProperties2.gif');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(30, 40), $results);

	list ($ret, $results) =
	    $this->_toolkit->getProperty('image/gif', 'BOGUS', 'BOGUS');
	$this->assert($ret->getErrorCode() & ERROR_UNIMPLEMENTED);
    }

    function testMergeOperations() {
	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('crop', array(1, 2, 3, 4), 'crop', array(3, 4, 5, 6));
	$this->assert($success);
	$this->assertEquals('crop', $operation);
	$this->assertEquals(array(3, 4, 5, 6), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('resize', array(1, 2), 'resize', array(3, 4));
	$this->assert($success);
	$this->assertEquals('resize', $operation);
	$this->assertEquals(array(3, 4), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(90), 'rotate', array(90));
	$this->assert($success);
	$this->assertEquals('rotate', $operation);
	$this->assertEquals(array(180), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(90), 'rotate', array(-90));
	$this->assert($success);
	$this->assertEquals(null, $operation);
	$this->assertEquals(null, $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('thumbnail', array(1, 2), 'resize', array(3, 4));
	$this->assert($success);
	$this->assertEquals('resize', $operation);
	$this->assertEquals(array(3, 4), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('thumbnail', array(1, 2), 'thumbnail', array(3, 4));
	$this->assert($success);
	$this->assertEquals('thumbnail', $operation);
	$this->assertEquals(array(3, 4), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('scale', array(1, 2), 'thumbnail', array(3, 4));
	$this->assert($success);
	$this->assertEquals('thumbnail', $operation);
	$this->assertEquals(array(3, 4), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(270), 'rotate', array(180));
	$this->assert($success);
	$this->assertEquals('rotate', $operation);
	$this->assertEquals(array(90), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(90), 'rotate', array(-180));
	$this->assert($success);
	$this->assertEquals('rotate', $operation);
	$this->assertEquals(array(-90), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(90), 'rotate', array(180));
	$this->assert($success);
	$this->assertEquals('rotate', $operation);
	$this->assertEquals(array(-90), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(270), 'rotate', array(90));
	$this->assert($success);
	$this->assertEquals(null, $operation);
	$this->assertEquals(null, $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('crop', array(1, 2, 3, 4), 'thumbnail', array(3, 4));
	$this->assert(!$success);
    }

    function testGetOperationsAndProperties() {
	list ($ret, $results) = NetPbmToolkitHelper::getOperationsAndProperties();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('convert-to-image/jpeg' => array('params' => array(),
								   'description' => 'Convert to a JPEG',
								   'mimeTypes' => array('image/tiff'),
								   'outputMimeType' => 'image/jpeg'),
				  'scale' => array('params' =>
						   array(array('type' => 'int',
							       'description' => 'target size')),
						   'description' => 'Scale the image to the target size',
						   'mimeTypes' => array('image/gif',
									'image/jpeg',
									'image/pjpeg',
									'image/png',
									'image/tiff',
									'image/bmp')
						   ),
				  'thumbnail' => array('params' =>
						       array(array('type' => 'int',
								   'description' => 'target size')),
						       'description' => 'Scale the image to the target size',
						       'mimeTypes' => array('image/gif',
									    'image/jpeg',
									    'image/pjpeg',
									    'image/png',
									    'image/tiff',
									    'image/bmp')),
				  'resize' => array('params' =>
						    array(array('type' => 'int',
								'description' => 'target width'),
							  array('type' => 'int',
								'description' => 'target height')),
						    'description' => 'Resize the image to the target dimensions',
						    'mimeTypes' => array('image/gif',
									 'image/jpeg',
									 'image/pjpeg',
									 'image/png',
									 'image/tiff',
									 'image/bmp')),
				  'rotate' => array('params' =>
						    array(array('type' => 'int',
								'description' => 'rotation degrees')),
						    'description' => 'Rotate the image',
						    'mimeTypes' => array('image/gif',
									 'image/jpeg',
									 'image/pjpeg',
									 'image/png',
									 'image/tiff',
									 'image/bmp')),
				  'crop' => array('params' =>
						  array(array('type' => 'float',
							      'description' => 'left edge %'),
							array('type' => 'float',
							      'description' => 'top edge %'),
							array('type' => 'float',
							      'description' => 'width %'),
							array('type' => 'float',
							      'description' => 'height %')),
						  'description' => 'Crop the image',
						  'mimeTypes' => array('image/gif',
								       'image/jpeg',
								       'image/pjpeg',
								       'image/png',
								       'image/tiff',
								       'image/bmp')),
				  'composite' => array('params' =>
						       array(array('type' => 'string',
								   'description' => 'overlay path'),
							     array('type' => 'string',
								   'description' => 'overlay mime type'),
							     array('type' => 'int',
								   'description' => 'overlay width'),
							     array('type' => 'int',
								   'description' => 'overlay height'),
							     array('type' => 'int',
								   'description' => 'alignment location x'),
							     array('type' => 'int',
								   'description' => 'alignment location y'),
							     array('type' => 'int',
								   'description' => 'alignment type')),
						       'description' => 'Composite the image',
						       'mimeTypes' => array('image/gif',
									    'image/jpeg',
									    'image/pjpeg',
									    'image/png',
									    'image/tiff',
									    'image/bmp'))),
			    $results['operations']);
	$this->assertEquals(array('dimensions' => array('type' => 'int,int',
							'description' => 'Get the width and height of the image',
							'mimeTypes' => array('image/gif',
									     'image/jpeg',
									     'image/pjpeg',
									     'image/png',
									     'image/tiff',
									     'image/bmp'))),
			    $results['properties']);
    }

    function testBinaries() {
	list ($ret, $results, $mimeTypes) =
	    NetPbmToolkitHelper::testBinaries('/validPath/', array('pnmtojpeg' => 'ppmtojpeg'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array(array('name' => 'giftopnm', 'success' => 1, 'message' => array()),
				  array('name' => 'ppmtogif', 'success' => 1, 'message' => array()),
				  array('name' => 'jpegtopnm', 'success' => 1, 'message' => array()),
				  array('name' => 'ppmtojpeg', 'success' => 1, 'message' => array()),
				  array('name' => 'pngtopnm', 'success' => 1, 'message' => array()),
				  array('name' => 'pnmtopng', 'success' => 1, 'message' => array()),
				  array('name' => 'tifftopnm', 'success' => 1, 'message' => array()),
				  array('name' => 'pnmtotiff', 'success' => 1, 'message' => array()),
				  array('name' => 'bmptopnm', 'success' => 1, 'message' => array()),
				  array('name' => 'ppmtobmp', 'success' => 1, 'message' => array()),
				  array('name' => 'pnmcomp', 'success' => 1, 'message' => array())),
			    $results);
	
	$this->assertEquals(array('image/gif',
				  'image/jpeg',
				  'image/pjpeg',
				  'image/png',
				  'image/tiff',
				  'image/bmp'),
			    $mimeTypes);
    }
}

/**
 * Test platform
 *
 * @package NetPbm
 * @subpackage PHPUnit
 */
class NetPbmToolkitTestPlatform {

    function NetPbmToolkitTestPlatform($platform) {
	$this->_platform = $platform;
    }

    function init() {
	global $gallery;
	list ($ret, $this->_netPbmPath) = GalleryCoreApi::getPluginParameter('module', 'netpbm', 'path');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	list ($ret, $this->_jheadPath) = GalleryCoreApi::getPluginParameter('module', 'netpbm', 'jheadPath');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    function exec($cmd) {
	global $gallery;

	if (serialize($cmd) ==
	    serialize(array(array($this->_netPbmPath . 'giftopnm', '--quiet', 'testGetProperties2.gif'),
			    array($this->_netPbmPath . 'pnmfile', '--allimages')))) {

	    return array(1, array('stdin:  Image 0:        PGM raw, 30 by 40  maxval 255'), array());
	}

	/** Operation 1: Resize a GIF */
	if (serialize($cmd) ==
	    serialize(array(array($this->_netPbmPath . 'giftopnm', '--quiet', 'testPerformOperations1.gif'),
			    array($this->_netPbmPath . 'pnmfile', '--allimages')))) {

	    return array(1, array('stdin:  Image 0:        PGM raw, 100 by 200  maxval 255'), array());
	}

	if (serialize($cmd) ==
	    serialize(array(array($this->_netPbmPath . 'giftopnm', '--quiet', 'testPerformOperations1.gif'),
			    array($this->_netPbmPath . 'pnmscale', '--quiet', '-xysize', 100, 100),
			    array($this->_netPbmPath . 'ppmquant', 256),
			    array($this->_netPbmPath . 'ppmtogif', '>', 'TEMPFILE')))) {
	    return array(1, array(), array());
	}

	/** Operation 2: Resize a JPG */
	if (serialize($cmd) ==
	    serialize(array(array($this->_netPbmPath . 'jpegtopnm', '--quiet', 'testPerformOperations4.jpg'),
			    array($this->_netPbmPath . 'pnmfile', '--allimages')))) {

	    return array(1, array('stdin:  Image 0:        PGM raw, 200 by 300  maxval 255'), array());
	}

	if (serialize($cmd) ==
	    serialize(array(array('/usr/local/bin/jhead', '-te', 'testPerformOperations4.jpg', 'TEMPFILE')))) {
	    return array(1, array(), array());
	}
	
	if (serialize($cmd) ==
	    serialize(array(array($this->_netPbmPath . 'jpegtopnm', '--quiet', 'testPerformOperations4.jpg'),
			    array($this->_netPbmPath . 'pnmscale', '--quiet', '-xysize', 100, 100),
			    array($this->_netPbmPath . 'ppmtojpeg', '--quality=75', '>', 'TEMPFILE')))) {
	    return array(1, array(), array());
	}

	/** Operation 3: Rotate a TIFF */
	if (serialize($cmd) ==
	    serialize(array(array($this->_netPbmPath . 'tifftopnm', '--quiet', 'testPerformOperations6.tiff'),
			    array($this->_netPbmPath . 'pnmfile', '--allimages')))) {

	    return array(1, array('stdin:  Image 0:        PGM raw, 200 by 300  maxval 255'), array());
	}

	if (serialize($cmd) ==
	    serialize(array(array($this->_netPbmPath . 'tifftopnm', '--quiet', 'testPerformOperations6.tiff'),
			    array($this->_netPbmPath . 'pnmflip', '-cw'),
			    array($this->_netPbmPath . 'pnmtotiff', '>', 'TEMPFILE')))) {
	    return array(1, array(), array());
	}

	/** Operation 3.1: Rotate a BMP */
	if (serialize($cmd) ==
	    serialize(array(array($this->_netPbmPath . 'bmptopnm', '--quiet', 'testPerformOperationsA.bmp'),
			    array($this->_netPbmPath . 'pnmflip', '-r180'),
			    array($this->_netPbmPath . 'ppmquant', 256),
			    array($this->_netPbmPath . 'ppmtobmp', '>', 'TEMPFILE')))) {
	    return array(1, array(), array());
	}

	/** Operation 4: Crop a PNG */
	if (serialize($cmd) ==
	    serialize(array(array($this->_netPbmPath . 'pngtopnm', '--quiet', 'testPerformOperations8.png'),
			    array($this->_netPbmPath . 'pnmfile', '--allimages')))) {

	    return array(1, array('stdin:  Image 0:        PGM raw, 200 by 300  maxval 255'), array());
	}

	if (serialize($cmd) ==
	    serialize(array(array($this->_netPbmPath . 'pngtopnm', '--quiet', 'testPerformOperations8.png'),
			    array($this->_netPbmPath . 'pnmcut', (float)49, (float)71, (float)103, (float)156),
			    array($this->_netPbmPath . 'pnmtopng', '>', 'TEMPFILE')))) {
	    return array(1, array(), array());
	}

	if (serialize($cmd) ==
	    serialize(array(array($this->_netPbmPath . 'giftopnm', '-alphaout=TEMPFILE',
				  'testPerformOperations12.gif', '>', 'TEMPFILE')))) {
	    return array(1, array(), array());
	}

	if (serialize($cmd) ==
	    serialize(array(array($this->_netPbmPath . 'pngtopnm', '--quiet', 'testPerformOperations10.png'),
			    array($this->_netPbmPath . 'pnmcomp', '-align=right', '-valign=top',
				  '-alpha=TEMPFILE', '>', 'TEMPFILE'),
			    array($this->_netPbmPath . 'pnmtopng', '>', 'TEMPFILE')))) {
	    return array(1, array(), array());
	}

	if (serialize($cmd) ==
	    serialize(array(array($this->_netPbmPath . 'pngtopnm', '--quiet', 'testPerformOperations10.png'),
			    array($this->_netPbmPath . 'pnmcomp', '-xoff=150', '-yoff=150',
				  '-alpha=TEMPFILE', '>', 'TEMPFILE'),
			    array($this->_netPbmPath . 'pnmtopng', '>', 'TEMPFILE')))) {
	    return array(1, array(), array());
	}

	if (serialize($cmd) ==
	    serialize(array(array($this->_netPbmPath . 'jpegtopnm', '--quiet', 'testPerformOperations13.jpg'),
			    array($this->_netPbmPath . 'pnmflip', '-cw'),
			    array($this->_netPbmPath . 'ppmtojpeg', '--quality=75', '>', 'TEMPFILE')))) {
	    return array(1, array(), array());
	}

	if (serialize($cmd) ==
	        serialize(array(array('/validJheadPath/jhead', '-te', 'testPerformOperations13.jpg',
				      'TEMPFILE')))) {
	    return array(1, array(), array());
	}


	/* Test binaries */
	if (sizeof($cmd) == 1 && $cmd[0][1] == '--version') {
	    switch($cmd[0][0]) {
	    case '/validPath/giftopnm':
	    case '/validPath/ppmtogif':
	    case '/validPath/jpegtopnm':
	    case '/validPath/ppmtojpeg':
	    case '/validPath/pngtopnm':
	    case '/validPath/pnmtopng':
	    case '/validPath/tifftopnm':
	    case '/validPath/pnmtotiff':
	    case '/validPath/bmptopnm':
	    case '/validPath/ppmtobmp':
	    case '/validPath/pnmcomp':
	    case $this->_netPbmPath . 'giftopnm':
	    case $this->_netPbmPath . 'ppmtogif':
	    case $this->_netPbmPath . 'jpegtopnm':
	    case $this->_netPbmPath . 'ppmtojpeg':
	    case $this->_netPbmPath . 'pnmtojpeg':
	    case $this->_netPbmPath . 'pngtopnm':
	    case $this->_netPbmPath . 'pnmtopng':
	    case $this->_netPbmPath . 'tifftopnm':
	    case $this->_netPbmPath . 'pnmtotiff':
	    case $this->_netPbmPath . 'bmptopnm':
	    case $this->_netPbmPath . 'ppmtobmp':
	    case $this->_netPbmPath . 'pnmcomp':
		return array(1, array(), array());
	    }
	}

	var_dump($cmd);
	return array(0, array('unprepared for exec()'), array());
    }

    function rename($oldName, $newName) {
	return 1;
    }

    function tempnam($dir, $prefix) {
	return 'TEMPFILE';
    }

    function isRestrictedByOpenBasedir($path) {
	switch($path) {
	case $this->_netPbmPath:
	case '/validPath/':
	    return false;
	}
    }

    function file_exists($path) {
	switch($path) {
	case '/validPath/bmptopnm':
	case '/validPath/giftopnm':
	case '/validPath/jpegtopnm':
	case '/validPath/pngtopnm':
	case '/validPath/pnmtopng':
	case '/validPath/pnmtotiff':
	case '/validPath/ppmtobmp':
	case '/validPath/ppmtogif':
	case '/validPath/ppmtojpeg':
	case '/validPath/tifftopnm':
	case '/validPath/pnmcomp':
	case '/validPath/':
	case $this->_netPbmPath . 'bmptopnm':
	case $this->_netPbmPath . 'giftopnm':
	case $this->_netPbmPath . 'jpegtopnm':
	case $this->_netPbmPath . 'pngtopnm':
	case $this->_netPbmPath . 'pnmtopng':
	case $this->_netPbmPath . 'pnmtotiff':
	case $this->_netPbmPath . 'ppmtobmp':
	case $this->_netPbmPath . 'ppmtogif':
	case $this->_netPbmPath . 'ppmtojpeg':
	case $this->_netPbmPath . 'tifftopnm':
	case $this->_netPbmPath . 'pnmcomp':
	case $this->_netPbmPath:
	    return true;
	}

	return false;
    }
    
    function is_dir($path) {
	global $gallery;
	list ($ret, $netPbmPath) = GalleryCoreApi::getPluginParameter('module', 'netpbm', 'path');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	switch($path) {
	case $this->_netPbmPath:
	case '/validPath/':
	    return true;
	}

	return false;
    }

    function unlink($path) {
	// we don't create any files, so no need to unlink any
    }

    function getimagesize($path) {
	switch($path) {
	case 'testGetProperties1.gif':
	    return array(10, 20);
	    break;

	case 'testPerformOperations10.png':
	    return array(200, 200);
	    break;
	}
	return false;
    }

    function realpath($file) {
	return $this->_platform->realpath($file);
    }
}

?>
