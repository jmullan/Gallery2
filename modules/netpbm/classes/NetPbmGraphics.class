<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * A NetPBM version of GalleryGraphics
 *
 * This class implements the GalleryGraphics API using NetPBM.
 *
 * @version $Id$
 * @package NetPbmGraphics
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class NetPbmGraphics extends GalleryGraphics {
    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    function NetPbmGraphics() {
	/* Configure our support */
	$this->_supportedFunctions = (IMAGE_FUNCTION_RESIZE |
				      IMAGE_FUNCTION_SCALE |
				      IMAGE_FUNCTION_ROTATE |
				      IMAGE_FUNCTION_CROP |
				      IMAGE_FUNCTION_PROPERTIES);
	$this->_supportedMimeTypes = array('image/jpeg',
					   'image/gif',
					   'image/png');
    }

    /**
     * @see GalleryGraphics::getImageDimensions()
     */
    function getImageDimensions($filename, $mimeType=false) {

	if (empty($mimeType)) {
	    $mimeType = GalleryUtilities::getMimeType($filename);
	}

	list($ret, $convertToPnmCmd) = $this->_convertToPnmCmd($filename, $mimeType);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}
	
	list($ret, $output) =
		$this->_exec(array($convertToPnmCmd,
				   array($this->_pnmCmd('pnmfile'),
					 '--allimages')));

	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	foreach ($output as $line) {
	    if (ereg('([0-9]+) by ([0-9]+)', $line, $regs)) {
		return array(GalleryStatus::success(), $regs[1], $regs[2]);
	    }
	}

	return array(GalleryStatus::error(ERROR_GRAPHICS_FAILURE,
					  __FILE__, __LINE__),
		     null, null);
    }

    /**
     * @see GalleryGraphics::resizeImage()
     */
    function resizeImage($sourceFilename, $destFilename, $width, $height) {
	if (!$this->isSupportedFunction(IMAGE_FUNCTION_RESIZE)) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION,
					__FILE__, __LINE__);
	}

	return $this->_transformImage(array($this->_pnmCmd('pnmscale'),
					    '--quiet',
					    '-xsize', $width,
					    '-ysize', $height),
				      $sourceFilename,
				      $destFilename);
    }

    /**
     * @see GalleryGraphics::scaleImage()
     */
    function scaleImage($sourceFilename, $destFilename, $targetSize) {
	if (!$this->isSupportedFunction(IMAGE_FUNCTION_SCALE)) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION,
					__FILE__, __LINE__);
	}
	
	return $this->_transformImage(array($this->_pnmCmd('pnmscale'),
					    '--quiet',
					    '-xysize', $targetSize, $targetSize),
				      $sourceFilename,
				      $destFilename);
    }
		
    /**
     * @see GalleryGraphics::rotateImage()
     */
    function rotateImage($sourceFilename, $destFilename, $degrees) {
	if (!$this->isSupportedFunction(IMAGE_FUNCTION_ROTATE)) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION,
					__FILE__, __LINE__);
	}
	
	return GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__);
    }
		
    /**
     * @see GalleryGraphics::cropImage()
     */
    function cropImage($sourceFilename, $destFilename, $x, $y, $width, $height) {
	if (!$this->isSupportedFunction(IMAGE_FUNCTION_CROP)) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION,
					__FILE__, __LINE__);
	}
	
	return $this->_transformImage(array($this->_pnmCmd('pnmcut'),
					    $x, $y, $width, $height),
				      $sourceFilename,
				      $destFilename);
    }

    /**
     * @see GalleryGraphics::isValidImage()
     */
    function isValidImage($filename) {

	/* Test validity by getting image dimensions */
	list($ret, $width, $height) = $this->getImageDimensions($filename);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* 0x0 image is also invalid */
	if ($width == 0 && $height == 0) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), true);
    }

    /**
     * Do the given transform on the source image 
     *
     * @param string the command to execute
     * @param string the path to a source file
     * @param string the path to a destination file
     * @return object GalleryStatus a status code
     */
    function _transformImage($command, $sourceFilename, $destFilename) {
	global $gallery;

	/* Figure out our convert-to-pnm command */
	list($ret, $convertToPnmCmd) = $this->_convertToPnmCmd($sourceFilename);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Get a temp file name and figure out our convert-from-pnm command */
	$tmpDir = $gallery->getConfig('data.gallery.tmp');
	$tmpFilename = tempnam($tmpDir, 'g2');
	if (empty($tmpFilename)) {
	    /* This can happen if the $tmpDir path is bad */
	    return GalleryStatus::error(ERROR_BAD_PATH,
					__FILE__, __LINE__);
	}

	$mimeType = GalleryUtilities::getMimeType($sourceFilename);
	list($ret, $convertFromPnmCmd) =
		$this->_convertFromPnmCmd($tmpFilename, $mimeType);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Do the conversion */
	list($ret, $output) = 
		$this->_exec(array($convertToPnmCmd,
				   $command,
				   $convertFromPnmCmd));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list($ret, $platform) = $gallery->getPlatform();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$success = $platform->rename($tmpFilename, $destFilename);
	if (!$success) {
	    $gallery->debug("Failed renaming $tmpFilename -> $destFilename");
	    return GalleryStatus::error(ERROR_PLATFORM_FAILURE,
					__FILE__, __LINE__);
	} else {
	    return GalleryStatus::success();
	}
    }
		
    /**
     * Generate the correct command to convert an image type to PNM.
     *
     * @param string the path to an image file
     * @return array object GalleryStatus a status code,
     *               array 1 or more string commands
     */
    function _convertToPnmCmd($filename, $mimeType=false) {
	global $gallery;

	if (empty($mimeType)) {
	    $mimeType = GalleryUtilities::getMimeType($filename);
	}
	
	switch($mimeType) {
	case 'image/png':
	    $cmd = $this->_pnmCmd('pngtopnm');
	    break;

	case 'image/jpeg':
	    $cmd = $this->_pnmCmd('jpegtopnm');
	    break;

	case 'image/gif':
	    $cmd = $this->_pnmCmd('giftopnm');
	    break;

	default:
	    $gallery->debug('Unsupported file type: ' . $mimeType);
	    return array(GalleryStatus::error(ERROR_UNSUPPORTED_FILE_TYPE,
					      __FILE__, __LINE__),
			 null);
	}

	return array(GalleryStatus::success(),
		     array($cmd, '--quiet', $filename));
    }

    /**
     * Generate the correct command to convert an image type from PNM.
     *
     * @param string the path to an image file
     * @param string the path to an image file
     * @return array object GalleryStatus a status code,
     *               array 1 or more string commands
     */
    function _convertFromPnmCmd($filename, $mimeType) {
	global $gallery;

	list ($ret, $pnmtojpeg) =
	    $gallery->getModuleParameter('netpbm', 'pnmtojpeg');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list ($ret, $jpegQuality) =
	    $gallery->getModuleParameter('netpbm', 'jpegQuality');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	switch($mimeType) {
	case 'image/png':
	    $cmd = array($this->_pnmCmd('pnmtopng'),
			 '>',
			 $filename);
	    break;

	case 'image/jpeg':
	    $cmd = array($this->_pnmCmd($pnmtojpeg),
			 '--quality=' . $jpegQuality,
			 '>',
			 $filename);
	    break;

	case 'image/gif':
	    $cmd = array(array($this->_pnmCmd('ppmquant'),
			       '256'),
			 array($this->_pnmCmd('ppmtogif'),
			       '>',
			       $filename));
	    break;

	default:
	    return array(GalleryStatus::error(ERROR_UNSUPPORTED_FILE_TYPE,
					      __FILE__, __LINE__),
			 null);
	}

	return array(GalleryStatus::success(), $cmd);
    }

    /**
     * Execute the command.  Flatten the command array first.
     *
     * @see GalleryUtilities::exec
     */
    function _exec($cmdArray) {
	$cmdArray = $this->_extractCommands($cmdArray);
	return GalleryUtilities::exec($cmdArray);
    }	

    /**
     * Return the full path to the NetPBM command
     *
     * @access private
     * @param string a netpbm command (eg. "giftopnm")
     */
    function _pnmCmd($cmd) {
	global $gallery;
	list($ret, $platform) = $gallery->getPlatform();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list ($ret, $netPbmPath) =
	    $gallery->getModuleParameter('netpbm', 'path');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	   
	return $netPbmPath . $cmd;
    }

    /**
     * Extract a single array of commands from a multilevel array of commands
     *
     * The command array may wind up being multilevel, eg:
     *
     * array(
     *   array('cmd', 'args'),
     *   array('cmd', 'args'),
     *   array(
     *     array('cmd', 'args'),
     *     array('cmd', 'args')
     *   ),
     * )
     *
     * Extract the commands as a single level array:
     *
     * array(
     *   array('cmd', 'args'),
     *   array('cmd', 'args'),
     *   array('cmd', 'args'),
     *   array('cmd', 'args')
     * )
     *
     * While maintaining the order.
     *
     * @param array a multilevel set of commands
     * @param array a single level set of commands
     */
    function _extractCommands($cmdArray, $level=0) {

	$results = array();
	$arrayElements = 0;
	foreach (array_values($cmdArray) as $cmd) {
	    if (is_array($cmd)) {
		$results = array_merge($results, $this->_extractCommands($cmd, $level+1));
		$arrayElements++;
	    } else {
		array_push($results, $cmd);
	    }
	}

	if ($arrayElements == count($cmdArray)) {
	    return $results;
	} else {
	    return array($results);
	}
    }
    
}
?>
