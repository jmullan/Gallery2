<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Migrate
 * @subpackage PHPUnit
 * @author Jesse Mullan <jmullan@visi.com>
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Gallery1DataParser tests
 * @package Migrate
 * @subpackage PHPUnit
 */
class Gallery1DataParserTest extends GalleryControllerTestCase {

    function Gallery1DataParserTest($methodName) {
        $this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();
	$this->_albumsDir = dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash;
	parent::setUp();
    }

    function tearDown() {
	global $gallery;
	parent::tearDown();
    }

    function testGetFieldsFromAlbum() {
	global $gallery;
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();
        list ($ret, $albumFields) = Gallery1DataParser::loadAlbumFields($this->_albumsDir . 'album01' . $slash);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
	
        $expected = array('title'=>'Who likes bananas?',
			  'description'=>'No description',
			  'summary'=>'',
			  'nextname'=>'aaa',
			  'bgcolor'=>'',
			  'textcolor'=>'',
			  'linkcolor'=>'',
			  'font'=>'verdana',
			  'border'=>'1',
			  'bordercolor'=>'black',
			  'returnto'=>'yes',
			  'thumb_size'=>'250',
			  'resize_size'=>'800',
			  'rows'=>'5',
			  'cols'=>'5',
			  'fit_to_window'=>'no',
			  'use_fullOnly'=>'no',
			  'print_photos'=>array('shutterfly'=>array('donation'=>'yes')),
			  'use_exif'=>'yes',
			  'perms'=>array(
					 'canRead'=>array('everybody'=>1),
					 'canViewFullImages'=>array(),
					 'canViewComments'=>array('everybody'=>1),
					 'canAddComments'=>array('everybody'=>1),
					 'canChangeText'=>array('1057837154_228147420'=>1),
					 'canAddTo'=>array('1057837115_2072132305'=>1),
					 'canWrite'=>array('1054014347_1233740678'=>1),
					 'canDeleteFrom'=>array('loggedin'=>1)
					 ),
			  'parentAlbumName'=>'.root',
			  'clicks'=>23,
			  'clicks_date'=>1056014708,
			  'display_clicks'=>'yes',
			  'public_comments'=>'yes',
			  'serial_number'=>45,
			  'extra_fields'=>array(0=>'Description'),
			  'cached_photo_count'=>2,
			  'photos_separate'=>true,
			  'name'=>'album01',
			  'owner'=>'1057837154_228147420',
			  'last_mod_time'=>1069742688,
			  'item_owner_display'=>'no',
			  'item_owner_modify'=>'yes',
			  'item_owner_delete'=>'yes',
			  'add_to_beginning'=>'no',
			  'resize_file_size'=>'0',
			  'last_quality'=>'90',
			  'poll_type'=>'critique',
			  'poll_scale'=>'3',
			  'poll_nv_pairs'=>array(
						 0=>array('name'=>'Excellent','value'=>'5'),
						 1=>array('name'=>'Very Good','value'=>'4'),
						 2=>array('name'=>'Good','value'=>'3'),
						 3=>array('name'=>'Average','value'=>'2'),
						 4=>array('name'=>'Poor','value'=>'1'),
						 5=>array('name'=>'','value'=>''),
						 6=>array('name'=>'','value'=>''),
						 7=>array('name'=>'','value'=>''),
						 8=>array('name'=>'','value'=>'')
						 ),
			  'poll_hint'=>'Vote for this image',
			  'poll_show_results'=>'no',
			  'poll_num_results'=>'3',
			  'voter_class'=>'Nobody',
			  'votes'=>array(),
			  'slideshow_type'=>'ordered',
			  'slideshow_length'=>'0',
			  'slideshow_recursive'=>'no',
			  'max_size'=>'off',
			  'max_file_size'=>'0',
			  'slideshow_loop'=>'yes',
			  'album_frame'=>'simple_book',
			  'thumb_frame'=>'solid',
			  'image_frame'=>'solid',
			  'showDimensions'=>'no',
			  'email_me'=>array(),
			  'background'=>''
			  );
	$this->assertEquals ($expected, $albumFields);
    }

    function testGetPhotoCountFromAlbum() {
        list ($ret, $countOfPhotos) = Gallery1DataParser::getPhotoCount($this->_albumsDir . 'album01/');
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $this->assertEquals(2, $countOfPhotos);
    }

    function testGetRootAlbums() {
        list ($ret, $rootAlbums) = Gallery1DataParser::getRootAlbums($this->_albumsDir);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $this->assertEquals(array('Kjøtt',
				  'monkey!',
				  'album01',
				  'album03'), $rootAlbums);
    }

    function testGetParentAlbumList() {
        list ($ret, $parentAlbumList) = Gallery1DataParser::getParentAlbumList($this->_albumsDir);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $this->assertEquals(array('Kjøtt' => '.root',
				  'monkey!' => '.root',
				  'album01' => '.root',
				  'album02' => 'album03',
				  'album03' => '.root'),
			    $parentAlbumList);
    }

    function testGetAlbumList() {
        list ($ret, $albumList) = Gallery1DataParser::getAlbumList($this->_albumsDir);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $this->assertEquals(array('Kjøtt','monkey!','album01', 'album02', 'album03'), array_keys($albumList));
    }

    function testGetAlbumHierarchy() {
        list ($ret, $albumList) = Gallery1DataParser::getAlbumHierarchy($this->_albumsDir);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $this->assertEquals(array('Kjøtt' => array(),
				  'monkey!' => array(),
				  'album01' => array(),
				  'album03' => array('album02' => array())
				  ),
			    $albumList);
    }

    function testGetUserUids() {
        list ($ret, $uids) = Gallery1DataParser::getUserUids($this->_albumsDir);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $this->assertEquals(array('1054014347_1233740678' => 'admin',
                                  '1057837115_2072132305' => 'monkey'
				  ),
			    $uids);
    }
    
    function testGetUserFieldsByUsername() {
        // monkey is the target username
        list ($ret, $fields) = Gallery1DataParser::getUserFieldsByUsername($this->_albumsDir, 'monkey');
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
	
        $this->assertEquals(array('username' => 'monkey',
                                  'fullname' => 'This is a Full Name',
                                  'password' => '1c40c25608fd7435cdaa4a8efab49bbd',
                                  'email' => 'jmullan@visi.com',
                                  'isAdmin' => '',
                                  'canCreateAlbums' => '1',
                                  'uid' => '1057837115_2072132305',
				  'defaultLanguage' => '',
				  'version' => 5,
				  'recoverPassHash' => '',
				  'lastAction' => '',
				  'lastActionDate' => '1078553946',
				  'origEmail' => 'jmullan@visi.com'),
			    $fields);
    }











    function testGetUserFieldsByUid() {
        // monkey is the target username
        list ($ret, $fields) = Gallery1DataParser::getUserFieldsByUid($this->_albumsDir, '1057837115_2072132305');
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
	
        $this->assertEquals(array('username' => 'monkey',
                                  'fullname' => 'This is a Full Name',
                                  'password' => '1c40c25608fd7435cdaa4a8efab49bbd',
                                  'email' => 'jmullan@visi.com',
                                  'isAdmin' => '',
                                  'canCreateAlbums' => '1',
                                  'uid' => '1057837115_2072132305',
				  'defaultLanguage' => '',
				  'version' => 5,
				  'recoverPassHash' => '',
				  'lastAction' => '',
				  'lastActionDate' => '1078553946',
				  'origEmail' => 'jmullan@visi.com'),
			    $fields);
    }
    function testGetUserFieldsByMissingUid() {
        // monkey is the target username
        list ($ret, $fields) = Gallery1DataParser::getUserFieldsByUid($this->_albumsDir, '1057837154_228147420');
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
	
        $this->assertEquals(array('username' => 'phpunit_foobar',
                                  'fullname' => 'Foo Bar',
                                  'password' => 'd53ebf1ed8bfa13e116a08e48f9ea26e',
                                  'email' => 'foobar@baz.org',
                                  'isAdmin' => 1,
                                  'canCreateAlbums' => 0,
                                  'uid' => '1057837154_228147420'),
			    $fields);
    }
    function testGetUserFieldsByReallyMissingUid() {
        list ($ret, $fields) = Gallery1DataParser::getUserFieldsByUid($this->_albumsDir, '1054014347_123456789');
        $this->assert($ret->getErrorCode() & ERROR_BAD_PARAMETER);
    }
    function testIsValidUid() {
	$valid = Gallery1DataParser::isValidUid($this->_albumsDir, '1057837115_2072132305');
	$this->assertEquals($valid,TRUE);	
    }
    function testIsInvalidUid1() {
	$valid = Gallery1DataParser::isValidUid($this->_albumsDir, '5');
	$this->assertEquals($valid,FALSE);
    }
    function testIsInvalidUid2() {
	$valid = Gallery1DataParser::isValidUid($this->_albumsDir, 'monkey');
	$this->assertEquals($valid,FALSE);
    }
}
?>