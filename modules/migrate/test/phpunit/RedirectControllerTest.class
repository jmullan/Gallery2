<?php
/*
 * $RCSfile: RedirectControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.12 $ $Date: 2005/08/23 03:49:46 $
 * @package Migrate
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

GalleryCoreApi::relativeRequireOnce('modules/migrate/classes/G1MigrateMap.class');

/**
 * Redirect controller tests
 * @package Migrate
 * @subpackage PHPUnit
 */
class RedirectControllerTest extends GalleryControllerTestCase {

    function RedirectControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'migrate.Redirect');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_item);

	list ($ret, $this->_thumb) = $this->_createDerivative($this->_item, $this->_item->getId(),
							      DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $this->_sized) = $this->_createDerivative($this->_item, $this->_item->getId(),
							      DERIVATIVE_TYPE_IMAGE_RESIZE);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_albumId = 12345;
	$this->_albumName = 'testalbum-' . rand();
	$this->_itemId = $this->_item->getId();
	$this->_itemName = 'testitem-' . rand();

	/* Add map entries.. */
	$ret = G1MigrateMap::addMapEntry(
	    array('itemId' => $this->_albumId, 'g1album' => $this->_albumName, 'g1item' => null));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = G1MigrateMap::addMapEntry(array('itemId' => $this->_itemId,
	    'g1album' => $this->_albumName, 'g1item' => $this->_itemName));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$_SERVER['PHP_SELF'] = '/gallery2/' . GALLERY_MAIN_PHP;
    }

    function tearDown() {
	$ret = G1MigrateMap::removeMapEntry(array('g1album' => $this->_albumName));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::tearDown();
    }

    function testRedirect() {
	global $gallery;
	$urlGenerator =& $gallery->getUrlGenerator();
	$href = $urlGenerator->generateUrl(array('href' => $_SERVER['PHP_SELF']));

	/* Album */
	GalleryUtilities::putRequestVariable('path', $this->_albumName);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ShowItem',
						      'itemId' => $this->_albumId,
						      'href' => $href),
				  'status' => array(),
				  'error' => array()),
			    $results, 'album');

	/* Album with trailing slash */
	GalleryUtilities::putRequestVariable('path', $this->_albumName . '/');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ShowItem',
						      'itemId' => $this->_albumId,
						      'href' => $href),
				  'status' => array(),
				  'error' => array()),
			    $results, 'album trailing slash');

	/* Album page 2 */
	GalleryUtilities::putRequestVariable('path', $this->_albumName);
	GalleryUtilities::putRequestVariable('page', '2', false);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ShowItem',
						      'itemId' => $this->_albumId,
						      'href' => $href,
						      'page' => '2'),
				  'status' => array(),
				  'error' => array()),
			    $results, 'album page 2');

	/* Item */
	GalleryUtilities::removeRequestVariable('page', false);
	GalleryUtilities::putRequestVariable('path', $this->_albumName . '/' . $this->_itemName);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ShowItem',
						      'itemId' => $this->_itemId,
						      'href' => $href),
				  'status' => array(),
				  'error' => array()),
			    $results, 'item');

	/* Item full size */
	GalleryUtilities::putRequestVariable('path', $this->_albumName . '/' . $this->_itemName);
	GalleryUtilities::putRequestVariable('full', '1', false);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ShowItem',
						      'itemId' => $this->_itemId,
						      'href' => $href,
						      'imageViewsIndex' => '1'),
				  'status' => array(),
				  'error' => array()),
			    $results, 'item full size');

	/* Invalid item */
	GalleryUtilities::removeRequestVariable('full', false);
	GalleryUtilities::putRequestVariable('path', 'invalid-' . rand() . '/aaa');

	/* Invalid item sends 404 and does exit; we don't want to bail out of unit tests.. */
	/* $results = $this->handleRequest(); */
	/* assert(got 404) */

	/* Direct link to full size image */
	GalleryUtilities::putRequestVariable('path',
	    $this->_albumName . '/' . $this->_itemName . '.jpg');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.DownloadItem',
						      'itemId' => $this->_itemId,
						      'href' => $href),
				  'status' => array(),
				  'error' => array()),
			    $results, 'item image file');

	/* Direct link to resized image */
	GalleryUtilities::putRequestVariable('path',
	    $this->_albumName . '/' . $this->_itemName . '.sized.jpg');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.DownloadItem',
						      'itemId' => $this->_sized->getId(),
						      'href' => $href),
				  'status' => array(),
				  'error' => array()),
			    $results, 'item resized file');

	/* Direct link to thumbnail image */
	GalleryUtilities::putRequestVariable('path',
	    $this->_albumName . '/' . $this->_itemName . '.thumb.jpg');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.DownloadItem',
						      'itemId' => $this->_thumb->getId(),
						      'href' => $href),
				  'status' => array(),
				  'error' => array()),
			    $results, 'item thumbnail file');

	/* Fallback to SCRIPT_NAME if PHP_SELF isn't set */
	$_SERVER['SCRIPT_NAME'] = $_SERVER['PHP_SELF'];
	unset($_SERVER['PHP_SELF']);
	GalleryUtilities::putRequestVariable('path', $this->_albumName . '/' . $this->_itemName);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ShowItem',
						      'itemId' => $this->_itemId,
						      'href' => $href),
				  'status' => array(),
				  'error' => array()),
			    $results, 'item, no PHP_SELF');

	/*
	 * Bad PHP_SELF, see http://bugs.php.net/bug.php?id=31843
	 * In this case we currently rely on REQUEST_URI being rewritten to a valid value.
	 */
	$_SERVER['PHP_SELF'] = $_SERVER['SCRIPT_NAME'] = '/G1/path/myalbum/aaa.jpg';

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ShowItem',
						      'itemId' => $this->_itemId),
				  'status' => array(),
				  'error' => array()),
			    $results, 'item, bad PHP_SELF');
    }
}
?>
