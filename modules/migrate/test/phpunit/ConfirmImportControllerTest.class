<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Migrate
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

require_once(dirname(__FILE__) . '/../../classes/G1MigrateHelper.class');

/**
 * ConfirmImport controller tests
 * @package Migrate
 * @subpackage PHPUnit
 */
class ConfirmImportControllerTest extends GalleryControllerTestCase {
    var $_temporaryAlbumId;
    //    var $_phpUnitMigrateLockIds;
    
    function ConfirmImportControllerTest($methodName) {
        $this->GalleryControllerTestCase($methodName, 'migrate:ConfirmImport');
    }

    function setUp() {
        global $gallery;

	parent::setUp();

	list ($ret, $this->_temporaryAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Assign our test layout */
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_temporaryAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_temporaryAlbum->setLayout('matrix');
	$ret = $this->_temporaryAlbum->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$this->_temporaryAlbumId = $this->_temporaryAlbum->getId();

	list ($ret, $this->guestUserId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.anonymousUser');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	$userName = 'phpunitfoo001';
	/*
	 * Go ahead and create the user instance
	 */
	list ($ret, $user) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryUser');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Verify that the user was created successfully */
	if (!isset($user)) {
	    return $this->failWithStatus(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__));
	}
	
	$ret = $user->create($userName);
	if ($ret->isError()) {
	    /* ERROR_COLLISION is when you try to create something that
	     * already exists.  If this test user already exists, we're happy.
	     */
	    if (!($ret->getErrorCode() & ERROR_COLLISION)) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	$ret = $user->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $this->_mapCount) = G1MigrateHelper::fetchMapCount();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $moduleStatusList) = GalleryCoreApi::fetchPluginStatus('module');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	if (!empty($moduleStatusList['comment']['active'])) {
	    $this->testComments = TRUE;
	} else {
	    $this->testComments = FALSE;
	}
    }

    function tearDown() {
        global $gallery;

	/* Clean up our test users */
	list ($ret, $user) = GalleryCoreApi::fetchUserByUsername('phpunit_foobar');
	if ($ret->isSuccess()) {
	    $ret = GalleryCoreApi::deleteEntityById($user->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	list ($ret, $user) = GalleryCoreApi::fetchUserByUsername('phpunitfoo001');
	if ($ret->isSuccess()) {
	    $ret = GalleryCoreApi::deleteEntityById($user->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* Clean up our test album */
	$ret = GalleryCoreApi::deleteEntityById($this->_temporaryAlbumId);
	if ($ret->isError()) {
	    print "<p><b>ERROR deleting" . $this->_temporaryAlbumId . "</b></p>";
	    print $ret->getAsHtml();
	}

	list ($ret, $mapCount) = G1MigrateHelper::fetchMapCount();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($this->_mapCount, $mapCount, 'Test altered number of map entries!');

	parent::tearDown();
    }

    function testImportUserSuccessful() {
	global $gallery;
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();
        GalleryUtilities::putRequestVariable('albumsPath', dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash);
        GalleryUtilities::putRequestVariable('form[migrateUser][1057837154_228147420]', 1);
        GalleryUtilities::putRequestVariable('form[action][import]', 1);

        $results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'migrate:ImportResults'),
				  'status' => array('userImportSuccess' => array('phpunit_foobar' => 1),
						    'userImportFailure' => array(),
                                                    'albumImportFailure' => array(),
                                                    'albumImportSuccess' => array(),
						    'urlRedirect' => false
						   ),
				  'error' => array()),
			    $results);

	/* Verify the user exists */
	list ($ret, $user) = GalleryCoreApi::fetchUserByUsername('phpunit_foobar');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testImportUserFailure() {
	global $gallery;
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();
        GalleryUtilities::putRequestVariable('albumsPath', dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash);
        GalleryUtilities::putRequestVariable('form[migrateUser][1054014347_1233740678]', 1);
        GalleryUtilities::putRequestVariable('form[action][import]', 1);
        $results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'migrate:ImportResults'),
				  'status' => array('userImportFailure' => array('admin' => 1),
						    'userImportSuccess' => array(),
						    'albumImportFailure' => array(),
						    'albumImportSuccess' => array(),
						    'urlRedirect' => false
						    ),
				  'error' => array()),
			    $results);
    }

    function testCancelImport() {
	global $gallery;
        GalleryUtilities::putRequestVariable('form[action][cancel]', 1);
        $results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'migrate:SelectGallery'),
				  'status' => array('userImportFailure' => array(),
						    'userImportSuccess' => array(),
						    'albumImportFailure' => array(),
						    'albumImportSuccess' => array(),
						    'urlRedirect' => false
						    ),
				  'error' => array()),
			    $results);
    }

    function testImportAlbumSuccessful() {
	global $gallery;
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();
	GalleryUtilities::putRequestVariable('albumsPath', dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash);
	GalleryUtilities::putRequestVariable('form[sourceAlbums][album03]', 1);
	GalleryUtilities::putRequestVariable('form[sourceAlbums][album02]', 1);
	GalleryUtilities::putRequestVariable('form[sourceEncoding]','ISO-8859-1');
	GalleryUtilities::putRequestVariable('form[action][import]', 1);
	GalleryUtilities::putRequestVariable('form[destinationAlbumID]',$this->_temporaryAlbumId);

	$results = $this->handleRequest();
	$this->assertEquals(array('album03', 'album02'),
			    array_keys($results['status']['albumImportSuccess']));
	$this->assertEquals(array('view' => 'core:SiteAdmin',
				  'subView' => 'migrate:ImportResults'),
			    $results['redirect']);
	$this->assertEquals(array(), $results['error']);
	$this->assertEquals(array(), $results['status']['userImportFailure']);
	$this->assertEquals(array(), $results['status']['userImportSuccess']);
	$this->assertEquals(array(), $results['status']['albumImportFailure']);
	$testAlbumId = $results['status']['albumImportSuccess']['album03'];

	/* Get the allegedly successfully imported album */
	list($ret, $testAlbum) = GalleryCoreApi::loadEntitiesById($testAlbumId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Get the layout associated with this album */
	list ($ret, $layout) = GalleryCoreApi::fetchLayout($testAlbum);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $settings) = $layout->getSettings($testAlbumId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Get specific values from the layout */
	list ($ret, $rows) = $layout->getParameter('rows',$testAlbumId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $cols) = $layout->getParameter('cols',$testAlbumId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Count the clicks for this item */
	list ($ret, $viewCount) = GalleryCoreApi::fetchItemViewCount($testAlbumId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/*
	 * This is the user that we expect to be associated with this album.
	 * It really shouldn't be the admin, but the test data needs to be
	 * changed to fix it, so we will change it later - probably to
	 * phpunit_foobar, or whatever we are loading in the other unit test
	 */
	list($ret, $testOwner) = GalleryCoreApi::fetchUserByUsername('admin');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Load the thumb and resized image sizes for later comparison */
	list ($ret, $derivativePreferences) = GalleryCoreApi::fetchDerivativePreferencesForItem(array($testAlbumId));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}


	/*
	 * Array of example data
	 * (
	 *   +[title] => Test Album One
	 *   +[description] => No description
	 *   +[summary] =>
	 *   -[bgcolor] =>
	 *   -[textcolor] =>
	 *   -[linkcolor] =>
	 *   -[font] => verdana
	 *   -[border] => 1
	 *   -[bordercolor] => black
	 *   -[returnto] => yes
	 *   +[thumb_size] => 150
	 *   +[resize_size] => 400
	 *   +[rows] => 5
	 *   +[cols] => 5
	 *   -[fit_to_window] => no
	 *   -[use_fullOnly] => no
	 *   -[print_photos] => none
	 *   -[use_exif] => yes
	 *    [perms] => Array
	 *        ( [canRead] => Array
	 *            ( [everybody] => 1 )
	 *            [canViewFullImages] => Array
	 *            ( [everybody] => 1 )
	 *        )
	 *   +[parentAlbumName] => .root
	 *   +[clicks] => 0
	 *   +[clicks_date] => 1056014708
	 *   -[display_clicks] => yes
	 *   -[public_comments] => yes
	 *    [extra_fields] => Array
	 *        ( [0] => Description
	 *        )
	 *   +[name] => album01
	 *   +[owner] => 1054014347u1233740678
	 *   -[last_mod_time] => 1056015246
	 */
	
	
	$this->assertEquals(array('Test Album Three',                    // title
				  '[b]No description[/b]',               // summary
				  NULL,                                  // keywords
				  NULL,                                  // description
				  $testOwner->getId(),                   // owner
				  1056015077,                            // album creation
				  1056015077,                            // clicks counted since
				  20,                                    // count of clicks
				  array(array(                           // thumb and resized sizing preferences
					      'order' => 0,
					      'derivativeType' => 1,
					      'derivativeOperations' => 'thumbnail|150'
					      ),
					
					array('order' => 1,
					      'derivativeType' => 2,
					      'derivativeOperations' => 'scale|400'
					      )
					),
				  3,                                     // rows
				  NULL                                   // cols
				  ),
			    array($testAlbum->getTitle(),                // title
				  $testAlbum->getSummary(),              // summary
				  $testAlbum->getKeywords(),             // keywords
				  $testAlbum->getDescription(),          // description
				  $testAlbum->getownerId(),              // owner
				  $testAlbum->getcreationTimestamp(),    // album creation
				  $testAlbum->getviewedSinceTimestamp(), // clicks counted since
				  $viewCount,                            // count of clicks
				  $derivativePreferences,                // thumb and resized sizing preferences
				  $rows,                                 // rows
				  $cols                                  // cols
				  
				  )
			    );
	/* albumitem Object
	 * (
	 *   +[image] => image Object
	 *        (
	 *           +[name] => canon_ae_1
	 *           +[type] => jpg
	 *           -[width] => 225
	 *           -[height] => 165
	 *           -[resizedName] =>
	 *           +[thumb_x] =>
	 *           +[thumb_y] =>
	 *           +[thumb_width] =>
	 *           +[thumb_height] =>
	 *           -[raw_width] => 225
	 *           -[raw_height] => 165
	 *           -[version] => 10
	 *        )
	 *
	 *   +[caption] => canon_ae_1
	 *    [hidden] =>
	 *   +[highlight] => 1
	 *   +[isAlbumName] =>
	 *   +[clicks] =>
	 *   +[keywords] =>
	 *    [comments] =>
	 *   +[uploadDate] => 1056014783
	 *   +[itemCaptureDate] => Array
	 *        (
	 *           +[0] => 1056014783
	 *        )
	 *
	 *    [extraFields] => Array
	 *        (
	 *        )
	 *)
	 */
	
	
	
	/* Verify item attributes (like order weight) */
	list ($ret, $ids) = GalleryCoreApi::fetchChildItemIds($testAlbum);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(4, count($ids), 'number of children');

	$seenWeights = array();
	foreach ($ids as $id) {
	    list ($ret, $itemViewCount[$id]) = GalleryCoreApi::fetchItemViewCount($id);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    list ($ret, $orderWeight) = GalleryCoreApi::fetchItemOrderWeight($id);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assert(!isset($seenWeights[$orderWeight]), 'Seen this weight before: ' . $orderWeight);
	    $seenWeights[$orderWeight] = 1;
	}
	
	/* Get the allegedly successfully imported items */
	list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[0]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('&#161;Time to migrate!',              // title
				  NULL,                                  // summary
				  'stump grinder chipper shredder',      // keywords
				  'chipper',                             // description
				  $testOwner->getId(),                   // owner
				  1056015116,                            // item creation
				  1056015077,                            // clicks counted since
				  2                                      // count of clicks
				  ),
			    array($testItem->getTitle(),                 // title
				  $testItem->getSummary(),               // summary
				  $testItem->getKeywords(),              // keywords
				  $testItem->getDescription(),           // description
				  $testItem->getownerId(),               // owner
				  $testItem->getcreationTimestamp(),     // item creation
				  $testItem->getviewedSinceTimestamp(),  // clicks counted since
				  $itemViewCount[$testItem->getId()]     // count of clicks
				  ),
			    'item 0');
	$chipperId = $testItem->getId();

	list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[1]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('Test Album Two',                      // title
				  'No description',                      // summary
				  NULL,                                  // keywords
				  NULL,                                  // description
				  $testOwner->getId(),                   // owner
				  1056014506,                            // album creation
				  1056014506,                            // clicks counted since
				  4                                      // count of clicks
				  ),
			    array($testItem->getTitle(),                 // title
				  $testItem->getSummary(),               // summary
				  $testItem->getKeywords(),              // keywords
				  $testItem->getDescription(),           // description
				  $testItem->getownerId(),               // owner
				  $testItem->getcreationTimestamp(),     // album creation
				  $testItem->getviewedSinceTimestamp(),  // clicks counted since
				  $itemViewCount[$testItem->getId()]     // count of clicks
				  ),
			    'item 1');

	list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[2]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(
	   'I Love It Victoria Is the Only One Ready for the Shot this time',  // title
				  NULL,                                  // summary
				  NULL,                                  // keywords
	   'I_Love_It_Victoria_Is_the_Only_One_Ready_for_the_Shot_this_time',  // description
				  $testOwner->getId(),                   // owner
				  1080631485,                            // item creation
				  1056015077,                            // clicks counted since
				  6                                      // count of clicks
				  ),
			    array($testItem->getTitle(),                 // title
				  $testItem->getSummary(),               // summary
				  $testItem->getKeywords(),              // keywords
				  $testItem->getDescription(),           // description
				  $testItem->getownerId(),               // owner
				  $testItem->getcreationTimestamp(),     // item creation
				  $testItem->getviewedSinceTimestamp(),  // clicks counted since
				  $itemViewCount[$testItem->getId()]     // count of clicks
				  ),
			    'item 2');

	list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[3]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('This image is hidden',                // title
				  '',                                    // summary
				  NULL,                                  // keywords
				  'head_left',                           // description
				  $testOwner->getId(),                   // owner
				  1082443249,                            // item creation
				  1056015077,                            // clicks counted since
				  1                                      // count of clicks
				  ),
			    array($testItem->getTitle(),                 // title
				  $testItem->getSummary(),               // summary
				  $testItem->getKeywords(),              // keywords
				  $testItem->getDescription(),           // description
				  $testItem->getownerId(),               // owner
				  $testItem->getcreationTimestamp(),     // item creation
				  $testItem->getviewedSinceTimestamp(),  // clicks counted since
				  $itemViewCount[$testItem->getId()]     // count of clicks
				  ),
			    'item 3');

	if ($this->testComments) {
	    list ($ret, $comments) =
		    GalleryCommentHelper::fetchComments($ids[2], 2, ORDER_ASCENDING);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(1, count($comments), 'number of comments');
	    if (!empty($comments)) {
		$this->assertEquals(array('209.98.212.219',
					  'foo',
					  'This is a terrific picture!  Hooray!',
					  1088916185
					  ),
				    array($comments[0]->_host,
					  $comments[0]->_subject,
					  $comments[0]->_comment,
					  $comments[0]->_date
					 )
				    );
	    }
	}
	/*
	 * [comments] => Array (
	 *     [0] => comment Object (
	 *          [commentText] => "Hooray!  This is a @$@ comment!"
	 *          [datePosted] => "1088663587"
	 *          [IPNumber] => '209.98.212.219'
	 *          [name] => 'Administrator (admin)'
	 *          [UID] => '1054014347_1233740678'
	 *     )
	 * )
	 */
    }
    
    function testG1MigrateMap() {
	global $gallery;
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();
	GalleryUtilities::putRequestVariable('albumsPath', dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash);
	GalleryUtilities::putRequestVariable('form[sourceAlbums][album03]', 1);
	GalleryUtilities::putRequestVariable('form[sourceEncoding]','ISO-8859-1');
	GalleryUtilities::putRequestVariable('form[action][import]', 1);
	GalleryUtilities::putRequestVariable('form[destinationAlbumID]',$this->_temporaryAlbumId);
	GalleryUtilities::putRequestVariable('form[urlRedirect]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('album03'),
			    array_keys($results['status']['albumImportSuccess']));
	$this->assertEquals(array('view' => 'core:SiteAdmin',
				  'subView' => 'migrate:ImportResults'),
			    $results['redirect']);
	$this->assertEquals(array(), $results['error']);
	$this->assertEquals(true, $results['status']['urlRedirect']);

	$testAlbumId = $results['status']['albumImportSuccess']['album03'];
	list($ret, $testAlbum) = GalleryCoreApi::loadEntitiesById($testAlbumId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $ids) = GalleryCoreApi::fetchChildItemIds($testAlbum);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(3, count($ids), 'number of children');

	/* Verify G1->G2 mappings, then delete the data */
	list ($ret, $itemId) = G1MigrateHelper::fetchMapping('album03');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($testAlbumId, $itemId, 'G1->G2 mapping for testAlbum');
	list ($ret, $itemId) = G1MigrateHelper::fetchMapping('album03', 'chipper');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($ids[0], $itemId, 'G1->G2 mapping for testItem');

	$ids[] = $testAlbumId;
	require_once(dirname(__FILE__) . '/../../classes/G1MigrateMap.class');
	$ret = G1MigrateMap::removeMapEntry(array('itemId' => $ids));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /* $album['perms']
     *
     * Album Perms
     * Array(
     *     [canRead] => Array(
     *         [1082614545_1013204231] => 1
     *     )
     *     [canViewFullImages] => Array(
     *         [1082614545_1013204231] => 1
     *     )
     *     [canViewComments] => Array(
     *         [1082614545_1013204231] => 1
     *     )
     *     [canAddComments] => Array(
     *         [1082614545_1013204231] => 1
     *     )
     *     [canChangeText] => Array(
     *         [1082614545_1013204231] => 1
     *     )
     *     [canAddTo] => Array(
     *         [1082614545_1013204231] => 1
     *     )
     *     [canWrite] => Array(
     *         [1082614545_1013204231] => 1
     *     )
     *     [canDeleteFrom] => Array(
     *         [1082614545_1013204231] => 1
     *     )
     *     [canCreateSubAlbum] => Array(
     *         [1082614545_1013204231] => 1
     *     )
     * )
     * Array(
     *     [1082614545_1013204231] => Array(
     *         [0] => canRead
     *         [1] => canViewFullImages
     *         [2] => canViewComments
     *         [3] => canAddComments
     *         [4] => canChangeText
     *         [5] => canAddTo
     *         [6] => canWrite
     *         [7] => canDeleteFrom
     *         [8] => canCreateSubAlbum
     *     )
     * )
     *
     * owner => core.all,comment.all
     *
     * canRead => core.view,core.viewResizes
     * canViewFullImages => core.viewSource
     * canViewComments => comment.view,comment.search
     * canAddComments => comment.add
     * canChangeText => core.edit
     * canAddTo => core.addDataItem
     * canWrite => core.edit
     * canDeleteFrom => core.delete
     * canCreateSubAlbum => core.addAlbumItem
     *
     */
    
    function testImportAlbumPermissions() {
	global $gallery;
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();


	GalleryUtilities::putRequestVariable('albumsPath', dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash);
        GalleryUtilities::putRequestVariable('form[sourceAlbums][album05]', 1);
	GalleryUtilities::putRequestVariable('form[sourceEncoding]','ISO-8859-1');
        GalleryUtilities::putRequestVariable('form[action][import]', 1);
	GalleryUtilities::putRequestVariable('form[destinationAlbumID]',$this->_temporaryAlbumId);

        $results = $this->handleRequest();
	$this->assertEquals(array('album05'),
			    array_keys($results['status']['albumImportSuccess']));
	$this->assertEquals(array('view' => 'core:SiteAdmin',
				  'subView' => 'migrate:ImportResults'),
			    $results['redirect']);
	$this->assertEquals(array(), $results['error']);
	$this->assertEquals(array(), $results['status']['userImportFailure']);
	$this->assertEquals(array(), $results['status']['userImportSuccess']);
	$this->assertEquals(array(), $results['status']['albumImportFailure']);
	$testAlbumId = $results['status']['albumImportSuccess']['album05'];
	/* Get the allegedly successfully imported album */
	list($ret, $testAlbum) = GalleryCoreApi::loadEntitiesById($testAlbumId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/*
	 * This is the user that we expect to be associated with this album.
	 * It really shouldn't be the admin, but the test data needs to be
	 * changed to fix it, so we will change it later - probably to
	 * phpunit_foobar, or whatever we are loading in the other unit test
	 */

	list($ret, $testOwner) = GalleryCoreApi::fetchUserByUsername('admin');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($testAlbum->getownerId()              // owner
				  ),
			    array($testOwner->getId()                   // owner
				  )
			    );
	$testPerms = array();
	$testPermsResult = array();
	
	$testPerms['admin'] = array('core.all' => true,
				    'comment.all' => true && $this->testComments
				    );
	$testPerms['phpunitfoo001'] = array('core.view' => true,
					    'core.viewResizes' => true,
					    'core.viewSource' => true,
					    'comment.view' => true && $this->testComments,
					    'comment.search' => true && $this->testComments,
					    'comment.add' => true && $this->testComments,
					    'core.edit' => true,
					    'core.addDataItem' => true,
					    'core.edit' => true,
					    'core.delete' => true,
					    'core.addAlbumItem' => true
					    );
	foreach ($testPerms as $testUserName => $permsToTest){
	    list($ret, $testUserInstance) = GalleryCoreApi::fetchUserByUsername($testUserName);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    list ($ret, $permissions) =
		    GalleryCoreApi::fetchAllPermissionsForItem($testAlbum->getId(), false);
	    $userPerms = array();
	    $groupPerms = array();
	    foreach ($permissions as $permission) {
		if ($permission['userId']>0) {
		    $userPerms[$permission['userId']][$permission['permission']]=TRUE;
		} else {
		    $groupPerms[$permission['groupId']][$permission['permission']]=TRUE;
		}
	    }
	    foreach ($permsToTest as $permToTest => $expected) {
		if (array_key_exists($testUserInstance->getId(),$userPerms)) {
		    $testPermsResult[$testUserName][$permToTest] =
			    array_key_exists($permToTest,$userPerms[$testUserInstance->getId()]);
		} else {
		    $testPermsResult[$testUserName][$permToTest] = FALSE;
		}
	    }
	}

	$this->assertEquals($testPerms,$testPermsResult);	


	/* Verify item attributes (like order weight) */
	list ($ret, $ids) = GalleryCoreApi::fetchChildItemIds($testAlbum);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(7, count($ids), 'number of children');

	$seenWeights = array();
	foreach ($ids as $id) {
	    list ($ret, $itemViewCount[$id]) = GalleryCoreApi::fetchItemViewCount($id);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    
	    list ($ret, $orderWeight) = GalleryCoreApi::fetchItemOrderWeight($id);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assert(!isset($seenWeights[$orderWeight]), 'Seen this weight before: ' . $orderWeight);
	    $seenWeights[$orderWeight] = 1;
	}
	
	/* Get the allegedly successfully imported items */
	list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[0]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($testOwner->getId(),
			    $testItem->getownerId(),
			    'item 0');

	list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[1]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($testOwner->getId(),
			    $testItem->getownerId(),
			    'item 1');


	list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[2]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($testUserInstance->getId(),
			    $testItem->getownerId(),
			    'item 2');

	list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[3]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($this->guestUserId +0,
			    $testItem->getownerId(),
			    'item 3');
	list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[4]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($testOwner->getId(),
			    $testItem->getownerId(),
			    'item 4');
	list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[5]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($this->guestUserId +0,
			    $testItem->getownerId(),
			    'item 5');
	list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[6]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($testOwner->getId(),
			    $testItem->getownerId(),
			    'item 6');
    }

    function testImportAlbumPermissions2() {
	global $gallery;
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();


	GalleryUtilities::putRequestVariable('albumsPath', dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash);
        GalleryUtilities::putRequestVariable('form[sourceAlbums][album01]', 1);
        GalleryUtilities::putRequestVariable('form[action][import]', 1);
	GalleryUtilities::putRequestVariable('form[destinationAlbumID]',$this->_temporaryAlbumId);

        $results = $this->handleRequest();
	$this->assertEquals(array('album01'),
			    array_keys($results['status']['albumImportSuccess']));
	$this->assertEquals(array('view' => 'core:SiteAdmin',
				  'subView' => 'migrate:ImportResults'),
			    $results['redirect']);
	$this->assertEquals(array(), $results['error']);
	$this->assertEquals(array(), $results['status']['userImportFailure']);
	$this->assertEquals(array(), $results['status']['userImportSuccess']);
	$this->assertEquals(array(), $results['status']['albumImportFailure']);
	$testAlbumId = $results['status']['albumImportSuccess']['album01'];
	/* Get the allegedly successfully imported album */
	list($ret, $testAlbum) = GalleryCoreApi::loadEntitiesById($testAlbumId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/*
	 * This is the user that we expect to be associated with this album.
	 * It really shouldn't be the admin, but the test data needs to be
	 * changed to fix it, so we will change it later - probably to
	 * phpunit_foobar, or whatever we are loading in the other unit test
	 */

	list($ret, $testOwner) = GalleryCoreApi::fetchUserByUsername('admin');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($testAlbum->getownerId()              // owner
				  ),
			    array($testOwner->getId()                   // owner
				  )
			    );
	$testPerms = array();
	$testPermsResult = array();
	$testPerms['admin'] = array('core.all' => true,
				    'comment.all' => true && $this->testComments
				    );
	$testPerms['phpunitfoo001'] = array('core.view' => true,
					    'core.viewResizes' => true,
					    'core.viewSource' => false,
					    'comment.view' => false && $this->testComments,
					    'comment.search' => false && $this->testComments,
					    'comment.add' => false && $this->testComments,
					    'core.edit' => false,
					    'core.addDataItem' => false,
					    'core.edit' => false,
					    'core.delete' => true,
					    'core.addAlbumItem' => false
					    );
	foreach ($testPerms as $testUserName => $permsToTest){
	    list($ret, $testUserInstance) = GalleryCoreApi::fetchUserByUsername($testUserName);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    list ($ret, $permissions) =
		    GalleryCoreApi::fetchAllPermissionsForItem($testAlbum->getId(), false);
	    $userPerms = array();
	    $groupPerms = array();
	    foreach ($permissions as $permission) {
		if ($permission['userId']>0) {
		    $userPerms[$permission['userId']][$permission['permission']]=TRUE;
		} else {
		    $groupPerms[$permission['groupId']][$permission['permission']]=TRUE;
		}
	    }
	    foreach ($permsToTest as $permToTest => $expected) {
		if (array_key_exists($testUserInstance->getId(),$userPerms)) {
		    $testPermsResult[$testUserName][$permToTest] =
			    array_key_exists($permToTest,$userPerms[$testUserInstance->getId()]);
		} else {
		    $testPermsResult[$testUserName][$permToTest] = FALSE;
		}
	    }
	}
	$this->assertEquals($testPerms,$testPermsResult);	
    }

    
    function testImportno_NO() {
	if (function_exists('iconv')
	    || function_exists('mb_convert_encoding')
	    || function_exists('recode_string')
	    || phpversion() >= '3.0.0'
	    ) {
	    global $gallery;
	    $platform = $gallery->getPlatform();
	    $slash = $platform->getDirectorySeparator();
	    
	    GalleryUtilities::putRequestVariable('albumsPath', dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash);
	    GalleryUtilities::putRequestVariable('form[sourceAlbums][no_NO]', 1);
	    GalleryUtilities::putRequestVariable('form[sourceEncoding]','ISO-8859-1');
	    GalleryUtilities::putRequestVariable('form[action][import]', 1);
	    GalleryUtilities::putRequestVariable('form[destinationAlbumID]',$this->_temporaryAlbumId);
	    
	    $results = $this->handleRequest();
	    $this->assertEquals(array('no_NO'),
				array_keys($results['status']['albumImportSuccess']));
	    $this->assertEquals(array('view' => 'core:SiteAdmin',
				      'subView' => 'migrate:ImportResults'),
				$results['redirect']);
	    $this->assertEquals(array(), $results['error']);
	    $this->assertEquals(array(), $results['status']['userImportFailure']);
	    $this->assertEquals(array(), $results['status']['userImportSuccess']);
	    $this->assertEquals(array(), $results['status']['albumImportFailure']);
	    $testAlbumId = $results['status']['albumImportSuccess']['no_NO'];
	    /* Get the allegedly successfully imported album */
	    list($ret, $testAlbum) = GalleryCoreApi::loadEntitiesById($testAlbumId);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    
	    $this->assertEquals(array('Help with the migration module',      // title
				      'Test',                                // summary
				      NULL,                                  // keywords
				      NULL,                                  // description
				      1090162985,                            // album creation
				      1090162985,                            // clicks counted since
				      ),
				array($testAlbum->getTitle(),                // title
				      $testAlbum->getSummary(),              // summary
				      $testAlbum->getKeywords(),             // keywords
				      $testAlbum->getDescription(),          // description
				      $testAlbum->getcreationTimestamp(),    // album creation
				      $testAlbum->getviewedSinceTimestamp()  // clicks counted since
				      )
				);
    
	    /*
	     * This is the user that we expect to be associated with this album.
	     * It really shouldn't be the admin, but the test data needs to be
	     * changed to fix it, so we will change it later - probably to
	     * phpunit_foobar, or whatever we are loading in the other unit test
	     */
	    
	    list($ret, $testOwner) = GalleryCoreApi::fetchUserByUsername('admin');
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(array($testAlbum->getownerId()              // owner
				      ),
				array($testOwner->getId()                   // owner
				      )
				);
	    
	    $testPerms = array();
	    $testPermsResult = array();
	    $testPerms['admin'] = array('core.all' => true,
					'comment.all' => true && $this->testComments
					);
	    $testPerms['phpunitfoo001'] = array('core.view' => false,
						'core.viewResizes' => false,
						'core.viewSource' => false,
						'comment.view' => false && $this->testComments,
						'comment.search' => false && $this->testComments,
						'comment.add' => false && $this->testComments,
						'core.edit' => false,
						'core.addDataItem' => false,
						'core.edit' => false,
						'core.delete' => false,
						'core.addAlbumItem' => false
						);
	    foreach ($testPerms as $testUserName => $permsToTest){
		list($ret, $testUserInstance) = GalleryCoreApi::fetchUserByUsername($testUserName);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		list ($ret, $permissions) =
			GalleryCoreApi::fetchAllPermissionsForItem($testAlbum->getId(), false);
		$userPerms = array();
		$groupPerms = array();
		foreach ($permissions as $permission) {
		    if ($permission['userId']>0) {
			$userPerms[$permission['userId']][$permission['permission']]=TRUE;
		    } else {
			$groupPerms[$permission['groupId']][$permission['permission']]=TRUE;
		    }
		}
		foreach ($permsToTest as $permToTest => $expected) {
		    if (array_key_exists($testUserInstance->getId(),$userPerms)) {
			$testPermsResult[$testUserName][$permToTest] =
				array_key_exists($permToTest,$userPerms[$testUserInstance->getId()]);
		    } else {
			$testPermsResult[$testUserName][$permToTest] = FALSE;
		    }
		}
	    }
	    $this->assertEquals($testPerms,$testPermsResult);	
	    
	    list ($ret, $ids) = GalleryCoreApi::fetchChildItemIds($testAlbum);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    
	    /* Get the allegedly successfully imported albumItem */
	    list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[0]);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(array('Western European (ISO)' . "\r\n"
				      . 'Hello World ' . "\r\n"
				      . 'Norwegian Norsk' . "\r\n"
				      . 'Hallo Verden' . "\r\n"
				      . 'Gallery er s&#229; utrolig bra at jeg har satt det opp t...',              // title
				      '',                                  // summary
				      NULL,      // keywords
				      'Western European (ISO)' . "\r\n"
				      . 'Hello World ' . "\r\n"
				      . 'Norwegian Norsk' . "\r\n"
				      . 'Hallo Verden' . "\r\n"
				      . 'Gallery er s&#229; utrolig bra at jeg har satt det opp til flere venner. ',                             // description
				      1090163050,                            // album creation
				      1090162985                             // clicks counted since
				      
				      ),
				array($testItem->getTitle(),                 // title
				      $testItem->getSummary(),               // summary
				      $testItem->getKeywords(),              // keywords
				      $testItem->getDescription(),           // description
				      $testItem->getcreationTimestamp(),     // album creation
				      $testItem->getviewedSinceTimestamp()   // clicks counted since
				      )
				);
	}   
    }

    function testImportfr_FR() {
	if (function_exists('iconv')
	    || function_exists('mb_convert_encoding')
	    || function_exists('recode_string')
	    || phpversion() >= '3.0.0'
	    ) {
	    global $gallery;
	    $platform = $gallery->getPlatform();
	    $slash = $platform->getDirectorySeparator();
	    
	    GalleryUtilities::putRequestVariable('albumsPath', dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash);
	    GalleryUtilities::putRequestVariable('form[sourceAlbums][fr_FR]', 1);
	    GalleryUtilities::putRequestVariable('form[sourceEncoding]','ISO-8859-1');
	    GalleryUtilities::putRequestVariable('form[action][import]', 1);
	    GalleryUtilities::putRequestVariable('form[destinationAlbumID]',$this->_temporaryAlbumId);
	    
	    $results = $this->handleRequest();
	    $this->assertEquals(array('fr_FR'),
				array_keys($results['status']['albumImportSuccess']));
	    $this->assertEquals(array('view' => 'core:SiteAdmin',
				      'subView' => 'migrate:ImportResults'),
				$results['redirect']);
	    $this->assertEquals(array(), $results['error']);
	    $this->assertEquals(array(), $results['status']['userImportFailure']);
	    $this->assertEquals(array(), $results['status']['userImportSuccess']);
	    $this->assertEquals(array(), $results['status']['albumImportFailure']);
	    $testAlbumId = $results['status']['albumImportSuccess']['fr_FR'];
	    /* Get the allegedly successfully imported album */
	    list($ret, $testAlbum) = GalleryCoreApi::loadEntitiesById($testAlbumId);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(array('G1 to G2 Callery',                    // title
				      NULL,                                  // summary
				      NULL,                                  // keywords
				      'Some summary',                        // description
				      1084222662,                            // album creation
				      1084222662                             // clicks counted since
				      ),
				array($testAlbum->getTitle(),                 // title
				      $testAlbum->getSummary(),               // summary
				      $testAlbum->getKeywords(),              // keywords
				      $testAlbum->getDescription(),           // description
				      $testAlbum->getcreationTimestamp(),     // album creation
				      $testAlbum->getviewedSinceTimestamp()   // clicks counted since
				      )
				);
	    
	    /*
	     * This is the user that we expect to be associated with this album.
	     * It really shouldn't be the admin, but the test data needs to be
	     * changed to fix it, so we will change it later - probably to
	     * phpunit_foobar, or whatever we are loading in the other unit test
	     */
	    
	    list($ret, $testOwner) = GalleryCoreApi::fetchUserByUsername('admin');
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(array($testAlbum->getownerId()              // owner
				      ),
				array($testOwner->getId()                   // owner
				      )
				);
	    
	    $testPerms = array();
	    $testPermsResult = array();
	    $testPerms['admin'] = array('core.all' => true,
					'comment.all' => true && $this->testComments
					);
	    $testPerms['phpunitfoo001'] = array('core.view' => false,
						'core.viewResizes' => false,
						'core.viewSource' => false,
						'comment.view' => false && $this->testComments,
						'comment.search' => false && $this->testComments,
						'comment.add' => false && $this->testComments,
						'core.edit' => false,
						'core.addDataItem' => false,
						'core.edit' => false,
						'core.delete' => false,
						'core.addAlbumItem' => false
						);
	    foreach ($testPerms as $testUserName => $permsToTest){
		list($ret, $testUserInstance) = GalleryCoreApi::fetchUserByUsername($testUserName);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		list ($ret, $permissions) =
			GalleryCoreApi::fetchAllPermissionsForItem($testAlbum->getId(), false);
		$userPerms = array();
		$groupPerms = array();
		foreach ($permissions as $permission) {
		    if ($permission['userId']>0) {
			$userPerms[$permission['userId']][$permission['permission']]=TRUE;
		} else {
		    $groupPerms[$permission['groupId']][$permission['permission']]=TRUE;
		}
		}
		foreach ($permsToTest as $permToTest => $expected) {
		    if (array_key_exists($testUserInstance->getId(),$userPerms)) {
			$testPermsResult[$testUserName][$permToTest] =
				array_key_exists($permToTest,$userPerms[$testUserInstance->getId()]);
		    } else {
			$testPermsResult[$testUserName][$permToTest] = FALSE;
		    }
		}
	    }
	    $this->assertEquals($testPerms,$testPermsResult);	
	    
	    list ($ret, $ids) = GalleryCoreApi::fetchChildItemIds($testAlbum);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    
	    /* Get the allegedly successfully imported albumItem */
	    list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[0]);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(array('CHARSET=8859-1, fr-Fr, Hello World, french, fran&#231;ais, Bonjour Monde'
				      . "\r\n"
				      . 'Voil&#224; du texte contenant des caract&#232;res a...',              // title
				      '',                                  // summary
				      NULL,      // keywords
				      'CHARSET=8859-1, fr-Fr, Hello World, french, fran&#231;ais, Bonjour Monde'
				      . "\r\n"
				      . 'Voil&#224; du texte contenant des caract&#232;res '
				      . 'accentu&#233;s. &#231;&#224; donne une id&#233;e de la migration.',           // description
				      1084222738,                            // album creation
				      1084222662                             // clicks counted since
				      ),
				array($testItem->getTitle(),                 // title
				      $testItem->getSummary(),               // summary
				      $testItem->getKeywords(),              // keywords
				      $testItem->getDescription(),           // description
				      $testItem->getcreationTimestamp(),     // album creation
				      $testItem->getviewedSinceTimestamp()   // clicks counted since
				      )
				);
	}
    }
    
    function testImportKOI_8() {
	if (function_exists('iconv')
	    || function_exists('mb_convert_encoding')
	    || function_exists('recode_string')
	    || phpversion() >= '3.0.0'
	    ) {
	    global $gallery;
	    $platform = $gallery->getPlatform();
	    $slash = $platform->getDirectorySeparator();
	    
	    GalleryUtilities::putRequestVariable('albumsPath', dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash);
	    GalleryUtilities::putRequestVariable('form[sourceAlbums][KOI-8]', 1);
	    GalleryUtilities::putRequestVariable('form[sourceEncoding]','KOI8-R');
	    GalleryUtilities::putRequestVariable('form[action][import]', 1);
	    GalleryUtilities::putRequestVariable('form[destinationAlbumID]',$this->_temporaryAlbumId);
	    
	    $results = $this->handleRequest();
	    $this->assertEquals(array('KOI-8'),
				array_keys($results['status']['albumImportSuccess']));
	    $this->assertEquals(array('view' => 'core:SiteAdmin',
				      'subView' => 'migrate:ImportResults'),
				$results['redirect']);
	    $this->assertEquals(array(), $results['error']);
	    $this->assertEquals(array(), $results['status']['userImportFailure']);
	    $this->assertEquals(array(), $results['status']['userImportSuccess']);
	    $this->assertEquals(array(), $results['status']['albumImportFailure']);
	    $testAlbumId = $results['status']['albumImportSuccess']['KOI-8'];
	    /* Get the allegedly successfully imported album */
	    list($ret, $testAlbum) = GalleryCoreApi::loadEntitiesById($testAlbumId);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    
	    $this->assertEquals(array('&#1053;&#1077;&#1085;&#1072;&#1079;&#1074;&#1072;&#1085;&#1085;&#1099;&#1081;',                    // title
				      NULL,                                  // summary
				      NULL,                                  // keywords
				      NULL,               // description
				      1089666683,                            // album creation
				      1089666683,                            // clicks counted since
				      ),
				array($testAlbum->getTitle(),                // title
				      $testAlbum->getSummary(),              // summary
				      $testAlbum->getKeywords(),             // keywords
				      $testAlbum->getDescription(),          // description
				      $testAlbum->getcreationTimestamp(),    // album creation
				      $testAlbum->getviewedSinceTimestamp()  // clicks counted since
				      )
				);
	    /*
	     * This is the user that we expect to be associated with this album.
	     * It really shouldn't be the admin, but the test data needs to be
	     * changed to fix it, so we will change it later - probably to
	     * phpunit_foobar, or whatever we are loading in the other unit test
	     */
	    
	    list($ret, $testOwner) = GalleryCoreApi::fetchUserByUsername('admin');
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(array($testAlbum->getownerId()              // owner
				      ),
				array($testOwner->getId()                   // owner
				      )
				);
	    
	    $testPerms = array();
	    $testPermsResult = array();
	    $testPerms['admin'] = array('core.all' => true,
					'comment.all' => true && $this->testComments
					);
	    $testPerms['phpunitfoo001'] = array('core.view' => false,
						'core.viewResizes' => false,
						'core.viewSource' => false,
						'comment.view' => false && $this->testComments,
						'comment.search' => false && $this->testComments,
						'comment.add' => false && $this->testComments,
						'core.edit' => false,
						'core.addDataItem' => false,
						'core.edit' => false,
						'core.delete' => false,
						'core.addAlbumItem' => false
						);
	    foreach ($testPerms as $testUserName => $permsToTest){
		list($ret, $testUserInstance) = GalleryCoreApi::fetchUserByUsername($testUserName);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		list ($ret, $permissions) =
			GalleryCoreApi::fetchAllPermissionsForItem($testAlbum->getId(), false);
		$userPerms = array();
		$groupPerms = array();
		foreach ($permissions as $permission) {
		    if ($permission['userId']>0) {
			$userPerms[$permission['userId']][$permission['permission']]=TRUE;
		    } else {
			$groupPerms[$permission['groupId']][$permission['permission']]=TRUE;
		    }
		}
		foreach ($permsToTest as $permToTest => $expected) {
		    if (array_key_exists($testUserInstance->getId(),$userPerms)) {
			$testPermsResult[$testUserName][$permToTest] =
				array_key_exists($permToTest,$userPerms[$testUserInstance->getId()]);
		    } else {
			$testPermsResult[$testUserName][$permToTest] = FALSE;
		    }
		}
	    }
	    $this->assertEquals($testPerms,$testPermsResult);	
	    
	    list ($ret, $ids) = GalleryCoreApi::fetchChildItemIds($testAlbum);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    
	    /* Get the allegedly successfully imported albumItem */
	    list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[0]);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(array("Russian - KOI-8\r\n"
				      . "Hello World\r\n"
				      . "Russian\r\n"
				      . "&#1056;&#1091;&#1089;&#1089;&#1082;&#1080;&#1081;\r\n"
				      . "&#1047;&#1076;&#1088;&#1072;&#1074;...",              // title
				      '',                                  // summary
				      'Gallery 2 migration testing',      // keywords
				      "Russian - KOI-8\r\n"
				      . "Hello World\r\n"
				      . "Russian\r\n"
				      . "&#1056;&#1091;&#1089;&#1089;&#1082;&#1080;&#1081;\r\n"
				      . "&#1047;&#1076;&#1088;&#1072;&#1074;&#1089;&#1090;&#1074;&#1091;&#1081; &#1084;&#1080;&#1088;",                             // description
				      1089666791,                            // album creation
				      1089666683                             // clicks counted since
				      
				      ),
				array($testItem->getTitle(),                 // title
				      $testItem->getSummary(),               // summary
				      $testItem->getKeywords(),              // keywords
				      $testItem->getDescription(),           // description
				      $testItem->getcreationTimestamp(),     // album creation
				      $testItem->getviewedSinceTimestamp()   // clicks counted since
				      )
				);
	}
    }
    
    function testConvertHtmlToBbcode() {
	/* Basic HTML styling with edge cases */
	$this->assertEquals('&ntilde;o' . "\n" . 'this',
			    ConfirmImportController::convertHtmlToBbcode('&ntilde;o'. "\n" . 'this'));
			    
	$this->assertEquals('Se&ntilde;or Guapo&#039;s favorite!',
			    ConfirmImportController::convertHtmlToBbcode('Se&ntilde;or Guapo\'s favorite!'));
	$this->assertEquals('[b]bold[/b]',
			    ConfirmImportController::convertHtmlToBbcode('<b>bold</b>'));
	$this->assertEquals('[i]italic[/i]',
			    ConfirmImportController::convertHtmlToBbcode('<i>italic</i>'));
	$this->assertEquals('[i]italic[/i]',
			    ConfirmImportController::convertHtmlToBbcode('<em>italic</em>'));
	$this->assertEquals('[b]italic[/b]',
			    ConfirmImportController::convertHtmlToBbcode('<strong>italic</strong>'));
	$this->assertEquals("\n",
			    ConfirmImportController::convertHtmlToBbcode('<br>'));
	$this->assertEquals("\n",
			    ConfirmImportController::convertHtmlToBbcode('<br/>'));
	$this->assertEquals("\n",
			    ConfirmImportController::convertHtmlToBbcode('<br />'));

	/* Image HTML with edge cases */
	$this->assertEquals('[img]foo.jpg[/img]',
			    ConfirmImportController::convertHtmlToBbcode('<img src=\'foo.jpg\'>'));
	$this->assertEquals('[img]foo.jpg[/img]',
			    ConfirmImportController::convertHtmlToBbcode('<img src="foo.jpg">'));
	$this->assertEquals('[img]foo.jpg[/img]',
			    ConfirmImportController::convertHtmlToBbcode('<img src=foo.jpg>'));
	$this->assertEquals('[img]foo.jpg[/img]',
			    ConfirmImportController::convertHtmlToBbcode('<img style=foo src=\'foo.jpg\'>'));
	$this->assertEquals('[img]foo.jpg[/img]',
			    ConfirmImportController::convertHtmlToBbcode('<img src=\'foo.jpg\' class="bar">'));
	$this->assertEquals('[img]foo.jpg[/img]',
			    ConfirmImportController::convertHtmlToBbcode('<img style="foo" src=\'foo.jpg\' class=\'bar\'>'));
 
	/* List HTML with edge cases */
	$this->assertEquals('[list][/list]',
			    ConfirmImportController::convertHtmlToBbcode('<ul></ul>'));
	$this->assertEquals('[list][*]foo[/list]',
			    ConfirmImportController::convertHtmlToBbcode('<ul><li>foo</li></ul>'));
	$this->assertEquals('[list][*]foo[/list]',
			    ConfirmImportController::convertHtmlToBbcode('<ul><li>foo</ul>'));
 
	/* URL HTML with edge cases */
	$this->assertEquals('[url=http://google.com]Google[/url]',
			    ConfirmImportController::convertHtmlToBbcode('<a href="http://google.com">Google</a>'));
	$this->assertEquals('[url=http://google.com]Google[/url][url=http://poogle.com]Poogle[/url]',
			    ConfirmImportController::convertHtmlToBbcode('<a href="http://google.com">Google</a><a href="http://poogle.com">Poogle</a>'));
	$this->assertEquals('[url=http://google.com]Google[/url]',
			    ConfirmImportController::convertHtmlToBbcode('<a href=\'http://google.com\'>Google</a>'));
	$this->assertEquals('[url=http://google.com]Google[/url]',
			    ConfirmImportController::convertHtmlToBbcode('<a title="foo" href="http://google.com" class="bar">Google</a>'));
	$this->assertEquals('[url=http://google.com]Google[/url]',
			    ConfirmImportController::convertHtmlToBbcode('<a title=foo href=http://google.com class=bar>Google</a>'));
	$this->assertEquals('[url=http://google.com]Google[/url]',
			    ConfirmImportController::convertHtmlToBbcode('<a href=http://google.com class=bar>Google</a>'));
	$this->assertEquals('[url=http://google.com]Google[/url]',
			    ConfirmImportController::convertHtmlToBbcode('<a title=foo href=http://google.com>Google</a>'));
	$this->assertEquals('[url=http://www.topozone.com/map.asp?z=11&amp;n=4163644&amp;e=275692&amp;s=25&amp;size=m&amp;u=1]Topo[/url]',
			    ConfirmImportController::convertHtmlToBbcode('<a href="http://www.topozone.com/map.asp?z=11&n=4163644&e=275692&s=25&size=m&u=1">Topo</a>'));

 

       /* Mixed HTML */
	$this->assertEquals('[url=http://google.com][i]Google[/i][/url]',
			    ConfirmImportController::convertHtmlToBbcode('<a href="http://google.com"><i>Google</i></a>'));
	$this->assertEquals('[b][url=http://google.com]Google[/url][/b]',
			    ConfirmImportController::convertHtmlToBbcode('<strong><a href="http://google.com">Google</a></strong>'));

 
	/* Malformed HTML tags should not be turned into BBCode, but we can't stop it */
	$this->assertEquals('[i][b]interleaved[/i][/b]', 
			    ConfirmImportController::convertHtmlToBbcode('<i><b>interleaved</i></b>'));

       /* Non-supported HTML is stripped completely */
	$this->assertEquals('foo',
			    ConfirmImportController::convertHtmlToBbcode('<hr><h1 title="foo">foo</h1>'));

	/*
	 * We don't handle this correctly, yet
         * $this->assertEquals('&lt;li&gt;foo',
	 *     ConfirmImportController::convertHtmlToBbcode('<li>foo'));
	 */
    }

}
?>
