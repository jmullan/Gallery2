<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Migrate
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ConfirmImport controller tests
 * @package Migrate
 * @subpackage PHPUnit
 */
class ConfirmImportControllerTest extends GalleryControllerTestCase {
    var $temporaryAlbumID;
    var $phpunitMigrateLockIds;
    
    function ConfirmImportControllerTest($methodName) {
        $this->GalleryControllerTestCase($methodName, 'migrate:ConfirmImport');
    }

    function setUp() {
        global $gallery;

	/* get id of root album */
	list ($ret, $rootId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.rootAlbum');
	if ($ret->isError()) {
	    print "<p><b>ERROR getting root id</b></p>";
	    print $ret->getAsHtml();
	}
	/* Try to root album */
	list ($ret, $rootObject) = GalleryCoreApi::loadEntitiesById($rootId);
	if ($ret->isError()) {
	    print "<p><b>ERROR loading root album</b></p>";
	    print $ret->getAsHtml();	    
	}

	/* create a new album instance - we need this to actually create an
	 * album
	 */
 	list ($ret, $newAlbumInstance) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryAlbumItem');
	if ($ret->isError()) {
	    print "<p><b>ERROR creating new album instance</b></p>";
	    print $ret->getAsHtml();
	}
	
		
	/* Get a lock on the root album */
	list ($ret, $phpunitMigrateLockIds[]) = GalleryCoreApi::acquireReadLock($rootObject->getId());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	/* create an album.  Minimize (but not eliminate) collisions by
	 * appending a timestamp
	 */
	$ret = $newAlbumInstance->create($rootId, 'php_unit_migrate');
	if ($ret->isError()) {
	    if ($ret->getErrorCode() & ERROR_COLLISION) {
		print "<p><b>ERROR collision $tempAlbumName</b></p>";
		print $ret->getAsHtml();
	    } else {
		print "<p><b>ERROR creating album $tempAlbumName</b> in $rootId</p>";
		print $ret->getAsHtml();		
	    }
	}
	$ret = $newAlbumInstance->save();
	if ($ret->isError()) {
	    print "<p><b>ERROR saving test album</b></p>";
	    print $ret->getAsHtml();
	}
	$this->temporaryAlbumID = $newAlbumInstance->getId();

	$ret = GalleryCoreApi::releaseLocks($phpunitMigrateLockIds);
	if ($ret->isError()) {
	    print "<p><b>ERROR releasing locks</b></p>";
	    print $ret->getAsHtml();
	}
	parent::setUp();
    }

    function tearDown() {
        global $gallery;
	/* Clean up our test user */
	list ($ret, $user) = GalleryCoreApi::fetchUserByUsername('phpunit_foobar');
	if ($ret->isSuccess()) {
	    $ret = GalleryCoreApi::deleteEntityById($user->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	/* Clean up our test album */
	
	$ret = GalleryCoreApi::deleteEntityById($this->temporaryAlbumID);
	if ($ret->isError()) {
	    print "<p><b>ERROR deleting" . $this->temporaryAlbumID . "</b></p>";
	    print $ret->getAsHtml();
	}
        parent::tearDown();
    }

    function testImportUserSuccessful() {
	global $gallery;
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();
        GalleryUtilities::putRequestVariable('albumsPath', dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash);
        GalleryUtilities::putRequestVariable('form[migrateUser][1057837154_228147420]', 1);
        GalleryUtilities::putRequestVariable('form[action][import]', 1);

        $results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'migrate:ImportResults'),
				  'status' => array('userImportSuccess' => array('phpunit_foobar' => 1),
						    'userImportFailure' => array(),
                                                    'albumImportFailure' => array(),
                                                    'albumImportSuccess' => array()
						   ),
				  'error' => array()),
			    $results);

	/* Verify the user exists */
	list ($ret, $user) = GalleryCoreApi::fetchUserByUsername('phpunit_foobar');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testImportUserFailure() {
	global $gallery;
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();
        GalleryUtilities::putRequestVariable('albumsPath', dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash);
        GalleryUtilities::putRequestVariable('form[migrateUser][1054014347_1233740678]', 1);
        GalleryUtilities::putRequestVariable('form[action][import]', 1);
        $results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'migrate:ImportResults'),
				  'status' => array('userImportFailure' => array('admin' => 1),
						    'userImportSuccess' => array(),
						    'albumImportFailure' => array(),
						    'albumImportSuccess' => array()
						    ),
				  'error' => array()),
			    $results);
    }

    function testCancelImport() {
	global $gallery;
        GalleryUtilities::putRequestVariable('form[action][cancel]', 1);
        $results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'migrate:SelectGallery'),
				  'status' => array('userImportFailure' => array(),
						    'userImportSuccess' => array(),
						    'albumImportFailure' => array(),
						    'albumImportSuccess' => array()
						    ),
				  'error' => array()),
			    $results);
    }

    function testImportAlbumSuccessful() {
	global $gallery;
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();
        GalleryUtilities::putRequestVariable('albumsPath', dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash);
        GalleryUtilities::putRequestVariable('form[sourceAlbums][album03]', 1);
        GalleryUtilities::putRequestVariable('form[action][import]', 1);
	GalleryUtilities::putRequestVariable('form[destinationAlbumID]',$this->temporaryAlbumID);
	
        $results = $this->handleRequest();
	$this->assertEquals(array('album03'),
			    array_keys($results['status']['albumImportSuccess'])
			    );
	$this->assertEquals(array('view' => 'core:SiteAdmin',
				  'subView' => 'migrate:ImportResults'),
			    $results['redirect']
			    );
	$this->assertEquals(array(),
			    $results['error']
			    );
	$this->assertEquals(array(),
			    $results['status']['userImportFailure']
			    );
	$this->assertEquals(array(),
			    $results['status']['userImportSuccess']
			    );
	$this->assertEquals(array(),
			    $results['status']['albumImportFailure']
			    );
	$testAlbumId = $results['status']['albumImportSuccess']['album03'];
	list($ret, $testAlbum) = GalleryCoreApi::loadEntitiesById($testAlbumId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	list ($ret, $layout) = GalleryCoreApi::fetchLayout($testAlbum);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list ($ret, $settings) = $layout->getSettings($testAlbumId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list ($ret, $rows) = $layout->getParameter('rows',$testAlbumId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list ($ret, $cols) = $layout->getParameter('cols',$testAlbumId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list ($ret, $viewCount) = GalleryCoreApi::fetchItemViewCount($testAlbumId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list($ret, $testOwner) = GalleryCoreApi::fetchUserByUsername('admin');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list ($ret, $derivativePreferences) = GalleryCoreApi::fetchDerivativePreferencesForItem($testAlbumId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$this->assertEquals(array($testAlbum->getTitle(),
				  $testAlbum->getSummary(),
				  $testAlbum->getKeywords(),
				  $testAlbum->getDescription(),
				  $testAlbum->getownerId(),
				  $testAlbum->getcreationTimestamp(),
				  $testAlbum->getviewedSinceTimestamp(),
				  $viewCount,
				  $derivativePreferences,
				  $rows,
				  $cols

				  ),
			    array('Test Album Three',
				  NULL,
				  NULL,
				  'No description',
				  $testOwner->getId(),
				  1056016982,
				  1056015077,
				  2,
				  array(array(
					      'order' => 0,
					      'derivativeType' => 1,
					      'derivativeOperations' => 'thumbnail|150'
					      ),

					array('order' => 1,
					      'derivativeType' => 2,
					      'derivativeOperations' => 'scale|400'
					      )
					),
				  3,
				  NULL
				  )
			    );
	
    }
}
?>
