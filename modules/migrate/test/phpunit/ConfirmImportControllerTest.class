<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Migrate
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ConfirmImport controller tests
 * @package Migrate
 * @subpackage PHPUnit
 */
class ConfirmImportControllerTest extends GalleryControllerTestCase {
    var $_temporaryAlbumId;
    //    var $_phpUnitMigrateLockIds;
    
    function ConfirmImportControllerTest($methodName) {
        $this->GalleryControllerTestCase($methodName, 'migrate:ConfirmImport');
    }

    function setUp() {
        global $gallery;

	parent::setUp();

	list ($ret, $this->_temporaryAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Assign our test layout */
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_temporaryAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_temporaryAlbum->setLayout('matrix');
	$ret = $this->_temporaryAlbum->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$this->_temporaryAlbumId = $this->_temporaryAlbum->getId();
    }

    function tearDown() {
        global $gallery;

	/* Clean up our test user */
	list ($ret, $user) = GalleryCoreApi::fetchUserByUsername('phpunit_foobar');
	if ($ret->isSuccess()) {
	    $ret = GalleryCoreApi::deleteEntityById($user->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* Clean up our test album */
	$ret = GalleryCoreApi::deleteEntityById($this->_temporaryAlbumId);
	if ($ret->isError()) {
	    print "<p><b>ERROR deleting" . $this->_temporaryAlbumId . "</b></p>";
	    print $ret->getAsHtml();
	}
	
        parent::tearDown();
    }

    function testImportUserSuccessful() {
	global $gallery;
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();
        GalleryUtilities::putRequestVariable('albumsPath', dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash);
        GalleryUtilities::putRequestVariable('form[migrateUser][1057837154_228147420]', 1);
        GalleryUtilities::putRequestVariable('form[action][import]', 1);

        $results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'migrate:ImportResults'),
				  'status' => array('userImportSuccess' => array('phpunit_foobar' => 1),
						    'userImportFailure' => array(),
                                                    'albumImportFailure' => array(),
                                                    'albumImportSuccess' => array()
						   ),
				  'error' => array()),
			    $results);

	/* Verify the user exists */
	list ($ret, $user) = GalleryCoreApi::fetchUserByUsername('phpunit_foobar');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testImportUserFailure() {
	global $gallery;
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();
        GalleryUtilities::putRequestVariable('albumsPath', dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash);
        GalleryUtilities::putRequestVariable('form[migrateUser][1054014347_1233740678]', 1);
        GalleryUtilities::putRequestVariable('form[action][import]', 1);
        $results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'migrate:ImportResults'),
				  'status' => array('userImportFailure' => array('admin' => 1),
						    'userImportSuccess' => array(),
						    'albumImportFailure' => array(),
						    'albumImportSuccess' => array()
						    ),
				  'error' => array()),
			    $results);
    }

    function testCancelImport() {
	global $gallery;
        GalleryUtilities::putRequestVariable('form[action][cancel]', 1);
        $results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'migrate:SelectGallery'),
				  'status' => array('userImportFailure' => array(),
						    'userImportSuccess' => array(),
						    'albumImportFailure' => array(),
						    'albumImportSuccess' => array()
						    ),
				  'error' => array()),
			    $results);
    }

    function testImportAlbumSuccessful() {
	global $gallery;
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();
        GalleryUtilities::putRequestVariable('albumsPath', dirname(__FILE__) . $slash . '..' . $slash . 'data' . $slash . 'albums' . $slash);
        GalleryUtilities::putRequestVariable('form[sourceAlbums][album03]', 1);
        GalleryUtilities::putRequestVariable('form[action][import]', 1);
	GalleryUtilities::putRequestVariable('form[destinationAlbumID]',$this->_temporaryAlbumId);

        $results = $this->handleRequest();
	$this->assertEquals(array('album03'),
			    array_keys($results['status']['albumImportSuccess']));
	$this->assertEquals(array('view' => 'core:SiteAdmin',
				  'subView' => 'migrate:ImportResults'),
			    $results['redirect']);
	$this->assertEquals(array(), $results['error']);
	$this->assertEquals(array(), $results['status']['userImportFailure']);
	$this->assertEquals(array(), $results['status']['userImportSuccess']);
	$this->assertEquals(array(), $results['status']['albumImportFailure']);
	$testAlbumId = $results['status']['albumImportSuccess']['album03'];

	/* Get the allegedly successfully imported album */
	list($ret, $testAlbum) = GalleryCoreApi::loadEntitiesById($testAlbumId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Get the layout associated with this album */
	list ($ret, $layout) = GalleryCoreApi::fetchLayout($testAlbum);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list ($ret, $settings) = $layout->getSettings($testAlbumId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	/* Get specific values from the layout */
	list ($ret, $rows) = $layout->getParameter('rows',$testAlbumId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list ($ret, $cols) = $layout->getParameter('cols',$testAlbumId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Count the clicks for this item */
	list ($ret, $viewCount) = GalleryCoreApi::fetchItemViewCount($testAlbumId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/*
	 * This is the user that we expect to be associated with this album.
	 * It really shouldn't be the admin, but the test data needs to be
	 * changed to fix it, so we will change it later - probably to
	 * phpunit_foobar, or whatever we are loading in the other unit test
	 */
	list($ret, $testOwner) = GalleryCoreApi::fetchUserByUsername('admin');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Load the thumb and resized image sizes for later comparison */
	list ($ret, $derivativePreferences) = GalleryCoreApi::fetchDerivativePreferencesForItem(array($testAlbumId));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}


	/*
	 * Array of example data
	 * (
	 *   +[title] => Test Album One
	 *   +[description] => No description
	 *   +[summary] =>
	 *   -[bgcolor] =>
	 *   -[textcolor] =>
	 *   -[linkcolor] =>
	 *   -[font] => verdana
	 *   -[border] => 1
	 *   -[bordercolor] => black
	 *   -[returnto] => yes
	 *   +[thumb_size] => 150
	 *   +[resize_size] => 400
	 *   +[rows] => 5
	 *   +[cols] => 5
	 *   -[fit_to_window] => no
	 *   -[use_fullOnly] => no
	 *   -[print_photos] => none
	 *   -[use_exif] => yes
	 *    [perms] => Array
	 *        ( [canRead] => Array
	 *            ( [everybody] => 1 )
	 *            [canViewFullImages] => Array
	 *            ( [everybody] => 1 )
	 *        )
	 *   +[parentAlbumName] => .root
	 *   +[clicks] => 0
	 *   +[clicks_date] => 1056014708
	 *   -[display_clicks] => yes
	 *   -[public_comments] => yes
	 *    [extra_fields] => Array
	 *        ( [0] => Description
	 *        )
	 *   +[name] => album01
	 *   +[owner] => 1054014347u1233740678
	 *   -[last_mod_time] => 1056015246
	 */
	
	
	$this->assertEquals(array($testAlbum->getTitle(),                // title
				  $testAlbum->getSummary(),              // summary
				  $testAlbum->getKeywords(),             // keywords
				  $testAlbum->getDescription(),          // description
				  $testAlbum->getownerId(),              // owner
				  $testAlbum->getcreationTimestamp(),    // album creation
				  $testAlbum->getviewedSinceTimestamp(), // clicks counted since
				  $viewCount,                            // count of clicks
				  $derivativePreferences,                // thumb and resized sizing preferences
				  $rows,                                 // rows
				  $cols                                  // cols
				  
				  ),
			    array('Test Album Three',                    // title
				  NULL,                                  // summary
				  NULL,                                  // keywords
				  '[b]No description[/b]',               // description
				  $testOwner->getId(),                   // owner
				  1081143716,                            // album creation
				  1056015077,                            // clicks counted since
				  7,                                     // count of clicks
				  array(array(                           // thumb and resized sizing preferences
					      'order' => 0,
					      'derivativeType' => 1,
					      'derivativeOperations' => 'thumbnail|150'
					      ),
					
					array('order' => 1,
					      'derivativeType' => 2,
					      'derivativeOperations' => 'scale|400'
					      )
					),
				  3,                                     // rows
				  NULL                                   // cols
				  )
			    );
	/* albumitem Object
	 * (
	 *   +[image] => image Object
	 *        (
	 *           +[name] => canon_ae_1
	 *           +[type] => jpg
	 *           -[width] => 225
	 *           -[height] => 165
	 *           -[resizedName] =>
	 *           +[thumb_x] =>
	 *           +[thumb_y] =>
	 *           +[thumb_width] =>
	 *           +[thumb_height] =>
	 *           -[raw_width] => 225
	 *           -[raw_height] => 165
	 *           -[version] => 10
	 *        )
	 *
	 *   +[caption] => canon_ae_1
	 *    [hidden] =>
	 *   +[highlight] => 1
	 *   +[isAlbumName] =>
	 *   +[clicks] =>
	 *   +[keywords] =>
	 *    [comments] =>
	 *   +[uploadDate] => 1056014783
	 *   +[itemCaptureDate] => Array
	 *        (
	 *           +[0] => 1056014783
	 *        )
	 *
	 *    [extraFields] => Array
	 *        (
	 *        )
	 *)
	 */
	
	
	
	/* Verify item attributes (like order weight) */
	list ($ret, $ids) = GalleryCoreApi::fetchChildItemIds($testAlbum);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$seenWeights = array();
	foreach ($ids as $id) {
	    list ($ret, $itemViewCount[$id]) = GalleryCoreApi::fetchItemViewCount($id);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    list ($ret, $orderWeight) = GalleryCoreApi::fetchItemOrderWeight($id);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assert(!isset($seenWeights[$orderWeight]), 'Seen this weight before');
	    $seenWeights[$orderWeight] = 1;
	}
	
	/* Get the allegedly successfully imported albumItem */
	list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[0]);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$this->assertEquals(array($testItem->getTitle(),                 // title
				  $testItem->getSummary(),               // summary
				  $testItem->getKeywords(),              // keywords
				  $testItem->getDescription(),           // description
				  $testItem->getownerId(),               // owner
				  $testItem->getcreationTimestamp(),     // album creation
				  $testItem->getviewedSinceTimestamp(),  // clicks counted since
				  $itemViewCount[$testItem->getId()]         // count of clicks
				  ),
			    array('&iexcl;Time to migrate!',             // title
				  NULL,                                  // summary
				  'stump grinder chipper shredder',      // keywords
				  'chipper',                             // description
				  $testOwner->getId(),                   // owner
				  1056015116,                            // album creation
				  1056015077,                            // clicks counted since
				  1                                      // count of clicks
				  )
			    );
	
    }

    function testConvertHtmlToBbcode() {
	/* Basic HTML styling with edge cases */
	$this->assertEquals('[b]bold[/b]',
			    ConfirmImportController::convertHtmlToBbcode('<b>bold</b>'));
	$this->assertEquals('[i]italic[/i]',
			    ConfirmImportController::convertHtmlToBbcode('<i>italic</i>'));
 
	/* Image HTML with edge cases */
	$this->assertEquals('[img]foo.jpg[/img]',
			    ConfirmImportController::convertHtmlToBbcode('<img src=\'foo.jpg\'>'));
	$this->assertEquals('[img]foo.jpg[/img]',
			    ConfirmImportController::convertHtmlToBbcode('<img src="foo.jpg">'));
	$this->assertEquals('[img]foo.jpg[/img]',
			    ConfirmImportController::convertHtmlToBbcode('<img src=foo.jpg>'));
	$this->assertEquals('[img]foo.jpg[/img]',
			    ConfirmImportController::convertHtmlToBbcode('<img style=foo src=\'foo.jpg\'>'));
	$this->assertEquals('[img]foo.jpg[/img]',
			    ConfirmImportController::convertHtmlToBbcode('<img src=\'foo.jpg\' class="bar">'));
	$this->assertEquals('[img]foo.jpg[/img]',
			    ConfirmImportController::convertHtmlToBbcode('<img style="foo" src=\'foo.jpg\' class=\'bar\'>'));
 
	/* List HTML with edge cases */
	$this->assertEquals('[list][/list]',
			    ConfirmImportController::convertHtmlToBbcode('<ul></ul>'));
	$this->assertEquals('[list][*]foo[/list]',
			    ConfirmImportController::convertHtmlToBbcode('<ul><li>foo</li></ul>'));
	$this->assertEquals('[list][*]foo[/list]',
			    ConfirmImportController::convertHtmlToBbcode('<ul><li>foo</ul>'));
 
	/* URL HTML with edge cases */
	$this->assertEquals('[url=http://google.com]Google[/url]',
			    ConfirmImportController::convertHtmlToBbcode('<a href="http://google.com">Google</a>'));
	$this->assertEquals('[url=http://google.com]Google[/url]',
			    ConfirmImportController::convertHtmlToBbcode('<a href=\'http://google.com\'>Google</a>'));
	$this->assertEquals('[url=http://google.com]Google[/url]',
			    ConfirmImportController::convertHtmlToBbcode('<a title="foo" href="http://google.com" class="bar">Google</a>'));
	$this->assertEquals('[url=http://google.com]Google[/url]',
			    ConfirmImportController::convertHtmlToBbcode('<a title=foo href=http://google.com class=bar>Google</a>'));
	$this->assertEquals('[url=http://google.com]Google[/url]',
			    ConfirmImportController::convertHtmlToBbcode('<a href=http://google.com class=bar>Google</a>'));
	$this->assertEquals('[url=http://google.com]Google[/url]',
			    ConfirmImportController::convertHtmlToBbcode('<a title=foo href=http://google.com>Google</a>'));
 
 
	/* Malformed HTML tags should not be turned into BBCode, but we can't stop it */
	$this->assertEquals('[i][b]interleaved[/i][/b]', 
			    ConfirmImportController::convertHtmlToBbcode('<i><b>interleaved</i></b>'));

	/*
	 * We don't handle this correctly, yet
         * $this->assertEquals('&lt;li&gt;foo',
	 *     ConfirmImportController::convertHtmlToBbcode('<li>foo'));
	 */
    }

}
?>
