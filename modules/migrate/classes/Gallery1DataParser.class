<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Migrate
 * @author Jesse Mullan <jmullan@visi.com>
 */

/**
 * This class provides an API for parsing Gallery 1 data files 
 *
 * @package Migrate
 * @subpackage Gallery1DataParser
 * @abstract
 */

class Gallery1DataParser {

    function isValidAlbumsPath($path) {
	global $gallery;
	$platform = $gallery->getPlatform();
  
	if ($platform->file_exists($path . 'albumdb.dat')
	    && $platform->is_readable($path . 'albumdb.dat')) {
	    return true;
	} else {
	    return false;
	}
    }

    function loadFile($fileName) {
        global $gallery;
        $platform = $gallery->getPlatform();

	if (!$platform->file_exists($fileName) || !$platform->is_readable($fileName)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null);
	}
        $tmp = $platform->file($fileName);

	if (empty($tmp)) {
	    return array(GalleryStatus::error(ERROR_MISSING_VALUE, __FILE__, __LINE__), null);
	}
	
	$tmp = join('', $tmp);

	/*
	 * We renamed User.php to Gallery_User.php in v1.2, so port forward
	 * any saved user objects.
	 */
	if (!strcmp(substr($tmp, 0, 10), 'O:4:"user"')) {
	    $tmp = ereg_replace('O:4:"user"', 'O:12:"gallery_user"', $tmp);
	}

	$object = unserialize($tmp);
	return array(GalleryStatus::success(), $object);
    }
    
    function getAlbumList($path) {
	list ($ret, $albumOrder) = Gallery1DataParser::loadFile($path . 'albumdb.dat');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	foreach ($albumOrder as $albumName){
	    list ($ret, $albumFields) = Gallery1DataParser::loadAlbumFields($path . $albumName . '/');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__),'');
	    }
	    $albumList[$albumName] = $albumFields;
	}

	return array(GalleryStatus::success(), $albumList);
    }

    function getParentAlbumList($path) {
	list ($ret, $albumOrder) = Gallery1DataParser::loadFile($path . 'albumdb.dat');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	foreach($albumOrder as $albumName){
	    list ($ret, $albumFields) = Gallery1DataParser::loadAlbumFields($path . $albumName . '/');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__),'');
	    }
	    $parentAlbumList[$albumName] = $albumFields['parentAlbumName'];
	}
	return array(GalleryStatus::success(), $parentAlbumList);
    }

    function getAlbumHierarchy($path) {
	list ($ret, $parentAlbumList) = Gallery1DataParser::getParentAlbumList($path);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	foreach($parentAlbumList as $myName => $parentName) {
	    if (!isset($tempAlbums[$myName])) {
		$tempAlbums[$myName] = array();
	    }
	    if (empty($parentName) || $parentName=='.root') {
		$hierarchy[$myName] = &$tempAlbums[$myName];
	    } else {
		if (!isset($tempAlbums[$parentName])) {
		    $tempAlbums[$parentName] = array();
		}
		$tempAlbums[$parentName][$myName] = &$tempAlbums[$myName];
	    }
	}
	return array(GalleryStatus::success(), $hierarchy);
    }

    function getRootAlbums($path) {
        global $gallery;
        $platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();

	list ($ret, $albumOrder) = Gallery1DataParser::loadFile($path . 'albumdb.dat');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	foreach($albumOrder as $albumName){
	    list ($ret, $albumFields) = Gallery1DataParser::loadAlbumFields($path . $albumName . $slash);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__),'');
	    }
	    if ($albumFields['parentAlbumName'] == '.root') {
		$rootAlbums[] = $albumName;
	    }
	}
	return array(GalleryStatus::success(), $rootAlbums);
    }

    function loadAlbumFields($path) {
        global $gallery;
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();
	$tmp = trim($path);
	if ($tmp[strlen($tmp)-1] != $slash) {
	    $tmp .= $slash;
	}
	$path = trim($tmp);
        list ($ret, $album) = Gallery1DataParser::loadFile($path . 'album.dat');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!$album->fields['parentAlbumName']){
	    $album->fields['parentAlbumName'] = '.root';
	}
	return array(GalleryStatus::success(), $album->fields);
    }

    function getPhotoCount($path) {
	list ($ret, $photos) = Gallery1DataParser::loadFile($path . 'photos.dat');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $photos);
    }
    
    function getUserUids($path) {
	list ($ret, $userDB) = Gallery1DataParser::loadFile($path . '.users/userdb.dat');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$uids = array();
	foreach ($userDB->userMap as $username => $uid) {
	    if (!ereg('^[0-9]{9,}[^0-9][0-9]+$', $username) &&
		    !eregi('nobody|everybody|loggedin', $username)) {
		$uids[$uid] = $username;
	    }
	}
	return array(GalleryStatus::success(), $uids);
    }
    
    function getUserFieldsByUsername($path, $username) {
        global $gallery;
        list($ret, $uids) = Gallery1DataParser::getUserUids($path);
        if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
        }

	$usernames = array_flip($uids);
        $uid = $usernames[$username];
	
	list ($ret, $user) = Gallery1DataParser::loadFile($path . '.users/' . $uid);
        if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
        }

	foreach ($user as $key => $value){
	    $fields[$key] = $value;
	}
	
	return array(GalleryStatus::success(), $fields);
    }
    function importAlbum($itemId,$album) {
	global $gallery;

	/* $itemId = GalleryUtilities::getRequestVariables('itemId'); */

	/* Make sure we have permission do edit this item */
	$ret = GalleryUserHelper::assertHasItemPermission($itemId, 'core.addAlbumItem');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $item) = $gallery->loadEntitiesById($itemId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $lockIds[]) = $gallery->acquireReadLock($item->getId());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$status = array();
	$error = array();

	/*
	 * Validate the input data.
	 */
	$platform = $gallery->getPlatform();
	if (empty($album['name'])) {
	    $error[] = 'form.error.pathComponent.missing';
	} else if (!$platform->isLegalPathComponent($album['name'])) {
	    $error[] = 'form.error.pathComponent.invalid';
	}
	if (empty($error)) {
	    list ($ret, $instance) =
		    GalleryFactory::newInstance('GalleryEntity', 'GalleryAlbumItem');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    if (!isset($instance)) {
		return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__),
			     null);
	    }  
	    $ret = $instance->create($itemId, $album['name']);
	    if ($ret->isError()) {
		if ($ret->getErrorCode() & ERROR_COLLISION) {
		    $error[] = 'form.error.pathComponent.collision';
		} else {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
	    }

	    $instance->setTitle($album['title']);
	    $instance->setSummary($album['summary']);
	    $instance->setKeywords('');
	    $instance->setDescription($album['description']);
	    $id = $instance->getId();
	    $ret = $instance->save();
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}
	$ret = $gallery->releaseLocks($lockIds);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	if (isset($id)) {
	    return array(GalleryStatus::success(), $id);
	} else {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}	
    }
}
/* Define these classes so that unserialize can use them */
class AlbumDB{ }
class Album { }
class Gallery_UserDB { }
class Gallery_User { }
?>
