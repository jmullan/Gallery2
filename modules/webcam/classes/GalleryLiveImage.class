<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package WebCam
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Load the parent class
 */
require_once(dirname(__FILE__) . '/../../core/classes/GalleryPhotoItem.class');

/**
 * An extension of GalleryPhotoItem to periodically refresh the image from an external source
 *
 * @g2 <class-name>GalleryLiveImage</class-name>
 * @g2 <parent-class-name>GalleryPhotoItem</parent-class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 * @g2 <requires-id/>
 *
 * @package WebCam
 * @subpackage Classes
 */
class GalleryLiveImage_core extends GalleryPhotoItem {

    /**
     * @see GalleryEntity::onLoad()
     */
    function onLoad() {
	static $loop = array();
	$ret = parent::onLoad();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	// Check age and refresh from external source if needed..
	$old = false;
	$id = $this->getId();
	list ($ret, $duration) = GalleryCoreApi::getPluginParameter('module', 'webcam', 'duration');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	if (time() - $this->getModificationTimestamp() > $duration && !isset($loop[$id])) {
	    // Lock and refresh to ensure another request didn't just update image..
	    list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($id);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $loop[$id] = true;
	    list ($ret, $this) = $this->refresh();
	    if ($ret->isError()) {
		GalleryCoreApi::releaseLocks($lockId);
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    if (time() - $this->getModificationTimestamp() > $duration) {
		$old = true;
	    }
	}
	if ($old) {
	    global $gallery;
	    $platform = $gallery->getPlatform();
	    $tmpDir = $gallery->getConfig('data.gallery.tmp');
	    $tmpFile = $platform->tempnam($tmpDir, 'webcam');
	    list ($ret, $url) = GalleryCoreApi::getPluginParameter('module', 'webcam',
								   'imageUrl', $id);
	    if ($ret->isError()) {
		GalleryCoreApi::releaseLocks($lockId);
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    list ($successfullyCopied, $response, $headers) =
		GalleryCoreApi::fetchWebFile($url, $tmpFile);
	    if (!$successfullyCopied || strpos($response, '404 Not Found') !== false) {
		// Can't get the current image.. just keep what we have now.
	    } else {
		list ($ret, $path) = $this->fetchPath();
		if ($ret->isError()) {
		    GalleryCoreApi::releaseLocks($lockId);
		    return $ret->wrap(__FILE__, __LINE__);
		}
		$ret = $platform->copy($tmpFile, $path);
		if (!$ret) {
		    GalleryCoreApi::releaseLocks($lockId);
		    return GalleryStatus::error(ERROR_PLATFORM_FAILURE, __FILE__, __LINE__);
		}
		$ret = $this->rescan();
		if ($ret->isError()) {
		    GalleryCoreApi::releaseLocks($lockId);
		    return $ret->wrap(__FILE__, __LINE__);
		}
		$ret = $this->save();
		if ($ret->isError()) {
		    GalleryCoreApi::releaseLocks($lockId);
		    return $ret->wrap(__FILE__, __LINE__);
		}
		$ret = GalleryCoreApi::expireDerivativeTreeBySourceIds(array($id));
		if ($ret->isError()) {
		    GalleryCoreApi::releaseLocks($lockId);
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	    @$platform->unlink($tmpFile);
	}
	if (isset($lockId)) {
	    $ret = GalleryCoreApi::releaseLocks($lockId);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	return GalleryStatus::success();
    }
}

GalleryCoreApi::requireOnce(dirname(__FILE__) . '/interfaces/GalleryLiveImage.inc');
?>
