<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package WebCam
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * WebCamSiteAdmin controller tests
 *
 * @package WebCam
 * @subpackage PHPUnit
 */
class WebCamSiteAdminControllerTest extends GalleryControllerTestCase {

    function WebCamSiteAdminControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'webcam:WebCamSiteAdmin');
    }

    function setUp() {
	parent::setUp();

	foreach (array('duration') as $key) {
	    list ($ret, $this->_params[$key]) =
		GalleryCoreApi::getPluginParameter('module', 'webcam', $key);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
    }

    function tearDown() {
	foreach ($this->_params as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'webcam', $key, $value);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	parent::tearDown();
    }

    function testWebCamSiteAdminControllerUndo() {
	GalleryUtilities::putRequestVariable('form[action][reset]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'webcam:WebCamSiteAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testWebCamSiteAdminControllerSave() {
	GalleryUtilities::putRequestVariable('form[duration]', '123.4');
	GalleryUtilities::putRequestVariable('form[action][save]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'webcam:WebCamSiteAdmin'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	list ($ret, $duration) =
	    GalleryCoreApi::getPluginParameter('module', 'webcam', 'duration');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('7404', $duration, 'duration');
    }

    function testWebCamSiteAdminControllerSaveNoDuration() {
	GalleryUtilities::putRequestVariable('form[action][save]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:SiteAdmin',
						      'subView' => 'webcam:WebCamSiteAdmin'),
				  'status' => array(),
				  'error' => array('form[error][duration]')),
			    $results);
    }

    function testWebCamSiteAdminControllerSaveBadDuration() {
	GalleryUtilities::putRequestVariable('form[duration]', 'abc');
	GalleryUtilities::putRequestVariable('form[action][save]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:SiteAdmin',
						      'subView' => 'webcam:WebCamSiteAdmin'),
				  'status' => array(),
				  'error' => array('form[error][duration]')),
			    $results);
    }

    function testWebCamSiteAdminControllerLocale() {
	/* Verify the form can accept input in locales that use comma for the fraction separator */
	GalleryUtilities::putRequestVariable('form[duration]', '123,4');
	GalleryUtilities::putRequestVariable('form[action][save]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'webcam:WebCamSiteAdmin'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	list ($ret, $duration) =
	    GalleryCoreApi::getPluginParameter('module', 'webcam', 'duration');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('7404', $duration, 'duration');
    }
}
?>
