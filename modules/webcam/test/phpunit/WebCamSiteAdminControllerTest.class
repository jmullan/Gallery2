<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package WebCam
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Load required classes
 */
require_once(dirname(__FILE__) . '/../../classes/GalleryLiveImage.class');
require_once(dirname(__FILE__) . '/../../classes/GalleryLiveImageHelper.class');

/**
 * WebCamSiteAdmin controller tests
 * Also tests GalleryLiveImageHelper::assignEntityType,resetLiveImageItems,fetchItemCount
 *
 * @package WebCam
 * @subpackage PHPUnit
 */
class WebCamSiteAdminControllerTest extends GalleryControllerTestCase {

    function WebCamSiteAdminControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'webcam:WebCamSiteAdmin');
    }

    function setUp() {
	parent::setUp();

	foreach (array('duration') as $key) {
	    list ($ret, $this->_params[$key]) =
		GalleryCoreApi::getPluginParameter('module', 'webcam', $key);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	list ($ret, $this->_item) = $this->_createRandomDataItem(
	    $this->_getRootId(), 'image/test', array(), __FILE__, 'GalleryLiveImage');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::setPluginParameter(
	    'module', 'webcam', 'imageUrl', 'test', $this->_item->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	foreach (array('duration') as $key) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'webcam', $key, $this->_params[$key]);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	$ret = GalleryCoreApi::deleteEntityById($this->_item->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	parent::tearDown();
    }

    function testWebCamSiteAdminControllerUndo() {
	GalleryUtilities::putRequestVariable('form[action][undo]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'webcam:WebCamSiteAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testWebCamSiteAdminControllerSave() {
	GalleryUtilities::putRequestVariable('form[duration]', '123.4');
	GalleryUtilities::putRequestVariable('form[action][save]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'webcam:WebCamSiteAdmin'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	list ($ret, $duration) =
	    GalleryCoreApi::getPluginParameter('module', 'webcam', 'duration');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('7404', $duration, 'duration');
    }

    function testWebCamSiteAdminControllerSaveNoDuration() {
	GalleryUtilities::putRequestVariable('form[action][save]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:SiteAdmin',
						      'subView' => 'webcam:WebCamSiteAdmin'),
				  'status' => array(),
				  'error' => array('form[error][duration]')),
			    $results);
    }

    function testWebCamSiteAdminControllerSaveBadDuration() {
	GalleryUtilities::putRequestVariable('form[duration]', 'abc');
	GalleryUtilities::putRequestVariable('form[action][save]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:SiteAdmin',
						      'subView' => 'webcam:WebCamSiteAdmin'),
				  'status' => array(),
				  'error' => array('form[error][duration]')),
			    $results);
    }

    function testWebCamSiteAdminControllerReset() {
	$ret = $this->_saveLiveImageItems();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $preCount) = GalleryLiveImageHelper::fetchItemCount();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($preCount > 0, 'Should be at least one GalleryLiveImage entity in db');

	GalleryUtilities::putRequestVariable('form[action][reset]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'webcam:WebCamSiteAdmin'),
				  'status' => array('reset' => 1),
				  'error' => array()),
			    $results);

	list ($ret, $count) = GalleryLiveImageHelper::fetchItemCount();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(0, $count, 'Should be no GalleryLiveImage entities in db after reset');

	$ret = $this->_restoreLiveImageItems();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $count) = GalleryLiveImageHelper::fetchItemCount();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($preCount, $count, 'Restore correct number for GalleryLiveImages');
    }

    function _saveLiveImageItems() {
	global $gallery;
	$query = 'SELECT [GalleryEntity::id], [GalleryPluginParameterMap::parameterValue]
		  FROM [GalleryEntity], [GalleryPluginParameterMap]
		  WHERE [GalleryEntity::entityType] = \'GalleryLiveImage\'
		  AND [GalleryEntity::id] = [GalleryPluginParameterMap::itemId]
		  AND [GalleryPluginParameterMap::pluginType] = \'module\'
		  AND [GalleryPluginParameterMap::pluginId] = \'webcam\'
		  AND [GalleryPluginParameterMap::parameterName] = \'imageUrl\'';

	list ($ret, $results) = $gallery->search($query);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$data = array();
	while ($result = $results->nextResult()) {
	    $data[$result[0]] = $result[1];
	}
	$this->_liveImageData = $data;
	return GalleryStatus::success();
    }

    function _restoreLiveImageItems() {
	if (empty($this->_liveImageData)) {
	    return GalleryStatus::success();
	}
	list ($ret, $items) = GalleryCoreApi::loadEntitiesById(array_keys($this->_liveImageData));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	foreach ($items as $item) {
	    $ret = GalleryLiveImageHelper::assignEntityType(
					   $item, $this->_liveImageData[$item->getId()]);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}
	return GalleryStatus::success();
    }
}
?>
