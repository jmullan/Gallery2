<?php
/*
 * $RCSfile: AdminEditGroupQuotaControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.5 $ $Date: 2005/08/23 03:49:50 $
 * @package Quotas
 * @subpackage PHPUnit
 * @author Robert Balousek <volksport@users.sf.net>
 */

/**
 * Helper class
 */
GalleryCoreApi::relativeRequireOnce('modules/quotas/classes/GalleryQuotasHelper.class');

/**
 * Map class
 */
GalleryCoreApi::relativeRequireOnce('modules/quotas/classes/QuotasMap.class');

/**
 * AdminEditGroupQuota controller tests
 * @package Quotas
 * @subpackage PHPUnit
 */
class AdminEditGroupQuotaControllerTest extends GalleryControllerTestCase {

    function AdminEditGroupQuotaControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'quotas.AdminEditGroupQuota');
    }

    function testCancel() {
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('groupId', $group->getId());
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'quotas.AdminQuotas'),
				  'status' => array(),
				  'error' => array()),
			    $results);
	$this->_deleteEntity($group);
    }

    function testUndo() {
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('groupId', $group->getId());
	GalleryUtilities::putRequestVariable('form[action][undo]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'quotas.AdminEditGroupQuota',
						      'groupId' => $group->getId()),
				  'status' => array(),
				  'error' => array()),
			    $results);

	$this->_deleteEntity($group);
    }

    function testEditGroupQuota() {
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_createGroupQuota($group->getId(), 4096);

	GalleryUtilities::putRequestVariable('groupId', $group->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[groupName]', $group->getGroupName());
	GalleryUtilities::putRequestVariable('form[quotaSize]', 6);
	GalleryUtilities::putRequestVariable('form[quotaUnit]', 'MB');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'quotas.AdminQuotas'),
				  'status' => array('modifiedGroup' => $group->getGroupName()),
				  'error' => array()),
			    $results);

	list ($ret, $quotaExists, $groupQuota) =
	    GalleryQuotasHelper::fetchGroupQuota($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($quotaExists, 'Quota does not exist');
	$this->assertEquals(''.$group->getId(), $groupQuota['id'], 'Group Ids do not match');
	$this->assertEquals('6144', $groupQuota['quota'], 'Group quota does not match');

	$this->_deleteGroupQuota($group->getId());
	$this->_deleteEntity($group);
    }

    function testEditGroupQuotaMissingValues() {
	/* No Values */
	GalleryUtilities::putRequestVariable('form[action][save]', 1);

	$results = $this->handleRequest(ERROR_BAD_PARAMETER);

	/* Create a group for our tests */
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_createGroupQuota($group->getId(), 1024);

	/* quota size */
	GalleryUtilities::putRequestVariable('groupId', $group->getId());
	GalleryUtilities::putRequestVariable('form[quotaSize]', 2048);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'quotas.AdminEditGroupQuota'),
				  'status' => array(),
				  'error' => array('form[error][quotaUnit][missing]')),
			    $results);

	/* quota unit only */
	GalleryUtilities::removeRequestVariable('form[quotaSize]');
	GalleryUtilities::putRequestVariable('form[quotaUnit]', 'MB');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'quotas.AdminEditGroupQuota'),
				  'status' => array(),
				  'error' => array('form[error][quotaSize][missing]')),
			    $results);

	$this->_deleteGroupQuota($group->getId());
	$this->_deleteEntity($group);
    }

    /**
     * Edit a non-existant group quota
     */
    function testEditGroupQuotaNonExistantQuota() {
	/* Create a group, but no quota for it */
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('groupId', $group->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[groupName]', $group->getGroupName());
	GalleryUtilities::putRequestVariable('form[quotaSize]', 7);
	GalleryUtilities::putRequestVariable('form[quotaUnit]', 'MB');

	$results = $this->handleRequest();

	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'quotas.AdminEditGroupQuota'),
				  'status' => array(),
				  'error' => array()),
			    $results);

	$this->_deleteEntity($group);
    }

    function testEditGroupQuotaGroupIdMissing() {
    	GalleryUtilities::putRequestVariable('form[action][save]', 1);
    	$results = $this->handleRequest(ERROR_BAD_PARAMETER);
    }

    function _createGroupQuota($groupId, $quota) {
	$ret = QuotasMap::addMapEntry(array('userOrGroupId' => $groupId,
					    'quotaSize' => $quota));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function _deleteEntity($entity) {
	$ret = GalleryCoreApi::deleteEntityById($entity->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function _deleteGroupQuota($groupId) {
	$ret = QuotasMap::removeMapEntry(array('userOrGroupId' => $groupId));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
}
?>
