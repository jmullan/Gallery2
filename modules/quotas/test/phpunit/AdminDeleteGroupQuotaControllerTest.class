<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Quotas
 * @subpackage PHPUnit
 * @author Robert Balousek <volksport@users.sf.net>
 */
/**
 * Helper class
 */
GalleryCoreApi::relativeRequireOnce('modules/quotas/classes/GalleryQuotasHelper.class');

/**
 * Map class
 */
GalleryCoreApi::relativeRequireOnce('modules/quotas/classes/QuotasMap.class');

/**
 * AdminDeleteGroupQuota controller tests
 * @package Quotas
 * @subpackage PHPUnit
 */
class AdminDeleteGroupQuotaControllerTest extends GalleryControllerTestCase {

    function AdminDeleteGroupQuotaControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'quotas.AdminDeleteGroupQuota');
    }

    function testCancel() {
	/* Create a group quota that we can delete */
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);
	GalleryUtilities::putRequestVariable('groupId', $group->getId());
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'quotas.AdminQuotas'),
				  'status' => array(),
				  'error' => array()),
			    $results);
	$this->_deleteEntity($group);
    }

    /**
     * Create and delete a group quota
     */
    function testDeleteGroupQuota() {
        global $gallery;
	/* Create a group quota that we can delete */
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_createUserOrGroupQuota($group->getId(), 2048);

	GalleryUtilities::putRequestVariable('groupId', $group->getId());
	GalleryUtilities::putRequestVariable('form[action][delete]', 1);
	
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'quotas.AdminQuotas'),
				  'status' => array('deletedGroup' => $group->getGroupName()),
				  'error' => array()),
			    $results,
			    'Failed to delete group quota');

	/* Verify the group quota is gone */
	list ($ret, $quotaExists, $quota) = GalleryQuotasHelper::fetchGroupQuota($group->getId());
	if ($quotaExists) {
	    $this->assert(false, 'The group quota was not actually deleted');
	} else {
	    $this->_deleteUserOrGroupQuota($group->getId());
	}
	$this->_deleteEntity($group);

    }

    function testDeleteGroupQuotaGroupIdMissing() {
    	GalleryUtilities::putRequestVariable('form[action][save]', 1);
    	$results = $this->handleRequest(ERROR_BAD_PARAMETER);
    }

    /**
     * Create and delete a non-existant group quota
     */
    function testDeleteNonExistantGroupQuota() {
        global $gallery;
	/* Create a group, but no quota for it */
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('groupId', $group->getId());
	GalleryUtilities::putRequestVariable('form[action][delete]', 1);

	$results = $this->handleRequest();

	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'quotas.AdminDeleteGroupQuota'),
				  'status' => array(),
				  'error' => array()),
			    $results);

	$this->_deleteEntity($group);
    }

    function _createUserOrGroupQuota($userOrGroupId, $quota) {
	$ret = QuotasMap::addMapEntry(array('userOrGroupId' => $userOrGroupId,
					    'quotaSize' => $quota));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function _deleteEntity($entity) {
	global $gallery;
	$ret = GalleryCoreApi::deleteEntityById($entity->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function _deleteUserOrGroupQuota($userOrGroupId) {
	$ret = QuotasMap::removeMapEntry(array('userOrGroupId' => $userOrGroupId));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

}
?>
