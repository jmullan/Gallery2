<?php
/*
 * $RCSfile: AdminEditUserQuotaControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.6 $ $Date: 2005/08/23 03:49:50 $
 * @package Quotas
 * @subpackage PHPUnit
 * @author Robert Balousek <volksport@users.sf.net>
 */

GalleryCoreApi::relativeRequireOnce('modules/quotas/classes/GalleryQuotasHelper.class');
GalleryCoreApi::relativeRequireOnce('modules/quotas/classes/QuotasMap.class');

/**
 * AdminEditUserQuota controller tests
 * @package Quotas
 * @subpackage PHPUnit
 */
class AdminEditUserQuotaControllerTest extends GalleryControllerTestCase {

    function AdminEditUserQuotaControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'quotas.AdminEditUserQuota');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_user);
    }

    function testCancel() {
	GalleryUtilities::putRequestVariable('userId', $this->_user->getId());
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'quotas.AdminQuotas'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testUndo() {
	GalleryUtilities::putRequestVariable('userId', $this->_user->getId());
	GalleryUtilities::putRequestVariable('form[action][undo]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'quotas.AdminEditUserQuota',
						      'userId' => $this->_user->getId()),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testEditUserQuota() {
	$this->_createUserQuota($this->_user->getId(), 4096);

	GalleryUtilities::putRequestVariable('userId', $this->_user->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());
	GalleryUtilities::putRequestVariable('form[quotaSize]', 6);
	GalleryUtilities::putRequestVariable('form[quotaUnit]', 'MB');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'quotas.AdminQuotas'),
				  'status' => array('modifiedUser' => $this->_user->getUserName()),
				  'error' => array()),
			    $results);

	list ($ret, $quotaExists, $userQuota) =
	    GalleryQuotasHelper::fetchUserQuota($this->_user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($quotaExists, 'Quota does not exist');
	$this->assertEquals(''.$this->_user->getId(), $userQuota['id'], 'User Ids do not match');
	$this->assertEquals('6144', $userQuota['quota'], 'User quota does not match');

	$this->_deleteUserQuota($this->_user->getId());
    }

    function testEditUserQuotaMissingValues() {
	/* No Values */
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	$results = $this->handleRequest(ERROR_BAD_PARAMETER);

	$this->_createUserQuota($this->_user->getId(), 1024);

	/* quota size */
	GalleryUtilities::putRequestVariable('userId', $this->_user->getId());
	GalleryUtilities::putRequestVariable('form[quotaSize]', 2048);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'quotas.AdminEditUserQuota'),
				  'status' => array(),
				  'error' => array('form[error][quotaUnit][missing]')),
			    $results);

	/* quota unit only */
	GalleryUtilities::removeRequestVariable('form[quotaSize]');
	GalleryUtilities::putRequestVariable('form[quotaUnit]', 'MB');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'quotas.AdminEditUserQuota'),
				  'status' => array(),
				  'error' => array('form[error][quotaSize][missing]')),
			    $results);
    }

    /**
     * Edit a non-existant user quota
     */
    function testEditUserQuotaNonExistantQuota() {
	GalleryUtilities::putRequestVariable('userId', $this->_user->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());
	GalleryUtilities::putRequestVariable('form[quotaSize]', 7);
	GalleryUtilities::putRequestVariable('form[quotaUnit]', 'MB');

	$results = $this->handleRequest();

	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'quotas.AdminEditUserQuota'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testEditUserQuotaUserIdMissing() {
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	$results = $this->handleRequest(ERROR_BAD_PARAMETER);
    }

    function _createUserQuota($userId, $quota) {
	$ret = QuotasMap::addMapEntry(array('userOrGroupId' => $userId,
					    'quotaSize' => $quota));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function _deleteUserQuota($userId) {
	$ret = QuotasMap::removeMapEntry(array('userOrGroupId' => $userId));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
}
?>
