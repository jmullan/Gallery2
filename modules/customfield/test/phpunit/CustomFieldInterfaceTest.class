<?php
/*
 * $RCSfile: CustomFieldInterfaceTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.10 $ $Date: 2005/08/23 03:49:39 $
 * @package CustomField
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Load required classes
 */
GalleryCoreApi::relativeRequireOnce('modules/customfield/classes/CustomFieldHelper.class');

/**
 * Test CustomFieldInterface functionality
 *
 * @package CustomField
 * @subpackage PHPUnit
 */
class CustomFieldInterfaceTest extends GalleryTestCase {

    function CustomFieldInterfaceTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();
	global $gallery;

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'customfield');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $this->_interface) =
	    GalleryCoreApi::newFactoryInstance('CustomFieldInterface_1_0', 'CustomFieldHelper');
	if ($ret->isError() || !isset($this->_interface)) {
	    print $ret->getAsHtml();
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_album);

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_album->getId(),
		'image/test', array(), __FILE__, 'GalleryPhotoItem');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $this->_markPluginParametersForCleanup('module', 'customfield');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}

	foreach (array('common' => '', 'album' => '', 'photo' => 'Test`0`1') as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'customfield', $key, $value);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
    }

    function testInterface() {

	// Create global fields..
	list ($ret, $duplicates) = $this->_interface->createCustomFields(array('One', 'Two'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), $duplicates, 'Add global 1');

	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters('module', 'customfield');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	foreach ($params as $key => $value) {
	    if ($key[0] == '_') {
		unset($params[$key]);
	    }
	}
	ksort($params);
	$this->assertEquals(array('album' => '',
				  'common' => 'One`0`1|Two`0`1',
				  'photo' => 'Test`0`1'),
			    $params, 'Check Data 1');

	// Create global fields, with duplicate..
	list ($ret, $duplicates) =
	    $this->_interface->createCustomFields(array('Test', 'Three', 'Two'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('Test', 'Two'), $duplicates, 'Add global 2');

	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters('module', 'customfield');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	foreach ($params as $key => $value) {
	    if ($key[0] == '_') {
		unset($params[$key]);
	    }
	}
	ksort($params);
	$this->assertEquals(array('album' => '',
				  'common' => 'One`0`1|Two`0`1|Three`0`1',
				  'photo' => 'Test`0`1'),
			    $params, 'Check Data 2');

	// Create album-specific fields..
	list ($ret, $duplicates) =
	    $this->_interface->createCustomFields(array('Photographer', 'Location', 'One'),
						  $this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), $duplicates, 'Add album');

	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters('module', 'customfield', $this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	ksort($params);
	$this->assertEquals(array('common' => 'Photographer`0`1|Location`0`1|One`0`1'),
			    $params, 'Check Data 3');

	// Set field values..
	$ret = $this->_interface->setCustomFieldValues($this->_item->getId(),
		array('Photographer' => 'Me', 'Location' => 'Here'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $data, $tmp, $isContainer) =
		CustomFieldHelper::fetchFieldValues(array($this->_item));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('Photographer' => 'Me', 'Location' => 'Here'),
			    $data[$this->_item->getId()], 'Field values');
	$this->assertEquals(true, $isContainer[$this->_item->getId()], 'Album-specific settings');
    }
}
?>
