<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/webdav/classes/WebDavRewriteHelper.class');

/**
 * WebDAV rewrite helper tests.
 * @package WebDav
 * @subpackage PHPUnit
 * @author Jack Bates <ms419@freezone.co.uk>
 * @version $Revision$
 */
class WebDavRewriteHelperTest extends GalleryTestCase {

    function WebDavRewriteHelperTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	$ret = parent::setUp();
	if ($ret) {
	    return $ret;
	}
	global $gallery;

	/* Try to use the rewrite URL generator */
	$this->_urlGenerator =& $gallery->getUrlGenerator();
	list ($ret, $this->_urlGenerator) = GalleryCoreApi::newFactoryInstance(
	    'GalleryUrlGenerator');
	if ($ret) {
	    return $ret;
	}
	if (!isset($this->_urlGenerator)) {
	    return $this->skip();
	}

	$ret = $this->_urlGenerator->init('http://example.com/gallery2/main.php');
	if ($ret) {
	    return $ret;
	}

	/* Create test items */
	list ($ret, $this->_album) = $this->_createRandomAlbum(
	    $this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_album);

	list ($ret, $this->_subAlbum) = $this->_createRandomAlbum(
	    $this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	/* Register event listeners */
	$this->_isAppropriate =& WebDavModule::_isAppropriate();
	$this->_isAppropriate['GalleryEntity::delete'] = true;
	$this->_isAppropriate['GalleryEntity::save'] = true;
    }

    function _rename(&$item, $pathComponent) {
	/* Write lock the item we're moving */
	list ($ret, $lockIds[]) = GalleryCoreApi::acquireWriteLock($item->getId());
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret;
	}

	/* Refresh the item in case it changed before it was locked */
	list ($ret, $item) = $item->refresh();
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret;
	}

	/* Rename the item */
	$oldPathComponent = $item->getPathComponent();
	$ret = $item->rename($pathComponent);
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret;
	}

	$ret = $item->save();
	if ($ret) {
	    $item->rename($oldPathComponent);
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret;
	}

	$ret = GalleryCoreApi::releaseLocks($lockIds);
	if ($ret) {
	    return $ret;
	}

	/* Set WebDAV path component */
	if ($item->getPathComponent() != $pathComponent) {
	    $ret = GalleryCoreApi::addMapEntry('WebDavPathComponentMap',
		array('itemId' => $item->getId(), 'pathComponent' => $pathComponent));
	    if ($ret) {
		return $ret;
	    }
	}

	return null;
    }

    function testFetchLogicalPath() {
	list ($ret, $path) = WebDavRewriteHelper::fetchLogicalPath($this->_subAlbum);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $expectedPath) = $this->_subAlbum->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($expectedPath, $path);
    }

    function testFetchLogicalPathWithWebDavPath() {
	$ret = $this->_rename($this->_album, 'The Quick!Brown#Fox');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_rename($this->_subAlbum, 'Jumps Over%The/Lazy_Dog');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $path) = WebDavRewriteHelper::fetchLogicalPath($this->_subAlbum);
	if ($ret) {
	    return $ret;
	}

	$expectedPath = '/' . rawurlencode('The Quick!Brown#Fox')
	    . '/' . rawurlencode('Jumps Over%The/Lazy_Dog') . '/';
	$this->assertEquals($expectedPath, $path);
    }

    function testParsePathWithItemId() {
	list ($ret, $path) = $this->_subAlbum->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$url = 'w%path%';
	$params = array('controller' => 'webdav.WebDav',
			'itemId' => $this->_subAlbum->getId());
	$entity = null;

	$success = WebDavRewriteHelper::parsePath($url, $params, $entity);

	$this->assert($success, 'success');
	$this->assertEquals('w/' . ltrim($path, '/'), $url, 'url');
	$this->assertEquals(array('controller' => 'webdav.WebDav'), $params, 'params');
	$this->assertEquals($this->_subAlbum, $entity, 'entity');
    }

    function testParsePathWithPath() {
	list ($ret, $path) = $this->_subAlbum->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$url = 'w%path%';
	$params = array('controller' => 'webdav.WebDav',
			'path' => $path);
	$entity = null;

	$ret = WebDavRewriteHelper::parsePath($url, $params, $entity);

	$this->assert($ret, 'status');
	$this->assertEquals('w/' . ltrim($path, '/'), $url, 'url');
	$this->assertEquals(array('controller' => 'webdav.WebDav'), $params, 'params');
	$this->assertEquals(null, $entity, 'entity');
    }

    function testParsePathWithStartingKeyword() {
	list ($ret, $path) = $this->_subAlbum->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$url = '%path%';
	$params = array('controller' => 'webdav.WebDav',
			'path' => $path);
	$entity = null;

	$ret = WebDavRewriteHelper::parsePath($url, $params, $entity);

	$this->assert($ret, 'status');
	$this->assertEquals(ltrim($path, '/'), $url, 'url');
	$this->assertEquals(array('controller' => 'webdav.WebDav'), $params, 'params');
	$this->assertEquals(null, $entity, 'entity');
    }

    function testParsePathWithPathSeparator() {
	list ($ret, $path) = $this->_subAlbum->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$url = 'w/%path%';
	$params = array('controller' => 'webdav.WebDav',
			'path' => $path);
	$entity = null;

	$ret = WebDavRewriteHelper::parsePath($url, $params, $entity);

	$this->assert($ret, 'status');
	$this->assertEquals('w/' . ltrim($path, '/'), $url, 'url');
	$this->assertEquals(array('controller' => 'webdav.WebDav'), $params, 'params');
	$this->assertEquals(null, $entity, 'entity');
    }

    function testParsePathWithItemIdWithPathAndSpecialCharacters() {
	$ret = $this->_rename($this->_album, 'The Quick!Brown#Fox');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_rename($this->_subAlbum, 'Jumps Over%The/Lazy_Dog');
	if ($ret) {
	    return $ret;
	}

	$path = '/' . rawurlencode('The Quick!Brown#Fox')
	    . '/' . rawurlencode('Jumps Over%The/Lazy_Dog') . '/';

	$url = 'w%path%';
	$params = array('controller' => 'webdav.WebDav',
			'itemId' => $this->_subAlbum->getId());
	$entity = null;

	$success = WebDavRewriteHelper::parsePath($url, $params, $entity);

	$this->assert($success, 'success');
	$this->assertEquals('w/' . ltrim($path, '/'), $url, 'url');
	$this->assertEquals(array('controller' => 'webdav.WebDav'), $params, 'params');
	$this->assertEquals($this->_subAlbum, $entity, 'entity');
    }

    function testParsePathWithPathAndSpecialCharacters() {
	$ret = $this->_rename($this->_album, 'The Quick!Brown#Fox');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_rename($this->_subAlbum, 'Jumps Over%The/Lazy_Dog');
	if ($ret) {
	    return $ret;
	}

	$path = '/' . rawurlencode('The Quick!Brown#Fox')
	    . '/' . rawurlencode('Jumps Over%The/Lazy_Dog') . '/';

	$url = 'w%path%';
	$params = array('controller' => 'webdav.WebDav',
			'path' => $path);
	$entity = null;

	$ret = WebDavRewriteHelper::parsePath($url, $params, $entity);

	$this->assert($ret, 'status');
	$this->assertEquals('w/' . ltrim($path, '/'), $url, 'url');
	$this->assertEquals(array('controller' => 'webdav.WebDav'), $params, 'params');
	$this->assertEquals(null, $entity, 'entity');
    }
}
?>
