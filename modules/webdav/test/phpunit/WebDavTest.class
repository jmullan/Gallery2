<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/webdav/classes/WebDavHelper.class');

/**
 * WebDAV tests.
 * @package WebDav
 * @subpackage PHPUnit
 * @author Jack Bates <ms419@freezone.co.uk>
 * @version $Revision$
 */
class WebDavTest extends GalleryTestCase {

    function WebDavTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	$ret = parent::setUp();
	if ($ret) {
	    return $ret;
	}

	/* Require here to avoid loading if none of our tests will be run */
	ob_start();
	GalleryCoreApi::requireOnce('main.php');
	ob_end_clean();

	/* main.php / bootstrap.inc creates a new $gallery object */
	global $gallery;

	/* Use WebDavTestPhpVm */
	$this->_phpVm =& $gallery->_phpVm;
	$this->_phpVm = new WebDavTestPhpVm();

	/* Use WebDavTestPlatform */
	$platform = $gallery->getPlatform();
	$this->_platform =& $gallery->getPlatform();
	$this->_platform = new WebDavTestPlatform();
	$this->_platform->_platform = $platform;
	$this->_platform->_streams = array();

	/* Reset request variables */
	$_SERVER['QUERY_STRING'] = null;
	$this->_requestVariables =& WebDavHelper::_requestVariables();
	$this->_requestVariables = null;

	/* Reset response headers */
	$this->_responseHeaders =& GalleryUtilities::_responseHeaders();
	$this->_responseHeaders = null;

	/* Create test items */
	list ($ret, $this->_album) = $this->_createRandomAlbum(
	    $this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_album);

	list ($ret, $this->_item) = $this->_createRandomDataItem(
	    $this->_album->getId(), 'test/file');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $this->_subAlbum) = $this->_createRandomAlbum(
	    $this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	$this->_userId = $gallery->getActiveUserId();

	/* Test the WebDAV controller */
	GalleryUtilities::putRequestVariable('controller', 'webdav.WebDav');

	$this->_streams =& WebDavTestStream::_streams();

	/* Try to use the rewrite URL generator */
	$this->_urlGenerator =& $gallery->getUrlGenerator();
	list ($ret, $this->_urlGenerator) = GalleryCoreApi::newFactoryInstance(
	    'GalleryUrlGenerator');
	if ($ret) {
	    return $ret;
	}
	if (!isset($this->_urlGenerator)) {
	    $this->_urlGenerator = new GalleryUrlGenerator();
	}

	$ret = $this->_urlGenerator->init('http://example.com/gallery2/main.php');
	if ($ret) {
	    return $ret;
	}

	/* Register event listeners */
	$this->_isAppropriate =& WebDavModule::_isAppropriate();
	$this->_isAppropriate['GalleryEntity::delete'] = true;
	$this->_isAppropriate['GalleryEntity::save'] = true;
    }

    function tearDown() {
	global $gallery;
	$storage =& $gallery->getStorage();

	$ret = $storage->checkPoint();
	if ($ret) {
	    return $ret;
	}

	$ret = parent::tearDown();
	if ($ret) {
	    $this->failWithStatus($ret);
	}
    }

    function _streamWrapperRegister() {
	static $isRegistered;

	/* Guard against registering twice */
	if (empty($isRegistered)) {
	    stream_register_wrapper('test', 'WebDavTestStream');
	    $isRegistered = true;
	}
    }

    function _rename(&$item, $pathComponent) {
	/* Write lock the item we're moving */
	list ($ret, $lockIds[]) = GalleryCoreApi::acquireWriteLock($item->getId());
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret;
	}

	/* Refresh the item in case it changed before it was locked */
	list ($ret, $item) = $item->refresh();
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret;
	}

	/* Rename the item */
	$oldPathComponent = $item->getPathComponent();
	$ret = $item->rename($pathComponent);
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret;
	}

	$ret = $item->save();
	if ($ret) {
	    $item->rename($oldPathComponent);
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret;
	}

	$ret = GalleryCoreApi::releaseLocks($lockIds);
	if ($ret) {
	    return $ret;
	}

	/* Set WebDAV path component */
	if ($item->getPathComponent() != $pathComponent) {
	    $ret = GalleryCoreApi::addMapEntry('WebDavPathComponentMap',
		array('itemId' => $item->getId(), 'pathComponent' => $pathComponent));
	    if ($ret) {
		return $ret;
	    }
	}

	return null;
    }

    function _getHref($path=null) {
	/* Assuming that the WebDAV rewrite rules are enabled */
	if (GalleryUtilities::isA($this->_urlGenerator, 'RewriteUrlGenerator')) {
	    $href = '/gallery2/w/';
	    if (!empty($path)) {
		$href .= ltrim($path, '/');
	    }

	    return $href;
	}

	$href = '/gallery2/main.php?g2_controller=webdav.WebDav';
	if (!empty($path)) {
	    $href .= '&amp;g2_path=' . $path;
	}

	return $href;
    }

    function testOptions() {
	$_SERVER['REQUEST_METHOD'] = 'OPTIONS';

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['allow'] =
	    'Allow: OPTIONS,PROPFIND,PROPPATCH,MKCOL,GET,HEAD,DELETE,PUT,MOVE,LOCK,UNLOCK';
	$expectedHeaders['dav'] = 'DAV: 1,2';
	$expectedHeaders['content-length'] = 'Content-Length: 0';
	$expectedHeaders['ms-author-via'] = 'MS-Author-Via: DAV';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));
    }

    function testPropfind() {
	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret) {
	    return $ret;
	}

	$ret = GalleryCoreApi::addUserPermission(
	    $this->_item->getId(), $this->_userId, 'core.view');
	if ($ret) {
	    return $ret;
	}

	$this->_streamWrapperRegister();

	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$_SERVER['REQUEST_METHOD'] = 'PROPFIND';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$this->_streams['test://input'] =
	    implode("\r\n", array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:propfind xmlns:D="DAV:" xmlns:G="http://gallery2.org/dav/props/">',
	    '  <D:prop>',
	    '    <D:creationdate/>',
	    '    <D:displayname/>',
	    '    <D:getlastmodified/>',
	    '    <G:summary/>',
	    '    <G:description/>',
	    '    <G:keywords/>',
	    '  </D:prop>',
	    '</D:propfind>'));

	$this->_platform->_streams['php://input'] = $this->_platform->fopen('test://input', 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 207 Multi-Status';
	$expectedHeaders['content-type'] = 'Content-Type: text/xml; charset="utf-8"';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$expectedOutput = array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:multistatus xmlns:D="DAV:">',
	    '  <D:response xmlns:G="http://gallery2.org/dav/props/"'
	    . ' xmlns:ns1="urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882">',
	    '    <D:href>' . $this->_getHref($path) . '</D:href>',
	    '    <D:propstat>',
	    '      <D:prop>',
	    '        <D:creationdate ns1:dt="dateTime.tz">'
	    . gmdate('Y-m-d\TH:i:s\Z', $this->_item->getCreationTimestamp())
	    . '</D:creationdate>',
	    '        <D:displayname>' . $this->_item->getTitle() . '</D:displayname>',
	    '        <D:getlastmodified ns1:dt="dateTime.rfc1123">'
	    . gmdate('D, d M Y H:i:s', $this->_item->getModificationTimestamp())
	    . ' UTC</D:getlastmodified>',
	    '        <G:summary>' . $this->_item->getSummary() . '</G:summary>',
	    '        <G:description>' . $this->_item->getDescription() . '</G:description>',
	    '        <G:keywords>' . $this->_item->getKeywords() . '</G:keywords>',
	    '      </D:prop>',
	    '      <D:status>HTTP/1.1 200 OK</D:status>',
	    '    </D:propstat>',
	    '  </D:response>',
	    '</D:multistatus>',
	    '');
	$this->assertEquals($expectedOutput, split("\r?\n", $output));
    }

    function testPropfindRequiresViewPermission() {
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_item->getId(), $this->_userId, 'core.all');
	if ($ret) {
	    return $ret;
	}

	$ret = GalleryCoreApi::removeUserPermission(
	    $this->_item->getId(), $this->_userId, 'core.view');
	if ($ret) {
	    return $ret;
	}

$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
if ($ret) {
    return $ret;
}
	$this->_streamWrapperRegister();

	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$_SERVER['REQUEST_METHOD'] = 'PROPFIND';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$this->_streams['test://input'] =
	    implode("\r\n", array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:propfind xmlns:D="DAV:" xmlns:G="http://gallery2.org/dav/props/">',
	    '  <D:prop>',
	    '    <D:creationdate/>',
	    '    <D:displayname/>',
	    '    <D:getlastmodified/>',
	    '    <G:summary/>',
	    '    <G:description/>',
	    '    <G:keywords/>',
	    '  </D:prop>',
	    '</D:propfind>'));

	$this->_platform->_streams['php://input'] = $this->_platform->fopen('test://input', 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 207 Multi-Status';
	$expectedHeaders['content-type'] = 'Content-Type: text/xml; charset="utf-8"';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$expectedOutput = array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:multistatus xmlns:D="DAV:">',
	    '  <D:response xmlns:G="http://gallery2.org/dav/props/"'
	    . ' xmlns:ns1="urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882">',
	    '    <D:href>' . $this->_getHref($path) . '</D:href>',
	    '    <D:status>HTTP/1.1 401 Unauthorized</D:status>',
	    '  </D:response>',
	    '</D:multistatus>',
	    '');
	$this->assertEquals($expectedOutput, split("\r?\n", $output));
    }

    function testPropfindWithSpecialCharacters() {
	$this->_streamWrapperRegister();

	$ret = $this->_rename($this->_album, 'The Quick!Brown#Fox');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_rename($this->_item, 'Jumps Over%The/Lazy_Dog');
	if ($ret) {
	    return $ret;
	}

	$path = '/' . rawurlencode('The Quick!Brown#Fox')
	    . '/' . rawurlencode('Jumps Over%The/Lazy_Dog');

	$_SERVER['REQUEST_METHOD'] = 'PROPFIND';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$this->_streams['test://input'] =
	    implode("\r\n", array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:propfind xmlns:D="DAV:" xmlns:G="http://gallery2.org/dav/props/">',
	    '  <D:prop>',
	    '    <D:creationdate/>',
	    '    <D:displayname/>',
	    '    <D:getlastmodified/>',
	    '    <G:summary/>',
	    '    <G:description/>',
	    '    <G:keywords/>',
	    '  </D:prop>',
	    '</D:propfind>'));

	$this->_platform->_streams['php://input'] = $this->_platform->fopen('test://input', 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 207 Multi-Status';
	$expectedHeaders['content-type'] = 'Content-Type: text/xml; charset="utf-8"';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$expectedOutput = array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:multistatus xmlns:D="DAV:">',
	    '  <D:response xmlns:G="http://gallery2.org/dav/props/"'
	    . ' xmlns:ns1="urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882">',
	    '    <D:href>' . $this->_getHref($path) . '</D:href>',
	    '    <D:propstat>',
	    '      <D:prop>',
	    '        <D:creationdate ns1:dt="dateTime.tz">'
	    . gmdate('Y-m-d\TH:i:s\Z', $this->_item->getCreationTimestamp())
	    . '</D:creationdate>',
	    '        <D:displayname>' . $this->_item->getTitle() . '</D:displayname>',
	    '        <D:getlastmodified ns1:dt="dateTime.rfc1123">'
	    . gmdate('D, d M Y H:i:s', $this->_item->getModificationTimestamp())
	    . ' UTC</D:getlastmodified>',
	    '        <G:summary>' . $this->_item->getSummary() . '</G:summary>',
	    '        <G:description>' . $this->_item->getDescription() . '</G:description>',
	    '        <G:keywords>' . $this->_item->getKeywords() . '</G:keywords>',
	    '      </D:prop>',
	    '      <D:status>HTTP/1.1 200 OK</D:status>',
	    '    </D:propstat>',
	    '  </D:response>',
	    '</D:multistatus>',
	    '');
	$this->assertEquals($expectedOutput, split("\r?\n", $output));
    }

    function testProppatch() {
	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret) {
	    return $ret;
	}

	$ret = GalleryCoreApi::addUserPermission(
	    $this->_item->getId(), $this->_userId, 'core.edit');
	if ($ret) {
	    return $ret;
	}

	$this->_streamWrapperRegister();

	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$_SERVER['REQUEST_METHOD'] = 'PROPPATCH';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$this->_streams['test://input'] =
	    implode("\r\n", array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:propertyupdate xmlns:D="DAV:" xmlns:G="http://gallery2.org/dav/props/">',
	    '  <D:set>',
	    '    <D:prop>',
	    '      <D:displayname>new title</D:displayname>',
	    '      <G:summary>new summary</G:summary>',
	    '      <G:description>new description</G:description>',
	    '      <G:keywords>new keywords</G:keywords>',
	    '    </D:prop>',
	    '  </D:set>',
	    '</D:propertyupdate>'));

	$this->_platform->_streams['php://input'] = $this->_platform->fopen('test://input', 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 207 Multi-Status';
	$expectedHeaders['content-type'] = 'Content-Type: text/xml; charset="utf-8"';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$expectedOutput = array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:multistatus xmlns:D="DAV:">',
	    '  <D:response xmlns:G="http://gallery2.org/dav/props/">',
	    '    <D:href>' . $this->_getHref($path) . '</D:href>',
	    '    <D:propstat>',
	    '      <D:prop>',
	    '        <D:displayname>new title</D:displayname>',
	    '        <G:summary>new summary</G:summary>',
	    '        <G:description>new description</G:description>',
	    '        <G:keywords>new keywords</G:keywords>',
	    '      </D:prop>',
	    '      <D:status>HTTP/1.1 200 OK</D:status>',
	    '    </D:propstat>',
	    '  </D:response>',
	    '</D:multistatus>',
	    '');
	$this->assertEquals($expectedOutput, split("\r?\n", $output));

	list ($ret, $this->_item) = $this->_item->refresh();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals('new title', $this->_item->getTitle());
	$this->assertEquals('new summary', $this->_item->getSummary());
	$this->assertEquals('new description', $this->_item->getDescription());
	$this->assertEquals('new keywords', $this->_item->getKeywords());
    }

    function testProppatchRequiresEditPermission() {
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_item->getId(), $this->_userId, 'core.all');
	if ($ret) {
	    return $ret;
	}

	$ret = GalleryCoreApi::removeUserPermission(
	    $this->_item->getId(), $this->_userId, 'core.edit');
	if ($ret) {
	    return $ret;
	}

$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
if ($ret) {
    return $ret;
}
	$this->_streamWrapperRegister();

	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$_SERVER['REQUEST_METHOD'] = 'PROPPATCH';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$this->_streams['test://input'] =
	    implode("\r\n", array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:propertyupdate xmlns:D="DAV:" xmlns:G="http://gallery2.org/dav/props/">',
	    '  <D:set>',
	    '    <D:prop>',
	    '      <D:displayname>new title</D:displayname>',
	    '      <G:summary>new summary</G:summary>',
	    '      <G:description>new description</G:description>',
	    '      <G:keywords>new keywords</G:keywords>',
	    '    </D:prop>',
	    '  </D:set>',
	    '</D:propertyupdate>'));

	$this->_platform->_streams['php://input'] = $this->_platform->fopen('test://input', 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret && !($ret->getErrorCode() & ERROR_PERMISSION_DENIED)) {
	    return $ret;
	}

	$this->assert($ret);

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 401 Unauthorized';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));
    }

    function testProppatchWithSpecialCharacters() {
	$this->_streamWrapperRegister();

	$ret = $this->_rename($this->_album, 'The Quick!Brown#Fox');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_rename($this->_item, 'Jumps Over%The/Lazy_Dog');
	if ($ret) {
	    return $ret;
	}

	$path = '/' . rawurlencode('The Quick!Brown#Fox')
	    . '/' . rawurlencode('Jumps Over%The/Lazy_Dog');

	$_SERVER['REQUEST_METHOD'] = 'PROPPATCH';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$this->_streams['test://input'] =
	    implode("\r\n", array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:propertyupdate xmlns:D="DAV:" xmlns:G="http://gallery2.org/dav/props/">',
	    '  <D:set>',
	    '    <D:prop>',
	    '      <D:displayname>new title</D:displayname>',
	    '      <G:summary>new summary</G:summary>',
	    '      <G:description>new description</G:description>',
	    '      <G:keywords>new keywords</G:keywords>',
	    '    </D:prop>',
	    '  </D:set>',
	    '</D:propertyupdate>'));

	$this->_platform->_streams['php://input'] = $this->_platform->fopen('test://input', 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 207 Multi-Status';
	$expectedHeaders['content-type'] = 'Content-Type: text/xml; charset="utf-8"';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$expectedOutput = array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:multistatus xmlns:D="DAV:">',
	    '  <D:response xmlns:G="http://gallery2.org/dav/props/">',
	    '    <D:href>' . $this->_getHref($path) . '</D:href>',
	    '    <D:propstat>',
	    '      <D:prop>',
	    '        <D:displayname>new title</D:displayname>',
	    '        <G:summary>new summary</G:summary>',
	    '        <G:description>new description</G:description>',
	    '        <G:keywords>new keywords</G:keywords>',
	    '      </D:prop>',
	    '      <D:status>HTTP/1.1 200 OK</D:status>',
	    '    </D:propstat>',
	    '  </D:response>',
	    '</D:multistatus>',
	    '');
	$this->assertEquals($expectedOutput, split("\r?\n", $output));

	list ($ret, $this->_item) = $this->_item->refresh();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals('new title', $this->_item->getTitle());
	$this->assertEquals('new summary', $this->_item->getSummary());
	$this->assertEquals('new description', $this->_item->getDescription());
	$this->assertEquals('new keywords', $this->_item->getKeywords());
    }

    function testProppatchWithCharsetConversion() {
	$this->_streamWrapperRegister();

	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$_SERVER['REQUEST_METHOD'] = 'PROPPATCH';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$newTitle = "\xd8\xa7\xd9\x84\xd8\xb9\xd9\x86\xd9\x88\xd8\xa7\xd9\x86";
	$newSummary = "\xd8\xa7\xd9\x84\xd9\x85\xd9\x84\xd8\xae\xd8\xb5";
	$newDescription = "\xd8\xa7\xd9\x84\xd9\x88\xd8\xb5\xd9\x81";
	$newKeywords = "\xd9\x85\xd9\x81\xd8\xa7\xd8\xaa\xd9\x8a\xd8\xad\x20\xd8\xa7\xd9"
	    . "\x84\xd8\xa8\xd8\xad\xd8\xab";

	$this->_streams['test://input'] = GalleryCoreApi::convertFromUtf8(
	    implode("\r\n", array('<?xml version="1.0" encoding="iso-8859-6" ?>',
	    '<D:propertyupdate xmlns:D="DAV:" xmlns:G="http://gallery2.org/dav/props/">',
	    '  <D:set>',
	    '    <D:prop>',
	    '      <D:displayname>' . $newTitle . '</D:displayname>',
	    '      <G:summary>' . $newSummary . '</G:summary>',
	    '      <G:description>' . $newDescription . '</G:description>',
	    '      <G:keywords>' . $newKeywords . '</G:keywords>',
	    '    </D:prop>',
	    '  </D:set>',
	    '</D:propertyupdate>')), 'iso-8859-6');

	$this->_platform->_streams['php://input'] = $this->_platform->fopen('test://input', 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 207 Multi-Status';
	$expectedHeaders['content-type'] = 'Content-Type: text/xml; charset="utf-8"';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$expectedOutput = array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:multistatus xmlns:D="DAV:">',
	    '  <D:response xmlns:G="http://gallery2.org/dav/props/">',
	    '    <D:href>' . $this->_getHref($path) . '</D:href>',
	    '    <D:propstat>',
	    '      <D:prop>',
	    '        <D:displayname>' . $newTitle . '</D:displayname>',
	    '        <G:summary>' . $newSummary . '</G:summary>',
	    '        <G:description>' . $newDescription . '</G:description>',
	    '        <G:keywords>' . $newKeywords . '</G:keywords>',
	    '      </D:prop>',
	    '      <D:status>HTTP/1.1 200 OK</D:status>',
	    '    </D:propstat>',
	    '  </D:response>',
	    '</D:multistatus>',
	    '');
	$this->assertEquals($expectedOutput, split("\r?\n", $output));

	list ($ret, $this->_item) = $this->_item->refresh();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($newTitle, $this->_item->getTitle());
	$this->assertEquals($newSummary, $this->_item->getSummary());
	$this->assertEquals($newDescription, $this->_item->getDescription());
	$this->assertEquals($newKeywords, $this->_item->getKeywords());
    }

    function testMkcol() {
	$pathComponent = 'testAlbum-' . rand();

	list ($ret, $path) = $this->_album->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}
	$path .= $pathComponent;

	$_SERVER['REQUEST_METHOD'] = 'MKCOL';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 201 Created';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));

	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath($path);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($itemId, 'GalleryAlbumItem');
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($pathComponent, $item->getTitle());
	$this->assertEquals('', $item->getSummary());
	$this->assertEquals('', $item->getDescription());
	$this->assertEquals('', $item->getKeywords());
    }

    function testMkcolWithSpecialCharacters() {
	global $gallery;

	$ret = $this->_rename($this->_album, 'The Quick!Brown#Fox');
	if ($ret) {
	    return $ret;
	}

	$pathComponent = 'Jumps Over%The/Lazy_Dog';

	$path = '/' . rawurlencode('The Quick!Brown#Fox') . '/';
	$path .= rawurlencode($pathComponent);

	$_SERVER['REQUEST_METHOD'] = 'MKCOL';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 201 Created';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));

	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath($path);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($itemId, 'GalleryAlbumItem');
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($pathComponent, $item->getTitle());
	$this->assertEquals('', $item->getSummary());
	$this->assertEquals('', $item->getDescription());
	$this->assertEquals('', $item->getKeywords());

	$query = '
	    SELECT
	      [WebDavPathComponentMap::pathComponent]
	    FROM
	      [WebDavPathComponentMap]
	    WHERE
	      [WebDavPathComponentMap::itemId] = ?';
	list ($ret, $results) = $gallery->search($query, $itemId);
	if ($ret) {
	    return $ret;
	}
	if (($result = $results->nextResult()) === false) {
	    return GalleryCoreApi::error(ERROR_MISSING_VALUE);
	}
	$this->assertEquals($pathComponent, $result[0]);
    }

    function testDelete() {
	list ($ret, $path) = $this->_subAlbum->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$_SERVER['REQUEST_METHOD'] = 'DELETE';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 204 No Content';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));

	/* Make sure the album is really gone */
	$ret = $this->_verifyMissing($this->_subAlbum->getId());
	if ($ret) {
	    return $ret;
	}
    }

    function testAdd() {
	$filePath = dirname(__FILE__) . '/../../../core/test/data/test1.gif';
	$fileSize = $this->_platform->filesize($filePath);

	$pathComponent = basename($filePath);

	list ($ret, $path) = $this->_album->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}
	$path .= $pathComponent;

	$_SERVER['REQUEST_METHOD'] = 'PUT';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$_SERVER['CONTENT_LENGTH'] = $fileSize;
	$_SERVER['CONTENT_TYPE'] = 'test/file';

	/*
	 * Regression: Check that HTTP_CONTENT_LENGTH and HTTP_CONTENT_TYPE are ignored.  These
	 * variables are defined on IIS + mod_php.
	 */
	$_SERVER['HTTP_CONTENT_LENGTH'] = $_SERVER['CONTENT_LENGTH'];
	$_SERVER['HTTP_CONTENT_TYPE'] = $_SERVER['CONTENT_TYPE'];

	$this->_platform->_streams['php://input'] = $this->_platform->fopen($filePath, 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 201 Created';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	//$this->assertEquals(array(''), split("\r?\n", $output));

	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath($path);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($itemId, 'GalleryDataItem');
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($pathComponent, $item->getTitle());
	$this->assertEquals('', $item->getSummary());
	$this->assertEquals('', $item->getDescription());
	$this->assertEquals('image/gif', $item->getMimeType());
	$this->assertEquals($fileSize, $item->getSize());
    }

    function testAddWithSpecialCharacters() {
	global $gallery;

	$ret = $this->_rename($this->_album, 'The Quick!Brown#Fox');
	if ($ret) {
	    return $ret;
	}

	$filePath = dirname(__FILE__) . '/../../../core/test/data/test1.gif';
	$fileSize = $this->_platform->filesize($filePath);

	$pathComponent = 'Jumps Over%The/Lazy_Dog';

	$path = '/' . rawurlencode('The Quick!Brown#Fox') . '/';
	$path .= rawurlencode($pathComponent);

	$_SERVER['REQUEST_METHOD'] = 'PUT';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$_SERVER['CONTENT_LENGTH'] = $fileSize;
	$_SERVER['CONTENT_TYPE'] = 'test/file';

	/*
	 * Regression: Check that HTTP_CONTENT_LENGTH and HTTP_CONTENT_TYPE are ignored.  These
	 * variables are defined on IIS + mod_php.
	 */
	$_SERVER['HTTP_CONTENT_LENGTH'] = $_SERVER['CONTENT_LENGTH'];
	$_SERVER['HTTP_CONTENT_TYPE'] = $_SERVER['CONTENT_TYPE'];

	$this->_platform->_streams['php://input'] = $this->_platform->fopen($filePath, 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 201 Created';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	//$this->assertEquals(array(''), split("\r?\n", $output));

	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath($path);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($itemId, 'GalleryDataItem');
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($pathComponent, $item->getTitle());
	$this->assertEquals('', $item->getSummary());
	$this->assertEquals('', $item->getDescription());
	$this->assertEquals('application/unknown', $item->getMimeType());
	$this->assertEquals($fileSize, $item->getSize());

	$query = '
	    SELECT
	      [WebDavPathComponentMap::pathComponent]
	    FROM
	      [WebDavPathComponentMap]
	    WHERE
	      [WebDavPathComponentMap::itemId] = ?';
	list ($ret, $results) = $gallery->search($query, $itemId);
	if ($ret) {
	    return $ret;
	}
	if (($result = $results->nextResult()) === false) {
	    return GalleryCoreApi::error(ERROR_MISSING_VALUE);
	}
	$this->assertEquals($pathComponent, $result[0]);
    }

    /**
     * Mac OS X and GNOME both make PUT requests with empty bodies.
     */
    function testAddWithEmptyBody() {
	$pathComponent = 'test1.gif';

	list ($ret, $path) = $this->_album->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}
	$path .= $pathComponent;

	$_SERVER['REQUEST_METHOD'] = 'PUT';

	/* Tolerate suppressed error in getImageSize() */
	set_error_handler('WebDavTest_error_handler');

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$_SERVER['CONTENT_LENGTH'] = 0;
	$_SERVER['CONTENT_TYPE'] = 'test/file';

	/*
	 * Regression: Check that HTTP_CONTENT_LENGTH and HTTP_CONTENT_TYPE are ignored.  These
	 * variables are defined on IIS + mod_php.
	 */
	$_SERVER['HTTP_CONTENT_LENGTH'] = $_SERVER['CONTENT_LENGTH'];
	$_SERVER['HTTP_CONTENT_TYPE'] = $_SERVER['CONTENT_TYPE'];

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 201 Created';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	//$this->assertEquals(array(''), split("\r?\n", $output));

	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath($path);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($itemId, 'GalleryDataItem');
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($pathComponent, $item->getTitle());
	$this->assertEquals('', $item->getSummary());
	$this->assertEquals('', $item->getDescription());
	$this->assertEquals('image/gif', $item->getMimeType());
	$this->assertEquals(0, $item->getSize());
    }

    function testReplace() {
	$filePath = dirname(__FILE__) . '/../../../core/test/data/test1.gif';
	$fileSize = $this->_platform->filesize($filePath);

	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$_SERVER['REQUEST_METHOD'] = 'PUT';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$_SERVER['CONTENT_LENGTH'] = $fileSize;
	$_SERVER['CONTENT_TYPE'] = 'test/file';

	/*
	 * Regression: Check that HTTP_CONTENT_LENGTH and HTTP_CONTENT_TYPE are ignored.  These
	 * variables are defined on IIS + mod_php.
	 */
	$_SERVER['HTTP_CONTENT_LENGTH'] = $_SERVER['CONTENT_LENGTH'];
	$_SERVER['HTTP_CONTENT_TYPE'] = $_SERVER['CONTENT_TYPE'];

	$this->_platform->_streams['php://input'] = $this->_platform->fopen($filePath, 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 204 No Content';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));

	/* Make sure the item is really gone */
	$ret = $this->_verifyMissing($this->_item->getId());
	if ($ret) {
	    return $ret;
	}

	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath($path);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($itemId, 'GalleryDataItem');
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($this->_item->getTitle(), $item->getTitle());
	$this->assertEquals($this->_item->getSummary(), $item->getSummary());
	$this->assertEquals($this->_item->getDescription(), $item->getDescription());
	$this->assertEquals('application/unknown', $item->getMimeType());
	$this->assertEquals($fileSize, $item->getSize());
    }

    function testReplaceWithSpecialCharacters() {
	global $gallery;

	$ret = $this->_rename($this->_album, 'The Quick!Brown#Fox');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_rename($this->_item, 'Jumps Over%The/Lazy_Dog');
	if ($ret) {
	    return $ret;
	}

	$filePath = dirname(__FILE__) . '/../../../core/test/data/test1.gif';
	$fileSize = $this->_platform->filesize($filePath);

	$path = '/' . rawurlencode('The Quick!Brown#Fox')
	    . '/' . rawurlencode('Jumps Over%The/Lazy_Dog');

	$pathComponent = 'Jumps Over%The/Lazy_Dog';

	$_SERVER['REQUEST_METHOD'] = 'PUT';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$_SERVER['CONTENT_LENGTH'] = $fileSize;
	$_SERVER['CONTENT_TYPE'] = 'test/file';

	/*
	 * Regression: Check that HTTP_CONTENT_LENGTH and HTTP_CONTENT_TYPE are ignored.  These
	 * variables are defined on IIS + mod_php.
	 */
	$_SERVER['HTTP_CONTENT_LENGTH'] = $_SERVER['CONTENT_LENGTH'];
	$_SERVER['HTTP_CONTENT_TYPE'] = $_SERVER['CONTENT_TYPE'];

	$this->_platform->_streams['php://input'] = $this->_platform->fopen($filePath, 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 204 No Content';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));

	/* Make sure the item is really gone */
	$ret = $this->_verifyMissing($this->_item->getId());
	if ($ret) {
	    return $ret;
	}

	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath($path);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($itemId, 'GalleryDataItem');
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($this->_item->getTitle(), $item->getTitle());
	$this->assertEquals($this->_item->getSummary(), $item->getSummary());
	$this->assertEquals($this->_item->getDescription(), $item->getDescription());
	$this->assertEquals('application/unknown', $item->getMimeType());
	$this->assertEquals($fileSize, $item->getSize());

	$query = '
	    SELECT
	      [WebDavPathComponentMap::pathComponent]
	    FROM
	      [WebDavPathComponentMap]
	    WHERE
	      [WebDavPathComponentMap::itemId] = ?';
	list ($ret, $results) = $gallery->search($query, $itemId);
	if ($ret) {
	    return $ret;
	}
	if (($result = $results->nextResult()) === false) {
	    return GalleryCoreApi::error(ERROR_MISSING_VALUE);
	}
	$this->assertEquals($pathComponent, $result[0]);
    }

    function testReplaceWithNewClass() {
	$filePath = dirname(__FILE__) . '/../../../core/test/data/test1.gif';
	$fileSize = $this->_platform->filesize($filePath);

	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$_SERVER['REQUEST_METHOD'] = 'PUT';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$_SERVER['CONTENT_LENGTH'] = $fileSize;
	$_SERVER['CONTENT_TYPE'] = 'image/gif';

	/*
	 * Regression: Check that HTTP_CONTENT_LENGTH and HTTP_CONTENT_TYPE are ignored.  These
	 * variables are defined on IIS + mod_php.
	 */
	$_SERVER['HTTP_CONTENT_LENGTH'] = $_SERVER['CONTENT_LENGTH'];
	$_SERVER['HTTP_CONTENT_TYPE'] = $_SERVER['CONTENT_TYPE'];

	$this->_platform->_streams['php://input'] = $this->_platform->fopen($filePath, 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 204 No Content';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));

	/* Make sure the item is really gone */
	$ret = $this->_verifyMissing($this->_item->getId());
	if ($ret) {
	    return $ret;
	}

	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath($path);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($itemId, 'GalleryDataItem');
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($this->_item->getTitle(), $item->getTitle());
	$this->assertEquals($this->_item->getSummary(), $item->getSummary());
	$this->assertEquals($this->_item->getDescription(), $item->getDescription());
	$this->assertEquals('image/gif', $item->getMimeType());
	$this->assertEquals($fileSize, $item->getSize());
    }

    function testReplaceRequiresDataItem() {
	$filePath = dirname(__FILE__) . '/../../../core/test/data/test1.gif';
	$fileSize = $this->_platform->filesize($filePath);

	list ($ret, $path) = $this->_album->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$_SERVER['REQUEST_METHOD'] = 'PUT';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$_SERVER['CONTENT_LENGTH'] = $fileSize;
	$_SERVER['CONTENT_TYPE'] = 'test/file';

	/*
	 * Regression: Check that HTTP_CONTENT_LENGTH and HTTP_CONTENT_TYPE are ignored.  These
	 * variables are defined on IIS + mod_php.
	 */
	$_SERVER['HTTP_CONTENT_LENGTH'] = $_SERVER['CONTENT_LENGTH'];
	$_SERVER['HTTP_CONTENT_TYPE'] = $_SERVER['CONTENT_TYPE'];

	$this->_platform->_streams['php://input'] = $this->_platform->fopen($filePath, 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret && !($ret->getErrorCode() & ERROR_BAD_DATA_TYPE)) {
	    return $ret;
	}

	$this->assert($ret);

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 403 Forbidden';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));
    }

    function testMove() {
	global $gallery;

	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$pathComponent = 'testItem-' . rand();

	list ($ret, $newPath) = $this->_subAlbum->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}
	$newPath .= $pathComponent;

	$_SERVER['REQUEST_METHOD'] = 'MOVE';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$_SERVER['HTTP_DESTINATION'] =
	    'http://example.com/gallery2/main.php' . $newPath . '?g2_controller=webdav.WebDav';
	/* Assuming that the WebDAV rewrite rules are enabled */
	if (GalleryUtilities::isA($this->_urlGenerator, 'RewriteUrlGenerator')) {
	    $_SERVER['HTTP_DESTINATION'] = 'http://example.com/gallery2/w' . $newPath;
	}

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 201 Created';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));

	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath($newPath);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($this->_item->getId(), $itemId);
    }

    function testMoveWithSpecialCharacters() {
	global $gallery;

	$ret = $this->_rename($this->_album, 'The Quick!Brown#Fox');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_rename($this->_item, 'Jumps Over%The/Lazy_Dog');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_rename($this->_subAlbum, 'The Quick!Brown#Fox');
	if ($ret) {
	    return $ret;
	}

	$path = '/' . rawurlencode('The Quick!Brown#Fox')
	    . '/' . rawurlencode('Jumps Over%The/Lazy_Dog');

	$pathComponent = 'Jumps Over%The/Lazy_Dog';

	$newPath = '/' . rawurlencode('The Quick!Brown#Fox')
	    . '/' . rawurlencode('The Quick!Brown#Fox') . '/';
	$newPath .= rawurlencode($pathComponent);

	$_SERVER['REQUEST_METHOD'] = 'MOVE';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$_SERVER['HTTP_DESTINATION'] =
	    'http://example.com/gallery2/main.php' . $newPath . '?g2_controller=webdav.WebDav';
	/* Assuming that the WebDAV rewrite rules are enabled */
	if (GalleryUtilities::isA($this->_urlGenerator, 'RewriteUrlGenerator')) {
	    $_SERVER['HTTP_DESTINATION'] = 'http://example.com/gallery2/w' . $newPath;
	}

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 201 Created';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));

	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath($newPath);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($this->_item->getId(), $itemId);

	$query = '
	    SELECT
	      [WebDavPathComponentMap::pathComponent]
	    FROM
	      [WebDavPathComponentMap]
	    WHERE
	      [WebDavPathComponentMap::itemId] = ?';
	list ($ret, $results) = $gallery->search($query, $itemId);
	if ($ret) {
	    return $ret;
	}
	if (($result = $results->nextResult()) === false) {
	    return GalleryCoreApi::error(ERROR_MISSING_VALUE);
	}
	$this->assertEquals($pathComponent, $result[0]);
    }

    /**
     * Helper function for lock tests.
     * @param string $path resource to lock
     * @return array object GalleryStatus a status code
     *               array new WebDAV lock (scope, type, depth, owner, expires, token, path)
     */
    function _testLock($path) {
	$_SERVER['REQUEST_METHOD'] = 'LOCK';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$_SERVER['HTTP_TIMEOUT'] = 'Infinite, Second-4100000000';

	$this->_streams['test://input'] =
	    implode("\r\n", array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:lockinfo xmlns:D="DAV:">',
	    '  <D:lockscope><D:exclusive/></D:lockscope>',
	    '  <D:locktype><D:write/></D:locktype>',
	    '  <D:owner>testOwner</D:owner>',
	    '</D:lockinfo>'));

	$this->_platform->_streams['php://input'] = $this->_platform->fopen('test://input', 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return array($ret, null);
	}

	list ($ret, list ($lock)) = WebDavHelper::getLocks($path);
	if ($ret) {
	    return array($ret, null);
	}

	$this->assertEquals('exclusive', $lock['scope']);
	$this->assertEquals('write', $lock['type']);
	$this->assertEquals('infinity', $lock['depth']);
	$this->assertEquals('testOwner', $lock['owner']);
	$this->assertEquals((time() + 30), $lock['expires']);

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 200 OK';
	$expectedHeaders['content-type'] = 'Content-Type: text/xml; charset="utf-8"';
	$expectedHeaders['lock-token'] = 'Lock-Token: <' . $lock['token'] . '>';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$expectedOutput = array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:prop xmlns:D="DAV:">',
	    '  <D:lockdiscovery>',
	    '    <D:activelock>',
	    '            <D:lockscope><D:exclusive/></D:lockscope>',
	    '            <D:locktype><D:write/></D:locktype>',
	    '            <D:depth>Infinity</D:depth>',
	    '            <D:owner>testOwner</D:owner>',
	    '            <D:timeout>Second-30</D:timeout>',
	    '            <D:locktoken><D:href>' . $lock['token'] . '</D:href></D:locktoken>',
	    '          </D:activelock>',
	    '  </D:lockdiscovery>',
	    '</D:prop>',
	    '');
	$this->assertEquals($expectedOutput, split("\r?\n", $output));

	return array(null, $lock);
    }

    /**
     * Helper function for lock tests.
     * @param array $lock WebDAV lock to unlock (scope, type, depth, owner, expires, token, path)
     * @return object GalleryStatus a status code
     */
    function _testUnlock($lock) {
	$_SERVER['REQUEST_METHOD'] = 'UNLOCK';

	WebDavHelper::putRequestVariable('path', $lock['path'], true, false);

	$_SERVER['HTTP_LOCK_TOKEN'] = "<$lock[token]>";

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 204 No Content';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));

	$ret = WebDavHelper::checkLocks($lock['path']);
	if ($ret) {
	    return $ret;
	}

	return null;
    }

    function testLockUnlock() {
	$this->_streamWrapperRegister();

	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	list ($ret, $lock) = $this->_testLock($path);
	if ($ret) {
	    return $ret;
	}

	$this->_responseHeaders = null;

	$ret = $this->_testUnlock($lock);
	if ($ret) {
	    return $ret;
	}
    }

    function testLockRefresh() {
	$this->_streamWrapperRegister();

	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	list ($ret, $lock) = $this->_testLock($path);
	if ($ret) {
	    return $ret;
	}

	$this->_responseHeaders = null;

	$_SERVER['REQUEST_METHOD'] = 'LOCK';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$_SERVER['HTTP_IF'] = '(<' . $lock['token'] . '>)';
	$_SERVER['HTTP_TIMEOUT'] = 'Infinite, Second-4100000000';

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	list ($ret, list ($lock)) = WebDavHelper::getLocks($path);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals('exclusive', $lock['scope']);
	$this->assertEquals('write', $lock['type']);
	$this->assertEquals('infinity', $lock['depth']);
	$this->assertEquals('testOwner', $lock['owner']);
	$this->assertEquals((time() + 30), $lock['expires']);

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 200 OK';
	$expectedHeaders['content-type'] = 'Content-Type: text/xml; charset="utf-8"';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$expectedOutput = array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:prop xmlns:D="DAV:">',
	    '  <D:lockdiscovery>',
	    '    <D:activelock>',
	    '            <D:lockscope><D:exclusive/></D:lockscope>',
	    '            <D:locktype><D:write/></D:locktype>',
	    '            <D:depth>Infinity</D:depth>',
	    '            <D:owner>testOwner</D:owner>',
	    '            <D:timeout>Second-30</D:timeout>',
	    '            <D:locktoken><D:href>' . $lock['token'] . '</D:href></D:locktoken>',
	    '          </D:activelock>',
	    '  </D:lockdiscovery>',
	    '</D:prop>',
	    '');
	$this->assertEquals($expectedOutput, split("\r?\n", $output));

	$this->_responseHeaders = null;

	$ret = $this->_testUnlock($lock);
	if ($ret) {
	    return $ret;
	}
    }

    function testLockConflict() {
	$this->_streamWrapperRegister();

	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	list ($ret, $lock) = $this->_testLock($path);
	if ($ret) {
	    return $ret;
	}

	$this->_responseHeaders = null;

	list ($ret, $path) = $this->_album->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$_SERVER['REQUEST_METHOD'] = 'LOCK';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$_SERVER['HTTP_TIMEOUT'] = 'Infinite, Second-4100000000';

	$this->_streams['test://input'] =
	    implode("\r\n", array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:lockinfo xmlns:D="DAV:">',
	    '  <D:lockscope><D:exclusive/></D:lockscope>',
	    '  <D:locktype><D:write/></D:locktype>',
	    '  <D:owner>testOwner</D:owner>',
	    '</D:lockinfo>'));

	$this->_platform->_streams['php://input'] = $this->_platform->fopen('test://input', 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	list ($ret, $locks) = WebDavHelper::getLocks($path);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array(), $locks);

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 409 Conflict';
	$expectedHeaders['content-type'] = 'Content-Type: text/xml; charset="utf-8"';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$expectedOutput = array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:multistatus xmlns:D="DAV:">',
	    '  <D:response>',
	    '    <D:href>' . $this->_getHref($lock['path']) . '</D:href>',
	    '    <D:status>HTTP/1.1 423 Locked</D:status>',
	    '  </D:response>',
	    '</D:multistatus>',
	    '');
	$this->assertEquals($expectedOutput, split("\r?\n", $output));

	$this->_responseHeaders = null;

	$ret = $this->_testUnlock($lock);
	if ($ret) {
	    return $ret;
	}
    }

    function testLockConflictWithSpecialCharacters() {
	$this->_streamWrapperRegister();

	$ret = $this->_rename($this->_album, 'The Quick!Brown#Fox');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_rename($this->_item, 'Jumps Over%The/Lazy_Dog');
	if ($ret) {
	    return $ret;
	}

	$path = '/' . rawurlencode('The Quick!Brown#Fox')
	    . '/' . rawurlencode('Jumps Over%The/Lazy_Dog');

	list ($ret, $lock) = $this->_testLock($path);
	if ($ret) {
	    return $ret;
	}

/*
	$this->_responseHeaders = null;

	$path = '/' . rawurlencode('The Quick!Brown#Fox') . '/';

	$_SERVER['REQUEST_METHOD'] = 'LOCK';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	$_SERVER['HTTP_TIMEOUT'] = 'Infinite, Second-4100000000';

	$this->_streams['test://input'] =
	    implode("\r\n", array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:lockinfo xmlns:D="DAV:">',
	    '  <D:lockscope><D:exclusive/></D:lockscope>',
	    '  <D:locktype><D:write/></D:locktype>',
	    '  <D:owner>testOwner</D:owner>',
	    '</D:lockinfo>'));

	$this->_platform->_streams['php://input'] = $this->_platform->fopen('test://input', 'rb');

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	list ($ret, $locks) = WebDavHelper::getLocks($path);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array(), $locks);

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 409 Conflict';
	$expectedHeaders['content-type'] = 'Content-Type: text/xml; charset="utf-8"';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$expectedOutput = array('<?xml version="1.0" encoding="utf-8" ?>',
	    '<D:multistatus xmlns:D="DAV:">',
	    '  <D:response>',
	    '    <D:href>' . $this->_getHref($lock['path']) . '</D:href>',
	    '    <D:status>HTTP/1.1 423 Locked</D:status>',
	    '  </D:response>',
	    '</D:multistatus>',
	    '');
	$this->assertEquals($expectedOutput, split("\r?\n", $output));
*/

	$this->_responseHeaders = null;

	$ret = $this->_testUnlock($lock);
	if ($ret) {
	    return $ret;
	}
    }

    function testMissingObject() {
	$pathComponent = 'testItem-' . rand();

	list ($ret, $path) = $this->_album->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}
	$path .= $pathComponent;

	$_SERVER['REQUEST_METHOD'] = 'GET';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret && !($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
	    return $ret;
	}

	$this->assert($ret);

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 404 Not Found';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));
    }

    function testSuppressMacDotUnderscore() {
	$pathComponent = '._testItem-' . rand();

	list ($ret, $path) = $this->_album->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}
	$path .= $pathComponent;

	$_SERVER['REQUEST_METHOD'] = 'PUT';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret && !($ret->getErrorCode() & ERROR_BAD_PATH)) {
	    return $ret;
	}

	$this->assert($ret);

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 200 OK';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));

	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath($path);
	if ($ret && !($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
	    return $ret;
	}

	$this->assert($ret);

	$this->_responseHeaders = null;

	$_SERVER['REQUEST_METHOD'] = 'GET';

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret && !($ret->getErrorCode() & ERROR_BAD_PATH)) {
	    return $ret;
	}

	$this->assert($ret);

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 200 OK';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));
    }

    function testSuppressMacDotDsStore() {
	$pathComponent = '.DS_Store';

	list ($ret, $path) = $this->_album->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}
	$path .= $pathComponent;

	$_SERVER['REQUEST_METHOD'] = 'PUT';

	WebDavHelper::putRequestVariable('path', $path, true, false);

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret && !($ret->getErrorCode() & ERROR_BAD_PATH)) {
	    return $ret;
	}

	$this->assert($ret);

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 403 Forbidden';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));

	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath($path);
	if ($ret && !($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
	    return $ret;
	}

	$this->assert($ret);

	$this->_responseHeaders = null;

	$_SERVER['REQUEST_METHOD'] = 'GET';

	ob_start();
	list ($ret, $g2Data) = _GalleryMain();
	if ($ret) {
	    _GalleryMain_errorHandler($ret, $g2Data);
	}
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret && !($ret->getErrorCode() & ERROR_BAD_PATH)) {
	    return $ret;
	}

	$this->assert($ret);

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 403 Forbidden';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);

	$this->assertEquals(array(''), split("\r?\n", $output));
    }
}

class WebDavTestPhpVm extends GalleryPhpVm {

    function header($header, $replace=null) {
	/* Avoid modifying actual header information */
    }
}

class WebDavTestPlatform extends GalleryPlatform {
    var $_platform;
    var $_streams;

    function fopen($filename, $modes, $use_include_path=0) {
	if (empty($this->_streams[$filename])) {
	    return $this->_platform->fopen($filename, $modes, $use_include_path);
	}

	$handle = $this->_streams[$filename];
	unset($this->_streams[$filename]);

	return $handle;
    }

    function exec($cmdArray) {
	/* Pass exec requests to the real platform */
	return $this->_platform->exec($cmdArray);
    }
}

class WebDavTestStream {
    var $_filename;
    var $_position;

    function &_streams() {
	static $streams;
	return $streams;
    }

    function stream_open($filename, $modes, $options, &$opened_path) {
	$this->_filename = $filename;
	$this->_position = 0;

	return true;
    }

    function stream_read($count) {
	$streams = WebDavTestStream::_streams();
	$buffer = substr($streams[$this->_filename], $this->_position, $count);
	$this->_position += strlen($buffer);

	return $buffer;
    }

    function stream_eof() {
	$streams = WebDavTestStream::_streams();
	return $this->_position >= strlen($streams[$this->_filename]);
    }
}

/*
 * Our default unit test error_handler doesn't allow the suppression of errors, but getImageSize()
 * returns a PHP error when operating on an empty file.
 */
function WebDavTest_error_handler($errno, $errstr, $errfile, $errline) {
    if ($errno == 2 && preg_match('/(getimagesize().*: Read error)'
	    . '|(imagecreatefromgif().*:.* is not a valid GIF file)/', $errstr)) {
	return null;
    }

    /* Call our default error_handler */
    return PHPUnit_error_handler($errno, $errstr, $errfile, $errline);
}
?>
