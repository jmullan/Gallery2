<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/webdav/classes/WebDavHelper.class');

/**
 * WebDAV helper tests.
 * @package WebDav
 * @subpackage PHPUnit
 * @author Jack Bates <ms419@freezone.co.uk>
 * @version $Revision$
 */
class WebDavHelperTest extends GalleryTestCase {

    function WebDavHelperTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	$ret = parent::setUp();
	if ($ret) {
	    return $ret;
	}
	global $gallery;

	/* Try to use the rewrite URL generator */
	$this->_urlGenerator =& $gallery->getUrlGenerator();
	list ($ret, $this->_urlGenerator) = GalleryCoreApi::newFactoryInstance(
	    'GalleryUrlGenerator');
	if ($ret) {
	    return $ret;
	}
	if (!isset($this->_urlGenerator)) {
	    $this->_urlGenerator = new GalleryUrlGenerator();
	}

	$ret = $this->_urlGenerator->init('http://example.com/gallery2/main.php');
	if ($ret) {
	    return $ret;
	}

	/* Use WebDavHelperTestPhpVm */
	$this->_phpVm =& $gallery->_phpVm;
	$this->_phpVm = new WebDavHelperTestPhpVm();
	$this->_phpVm->_extension_loaded = true;

	/* Mock activate the HTTP auth and rewrite modules */
	$moduleStatus = array('httpauth' => array('active' => true),
			      'rewrite' => array('active' => true));
	GalleryDataCache::put('GalleryPluginHelper::fetchPluginList(module)', $moduleStatus);

	/* Mock preGallery rewrite parser.  Mock activate WebDAV rewrite rules. */
	$this->_parserType =& WebDavHelperTestRewriteApi::_parserType();
	$this->_parserType = 'preGallery';
	$this->_activeRules =& WebDavHelperTestRewriteApi::_activeRules();
	$this->_activeRules = array(null, array('connect', 'davmount', 'options'));
	$this->_registerFactoryImplementationForTest(
	    'RewriteApi', 'WebDavHelperTestRewriteApi', 'WebDavHelperTestRewriteApi',
	    'modules/webdav/test/phpunit/WebDavHelperTest.class', 'test');

	/* Define requests */
	$this->_optionsRequest = implode("\r\n", array(
	    'OPTIONS ' . $this->_urlGenerator->generateUrl(
		array('controller' => 'webdav.WebDav'),
		array('forceServerRelativeUrl' => true,
		      'htmlEntities' => false)) . ' HTTP/1.0',
	    'Host: ' . $this->_urlGenerator->getHostName(),
	    '',
	    ''));
	$this->_alternativeUrlRequest = implode("\r\n", array(
	    'OPTIONS ' . $this->_urlGenerator->generateUrl(
		array('href' => 'modules/webdav/data/options/'),
		array('forceServerRelativeUrl' => true,
		      'htmlEntities' => false)) . ' HTTP/1.0',
	    'Host: ' . $this->_urlGenerator->getHostName(),
	    '',
	    ''));

	/* Define success and failure responses */
	$this->_methodHandledResponse = implode("\r\n", array(
	    'HTTP/1.1 200 OK',
	    'Date: Mon, 24 Nov 2003 05:40:03 GMT',
	    'Server: Apache/1.3.28 (Unix)',
	    'Allow: OPTIONS,GET,HEAD,POST',
	    'Content-Length: 0',
	    'Connection: close',
	    'Content-Type: text/html',
	    '',
	    'PASS_WEBDAV'));
	$this->_methodNotHandledResponse = implode("\r\n", array(
	    'HTTP/1.1 200 OK',
	    'Date: Mon, 24 Nov 2003 05:40:03 GMT',
	    'Server: Apache/1.3.28 (Unix)',
	    'Allow: OPTIONS,GET,HEAD,POST',
	    'Content-Length: 0',
	    'Connection: close',
	    'Content-Type: text/html',
	    '',
	    ''));
	$this->_includesDavHeadersResponse = implode("\r\n", array(
	    'HTTP/1.1 200 OK',
	    'Date: Mon, 24 Nov 2003 05:40:03 GMT',
	    'Server: Apache/1.3.28 (Unix)',
	    'Allow: OPTIONS,PROPFIND,PROPPATCH,MKCOL,GET,HEAD,DELETE,PUT,MOVE,LOCK,UNLOCK',
	    'DAV: 1,2',
	    'MS-Author-Via: DAV',
	    'Content-Length: 0',
	    'Connection: close',
	    'Content-Type: text/html',
	    '',
	    ''));
	$this->_missingDavHeadersResponse = implode("\r\n", array(
	    'HTTP/1.1 200 OK',
	    'Date: Mon, 24 Nov 2003 05:40:03 GMT',
	    'Server: Apache/1.3.28 (Unix)',
	    'Allow: OPTIONS,GET,HEAD,POST',
	    'Content-Length: 0',
	    'Connection: close',
	    'Content-Type: text/html',
	    '',
	    ''));

	/* Use WebDavHelperTestPlatform */
	$this->_platform = new WebDavHelperTestPlatform();

	$this->_requests = array();
	foreach (array('PROPFIND', 'PROPPATCH', 'MKCOL', 'DELETE', 'PUT', 'MOVE', 'LOCK', 'UNLOCK')
		as $requestMethod) {
	    $this->_requests[$requestMethod] = implode("\r\n", array(
		$requestMethod . ' ' . $this->_urlGenerator->generateUrl(
		    array('view' => 'webdav.WebDavWorks'),
		    array('forceServerRelativeUrl' => true,
			  'htmlEntities' => false)) . ' HTTP/1.0',
		'Host: ' . $this->_urlGenerator->getHostName(),
		'Content-Length: 0', /* IIS requires Content-Length at least for PUT requests */
		'',
		''));

	    $this->_platform->_messages[$this->_requests[$requestMethod]] =
		$this->_methodHandledResponse;
	}

	$this->_platform->_messages[$this->_optionsRequest] =
	    $this->_includesDavHeadersResponse;
	$this->_platform->_messages[$this->_alternativeUrlRequest] =
	    $this->_includesDavHeadersResponse;
	$gallery->setPlatform($this->_platform);

	/* Any user agent */
	$_SERVER['HTTP_USER_AGENT'] = 'Test';

	/* Use WebDavHelperTestHttpAuthInterface */
	$this->_configuration =& WebDavHelperTestHttpAuthInterface::_configuration();
	$this->_configuration = array(null, true, false);
	$this->_requestAuthenticationCalls =&
	    WebDavHelperTestHttpAuthInterface::_requestAuthenticationCalls();
	$this->_requestAuthenticationCalls = null;
	$this->_registerFactoryImplementationForTest('HttpAuthInterface_1_0',
	    'WebDavHelperTestHttpAuthInterface', 'WebDavHelperTestHttpAuthInterface',
	    'modules/webdav/test/phpunit/WebDavHelperTest.class', 'test');

	/* Create test items */
	list ($ret, $this->_album) = $this->_createRandomAlbum(
	    $this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_album);

	list ($ret, $this->_item) = $this->_createRandomDataItem(
	    $this->_album->getId(), 'test/file');
	if ($ret) {
	    return $ret;
	}

	/* Reset request variables */
	$_SERVER['QUERY_STRING'] = null;
	$this->_requestVariables =& WebDavHelper::_requestVariables();
	$this->_requestVariables = null;

	/* Register event listeners */
	$this->_registerFactoryImplementationForTest('GalleryEventListener',
	    'WebDavModule', 'WebDavModule',
	    'modules/webdav/module.inc', 'webdav',
	    array('GalleryEntity::delete',
		  'GalleryEntity::save'));
    }

    function tearDown() {
	GalleryDataCache::reset();

	$ret = parent::tearDown();
	if ($ret) {
	    $this->failWithStatus($ret);
	}
    }

    function _rename(&$item, $pathComponent) {
	/* Write lock the item we're moving */
	list ($ret, $lockIds[]) = GalleryCoreApi::acquireWriteLock($item->getId());
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret;
	}

	/* Refresh the item in case it changed before it was locked */
	list ($ret, $item) = $item->refresh();
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret;
	}

	/* Rename the item */
	$oldPathComponent = $item->getPathComponent();
	$ret = $item->rename($pathComponent);
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret;
	}

	$ret = $item->save();
	if ($ret) {
	    $item->rename($oldPathComponent);
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret;
	}

	$ret = GalleryCoreApi::releaseLocks($lockIds);
	if ($ret) {
	    return $ret;
	}

	/* Set WebDAV path component */
	if ($item->getPathComponent() != $pathComponent) {
	    $ret = GalleryCoreApi::addMapEntry('WebDavPathComponentMap',
		array('itemId' => $item->getId(), 'pathComponent' => $pathComponent));
	    if ($ret) {
		return $ret;
	    }
	}

	return null;
    }

    function testCheckConfiguration() {
	list ($ret, $code) = WebDavHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(0, $code, 'Status code');
    }

    function testCheckConfigurationNoXmlParser() {
	$this->_phpVm->_extension_loaded = false;

	list ($ret, $code) = WebDavHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(WEBDAV_STATUS_NO_XML_PARSER, $code, 'Status code');
    }

    function testCheckConfigurationMethodNotHandled() {
	$this->_platform->_messages[$this->_requests['PROPFIND']] =
	    $this->_methodNotHandledResponse;

	list ($ret, $code) = WebDavHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(WEBDAV_STATUS_METHOD_NOT_HANDLED, $code, 'Status code');
    }

    function testCheckConfigurationHttpAuthModuleDisabled() {
	$moduleStatus = array('rewrite' => array('active' => true));
	GalleryDataCache::put('GalleryPluginHelper::fetchPluginList(module)', $moduleStatus);

	list ($ret, $code) = WebDavHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(WEBDAV_STATUS_HTTPAUTH_MODULE_DISABLED, $code, 'Status code');
    }

    /**
     * Though the HTTP auth module is active, all its plugins might be disabled.
     */
    function testCheckConfigurationHttpAuthPluginsDisabled() {
	$this->_configuration = array(null, false, false);

	list ($ret, $code) = WebDavHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(WEBDAV_STATUS_HTTPAUTH_PLUGINS_DISABLED, $code, 'Status code');
    }

    function testCheckConfigurationRewriteModuleDisabled() {
	$moduleStatus = array('httpauth' => array('active' => true));
	GalleryDataCache::put('GalleryPluginHelper::fetchPluginList(module)', $moduleStatus);

	list ($ret, $code) = WebDavHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(WEBDAV_STATUS_REWRITE_MODULE_DISABLED, $code, 'Status code');
    }

    function testCheckConfigurationConnectRuleDisabled() {
	$this->_activeRules = array(null, array('davmount', 'options'));

	list ($ret, $code) = WebDavHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(WEBDAV_STATUS_CONNECT_RULE_DISABLED, $code, 'Status code');
    }

    function testCheckConfigurationAlternativeUrlHeaders() {
	$this->_platform->_messages[$this->_optionsRequest] =
	    $this->_missingDavHeadersResponse;
	$this->_platform->_messages[$this->_alternativeUrlRequest] =
	    $this->_missingDavHeadersResponse;

	list ($ret, $code) = WebDavHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(WEBDAV_STATUS_MISSING_DAV_HEADERS
			    | WEBDAV_STATUS_ALTERNATIVE_URL_HEADERS, $code, 'Status code');
    }

    function testCheckConfigurationBadRewriteParser() {
	$this->_platform->_messages[$this->_optionsRequest] =
	    $this->_missingDavHeadersResponse;
	$this->_parserType = 'inGallery';

	list ($ret, $code) = WebDavHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(WEBDAV_STATUS_MISSING_DAV_HEADERS
			    | WEBDAV_STATUS_BAD_REWRITE_PARSER, $code, 'Status code');
    }

    function testCheckConfigurationOptionsRuleDisabled() {
	$this->_platform->_messages[$this->_optionsRequest] =
	    $this->_missingDavHeadersResponse;
	$this->_activeRules = array(null, array('connect', 'davmount'));

	list ($ret, $code) = WebDavHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(WEBDAV_STATUS_MISSING_DAV_HEADERS
			    | WEBDAV_STATUS_OPTIONS_RULE_DISABLED, $code, 'Status code');
    }

    function testCheckConfigurationErrorUnknown() {
	$this->_platform->_messages[$this->_optionsRequest] =
	    $this->_missingDavHeadersResponse;

	list ($ret, $code) = WebDavHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(WEBDAV_STATUS_MISSING_DAV_HEADERS
			    | WEBDAV_STATUS_ERROR_UNKNOWN, $code, 'Status code');
    }

    function testCheckConfigurationIncludesDavHeadersIgnoresCauses() {
	$this->_platform->_messages[$this->_alternativeUrlRequest] =
	    $this->_missingDavHeadersResponse;
	$this->_parserType = 'bogus';
	$this->_activeRules = array(null, array('connect', 'davmount'));

	list ($ret, $code) = WebDavHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(0, $code, 'Status code');
    }

    function testCheckRequestMethod() {
	$success = WebDavHelper::checkRequestMethod('PROPFIND');
	$this->assert($success);
    }

    function testCheckRequestMethodNotHandled() {
	$this->_platform->_messages[$this->_requests['PROPFIND']] =
	    $this->_methodNotHandledResponse;

	$success = WebDavHelper::checkRequestMethod('PROPFIND');
	$this->assert(!$success);
    }

    function testCheckDavHeaders() {
	$success = WebDavHelper::checkDavHeaders($this->_urlGenerator->generateUrl(
	    array('controller' => 'webdav.WebDav'),
	    array('forceFullUrl' => true,
		  'htmlEntities' => false)));
	$this->assert($success);
    }

    function testCheckMissingDavHeaders() {
	$this->_platform->_messages[$this->_optionsRequest] =
	    $this->_missingDavHeadersResponse;

	$success = WebDavHelper::checkDavHeaders($this->_urlGenerator->generateUrl(
	    array('controller' => 'webdav.WebDav'),
	    array('forceFullUrl' => true,
		  'htmlEntities' => false)));
	$this->assert(!$success);
    }

    function testGetMountLink() {
	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$link = WebDavHelper::getMountLink($this->_item->getId());

	$expectedLink = array();
	$expectedLink['href'] = '/gallery2/main.php?g2_view=webdav.DownloadDavMount&amp;g2_itemId='
	    . $this->_item->getId();
	$url = 'http://example.com/gallery2/main.php?g2_controller=webdav.WebDav&amp;g2_itemId='
	    . $this->_item->getId();

	/* Assuming that the WebDAV rewrite rules are enabled */
	if (GalleryUtilities::isA($this->_urlGenerator, 'RewriteUrlGenerator')) {
	    $expectedLink['href'] = '/gallery2/v/' . ltrim($path, '/') . '.davmount';
	    $url = 'http://example.com/gallery2/w/' . ltrim($path, '/');
	}

	$expectedLink['attrs'] =
	    'style="behavior: url(#default#anchorClick)" folder="' . $url . '"';
	$this->assertEquals($expectedLink, $link);
    }

    function testGetMountLinkForInternetExplorer() {
	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$_SERVER['HTTP_USER_AGENT'] = 'MSIE 6';

	$link = WebDavHelper::getMountLink($this->_item->getId());

	$expectedLink = array();
	$expectedLink['href'] = '/gallery2/main.php?g2_view=webdav.DownloadDavMount&amp;g2_itemId='
	    . $this->_item->getId();
	$url = 'http://example.com/gallery2/main.php?g2_controller=webdav.WebDav&amp;g2_itemId='
	    . $this->_item->getId();
	$scriptUrl = 'http://example.com/gallery2/main.php?g2_controller=webdav.WebDav&g2_itemId='
	    . $this->_item->getId();

	/* Assuming that the WebDAV rewrite rules are enabled */
	if (GalleryUtilities::isA($this->_urlGenerator, 'RewriteUrlGenerator')) {
	    $expectedLink['href'] = '/gallery2/v/' . ltrim($path, '/') . '.davmount';
	    $url = 'http://example.com/gallery2/w/' . ltrim($path, '/');
	    $scriptUrl = 'http://example.com/gallery2/w/' . ltrim($path, '/');
	}

	$expectedLink['attrs'] =
	    'style="behavior: url(#default#anchorClick)" folder="' . $url . '"';
	$expectedLink['script'] =
	    "this.style.behavior = 'url(#default#httpFolder)'; this.navigate('$scriptUrl')";
	$this->assertEquals($expectedLink, $link);
    }

    function testGetMountLinkForKonqueror() {
	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	$_SERVER['HTTP_USER_AGENT'] = 'Konqueror';

	$link = WebDavHelper::getMountLink($this->_item->getId());

	$expectedLink = array();
	$expectedLink['href'] =
	    'webdav://example.com/gallery2/main.php?g2_controller=webdav.WebDav&amp;g2_itemId='
	    . $this->_item->getId();
	$url = 'http://example.com/gallery2/main.php?g2_controller=webdav.WebDav&amp;g2_itemId='
	    . $this->_item->getId();

	/* Assuming that the WebDAV rewrite rules are enabled */
	if (GalleryUtilities::isA($this->_urlGenerator, 'RewriteUrlGenerator')) {
	    $expectedLink['href'] =
		'webdav://example.com/gallery2/w/' . ltrim($path, '/');
	    $url = 'http://example.com/gallery2/w/' . ltrim($path, '/');
	}

	$expectedLink['attrs'] =
	    'style="behavior: url(#default#anchorClick)" folder="' . $url . '"';
	$this->assertEquals($expectedLink, $link);
    }

    function testRequestAuthentication() {
	$ret = WebDavHelper::requestAuthentication(true);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array(array(true)), $this->_requestAuthenticationCalls);
    }

    function testGetRequestVariable() {
	$expectedValue = '/The Quick!Brown#Fox/Jumps Over%The/Lazy_Dog';
	$_SERVER['QUERY_STRING'] =
	    'g2_foo=foo&g2_test=' . rawurlencode($expectedValue) . '&g2_bar=bar';

	$this->assertEquals(
	    $expectedValue, WebDavHelper::getRequestVariable('test'));
    }

    function testGetBadRequestVariable() {
	$_SERVER['QUERY_STRING'] = 'g2_foo=foo&g2_bar=bar';

	$this->assertEquals(
	    null, WebDavHelper::getRequestVariable('test'));
    }

    function testGetRequestVariableNoPrefix() {
	$expectedValue = '/The Quick!Brown#Fox/Jumps Over%The/Lazy_Dog';
	$_SERVER['QUERY_STRING'] =
	    'foo=foo&test=' . rawurlencode($expectedValue) . '&bar=bar';

	$this->assertEquals(
	    $expectedValue, WebDavHelper::getRequestVariable('test', false));
    }

    function testGetRequestVariableNoUrlDecode() {
	$expectedValue = '/' . rawurlencode('The Quick!Brown#Fox')
	    . '/' . rawurlencode('Jumps Over%The/Lazy_Dog');
	$_SERVER['QUERY_STRING'] =
	    'g2_foo=foo&g2_test=' . $expectedValue . '&g2_bar=bar';

	$this->assertEquals(
	    $expectedValue, WebDavHelper::getRequestVariable('test', true, false));
    }

    function testGetRequestVariableWithStructuredKey() {
	$expectedValue = '/The Quick!Brown#Fox/Jumps Over%The/Lazy_Dog';
	$_SERVER['QUERY_STRING'] = 'g2_foo=foo&' . rawurlencode('g2_test[test][test]')
	    . '=' . rawurlencode($expectedValue) . '&g2_bar=bar';

	$this->assertEquals(
	     array('test' => $expectedValue), WebDavHelper::getRequestVariable('test[test]'));
    }

    function testPutRequestVariable() {
	$expectedValue = '/The Quick!Brown#Fox/Jumps Over%The/Lazy_Dog';
	WebDavHelper::putRequestVariable('test', $expectedValue);

	$this->assertEquals(
	    array('g2_test' => rawurlencode($expectedValue)), $this->_requestVariables);
    }

    function testPutRequestVariableNoPrefix() {
	$expectedValue = '/The Quick!Brown#Fox/Jumps Over%The/Lazy_Dog';
	WebDavHelper::putRequestVariable('test', $expectedValue, false);

	$this->assertEquals(
	    array('test' => rawurlencode($expectedValue)), $this->_requestVariables);
    }

    function testGetRequestVariableNoUrlEncode() {
	$expectedValue = '/' . rawurlencode('The Quick!Brown#Fox')
	    . '/' . rawurlencode('Jumps Over%The/Lazy_Dog');
	WebDavHelper::putRequestVariable('test', $expectedValue, true, false);

	$this->assertEquals(
	    array('g2_test' => $expectedValue), $this->_requestVariables);
    }

    function testPutRequestVariableWithStructuredKey() {
	$expectedValue = array('test' => '/The Quick!Brown#Fox/Jumps Over%The/Lazy_Dog');
	WebDavHelper::putRequestVariable('test[test]', $expectedValue);

	$this->assertEquals(array('g2_test' => array('test' => array('test' => rawurlencode(
	    $expectedValue['test'])))), $this->_requestVariables);
    }

    function testGetParentPathOfTwoPathComponents() {
	$path = rawurlencode('The Quick!Brown#Fox')
	    . '//' . rawurlencode('Jumps Over%The/Lazy_Dog');
	$this->assertEquals(rawurlencode('The Quick!Brown#Fox'),
			    WebDavHelper::getParentPath($path));
    }

    function testGetParentPathTwoPathComponentsWithLeadingAndTrailingPathSeparators() {
	$path = '//' . rawurlencode('The Quick!Brown#Fox')
	    . '//' . rawurlencode('Jumps Over%The/Lazy_Dog') . '//';
	$this->assertEquals('//' . rawurlencode('The Quick!Brown#Fox'),
			    WebDavHelper::getParentPath($path));
    }

    function testGetParentPathOfOnePathComponent() {
	$path = rawurlencode('The Quick!Brown#Fox');
	$this->assertEquals('', WebDavHelper::getParentPath($path));
    }

    function testGetParentPathOfOnePathComponentWithLeadingAndTrailingPathSeparators() {
	$path = '//' . rawurlencode('The Quick!Brown#Fox') . '//';
	$this->assertEquals('//', WebDavHelper::getParentPath($path));
    }

    function testGetParentPathOfEmptyPath() {
	$path = '';
	$this->assertEquals('', WebDavHelper::getParentPath($path));
    }

    function testGetParentPathOfPathSeparators() {
	$path = '//';
	$this->assertEquals('//', WebDavHelper::getParentPath($path));
    }

    function testFetchItemIdByPath() {
	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath($path);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($this->_item->getId(), $itemId);
    }

    function testFetchItemIdByBadPath() {
	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath('bogus');
	if ($ret && !($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
	    return $ret;
	}

	$this->assert($ret, 'should be ERROR_MISSING_OBJECT');
	$this->assertEquals(null, $itemId);
    }

    function testFetchItemIdByEmptyPath() {
	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath(null);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($this->_getRootId(), $itemId);
    }

    function testFetchItemIdByRootPath() {
	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath('/');
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($this->_getRootId(), $itemId);
    }

    function testFetchItemIdWithWebDavPathByWebDavPath() {
	$ret = $this->_rename($this->_album, 'The Quick!Brown#Fox');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_rename($this->_item, 'Jumps Over%The/Lazy_Dog');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath(
	    '/' . rawurlencode('The Quick!Brown#Fox')
	    . '/' . rawurlencode('Jumps Over%The/Lazy_Dog'));
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($this->_item->getId(), $itemId);
    }

    function testFetchItemIdWithWebDavPathByPath() {
	$ret = $this->_rename($this->_album, 'The Quick!Brown#Fox');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_rename($this->_item, 'Jumps Over%The/Lazy_Dog');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $path) = $this->_item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}

	list ($ret, $itemId) = WebDavHelper::fetchItemIdByPath($path);
	if ($ret && !($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
	    return $ret;
	}

	$this->assert($ret, 'Should be ERROR_MISSING_OBJECT');
	$this->assertEquals(null, $itemId);
    }

    function testFetchChildIdByPathComponent() {
	list ($ret, $itemId) = WebDavHelper::fetchChildIdByPathComponent(
	    $this->_album->getId(), $this->_item->getPathComponent());
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($this->_item->getId(), $itemId);
    }

    function testFetchChildIdByBadPathComponent() {
	list ($ret, $itemId) = WebDavHelper::fetchChildIdByPathComponent(
	    $this->_album->getId(), 'bogus');
	if ($ret && !($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
	    return $ret;
	}

	$this->assert($ret, 'should be ERROR_MISSING_OBJECT');
	$this->assertEquals(null, $itemId);
    }

    function testFetchChildIdWithWebDavPathComponentByWebDavPathComponent() {
	$ret = $this->_rename($this->_album, 'The Quick!Brown#Fox');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_rename($this->_item, 'Jumps Over%The/Lazy_Dog');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $itemId) = WebDavHelper::fetchChildIdByPathComponent(
	    $this->_album->getId(), 'Jumps Over%The/Lazy_Dog');
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($this->_item->getId(), $itemId);
    }

    function testFetchChildIdWithWebDavPathComponentByPathComponent() {
	$ret = $this->_rename($this->_album, 'The Quick!Brown#Fox');
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_rename($this->_item, 'Jumps Over%The/Lazy_Dog');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $itemId) = WebDavHelper::fetchChildIdByPathComponent(
	    $this->_album->getId(), $this->_item->getPathComponent());
	if ($ret && !($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
	    return $ret;
	}

	$this->assert($ret, 'should be ERROR_MISSING_OBJECT');
	$this->assertEquals(null, $itemId);
    }

    function testPropfindFilesRespectsExternalAccessRulesAndDoesNotRepeatProperties() {
	$files = array();
	list ($ret, $item, $path, $expectedProps) = $this->_preparePropfindFiles();
	if ($ret) {
	    return $ret;
	}

	$ret = WebDavHelper::_propfindFiles($item, $path, 0, $files);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(array(array('path' => $path, 'props' => $expectedProps)), $files);
    }

    function testPropfindFilesIgnoresArraysAndObjectData() {
	$files = array();
	list ($ret, $item, $path, $expectedProps) = $this->_preparePropfindFiles(true);
	if ($ret) {
	    return $ret;
	}

	$ret = WebDavHelper::_propfindFiles($item, $path, 0, $files);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(array(array('path' => $path, 'props' => $expectedProps)), $files);
    }

    function testPropfindFilesUsesPathComponentAsFallbackForTitle() {
	$files = array();
	list ($ret, $item, $path, $expectedProps) = $this->_preparePropfindFiles(false, '');
	if ($ret) {
	    return $ret;
	}

	$ret = WebDavHelper::_propfindFiles($item, $path, 0, $files);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(array(array('path' => $path, 'props' => $expectedProps)), $files);
    }

    function _preparePropfindFiles($addObjectAndArrayData=false, $itemTitle='This is the title') {
	/* Create a test item and add a few object members for test */
	list ($ret, $item) = $this->_createRandomDataItem($this->_rootAlbumId);
	if ($ret) {
	    return array($ret, null, null, null);
	}
	$this->_markForCleanup($item);
	list ($ret, $path) = $item->fetchLogicalPath();
	if ($ret) {
	    return array($ret, null, null, null);
	}
	$item->setCreationTimestamp(10000000);
	$item->setModificationTimestamp(20000000);
	$item->setSize(300);
	$item->setTitle($itemTitle);
	if ($addObjectAndArrayData) {
	    $item->summary = array(1, 2, 3);
	    $item->description = new stdClass();
	}

	/* Prepare expected result */
	list ($ret, $memberInfo) = GalleryCoreApi::getExternalAccessMemberList(
	    'GalleryUnknownItem');
	if ($ret) {
	    return array($ret, null, null, null);
	}

	$expectedProps = array();
	$expectedProps[] = WebDavServer::mkprop('creationdate', 10000000);
	$expectedProps[] = WebDavServer::mkprop('displayname',
		empty($itemTitle) ? $item->getPathComponent() : $itemTitle);
	$expectedProps[] = WebDavServer::mkprop('getlastmodified', 20000000);
	$expectedProps[] = WebDavServer::mkprop('supportedlock',
						array(array('scope' => 'exclusive',
							    'type' => 'write')));
	$expectedProps[] = WebDavServer::mkprop('lockdiscovery', array());
	$expectedProps[] = WebDavServer::mkprop('getcontentlength', 300);
	$expectedProps[] = WebDavServer::mkprop('getcontenttype', 'application/unknown');
	$expectedProps[] = WebDavServer::mkprop('resourcetype', null);
	$defaultMembers = array('pathComponent', 'title', 'creationTimestamp',
				'modificationTimestamp', 'size', 'mimeType');
	foreach ($memberInfo as $memberName => $accessInfo) {
	    if ($addObjectAndArrayData && in_array($memberName, array('summary', 'description'))) {
		continue;
	    }
	    if ($accessInfo['read'] && !in_array($memberName, $defaultMembers)) {
		$getter = 'get' . $memberName;
		$expectedProps[] = WebDavServer::mkprop(WEBDAV_GALLERY_NAMESPACE,
							$memberName, $item->$getter());
	    }
	}

	return array(null, $item, $path, $expectedProps);
    }

    function testPropfindFilesRejectsItemObjectWithoutProperMethods() {
	global $gallery;
	$user = $gallery->getActiveUser();

	$files = array();
	$ret = WebDavHelper::_propfindFiles($user, '/', 0, $files);
	if ($ret && $ret->getErrorCode() & ERROR_BAD_PARAMETER) {
	    /* As expected */
	} else if ($ret) {
	    return $ret;
	} else {
	    $this->fail('propfindFiles should only handle item-like objects');
	}
    }

    function testSetItemPropsRespectsExternalAccessRules() {
	list ($ret, $item) = $this->_createRandomDataItem($this->_rootAlbumId);
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($item);
	list ($ret, $path) = $item->fetchLogicalPath();
	if ($ret) {
	    return $ret;
	}
	$item->setTitle('old title');
	$item->setSummary('old summary');
	$item->setCreationTimestamp(10000000);

	$props = array(0 => array('ns' => WEBDAV_GALLERY_NAMESPACE, 'name' => 'summary',
				  'value' => 'new summary', 'status' => null),
		       1 => array('ns' => WEBDAV_GALLERY_NAMESPACE, 'name' => 'entityType',
				  'value' => 'GalleryItem', 'status' => null),
		       2 => array('ns' => WEBDAV_GALLERY_NAMESPACE,
				  'name' => 'creationTimestamp', 'value' => 20000000,
				  'status' => null),
		       3 => array('ns' => 'DAV:', 'name' => 'displayname',
				  'value' => 'new title', 'status' => null),
		       4 => array('ns' => 'DAV:', 'name' => 'foo',
				  'value' => 'new foo value', 'status' => null),
		       5 => array('ns' => 'bar:', 'name' => 'summary',
				  'value' => 'from invalid namespace', 'status' => null));

	$ret = WebDavHelper::_setItemProps($item, $props);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals('new title', $item->getTitle(), 'title');
	$this->assertEquals('new summary', $item->getSummary(), 'summary');
	$this->assertEquals(20000000, $item->getCreationTimestamp(), 'creation timestamp');
	$this->assertEquals('GalleryUnknownItem', $item->getEntityType(), 'entity type changed');

	/* Verify the status of the props */
	$this->assertEquals(null, $props[0]['status'], 'summary is writable');
	$this->assertEquals('403 Forbidden', $props[1]['status'],
			    'entityType is not writable');
	$this->assertEquals(null, $props[2]['status'], 'creation timestamp is writable');
	$this->assertEquals(null, $props[3]['status'], 'DAV:displayname is writable');
	$this->assertEquals('403 Forbidden', $props[4]['status'],
			    'DAV:foo is not writable');
	$this->assertEquals('403 Forbidden', $props[5]['status'], 'invalid namespace');
    }
}

class WebDavHelperTestHttpAuthInterface /* extends HttpAuthInterface_1_0 */ {

    function &_configuration() {
	static $configuration;
	return $configuration;
    }

    function &_requestAuthenticationCalls() {
	static $requestAuthenticationCalls;
	return $requestAuthenticationCalls;
    }

    function getConfiguration() {
	return WebDavHelperTestHttpAuthInterface::_configuration();
    }

    function requestAuthentication($ignoreGloballyEnabled=false) {
	$requestAuthenticationCalls =&
	    WebDavHelperTestHttpAuthInterface::_requestAuthenticationCalls();
	$requestAuthenticationCalls[] = array($ignoreGloballyEnabled);

	return null;
    }
}

class WebDavHelperTestRewriteApi {

    function &_activeRules() {
	static $activeRules;
	return $activeRules;
    }

    function &_parserType() {
	static $parserType;
	return $parserType;
    }

    function isCompatibleWithApi($version) {
	return array(null, true);
    }

    function fetchActiveRulesForModule($moduleId) {
	return WebDavHelperTestRewriteApi::_activeRules();
    }

    function getParserType() {
	return WebDavHelperTestRewriteApi::_parserType();
    }
}

class WebDavHelperTestPhpVm extends GalleryPhpVm {
    var $_extension_loaded;

    function extension_loaded($functionName) {
	return $this->_extension_loaded;
    }
}

class WebDavHelperTestPlatform extends GalleryPlatform {
    var $_messages;
    var $_buffer;

    function fsockopen($target, $port, &$errno, &$errstr, $timeout) {
	return 'test';
    }

    function feof($handle) {
	return empty($this->_buffer);
    }

    function fgets($handle, $length) {
	if (empty($this->_buffer)) {
	    return null;
	}

	if (strpos($this->_buffer, "\n") < $length) {
	    $length = strpos($this->_buffer, "\n") + 1;
	}

	return $this->fread($handle, $length);
    }

    function fread($handle, $length) {
	if (empty($this->_buffer)) {
	    return null;
	}

	$buffer = substr($this->_buffer, 0, $length);
	$this->_buffer = substr($this->_buffer, $length);
	return $buffer;
    }

    function fwrite($handle, $string, $length=0) {
	if (isset($this->_messages[$string])) {
	    $this->_buffer = $this->_messages[$string];
	    return strlen($string);
	}
    }

    function fflush($handle) {
	return true;
    }

    function fclose($handle) {
	return true;
    }
}
?>
