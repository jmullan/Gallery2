<?php
/*
 * $RCSfile: NokiaUploadUploadControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.7 $ $Date: 2005/08/23 03:49:48 $
 * @package NokiaUpload
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Upload controller tests
 *
 * @package NokiaUpload
 * @subpackage PHPUnit
 */
class NokiaUploadUploadControllerTest extends GalleryControllerTestCase {

    function NokiaUploadUploadControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'nokiaupload.Upload');
    }

    function setUp() {
	parent::setUp();
	global $gallery;

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_album);

	list ($ret, $this->_subAlbum) = $this->_createRandomAlbum($this->_album->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $this->_group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_group);

	$ret = GalleryCoreApi::addGroupPermission(
			  $this->_album->getId(), $this->_group->getId(), 'core.addDataItem');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $this->_user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_user);

	$this->_password = 'password';
	if (!$this->_user->isCorrectPassword($this->_password)) {
	    return $this->assert(false, "test user wasn't created with expected password");
	}

	$ret = $this->_markPluginParametersForCleanup('module', 'nokiaupload');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$ret = GalleryCoreApi::setPluginParameter(
			  'module', 'nokiaupload', 'id.mobileGroup', $this->_group->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::setPluginParameter(
			  'module', 'nokiaupload', 'id.uploadAlbum', $this->_album->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testUploadController() {
	global $gallery;

	/* Login our test user */
	GalleryUtilities::putRequestVariable('Username', $this->_user->getUserName(), false);
	GalleryUtilities::putRequestVariable('Password', $this->_password, false);
	$results = ImageUploadHelper::doLogin();
	if ($results['success'] != NOKIAUPLOAD_ERR_NOERR ||
		$gallery->getActiveUser() != $this->_user) {
	    return $this->assert(false, 'unable to login test user');
	}
	GalleryUtilities::removeRequestVariable('Username', false);
	GalleryUtilities::removeRequestVariable('Password', false);
	$session =& $gallery->getSession();
	$session->remove('permissionCache');
	$ret = GalleryCoreApi::assertHasItemPermission($this->_getRootId(), 'core.addAlbumItem');
	if ($ret->isSuccess()) {
	    return $this->assert(false, 'expected test user to not have addAlbum access in root');
	}

	/* Missing file */
	GalleryUtilities::putRequestVariable('Filename', 'uploadTest.jpg', false);
	GalleryUtilities::putRequestVariable('MimeType', 'image/jpeg', false);
	GalleryUtilities::putRequestVariable('DirId', $this->_album->getId(), false);
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'nokiaupload.Upload'),
				  'status' => array('success' => NOKIAUPLOAD_ERR_UNKNOWN,
						    'spaceleft' => 10000000),
				  'error' => array()),
			    $results, 'missing parameter');

	/* Empty file */
	$_FILES['ImageData'] = array('size' => 0, 'tmp_name' => '');
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'nokiaupload.Upload'),
				  'status' => array('success' => NOKIAUPLOAD_ERR_TOOBIG,
						    'spaceleft' => 10000000),
				  'error' => array()),
			    $results, 'file size');

	/* Bad parent */
	$_FILES['ImageData'] = array('size' => 1966,
            'tmp_name' => dirname(__FILE__) . '/../../../core/test/data/test1.jpg');
	GalleryUtilities::putRequestVariable('DirId', 'badId', false);
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'nokiaupload.Upload'),
				  'status' => array('success' => NOKIAUPLOAD_ERR_UNKNOWN,
						    'spaceleft' => 10000000),
				  'error' => array()),
			    $results, 'bad parent');

	/* No permission */
	GalleryUtilities::putRequestVariable('DirId', $this->_subAlbum->getId(), false);
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'nokiaupload.Upload'),
				  'status' => array('success' => NOKIAUPLOAD_ERR_UNKNOWN,
						    'spaceleft' => 10000000),
				  'error' => array()),
			    $results, 'permission');

	/* Valid request */
	GalleryUtilities::putRequestVariable('DirId', $this->_album->getId(), false);
	GalleryUtilities::putRequestVariable('Desc', 'this is the description', false);
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'nokiaupload.Upload'),
				  'status' => array('success' => NOKIAUPLOAD_ERR_NOERR,
						    'spaceleft' => 10000000),
				  'error' => array()),
			    $results, 'valid request');

	list ($ret, $itemIds) = GalleryCoreApi::fetchChildItemIdsWithPermission(
						$this->_album->getId(), 'core.all');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, count($itemIds), 'one item with core.all permission');

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById(array_shift($itemIds));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(GalleryUtilities::isA($item, 'GalleryPhotoItem'), 'item type');
	$this->assertEquals('this is the description', $item->getDescription(), 'description');
    }
}
?>
