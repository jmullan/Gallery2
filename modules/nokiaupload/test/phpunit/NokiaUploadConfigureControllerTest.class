<?php
/*
 * $RCSfile: NokiaUploadConfigureControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.9 $ $Date: 2005/08/23 03:49:48 $
 * @package NokiaUpload
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Configure controller tests
 *
 * @package NokiaUpload
 * @subpackage PHPUnit
 */
class NokiaUploadConfigureControllerTest extends GalleryControllerTestCase {

    function NokiaUploadConfigureControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'nokiaupload.Configure');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_album);

	$ret = $this->_markPluginParametersForCleanup('module', 'nokiaupload');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}
    }

    function tearDown() {
	if (isset($this->_groupId)) {
	    $ret = GalleryCoreApi::deleteEntityById($this->_groupId);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	parent::tearDown();
    }

    function testCancel() {
	GalleryUtilities::putRequestVariable('form[action][cancel]', '1');
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						   'subView' => 'core.AdminModules'),
				  'status' => array(), 'error' => array()),
			    $results);
    }

    function testMissingData() {
	GalleryUtilities::putRequestVariable('form[group]', '');
	GalleryUtilities::putRequestVariable('form[action][save]', '1');
	$results = $this->handleRequest();
	$this->assertEquals(array(
	    'delegate' => array('view' => 'core.SiteAdmin', 'subView' => 'nokiaupload.Configure'),
	    'status' => array(),
	    'error' => array('form[error][group][missing]', 'form[error][album][missing]')),
		$results);
    }

    function testGroupCollision() {
    	list ($ret, $groupId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.allUserGroup');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	list ($ret, $group) = GalleryCoreApi::loadEntitiesById($groupId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('form[group]', $group->getGroupName());
	GalleryUtilities::putRequestVariable('form[album]', 'Nokia Test');
	GalleryUtilities::putRequestVariable('form[action][save]', '1');
	$results = $this->handleRequest();
	$this->assertEquals(array(
	    'delegate' => array('view' => 'core.SiteAdmin', 'subView' => 'nokiaupload.Configure'),
	    'status' => array(),
	    'error' => array('form[error][group][duplicate]')),
		$results);
    }

    function testConfigure() {

	GalleryUtilities::putRequestVariable('form[group]', 'NokiaGroup ' . rand(1000,100000));
	GalleryUtilities::putRequestVariable('form[album]', 'NokiaAlbum ' . rand(1000,100000));
	GalleryUtilities::putRequestVariable('form[parent]', (string)$this->_album->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', '1');
	$results = $this->handleRequest();
	$this->assertEquals(array(
	    'redirect' => array('view' => 'core.SiteAdmin', 'subView' => 'core.AdminModules'),
	    'status' => array('configured' => 'nokiaupload'), 'error' => array()),
		$results);

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'nokiaupload');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $config) = $module->needsConfiguration();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(false, $config, 'Needs Configuration');

	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters('module', 'nokiaupload');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!empty($params['id.mobileGroup']), 'group param');
	$this->assert(!empty($params['id.uploadAlbum']), 'album param');
	$this->_groupId = $params['id.mobileGroup'];

	list ($ret, $perms) =
	    GalleryCoreApi::fetchAllPermissionsForItem($params['id.uploadAlbum'], true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$hasAddDataItem = false;
	foreach ($perms as $perm) {
	    if ($perm == array('userId' => 0, 'groupId' => $this->_groupId,
			       'permission' => 'core.addDataItem')) {
		$hasDataItem = true;
	    }
	}
	$this->assert($hasDataItem, 'missing addDataItem permission');
    }
}
?>
