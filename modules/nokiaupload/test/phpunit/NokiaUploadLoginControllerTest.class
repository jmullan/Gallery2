<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package NokiaUpload
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Login controller tests
 * Tests RemoteStorageCapabilities too
 *
 * @package NokiaUpload
 * @subpackage PHPUnit
 */
class NokiaUploadLoginControllerTest extends GalleryControllerTestCase {

    function NokiaUploadLoginControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'nokiaupload:Login');
    }

    function setUp() {
	parent::setUp();
	global $gallery;

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $this->_group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $this->_user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_password = 'password';
	if (!$this->_user->isCorrectPassword($this->_password)) {
	    return $this->assert(false, "test user wasn't created with expected password");
	}
	$this->_saveUser = $gallery->getActiveUser();

	list ($ret, $tmp) = GalleryCoreApi::fetchAllPluginParameters('module', 'nokiaupload');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_params = array_merge(array('id.mobileGroup' => '', 'id.uploadAlbum' => ''), $tmp);

	$ret = GalleryCoreApi::setPluginParameter(
			  'module', 'nokiaupload', 'id.mobileGroup', $this->_group->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::setPluginParameter(
			  'module', 'nokiaupload', 'id.uploadAlbum', $this->_album->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	global $gallery;
	$gallery->setActiveUser($this->_saveUser);
	foreach ($this->_params as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'nokiaupload', $key, $value);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	$ret = GalleryCoreApi::deleteEntityById($this->_album->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::deleteEntityById($this->_group->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::deleteEntityById($this->_user->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	parent::tearDown();
    }

    function testLoginController() {
	global $gallery;

	// Invalid username
	GalleryUtilities::putRequestVariable('Username', 'this is an invalid username', false);
	GalleryUtilities::putRequestVariable('Password', 'x', false);
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'nokiaupload:Login'),
				  'status' => array('success' => NOKIAUPLOAD_ERR_UNKNOWN),
				  'error' => array()),
			    $results, 'user');
	$this->assertEquals($this->_saveUser, $gallery->getActiveUser(), 'active user 1');

	// Invalid password
	GalleryUtilities::putRequestVariable('Username', $this->_user->getUserName(), false);
	GalleryUtilities::putRequestVariable('Password', 'wrong password', false);
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'nokiaupload:Login'),
				  'status' => array('success' => NOKIAUPLOAD_ERR_AUTH),
				  'error' => array()),
			    $results, 'pass');
	$this->assertEquals($this->_saveUser, $gallery->getActiveUser(), 'active user 2');

	// Valid credentials
	GalleryUtilities::putRequestVariable('Username', $this->_user->getUserName(), false);
	GalleryUtilities::putRequestVariable('Password', $this->_password, false);
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'nokiaupload:Login'), $results['delegate'], 'delegate');
	$this->assertEquals(array(), $results['error'], 'error');
	$this->assertEquals(NOKIAUPLOAD_ERR_NOERR, $results['status']['success'], 'success');
	$this->assert(!empty($results['status']['rsurl']), 'rsurl');
	$this->assert(!empty($results['status']['sessionidparam']), 'sessionidparam');
	$this->assert(!empty($results['status']['sessionid']), 'sessionid');
	$this->assertEquals(3, count($results['status']['capabilities']), 'capabilities');

	$this->assertEquals($this->_user, $gallery->getActiveUser(), 'active user 3');
	list($ret, $isMember) =
	    GalleryCoreApi::isUserInGroup($this->_user->getId(), $this->_group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(true, $isMember, 'user added to mobile users group');
    }
}
?>
