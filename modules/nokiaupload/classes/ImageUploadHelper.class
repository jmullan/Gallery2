<?php
/*
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * @version $Revision$ $Date$
 * @package NokiaUpload
 * @author Jerome Rannikko <jeromer@hotpop.com>
 */

class ImageUploadApi {

    /**
     * Log user in.
     *
     * Gets username and password from POST and checks that they are valid. Returns
     * an address for the remote storage capabilities query, name of the sessionId parameter
     * and its value. If remote storage capabilities are available returns them as well
     * to save the client from one extra call.
     * Adds user into the mobile users' group if s/he isn't yet a member of it.
     *
     * @return array ('success', 'rsurl', 'sessionidparam', 'sessionid', 'capabilities')
     */
    function doLogin() {
	require_once(dirname(__FILE__) . '/helpers/LoginHelper.class');
	return LoginHelper::doLogin();
    }


    /**
     * Remote Storage Capabilities
     *
     * Returns the remote storage capabilities in "print-ready" form. 
     * Currently supported are: 'Create New Directory', 'Upload' and 'Retrieve Directory Listing'.
     *
     * @return array remote storage capabilities
     */
    function getRSCapabilities() {
	require_once(dirname(__FILE__) . '/helpers/RemoteStorageCapabilitiesHelper.class');
	return RemoteStorageCapabilitiesHelper::getRSCapabilities();
    }


    /**
     * New Directory
     *
     * Creates a subalbum under the album whose id client gives.
     * If no id is given then uses the 'id.uploadAlbum' module parameter as the parent id.
     * Returns the id of the new album.
     *
     * @return array ('success', 'id')
     */
    function createNewDirectory() {
	require_once(dirname(__FILE__) . '/helpers/NewDirectoryHelper.class');
	return NewDirectoryHelper::createNewDirectory();
    }


    /**
     * Upload a picture to Gallery from a mobile phone.
     *
     * Returns the available space on the server after the upload. Currently this
     * value is (a random) 10 000 000 bytes.
     * @return array ('success', 'spaceleft')
     */
    function doUpload() {
	require_once(dirname(__FILE__) . '/helpers/UploadHelper.class');
	return UploadHelper::doUpload();
    }


   /**
     * Directory listing.
     *
     * Returns all albums where user has core.addDataItem permission.
     *
     * @return array ('success', 'albums' => array ('id', 'parentid', 'name'))
     */
    function getDirectoryListing() {
	require_once(dirname(__FILE__) . '/helpers/DirectoryListingHelper.class');
	return DirectoryListingHelper::getDirectoryList();
    }

}
?>

<?php /* original code had many helper files, as seen above.. these are concatenated below */ ?>

<?php
/*
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * @version $Revision$ $Date$
 * @package NokiaUpload
 * @author Jerome Rannikko <jeromer@hotpop.com>
 */

/**
 * Helper class for Nokia Upload module's album listing controller.
 *
 * @package NokiaUpload
 */
class DirectoryListingHelper {

    /**
     * Directory listing.
     *
     * Returns all albums where user has core.addDataItem permission.
     *
     * @return array ('success', 'albums' => array ('id', 'parentid', 'name'))
     */
    function getDirectoryList() {
	LogFile::mark('DirectoryListingHelper');

	/* Change the status to no error only if everything succeeds. */
	$status['success'] = NOKIAUPLOAD_ERR_DIRLIST;

	global $gallery;

	LogFile::write('Active userId is ' . $gallery->getActiveUserId());

	/* Get all album ids where we have addDataItem permission. */
	list($ret, $albumIds) = GalleryCoreApi::fetchAllItemIds('GalleryAlbumItem', 
								'core.addDataItem');
	if ($ret->isError() || count($albumIds) < 1) {
	    LogFile::error("No albums with addDataItem permission.\n" . $ret->getAsText());
	    return $status;
	}

	/* Load albums and get their names. */
	list($ret, $albums) = GalleryCoreApi::loadEntitiesById($albumIds);
	if ($ret->isError()) {
	    LogFile::error('GalleryCoreApi::loadEntitiesById failed.' . $ret->getAsText());
	    return $status;
	}
	foreach ($albums as $album) {
	    $id = $album->getId();
	    $parentId = $album->getParentId();
	    $name = $album->getTitle();
	    if (is_null($name)) {
		/* If album doesn't have a name set use the file system name. */
		$name = $album->getPathComponent();
	    }
	    $name = GalleryUtilities::htmlEntityDecode($name);
	    $albumData[] = array('id' => $id, 'parentid' => $parentId, 'name' => $name);
	}

	$status['albums'] = $albumData;
	$status['success'] = NOKIAUPLOAD_ERR_NOERR;

	return $status;
    }

}
?>
<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * @version $Revision$ $Date$
 * @package NokiaUpload
 * @author Jerome Rannikko <jeromer@hotpop.com>
 */

/**
 * Helper class for Nokia Upload module's LoginController.
 *
 * @package NokiaUpload
 */
class LoginHelper {

    /**
     * Log user in.
     *
     * Gets username and password from POST and checks that they are valid. Returns
     * an address for the remote storage capabilities query, name of the sessionId parameter
     * and its value. If remote storage capabilities are available returns them as well
     * to save the client from one extra call.
     * Adds user into the mobile users' group if s/he isn't yet a member of it.
     *
     * @return array ('success', 'rsurl', 'sessionidparam', 'sessionid', 'capabilities')
     */
    function doLogin() {
	global $gallery;

	LogFile::mark('LoginHelper');

	/* The default status. */
	$status = array();
	$status['success'] = NOKIAUPLOAD_ERR_UNKNOWN;

	/*
	 * We can't user GalleryUtilities::getRequestVariables because it assumes the
	 * request variables to be prefixed with GALLERY_FORM_VARIABLE_PREFIX.
	 * API specification says POST must be used.
	 */
	$username = isset($_POST['Username']) ? $_POST['Username'] : '';
	$password = isset($_POST['Password']) ? $_POST['Password'] : '';

	if (NOKIAUPLOAD_DEBUG) {
	    if (empty($username) && isset($_GET['Username'])) {$username = $_GET['Username'];}
	    if (empty($password) && isset($_GET['Password'])) {$password = $_GET['Password'];}
	}

	/* The default status. */
	$status['success'] = NOKIAUPLOAD_ERR_UNKNOWN;

	list ($ret, $user) = GalleryCoreApi::fetchUserByUsername($username);
	if ($ret->isError()) {
	    LogFile::error("Couldn't fetch user by user name.\n" . $ret->getAsText());
	    return $status;
	}

	if (empty($user) || !$user->isCorrectPassword($password)) {
	    LogFile::write("Couldn't authenticate user $username.");
	    $status['success'] = NOKIAUPLOAD_ERR_AUTH;
	    return $status;
	}
	LogFile::write('Username and password correct.');

	$gallery->setActiveUser($user);

	/* 
	 * Add user to the mobile users' group if s/he isn't yet a member of it. 
	 */

	list($ret, $groupId) = 
	    GalleryCoreApi::getPluginParameter('module', 'nokiaupload', 'id.mobileGroup');
	if ($ret->isError()) {
	    LogFile::error("Couldn't get Mobile Group's id.\n" . $ret->getAsText());
	    return $status;
	}

	list($ret, $isMember) = GalleryCoreApi::isUserInGroup($user->getId(), $groupId);
	if ($ret->isError()) {
	    LogFile::error("Call to GalleryCoreApi::isUserInGroup failed.\n" . $ret->getAsText());
	    return $status;
	}

	if (!$isMember) {
	    $ret = GalleryCoreApi::addUserToGroup($user->getId(), $groupId);
	    if ($ret->isError()) {
		LogFile::error("Couldn't add user to mobile group.\n" . $ret->getAsText());
		return $status;
	    }
	    LogFile::write("User $username added to mobile group.");
	} else {
	    LogFile::write("User $username is already a member of mobile group.");
	}

	/* Generate URL for Remote Storage Capabilities query. */
	$generator = $gallery->getUrlGenerator();
	$rsurl = $generator->generateUrl(array('view' => 'nokiaupload:RemoteStorageCapabilities'));
	$rsurl = GalleryUtilities::htmlEntityDecode($rsurl);
	$rsurl .= '&';  // API specification requires URL to end with '&' (or '?').

	$session =& $gallery->getSession();
	list($sessionIdParam, $sessionId) = $session->getSessionDescriptor();

	/* Prepare our results. */
	$status['success'] = NOKIAUPLOAD_ERR_NOERR;
	$status['rsurl'] = $rsurl;
	$status['sessionidparam'] = GALLERY_FORM_VARIABLE_PREFIX . $sessionIdParam;
	$status['sessionid'] = $sessionId;

	/* Send also RS Capabilites if available. */
	$capabilities = ImageUploadApi::getRSCapabilities();
	if (!empty($capabilities)) {
	    $status['capabilities'] = $capabilities;
	}

	return $status;
    }

}
?>
<?php
/*
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * @version $Revision$ $Date$
 * @package NokiaUpload
 * @author Jerome Rannikko <jeromer@hotpop.com>
 */

/**
 * Helper class for Nokia Upload module's create album controller.
 *
 * @package NokiaUpload
 */
class NewDirectoryHelper {

    /**
     * New Directory
     *
     * Creates a subalbum under the album whose id client gives.
     * If no id is given then uses the 'id.uploadAlbum' module parameter as the parent id.
     * Returns the id of the new album.
     *
     * @return array ('success', 'id')
     */
    function createNewDirectory() {
	LogFile::mark('NewDirectoryHelper');

	/* API specification ruquires POST. Mandatory parameter. */
	$albumNameOriginal = isset($_POST['DirName']) ? $_POST['DirName'] : null;

	/* Optional parameters: description of the new album and it's parent id. */
	$description = isset($_POST['DirDesc']) ? $_POST['DirDesc'] : null;
	$parentId = isset($_POST['Pid']) ? $_POST['Pid'] : null;

	if (NOKIAUPLOAD_DEBUG) {
	    if (is_null($albumNameOriginal) && isset($_GET['DirName'])) {
		$albumNameOriginal = $_GET['DirName'];
	    }
	    if (is_null($description) && isset($_GET['DirDesc'])) {
		$description = $_GET['DirDesc'];
	    }
	    if (is_null($parentId) && isset($_GET['Pid'])) {
		$parentId = $_GET['Pid'];
	    }
	}

	/* Set the default return value. This will be changed only if we succeed. */
	$status['success'] = NOKIAUPLOAD_ERR_DIRCREATE;

	/* If the client didn't give the parent id we need to use our own upload album. */
	if (is_null($parentId)) {
	    LogFile::write("Parent album id not given by client. Trying our own upload album.");
	    list($ret, $parentId) = 
		GalleryCoreApi::getPluginParameter('module', 'nokiaupload', 'id.uploadAlbum');
	    if ($ret->isError()) {
		LogFile::error("Couldn't get id.uploadAlbum parameter.\n" . $ret->getAsText());
		return $status;
	    }
	}
	LogFile::write("Using parent id $parentId");


	/* Make sure we have right permissions. */
	$ret = GalleryCoreApi::assertHasItemPermission($parentId, 'core.addAlbumItem');
	if ($ret->isError()) {
	    LogFile::error("No permission to add subalbum to album with id $parentId.");
	    return $status;
	}

	list ($ret, $lockIds[]) = GalleryCoreApi::acquireReadLock($parentId);
	if ($ret->isError()) {
	    LogFile::error('GalleryCoreApi::acquireReadLock failed.');
	    return $status;
	}

	/* Validate album name. */
	global $gallery;
	$platform = $gallery->getPlatform();
	$albumName = $albumNameOriginal;
	if (empty($albumName)) {
	    LogFile::error('Album name missing.');
	    return $status;
	} else if (!$platform->isLegalPathComponent($albumName)) {
	    $albumName = $platform->legalizePathComponent($albumName);
	}

	/* Get new album instance. */
	list ($ret, $instance) =
	    GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryAlbumItem');
	if ($ret->isError() || !isset($instance)) {
	    LogFile::error("GalleryCoreApi::newFactoryInstance failed.\n" . $ret->getAsText());
	    return $status;
	}

	$ret = $instance->create($parentId, $albumName);
	if ($ret->isError()) {
	    if ($ret->getErrorCode() & ERROR_COLLISION) {
		LogFile::error("Album named $albumName already exists.");
	    }
	    LogFile::error("Couldn't create album $albumName.");
	    return $status;
	}

	$instance->setTitle($albumNameOriginal);
	if (!is_null($description)) {
	    $instance->setDescription($description);
	}
	$ret = $instance->save();
	if ($ret->isError()) {
	    LogFile::error("Couldn't save album.\n" . $ret->getAsText());
	    return $status;
	}

	$ret = GalleryCoreApi::addUserPermission($instance->getId(),
						 $instance->getOwnerId(),
						 'core.all',
						 false);
	if ($ret->isError()) {
	    LogFile::error('GalleryCoreApi::addUserPermission failed, but album was created.');
	}

	/* We don't allow other (mobile) users to add anythin to our personal album.
	 * If we get an error here it doesn't really matter so we don't check for errors. */
	list($ret, $groupId) = 
	    GalleryCoreApi::getPluginParameter('module', 'nokiaupload', 'id.mobileGroup');
	if ($ret->isSuccess()) {
	    $ret = GalleryCoreApi::removeGroupPermission($instance->getId(), $groupId,
							 'core.addDataItem', false);
	    $ret = GalleryCoreApi::removeGroupPermission($instance->getId(), $groupId,
							 'core.addAlbumItem', false);
	}

	$ret = GalleryCoreApi::releaseLocks($lockIds);
	if ($ret->isError()) {
	    LogFile::error('GalleryCoreApi::releaseLocks failed, but album was created.');
	}

	/* Album has been created succesfully. */
	$status['success'] = NOKIAUPLOAD_ERR_NOERR;
	$status['id'] = $instance->getId();

	LogFile::write("Created album $albumName (id " . $status['id'] . ").");

	return $status;
    }

}
?>
<?php
/*
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * @version $Revision$ $Date$
 * @package NokiaUpload
 * @author Jerome Rannikko <jeromer@hotpop.com>
 */

/**
 * Helper class for Nokia Upload module's RSCapabilities view.
 *
 * @package NokiaUpload
 */
class RemoteStorageCapabilitiesHelper {

    /**
     * Remote Storage Capabilities
     *
     * Returns the remote storage capabilities in "print-ready" form. 
     * Currently supported are: 'Create New Directory', 'Upload' and 'Retrieve Directory Listing'.
     *
     * @return array remote storage capabilities
     */
    function getRSCapabilities() {
	global $gallery;

	LogFile::mark('RemoteStorageCapabilitiesHelper');
	LogFile::write('Active userId is ' . $gallery->getActiveUserId());

	/* Generate URLs for all supported API calls. Specification requires URLs to end in '&'. */
	$urlGen = $gallery->getUrlGenerator();

	$createDirUrl = $urlGen->generateUrl(array('controller' => 'nokiaupload:NewDirectory'));
	$createDirUrl = GalleryUtilities::htmlEntityDecode($createDirUrl) . '&';

	$uploadUrl = $urlGen->generateUrl(array('controller' => 'nokiaupload:Upload'));
	$uploadUrl = GalleryUtilities::htmlEntityDecode($uploadUrl) . '&';

	$albumListUrl = $urlGen->generateUrl(array('controller' => 'nokiaupload:DirectoryListing'));
	$albumListUrl = GalleryUtilities::htmlEntityDecode($albumListUrl) . '&';

	if (empty($createDirUrl) || empty($uploadUrl) || empty($albumListUrl)) {
	    return array();
	}

	$create = 'CreateDirURL=' . $createDirUrl . "\r\n";
	$upload = 'UploadURL=' . $uploadUrl . "\r\n";
	$dirList = 'DirListURL=' . $albumListUrl . "\r\n";

	return array($create, $upload, $dirList);
    }

}
?>
<?php
/*
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * @version $Revision$ $Date$
 * @package NokiaUpload
 * @author Jerome Rannikko <jeromer@hotpop.com>
 */

/**
 * Helper class for Nokia Upload module's UploadController.
 *
 * @package NokiaUpload
 */
class UploadHelper {

    /**
     * Upload a picture to Gallery from a mobile phone.
     *
     * Returns the available space on the server after the upload. Currently this
     * value is (a random) 10 000 000 bytes.
     * @return array ('success', 'spaceleft')
     */
    function doUpload() {
	LogFile::mark('UploadHelper');

	$status = array();

	/* API specification requires POST. Mandatory parameters. */
	$file = isset($_FILES['ImageData']) ? $_FILES['ImageData'] : null;
	$itemName = isset($_POST['Filename']) ? $_POST['Filename'] : null;
	$mimeType = isset($_POST['MimeType']) ? $_POST['MimeType'] : null;
	$albumId = isset($_POST['DirId']) ? $_POST['DirId'] : null;

	/* Optional parameters. */
	$summary = isset($_POST['Caption']) ? $_POST['Caption'] : '';
	$description = isset($_POST['Desc']) ? $_POST['Desc'] : '';
	/* These could be included in the description, maybe? */
	//$device = isset($_POST['Source']) ? $_POST['Source'] : null;
	//$keywords = isset($_POST['Keyword']) ? $_POST['Keyword'] : null;

	if (!isset($file) || !isset($itemName) || !isset($mimeType) || !isset($albumId)) {
	    $status['success'] = NOKIAUPLOAD_ERR_UNKNOWN;
	    return $status;
	}

	if ($file['size'] == 0 || $file['tmp_name'] == 'none') {
	    LogFile::error('File is too big.');
	    $status['success'] = NOKIAUPLOAD_ERR_TOOBIG;
	    return $status;
	}

	/* Default status. Changes only if everything works out. */
	$status['success'] = NOKIAUPLOAD_ERR_UNKNOWN;

	/* Do we have permission to add pictures to this album? */
	$ret = GalleryCoreApi::assertHasItemPermission($albumId, 'core.addDataItem');
	if ($ret->isSuccess()) {
	    /* Get lock to album. */
	    list ($ret, $lockIds[]) = GalleryCoreApi::acquireReadLock($albumId);
	    if ($ret->isSuccess()) {
		$title = GalleryUtilities::getFileBase($itemName);
		list ($ret, $newItem) = GalleryCoreApi::addItemToAlbum( $file['tmp_name'],
									$itemName,
									$title,
									$summary,
									$description,
									$mimeType,
									$albumId );
		if ($ret->isSuccess()) {
		    $status['success'] = NOKIAUPLOAD_ERR_NOERR;

		    $ret = GalleryCoreApi::addUserPermission($newItem->getId(),
							     $newItem->getOwnerId(),
							     'core.all',
							     false);
		    if ($ret->isError()) {
			LogFile::error('CoreApi::addUserPermission failed, but item was added.');
		    }

		    $ret = GalleryCoreApi::releaseLocks($lockIds);
		}
	    }
	}

	/* If there was an error at some point write that to log. */
	if ($ret->isError()) {
	    LogFile::error("Someting went wrong while trying to add new item.\n" 
			   . $ret->getAsText());
	}

	/*
	 * We must specify how many bytes are still available for the current user.
	 * Use a big (random) number or define a real limit if you wish.
	 * (I don't know what the phone does with this value, probably nothing.)
	 */
	$status['spaceleft'] = 10000000;

	return $status;
    }

}
?>
