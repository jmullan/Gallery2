<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/rewrite/classes/RewriteHelper.class');

/**
 * Rewrite helper tests
 *
 * @package Rewrite
 * @subpackage PHPUnit
 * @author Douglas Cau <douglas@cau.se>
 * @version $Revision$
 */
class RewriteHelperTest extends GalleryTestCase {

    function RewriteHelperTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	$ret = $this->_markPluginParametersForCleanup('module', 'rewrite');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	$ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', 'accessList',
	    serialize(array('phpunit1', 'phpunit2')));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	/* Set up our mock parser */
	$ret = GalleryCoreApi::setPluginParameter('module', 'rewrite',
						  'parserId', 'rewritehelpermock');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	/* Make sure we use the mock parser */
	list ($ret, $this->_parser) = RewriteHelper::getRewriteParser(true);
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals('rewritehelpermock', $this->_parser->getParserId(), 'parserId');

	/* Set up our mock platform */
	$this->_platform = new RewriteHelperMockPlatform();
	$gallery->setPlatform($this->_platform);

	/* Register a new module */
	GalleryDataCache::reset();
	list ($ret, $this->_module) = GalleryCoreApi::loadPlugin('module', 'rewritehelpermock');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	/* Install it */
	$ret = $this->_module->installOrUpgrade();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	/* Activate the module */
	list ($ret, $redirect) = $this->_module->activate(false);
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
    }

    function tearDown() {
	list ($ret, $redirect) = $this->_module->deactivate(false);
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	$ret = GalleryCoreApi::removePlugin('module', 'rewritehelpermock');
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	parent::tearDown();
    }

    function testGetRewriteParser() {
	list ($ret, $parser) = RewriteHelper::getRewriteParser();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals('rewritehelpermock', $parser->getParserId(), 'parserId');

	$ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', 'parserId', '');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}	

	/* Should still use the same parser (static check) */
	list ($ret, $parser) = RewriteHelper::getRewriteParser();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals('rewritehelpermock', $parser->getParserId(), 'static');

	list ($ret, $parser) = RewriteHelper::getRewriteParser(true);
	if ($ret && !($ret->getErrorCode() & ERROR_MISSING_VALUE)) {
	    return $this->failWithStatus($ret);
	}
	$this->assert(ERROR_MISSING_VALUE & $ret->getErrorCode());
    }

    function testParseActiveRules() {
	$tests = array();
	$serverName = GalleryUtilities::getServerVar('HTTP_HOST');

	/* Test basic rule without keyword */
	$activeRules = array();
	$activeRules['rewritehelpermock'][0] = array('pattern' => 'phpunit');
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('pattern' => 'phpunit',
					  'queryString' => '',
					  'settings' => array('flags' => array())));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	/* Test basic rule with keyword */
	$activeRules = array();
	$activeRules['rewritehelpermock'][1] = array('pattern' => 'php/%unit%');
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('pattern' => 'php/(.*)',
					  'queryString' => 'g2_unit=$1',
					  'settings' => array('flags' => array())));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	/* Test custom functions */
	$activeRules = array();
	$activeRules['rewritehelpermock'][2] = array('pattern' => 'php/%unit%');
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array(array('match' => array('view' => 'php.Unit'),
		'pattern' => 'php/%unit%',
		'functions' => array('unit' => array('bogus', 'BogusFile', 'BogusFunction1')),
		'onLoad' => array('bogus', 'BogusFile', 'BogusFunction2')));
	$expectedRegexRules = array(array('pattern' => 'php/(.*)',
					  'queryString' => 'g2_view=php.Unit&g2_unit=$1',
					  'settings' => array('flags' => array())));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	/* Test multiple keywords */
	$activeRules = array();
	$activeRules['rewritehelpermock'][3] = array('pattern' => 'p/%php%/%unit%');
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('pattern' => 'p/([2])/([1])',
					  'queryString' => 'g2_php=$1&g2_unit=$2',
					  'settings' => array('flags' => array())));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	/* Test query string and match combination */
	$activeRules = array();
	$activeRules['rewritehelpermock'][4] = array('pattern' => 'php/%unit%');
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array(array('match' => array('view' => 'php.Unit',
		    'subView' => 'php.Sub'),
		'pattern' => 'php/%unit%'));
	$expectedRegexRules = array(array('pattern' => 'php/(.*)',
		'queryString' => 'g2_view=php.Unit&g2_subView=php.Sub&g2_static=value&g2_unit=$1',
		'settings' => array('flags' => array())));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	/* Test default flags */
	$activeRules = array();
	$activeRules['rewritehelpermock'][0] = array('pattern' => 'phpunit');
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('pattern' => 'phpunit',
					  'queryString' => '',
					  'settings' => array('flags' => array('F1', 'F2'))));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, array('default' => array('F1', 'F2')));

	/* Test custom flags */
	$activeRules = array();
	$activeRules['rewritehelpermock'][5] = array('pattern' => 'phpunit');
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('pattern' => 'phpunit',
					  'queryString' => '',
					  'settings' => array('flags' => array('C1', 'C2', 'F1'))));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, array('default' => array('F1', 'F2'),
							  'mandatory' => array('F1')));

	/* Test duplicate flags */
	$activeRules = array();
	$activeRules['rewritehelpermock'][5] = array('pattern' => 'phpunit');
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('pattern' => 'phpunit',
					  'queryString' => '',
					  'settings' => array('flags' => array('C1', 'C2'))));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, array('default' => array('C1', 'C2'),
							  'mandatory' => array('C1')));

	/* Test conditions */
	$activeRules = array();
	$activeRules['rewritehelpermock'][11] = array();
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array(
	    'conditions' => array(array('test' => 'REQUEST_METHOD',
					'pattern' => 'OPTIONS'),
				  array('test' => 'HTTP:Authorization',
					'pattern' => '(.+)')),
	    'queryString' => 'g2_authorization=$1',
	    'settings' => array('flags' => array())));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	/* Test restrict */
	$activeRules = array();
	$activeRules['rewritehelpermock'][6] = array();
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('queryString' => 'g2_static=value',
					  'settings' => array('restrict' => array('param=bogus'),
							      'exempt' => array('phpunit1',
										'phpunit2',
										$serverName),
							      'flags' => array('L'))));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	/* Test empty pattern */
	$activeRules = array();
	$activeRules['rewritehelpermock'][10] = array();
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('queryString' => 'g2_view=php.Unit',
					  'settings' => array('flags' => array())));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	/* Test parser */
	$activeRules = array();
	$activeRules['rewritehelpermock'][7] = array('pattern' => 'phpunit');
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('pattern' => 'phpunit',
					  'queryString' => '',
					  'settings' => array('flags' => array())));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	foreach (array_keys($tests) as $i) {
	    list ($ret, $code, $regexRules, $shortUrls, $errno) = RewriteHelper::parseActiveRules(
		$tests[$i][0], $this->_parser, null, $tests[$i][6]);
	    if ($ret) {
		$this->failWithStatus($ret);
	    }

	    $this->assertEquals($tests[$i][1], $code, 'code ' . $i);
	    $this->assertEquals($tests[$i][2], $regexRules, 'regex rules ' . $i);
	    $this->assertEquals($tests[$i][3], $shortUrls, 'short urls ' . $i);
	    $this->assertEquals($tests[$i][4], $errno, 'errno ' . $i);
	    $this->assertEquals($tests[$i][5], $tests[$i][0], 'active rules ' . $i);
	}
    }

    function testParseBadKeyword() {
	$activeRules = array();
	$activeRules['rewritehelpermock'][0] = array('pattern' => 'p/%badKeyword%');
	$expectedActiveRules = $activeRules;

	list ($ret, $code, $regexRules, $shortUrls, $errno) = RewriteHelper::parseActiveRules(
	    $activeRules, $this->_parser);
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	$this->assertEquals(REWRITE_STATUS_BAD_KEYWORD, $code, 'code');
	$this->assertEquals(null, $regexRules, 'regex rules');
	$this->assertEquals(null, $shortUrls, 'short urls');
	$this->assertEquals(array('rewritehelpermock', 0), $errno, 'errno');
	$this->assertEquals($expectedActiveRules, $activeRules, 'active rules');
    }

    function testParseBadParser() {
	$activeRules = array();
	$activeRules['rewritehelpermock'][8] = array('pattern' => 'phpunit');
	$expectedActiveRules = $activeRules;

	list ($ret, $code, $regexRules, $shortUrls, $errno) = RewriteHelper::parseActiveRules(
	    $activeRules, $this->_parser);
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	$this->assertEquals(REWRITE_STATUS_INVALID_PATTERN, $code, 'code');
	$this->assertEquals(null, $regexRules, 'regex rules');
	$this->assertEquals(null, $shortUrls, 'short urls');
	$this->assertEquals(array('rewritehelpermock', 8), $errno, 'errno');
	$this->assertEquals($expectedActiveRules, $activeRules, 'active rules');
    }

    function testParseDupeMatch() {
	/* It might be desirable to activate two rules for one Gallery view */
	$activeRules = array();
	$activeRules['rewritehelpermock'][2] = array('pattern' => 'phpunit1');
	$activeRules['rewritehelpermock'][9] = array('pattern' => 'phpunit2');
	$expectedActiveRules = $activeRules;

	list ($ret, $code, $regexRules, $shortUrls, $errno) = RewriteHelper::parseActiveRules(
	    $activeRules, $this->_parser);
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	$this->assertEquals(REWRITE_STATUS_OK, $code, 'code');
	$this->assertEquals(array(array('pattern' => 'phpunit2',
		'queryString' => 'g2_view=php.Unit',
		'settings' => array('flags' => array())),
	    array('pattern' => 'phpunit1',
		'queryString' => 'g2_view=php.Unit',
		'settings' => array('flags' => array()))), $regexRules, 'regex rules');
	$this->assertEquals(array(array('match' => array('view' => 'php.Unit'),
		'pattern' => 'phpunit1',
		'functions' => array('unit' => array('bogus', 'BogusFile', 'BogusFunction1')),
		'onLoad' => array('bogus', 'BogusFile', 'BogusFunction2')),
	    array('match' => array('view' => 'php.Unit'),
		'pattern' => 'phpunit2')), $shortUrls, 'short urls');
	$this->assertEquals(null, $errno, 'errno');
	$this->assertEquals($expectedActiveRules, $activeRules, 'active rules');
    }

    function testSortRules() {
	$serverName = GalleryUtilities::getServerVar('HTTP_HOST');

	/* Initialize active rules in reverse order */
	$activeRules = array();
	/* Empty pattern */
	$activeRules['rewritehelpermock'][10] = array();
	/* Short pattern */
	$activeRules['rewritehelpermock'][9] = array('pattern' => 'p');
	/* Long pattern */
	$activeRules['rewritehelpermock'][0] = array('pattern' => 'phpunit');
	/* Regex pattern */
	$activeRules['rewritehelpermock'][1] = array('pattern' => 'php/%unit%');
	/* Restrict */
	$activeRules['rewritehelpermock'][6] = array();
	/* Conditions */
	$activeRules['rewritehelpermock'][11] = array();
	/* Custom flags */
	$activeRules['rewritehelpermock'][5] = array('pattern' => 'phpunit');
	$expectedActiveRules = $activeRules;

	list ($ret, $code, $regexRules, $shortUrls, $errno) = RewriteHelper::parseActiveRules(
	    $activeRules, $this->_parser, null, array('default' => array('QSA', 'L'),
	    					      'mandatory' => array()));
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	$this->assertEquals(REWRITE_STATUS_OK, $code, 'code');
	/* Custom flags */
	$this->assertEquals(array('pattern' => 'phpunit',
				  'queryString' => '',
				  'settings' => array('flags' => array('C1', 'C2'))),
			    $regexRules[0], 'regex rules');
	/* Conditions */
	$this->assertEquals(array('conditions' => array(array('test' => 'REQUEST_METHOD',
							      'pattern' => 'OPTIONS'),
							array('test' => 'HTTP:Authorization',
							      'pattern' => '(.+)')),
				  'queryString' => 'g2_authorization=$1',
				  'settings' => array('flags' => array('QSA', 'L'))),
			    $regexRules[1], 'regex rules');
	/* Restrict */
	$this->assertEquals(array('queryString' => 'g2_static=value',
				  'settings' => array('restrict' => array('param=bogus'),
						      'exempt' => array('phpunit1',
									'phpunit2',
									$serverName),
						      'flags' => array('QSA', 'L'))),
			    $regexRules[2], 'regex rules');
	/* Long pattern */
	$this->assertEquals(array('pattern' => 'phpunit',
				  'queryString' => '',
				  'settings' => array('flags' => array('QSA', 'L'))),
			    $regexRules[3], 'regex rules');
	/* Short pattern */
	$this->assertEquals(array('pattern' => 'p',
				  'queryString' => 'g2_view=php.Unit',
				  'settings' => array('flags' => array('QSA', 'L'))),
			    $regexRules[4], 'regex rules');
	/* Regex pattern */
	$this->assertEquals(array('pattern' => 'php/(.*)',
				  'queryString' => 'g2_unit=$1',
				  'settings' => array('flags' => array('QSA', 'L'))),
			    $regexRules[5], 'regex rules');
	/* Empty pattern */
	$this->assertEquals(array('queryString' => 'g2_view=php.Unit',
				  'settings' => array('flags' => array('QSA', 'L'))),
			    $regexRules[6], 'regex rules');
	$this->assertEquals(array(array('match' => array('view' => 'php.Unit'),
					'pattern' => 'p')), $shortUrls, 'short urls');
	$this->assertEquals(null, $errno, 'errno');
	$this->assertEquals($expectedActiveRules, $activeRules, 'active rules');
    }

    function testParseQuoteMetaChars() {
	$activeRules = array();
	$activeRules['rewritehelpermock'][1] = array('pattern' => 'php.-/%unit%');
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('pattern' => 'php\\.-/(.*)',
					  'queryString' => 'g2_unit=$1',
					  'settings' => array('flags' => array())));

	list ($ret, $code, $regexRules, $shortUrls, $errno) = RewriteHelper::parseActiveRules(
	    $activeRules, $this->_parser);
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	$this->assertEquals(REWRITE_STATUS_OK, $code, 'code');
	$this->assertEquals($expectedRegexRules, $regexRules, 'regex rules');
	$this->assertEquals($expectedShortUrls, $shortUrls, 'short urls');
	$this->assertEquals(null, $errno, 'errno');
	$this->assertEquals($expectedActiveRules, $activeRules, 'active rules');
    }

    function testSetAndGetHistoryForModule() {
	$moduleId = 'test-' . rand();
	$expected = array('r1' => 'abc', 1 => '.*');
	$ret = RewriteHelper::setHistoryForModule($moduleId, $expected);
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	list ($ret, $history) = RewriteHelper::getHistoryForModule($moduleId);
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	$this->assertEquals($expected, $history, 'history after setting');

	$ret = RewriteHelper::setHistoryForModule($moduleId, array());
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	list ($ret, $history) = RewriteHelper::getHistoryForModule($moduleId);
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	$this->assertEquals(array(), $history, 'history removed');
    }
}

GalleryCoreApi::requireOnce('modules/rewrite/classes/RewriteParser.class');

/**
 * Mock rewrite parser for this test
 */
class RewriteHelperMockParser extends RewriteParser {
    function RewriteHelperMockParser() {
	$this->_setParserId('rewritehelpermock');
	$this->_setParserType('preGallery');
    }
}

/**
 * Mock module for this test
 */
class RewriteHelperMockModule extends GalleryModule {
    function RewriteHelperMockModule() {
	global $gallery;

	$this->setId('rewritehelpermock');
	$this->setName('RewriteHelper Test Module');
	$this->setDescription('Unit test module');
	$this->setVersion('1');
	$this->setGroup('data', 'Gallery');
	$this->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
	$this->setRequiredModuleApi(GalleryModule::getApiVersion());
    }

    function getRewriteRules() {
	$rules = array();

	/* Rule 0: Without keyword */
	$rules[0] = array('pattern' => 'phpunit');

	/* Rule 1: With keyword */
	$rules[1] = array('pattern' => 'php/%unit%',
			  'keywords' => array('unit' => array('pattern' => '(.*)')));

	/* Rule 2: Custom functions */
	$rules[2] = array('match' => array('view' => 'php.Unit'),
			  'pattern' => 'php/%unit%',
			  'keywords' => array('unit' => array('pattern' => '(.*)',
				'function' => array('bogus', 'BogusFile', 'BogusFunction1'))),
			  'onLoad' => array('bogus', 'BogusFile', 'BogusFunction2'));

	/* Rule 3: Multiple keywords */
	$rules[3] = array('pattern' => 'php/%unit%',
			  'keywords' => array('unit' => array('pattern' => '([1])'),
					      'php' => array('pattern' => '([2])')));

	/* Rule 4: Query string and match combination */
	$rules[4] = array('match' => array('view' => 'php.Unit', 'subView' => 'php.Sub'),
			  'pattern' => 'php/%unit%',
			  'keywords' => array('unit' => array('pattern' => '(.*)')),
			  'queryString' => array('static' => 'value'));

	/* Rule 5: Custom flags */
	$rules[5] = array('pattern' => 'phpunit',
			  'flags' => array('C1', 'C2'));

	/* Rule 11: Conditions */
	$rules[11] = array('conditions' => array(array('test' => 'REQUEST_METHOD',
						       'pattern' => 'OPTIONS'),
						 array('test' => 'HTTP:Authorization',
						       'pattern' => '%authorization%')),
			   'keywords' => array('authorization' => array('pattern' => '(.+)')));

	/* Rule 6: Restrict */
	$rules[6] = array('queryString' => array('static' => 'value'),
			  'restrict' => array('param' => 'bogus'),
			  'exemptReferer' => true);

	/* Rule 10: Empty pattern */
	$rules[10] = array('match' => array('view' => 'php.Unit'));

	/* Rule 7: Parser */
	$rules[7] = array('pattern' => 'phpunit',
			  'parser' => 'preGallery');

	/* Rule 8: Bad parser */
	$rules[8] = array('pattern' => 'phpunit',
			  'parser' => 'bogus');

	/* Rule 9: Duplicate match */
	$rules[9] = array('match' => array('view' => 'php.Unit'),
			  'pattern' => 'p');

	return $rules;
    }
}

/**
 * Test platform for this test
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */
class RewriteHelperMockPlatform extends GalleryPlatform {
    function file_exists($file) {
	if (strpos($file, 'modules/rewritehelpermock/module.inc') !== false) {
	    return true;
	}

	return parent::file_exists($file);
    }

    function opendir($path) {
	if (strpos($path, '/modules/') !== false) {
	    $this->_list = array();
	    if ($dir = parent::opendir($path)) {
		while (false !== ($file = parent::readdir($dir))) {
		    array_push($this->_list, $file);
		}
	    }
	    array_push($this->_list, 'rewritehelpermock');
	    return 'rewritehelpermock';
	}

	return parent::opendir($path);
    }

    function is_dir($path) {
	if (strpos($path, '/modules/rewritehelpermock') !== false) {
	    return true;
	}

	return parent::is_dir($path);
    }

    function readdir($handle) {
	if ($handle == 'rewritehelpermock') {
	    return array_shift($this->_list);
	}

	return parent::readdir($handle);
    }

    function closedir($handle) {
	if ($handle == 'rewritehelpermock') {
	    unset($this->_list);
	    return true;
	}

	return parent::closedir($handle);
    }

    function recursiveRmdir($path) {
	return true;
    }
}
?>
