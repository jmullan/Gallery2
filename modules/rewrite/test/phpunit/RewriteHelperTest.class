<?php
/*
 * $RCSfile: RewriteHelperTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.27 $ $Date: 2006/02/18 00:17:02 $
 * @package Rewrite
 * @subpackage PHPUnit
 * @author Douglas Cau <douglas@cau.se>
 */

/**
 * Rewrite Helper tests
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */
GalleryCoreApi::requireOnce('modules/rewrite/classes/RewriteHelper.class');
class RewriteHelperTest extends GalleryTestCase {

    function RewriteHelperTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp();

        $ret = $this->_markPluginParametersForCleanup('module', 'rewrite');
        if ($ret) {
            print $ret->getAsHtml();
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

	$ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', 'accessList',
	    serialize(array('phpunit1', 'phpunit2')));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

        /* Set up our mock parser */
        $ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', 'parserId',
            'rewritehelpermock');
        if ($ret) {
            print $ret->getAsHtml();
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        /* Make sure we use the mock parser */
        list ($ret, $this->_parser) = RewriteHelper::getRewriteParser(true);
        if ($ret) {
            print $ret->getAsHtml();
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $this->assertEquals('rewritehelpermock', $this->_parser->getParserId(), 'parserId');

	/* Set up our mock platform */
	$this->_platform = new RewriteHelperMockPlatform();
	$gallery->setPlatform($this->_platform);

	/* Register a new module */
	GalleryDataCache::reset();
	list ($ret, $this->_module) = GalleryCoreApi::loadPlugin('module', 'rewritehelpermock');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Install it */
	$ret = $this->_module->installOrUpgrade();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Activate the module */
	list ($ret, $redirect) = $this->_module->activate(false);
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	list ($ret, $redirect) = $this->_module->deactivate(false);
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::removePlugin('module', 'rewritehelpermock');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::tearDown();
    }

    function testGetRewriteParser() {
	list ($ret, $parser) = RewriteHelper::getRewriteParser();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('rewritehelpermock', $parser->getParserId(), 'parserId');

        $ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', 'parserId', '');
        if ($ret) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }	

	/* Should still use the same parser (static check) */
	list ($ret, $parser) = RewriteHelper::getRewriteParser();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('rewritehelpermock', $parser->getParserId(), 'static');

        list ($ret, $parser) = RewriteHelper::getRewriteParser(true);
	if ($ret && !($ret->getErrorCode() & ERROR_MISSING_VALUE)) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(ERROR_MISSING_VALUE & $ret->getErrorCode());
    }

    function testParseActiveRules() {
	$tests = array();
	$serverName = GalleryUtilities::getServerVar('HTTP_HOST');

	/* Test basic rule without keyword */
	$activeRules = array();
	$activeRules['rewritehelpermock'][0] = 'phpunit';
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('pattern' => 'phpunit',
					  'queryString' => '',
					  'settings' => array('flags' => '')));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	/* Test rule with keyword */
	$activeRules = array();
	$activeRules['rewritehelpermock'][1] = 'php/%unit%';
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('pattern' => 'php/(.*)',
					  'queryString' => 'g2_unit=$1',
					  'settings' => array('flags' => '')));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	/* Test rule with custom functions */
	$activeRules = array();
	$activeRules['rewritehelpermock'][2] = 'php/%unit%';
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array('php.Unit' => array(
		'pattern' => 'php/%unit%',
		'functions' => array('unit' => array('bogus', 'BogusFile', 'BogusFunction1')),
		'onLoad' => array('bogus', 'BogusFile', 'BogusFunction2')));
	$expectedRegexRules = array(array('pattern' => 'php/(.*)',
					  'queryString' => 'g2_view=php.Unit&g2_unit=$1',
					  'settings' => array('flags' => '')));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	/* Test multiple keywords */
	$activeRules = array();
	$activeRules['rewritehelpermock'][3] = 'p/%php%/%unit%';
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('pattern' => 'p/([2])/([1])',
					  'queryString' => 'g2_php=$1&g2_unit=$2',
					  'settings' => array('flags' => '')));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	/* Test query string and match combination */
	$activeRules = array();
	$activeRules['rewritehelpermock'][4] = 'php/%unit%';
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array('php.Unit|php.Sub' => array('pattern' => 'php/%unit%'));
	$expectedRegexRules = array(array('pattern' => 'php/(.*)',
		'queryString' => 'g2_view=php.Unit&g2_subView=php.Sub&g2_static=value&g2_unit=$1',
		'settings' => array('flags' => '')));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	/* Test default flags */
	$activeRules = array();
	$activeRules['rewritehelpermock'][0] = 'phpunit';
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('pattern' => 'phpunit',
					  'queryString' => '',
					  'settings' => array('flags' => 'F1,F2')));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, array('default' => array('F1', 'F2')));

	/* Test custom flags */
	$activeRules = array();
	$activeRules['rewritehelpermock'][5] = 'phpunit';
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('pattern' => 'phpunit',
					  'queryString' => '',
					  'settings' => array('flags' => 'C1,C2,F1')));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, array('default' => array('F1', 'F2'),
							  'mandatory' => array('F1')));

	/* Test restrict */
	$activeRules = array();
	$activeRules['rewritehelpermock'][6] = '.';
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('pattern' => '.',
					  'queryString' => 'g2_static=value',
					  'settings' => array('restrict' => array('param=bogus'),
							      'exempt' => array('phpunit1',
										'phpunit2',
										$serverName),
							      'flags' => 'L')));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	/* Test parser */
	$activeRules = array();
	$activeRules['rewritehelpermock'][7] = 'phpunit';
	$expectedActiveRules = $activeRules;
	$expectedShortUrls = array();
	$expectedRegexRules = array(array('pattern' => 'phpunit',
					  'queryString' => '',
					  'settings' => array('flags' => '')));
	$tests[] = array($activeRules, REWRITE_STATUS_OK, $expectedRegexRules,
	    $expectedShortUrls, null, $activeRules, null);

	foreach (array_keys($tests) as $i) {
	    list ($ret, $code, $regexRules, $shortUrls, $errno) = RewriteHelper::parseActiveRules(
		$tests[$i][0], $this->_parser, null, $tests[$i][6]);
	    if ($ret) {
		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->assertEquals($tests[$i][1], $code, 'code ' . $i);
	    $this->assertEquals($tests[$i][2], $regexRules, 'regex rules ' . $i);
	    $this->assertEquals($tests[$i][3], $shortUrls, 'short urls ' . $i);
	    $this->assertEquals($tests[$i][4], $errno, 'errno ' . $i);
	    $this->assertEquals($tests[$i][5], $tests[$i][0], 'active rules ' . $i);
	}
    }

    function testParseBadKeyword() {
	$activeRules = array();
	$activeRules['rewritehelpermock'][0] = 'p/%badKeyword%';
	$expectedActiveRules = $activeRules;

	list ($ret, $code, $regexRules, $shortUrls, $errno) = RewriteHelper::parseActiveRules(
	    $activeRules, $this->_parser);
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(REWRITE_STATUS_BAD_KEYWORD, $code, 'code ');
	$this->assertEquals(null, $regexRules, 'regex rules ');
	$this->assertEquals(null, $shortUrls, 'short urls ');
	$this->assertEquals(array('rewritehelpermock', 0), $errno, 'errno ');
	$this->assertEquals($expectedActiveRules, $activeRules, 'active rules ');
    }

    function testParseBadParser() {
	$activeRules = array();
	$activeRules['rewritehelpermock'][8] = 'phpunit';
	$expectedActiveRules = $activeRules;

	list ($ret, $code, $regexRules, $shortUrls, $errno) = RewriteHelper::parseActiveRules(
	    $activeRules, $this->_parser);
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(REWRITE_STATUS_INVALID_PATTERN, $code, 'code ');
	$this->assertEquals(null, $regexRules, 'regex rules ');
	$this->assertEquals(null, $shortUrls, 'short urls ');
	$this->assertEquals(array('rewritehelpermock', 8), $errno, 'errno ');
	$this->assertEquals($expectedActiveRules, $activeRules, 'active rules ');
    }

    function testParseDupeShortUrl() {
	$activeRules = array();
	$activeRules['rewritehelpermock'][2] = 'phpunit1';
	$activeRules['rewritehelpermock'][9] = 'phpunit2';
	$expectedActiveRules = $activeRules;

	list ($ret, $code, $regexRules, $shortUrls, $errno) = RewriteHelper::parseActiveRules(
	    $activeRules, $this->_parser);
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(REWRITE_STATUS_DUPE_SHORT_URL, $code, 'code ');
	$this->assertEquals(null, $regexRules, 'regex rules ');
	$this->assertEquals(null, $shortUrls, 'short urls ');
	$this->assertEquals(array('php.Unit'), $errno, 'errno ');
	$this->assertEquals($expectedActiveRules, $activeRules, 'active rules ');
    }
}

/**
 * Mock rewrite parser for this test
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */
GalleryCoreApi::requireOnce('modules/rewrite/classes/RewriteParser.class');
class RewriteHelperMockParser extends RewriteParser {
    function RewriteHelperMockParser() {
        $this->_setParserId('rewritehelpermock');
        $this->_setParserType('mock');
    }
}

/**
 * Mock module for this test
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */
class RewriteHelperMockModule extends GalleryModule {
    function RewriteHelperMockModule() {
	global $gallery;

	$this->setId('rewritehelpermock');
	$this->setName('RewriteHelper Test Module');
	$this->setDescription($gallery->i18n('Unit test module'));
	$this->setVersion('1');
	$this->setGroup('data', $gallery->i18n('Gallery'));
	$this->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
	$this->setRequiredModuleApi(GalleryModule::getApiVersion());
    }

    function getRewriteRules() {
	return array(
	    array('pattern' => 'phpunit'),
	    array('pattern' => 'php/%unit%',
		  'keywords' => array('unit' => array('pattern' => '(.*)'))),
	    array('pattern' => 'php/%unit%',
		  'keywords' => array('unit' => array('pattern' => '(.*)',
			'function' => array('bogus', 'BogusFile', 'BogusFunction1'))),
		  'onLoad' => array('bogus', 'BogusFile', 'BogusFunction2'),
		  'match' => array('view' => 'php.Unit')),
	    array('pattern' => 'php/%unit%',
		  'keywords' => array('unit' => array('pattern' => '([1])'),
				      'php' => array('pattern' => '([2])'))),
	    array('pattern' => 'php/%unit%',
		  'keywords' => array('unit' => array('pattern' => '(.*)')),
		  'match' => array('view' => 'php.Unit', 'subView' => 'php.Sub'),
		  'queryString' => array('static' => 'value')),
	    array('pattern' => 'phpunit',
		  'flags' => array('C1', 'C2')),
	    array('pattern' => '.',
		  'queryString' => array('static' => 'value'),
		  'restrict' => array('param' => 'bogus'),
		  'exemptReferer' => 1),
	    array('pattern' => 'phpunit',
		  'parser' => 'mock'),
	    array('pattern' => 'phpunit',
		  'parser' => 'bogus'),
	    array('pattern' => 'p',
		  'match' => array('view' => 'php.Unit')));
    }
}

/**
 * Test platform for this test
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */
class RewriteHelperMockPlatform extends GalleryPlatform {
    function file_exists($file) {
	if (strpos($file, 'modules/rewritehelpermock/module.inc') !== false) {
	    return true;
	}

	return parent::file_exists($file);
    }

    function opendir($path) {
	if (strpos($path, '/modules/') !== false) {
	    $this->_list = array();
	    if ($dir = parent::opendir($path)) {
		while(false !== ($file = parent::readdir($dir))) {
		    array_push($this->_list, $file);
		}
	    }
	    array_push($this->_list, 'rewritehelpermock');
	    return 'rewritehelpermock';
	}

	return parent::opendir($path);
    }

    function is_dir($path) {
	if (strpos($path, '/modules/rewritehelpermock') !== false) {
	    return true;
	}

	return parent::is_dir($path);
    }

    function readdir($handle) {
	if ($handle == 'rewritehelpermock') {
	    return array_shift($this->_list);
	}

	return parent::readdir($handle);
    }

    function closedir($handle) {
	if ($handle == 'rewritehelpermock') {
	    unset($this->_list);
	    return true;
	}

	return parent::closedir($handle);
    }

    function recursiveRmdir($path) {
	return true;
    }
}
?>
