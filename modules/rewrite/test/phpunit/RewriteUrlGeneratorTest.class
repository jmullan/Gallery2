<?php
/*
 * $RCSfile: RewriteUrlGeneratorTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.26 $ $Date: 2006/01/11 20:20:19 $
 * @package Rewrite
 * @subpackage PHPUnit
 * @author Douglas Cau <douglas@cau.se>
 */

/**
 * Rewrite URL Generator Helper tests
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */
GalleryCoreApi::requireOnce('modules/rewrite/classes/RewriteUrlGenerator.class');
class RewriteUrlGeneratorTest extends GalleryTestCase {

    function RewriteUrlGeneratorTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	$ret = $this->_markPluginParametersForCleanup('module', 'rewrite');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', 'shortUrls',
	    serialize(array('php.Unit' => array('pattern' => 'p/%test%'))));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$_SERVER['HTTP_HOST'] = 'example.com';
	$_SERVER['REQUEST_URI'] = '/gallery2/phpunit_test.php?foo=1&bar=2';
	$_SERVER['SERVER_PORT'] = 80;
	$_SERVER['QUERY_STRING'] = '';

	$this->_urlGenerator = new RewriteUrlGenerator();
	$ret = $this->_urlGenerator->init('phpunit_test.php');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testGetCurrentUrl() {
	$expected = 'http://example.com/gallery2/phpunit_test.php?foo=1&bar=2';
	$this->assertEquals($expected, $this->_urlGenerator->getCurrentUrl());
	$this->assertEquals(false, $this->_urlGenerator->_error, 'error');
    }

    function testGetCurrentUrlDir() {
	$expected = 'http://example.com/gallery2/';
	$this->assertEquals($expected, $this->_urlGenerator->getCurrentUrlDir());
	$this->assertEquals(false, $this->_urlGenerator->_error, 'error');
    }

    function testInit() {
	$urlGenerator = new RewriteUrlGenerator();
	$ret = $urlGenerator->init('phpunit_test.php');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!$urlGenerator->_error);
	$this->assertEquals(array('php.Unit' => array('pattern' => 'p/%test%')),
			    $urlGenerator->_shortUrls);
    }

    function testParseShortUrl1() {
	$params = $functions = array();
	$url = 't/%phpunit%';
	$params['phpunit'] = 'test';

	$ret = $this->_urlGenerator->_parseShortUrl($url, $params, $functions);
	$this->assert($ret, 'status');
	$this->assertEquals('t/test', $url, 'url');
	$this->assertEquals(array(), $params, 'params');
    }

    function testParseShortUrl2() {
	$params = $functions = array();
	$url = 't/%phpunit%';

	$ret = $this->_urlGenerator->_parseShortUrl($url, $params, $functions);
	$this->assert(!$ret, 'status');
    }
}
?>
