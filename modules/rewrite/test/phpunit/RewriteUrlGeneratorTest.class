<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Rewrite
 * @subpackage PHPUnit
 * @author Douglas Cau <douglas@cau.se>
 */

/**
 * Test RewriteUrlGenerator functionality
 *
 * @package Rewrite
 * @subpackage PHPUnit
 *
 */
class RewriteUrlGeneratorTest extends GalleryTestCase {
    var $_urlGenerator;

    function RewriteUrlGeneratorTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
    	global $gallery;
    	parent::setUp();
	$_SERVER['HTTP_HOST'] = 'example.com';
	$_SERVER['SERVER_PORT'] = 80;
	$_SERVER['QUERY_STRING'] = '';

	$ret = $this->_markPluginParametersForCleanup('module', 'rewrite');
	if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	foreach (array('galleryLocation' => '/gallery2/')
		 as $param => $value) {
	    /* Set test value */
	    $ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', $param, $value);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* Save original activeRules */
	list ($ret, $this->_saveActiveRules) = RewriteMap::getActiveRules();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Set test activeRules */
	$testRules = array('rewrite' => array(
		array('pattern' => 'v/%path%', 'match' => 'core.ShowItem'),
		array('pattern' => 'd/%itemId%-%serialNumber%/%fileName%',
			'match' => 'core.DownloadItem'),
		array('pattern' => 'phpunit/', 'match' => 'php.Unit'),
		array('pattern' => 'phpunitsub/%itemId%', 'match' => 'php.Unit|test.subView')));
	$ret = RewriteMap::setActiveRules($testRules);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_urlGenerator = new RewriteUrlGenerator();
	$this->_urlGenerator->init('phpunit_test.php');
	$gallery->setUrlGenerator($this->_urlGenerator);
    }

    function tearDown() {
    	global $gallery;

	$ret = RewriteMap::setActiveRules($this->_saveActiveRules);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

    	parent::tearDown();
    }

    function testInit() {
	$this->assertEquals(false, $this->_urlGenerator->_error, 'error');
    }

    function testGetCurrentUrl() {
	$expected = 'http://example.com/gallery2/phpunit_test.php';
	$this->assertEquals($expected, $this->_urlGenerator->getCurrentUrl());
	$this->assertEquals(false, $this->_urlGenerator->_error, 'error');
    }

    function testGetCurrentUrlWithQueryString() {
	$_SERVER['QUERY_STRING'] = 'foo=1&bar=2';
	$expected = 'http://example.com/gallery2/phpunit_test.php?foo=1&bar=2';
	$this->assertEquals($expected, $this->_urlGenerator->getCurrentUrl());
	$this->assertEquals(false, $this->_urlGenerator->_error, 'error');
    }

    function testGetCurrentUrlDir() {
	$expected = 'http://example.com/gallery2/';
	$this->assertEquals($expected, $this->_urlGenerator->getCurrentUrlDir());
	$this->assertEquals(false, $this->_urlGenerator->_error, 'error');
    }

    function testGetCurrentShortUrl() {
	$urlGenerator = new RewriteUrlGenerator();
	$urlGenerator->init('phpunit_test.php');
	$this->assertEquals(false, $urlGenerator->_error, 'init error');

	$this->assertEquals('http://example.com/gallery2/phpunit_test.php',
			    $urlGenerator->getCurrentUrl(), 'get current url');
	$this->assertEquals(false, $urlGenerator->_error, 'call error');

	$this->assertEquals('http://example.com/gallery2/phpunit_test.php',
			    $urlGenerator->_currentUrl, 'get cached url');
	$this->assertEquals(false, $urlGenerator->_error, 'call error');
    }

    function testShortUrls() {
	global $gallery;
	$session =& $gallery->getSession();

	/* Setup.. */
	list ($ret, $testAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($testAlbum);
	list ($ret, $testItem) = $this->_createRandomDataItem(
	    $testAlbum->getId(),
	    'application/unknown',
	    array('pathComponent' => 'foo# bar.dat'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $testAlbumPath) = $testAlbum->fetchLogicalPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $testItemPath) = $testItem->fetchLogicalPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$testItemPath = str_replace(' ', '+', $testItemPath);
	$testItemPath = str_replace('#', '%23', $testItemPath);

	$tests = array();
	/* core.ShowItem on albums have the logical path */
	$tests[] = array('http://example.com/gallery2/v' . $testAlbumPath,
			 array('view' => 'core.ShowItem', 'itemId' => $testAlbum->getId()));
	/* core.ShowItem on items have the logical path, file type and .html */
	$tests[] = array('http://example.com/gallery2/v' . $testItemPath . '.html',
			 array('view' => 'core.ShowItem', 'itemId' => $testItem->getId()));
	/* core.ShowItem at the top level has no prefix */
	$tests[] = array('http://example.com/gallery2/v/',
			 array('view' => 'core.ShowItem'));
	/* core.DownloadItem on items have the id, serial number, path component and file type */
	$tests[] = array(sprintf('http://example.com/gallery2/d/%d-%d/%s',
				 $testItem->getId(), $testItem->getSerialNumber(),
				 urlencode($testItem->getPathComponent())),
			 array('view' => 'core.DownloadItem', 'itemId' => $testItem->getId()));
	/* php.Unit pattern withouth any keywords */
	$tests[] = array('http://example.com/gallery2/phpunit/',
			 array('view' => 'php.Unit'));

	foreach ($tests as $test) {
	    list ($expectedUrl, $params) = $test;

	    $expectedUrlWithSessionId = GalleryUrlGenerator::appendParamsToUrl(
		$expectedUrl,
		array($session->getKey() => $session->getId()));

	    /* Session id not in the url */
	    $actualUrl = $this->_urlGenerator->generateUrl($params, false);
	    $this->assertEquals($expectedUrl, $actualUrl, 'Without session id');

	    /* Session id in the url */
	    $actualUrl = $this->_urlGenerator->generateUrl($params, true);
	    $this->assertEquals($expectedUrlWithSessionId, $actualUrl, 'With session id');
	}
    }

    function testNavigationId() {
	global $gallery;
	$gallery->setCurrentView('php.Unit');
	$this->_urlGenerator->_navId = '456';

	$actualUrl = $this->_urlGenerator->generateUrl(
	    array('view' => 'php.Unit', 'subView' => 'test.subView', 'itemId' => 123), false);
	$this->assertEquals('http://example.com/gallery2/phpunitsub/123?g2_navId=456', $actualUrl);
    }
}
?>
