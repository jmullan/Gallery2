<?php
/*
 * $RCSfile: RewriteModuleTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.9 $ $Date: 2006/01/10 04:42:22 $
 * @package Rewrite
 * @subpackage PHPUnit
 * @author Douglas Cau <douglas@cau.se>
 */

/**
 * Test RewriteUrlGenerator functionality
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */
class RewriteModuleTest extends GalleryTestCase {
    var $_module;
    var $_activeRules;

    function RewriteModuleTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	/* Enable event listener (normally disabled for unit tests) */
	$listener = new RewriteModule();
	$this->_registerTestEventListener('Gallery::DeactivatePlugin', $listener);
	$this->_registerTestEventListener('Gallery::ActivatePlugin', $listener);
	$this->_registerTestEventListener('Gallery::UninstallPlugin', $listener);

	$this->_platform = new RewriteModuleMockPlatform();
	$gallery->setPlatform($this->_platform);

	$ret = $this->_markPluginParametersForCleanup('module', 'rewrite');
	if ($ret) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Set up our environment */
	foreach (array('parserId' => 'rewritemodulemock',
		       'activeRules' => serialize(array()))
		as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', $key, $value);
	    if ($ret) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* Make sure we use the mock parser */
	GalleryCoreApi::requireOnce('modules/rewrite/classes/RewriteHelper.class');
	list ($ret, $parser) = RewriteHelper::getRewriteParser(true);
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('rewritemodulemock', $parser->getParserId(), 'parserId');

	/* Register a new module */
	GalleryDataCache::reset();
	list ($ret, $this->_module) = GalleryCoreApi::loadPlugin('module', 'rewritemodulemock');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Install it */
	$ret = $this->_module->installOrUpgrade();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Use empty table by default */
	$ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', 'activeRules',
	    serialize(array()));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Dummy active rules */
	$this->_activeRules['rewritemodulemock'][0] = 'phpunit/dummy/%itemId%.html';
    }

    function tearDown() {
	$ret = GalleryCoreApi::removePlugin('module', 'rewritemodulemock');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::tearDown();
    }

    function testHandleEvent1() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'rewrite',
	    'history.rewritemodulemock',
	    serialize(array('phpunit/dummy/%itemId%.html')));
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Activate the module */
	list ($ret, $redirect) = $this->_module->activate();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(empty($redirect), 'activate redirect');

	list ($ret, $history) = GalleryCoreApi::getPluginParameter('module', 'rewrite',
	    'history.rewritemodulemock');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(empty($history), 'empty history (activate)');

	/* Make sure the history rule was activated */
	list ($ret, $activeRules) = GalleryCoreApi::getPluginParameter('module', 'rewrite',
	    'activeRules');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($this->_activeRules, unserialize($activeRules), 'rules (activate)');

	/* Deactivate the module */
	list ($ret, $redirect) = $this->_module->deactivate();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(empty($redirect), 'deactivate redirect');

	/* Make sure the rule has been removed */
	list ($ret, $activeRules) = GalleryCoreApi::getPluginParameter('module', 'rewrite',
	    'activeRules');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), unserialize($activeRules), 'rules (deactivate)');

	list ($ret, $history) = GalleryCoreApi::getPluginParameter('module', 'rewrite',
	    'history.rewritemodulemock');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('phpunit/dummy/%itemId%.html'),
			    unserialize($history),
			    'saved history');

	/* Uninstall the module */
	$ret = $this->_module->uninstall();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $history) = GalleryCoreApi::getPluginParameter('module', 'rewrite',
	    'history.rewritemodulemock');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(empty($history), 'empty history (uninstall)');

	/* Make sure the active rules are still empty */
	list ($ret, $activeRules) = GalleryCoreApi::getPluginParameter('module', 'rewrite',
	    'activeRules');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), unserialize($activeRules), 'active rules (uninstall)');
    }

    function testHandleEvent2() {
	/* Activate the module */
	list ($ret, $redirect) = $this->_module->activate();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(empty($redirect), '2nd activate redirect');

	/* Make sure no rules were activated */
	list ($ret, $activeRules) = GalleryCoreApi::getPluginParameter('module', 'rewrite',
	    'activeRules');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), unserialize($activeRules), 'rules (reactivate)');

	/* Deactivate the module */
	list ($ret, $redirect) = $this->_module->deactivate();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(empty($redirect), '2nd deactivate redirect');

	/* Make sure no history was saved */
	list ($ret, $history) = GalleryCoreApi::getPluginParameter('module', 'rewrite',
	    'history.rewritemodulemock');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(empty($history), 'empty history (uninstall)');

	/* Uninstall the module */
	$ret = $this->_module->uninstall();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testHandleEventWithDupes() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'rewrite',
	    'history.rewritemodulemock',
	    serialize(array('phpunit/dummy/%itemId%.html')));
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$expectedRules['rewrite'][0] = 'phpunit/dummy/%itemId%.html';
	$ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', 'activeRules',
	    serialize($expectedRules));
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Activate the module */
	list ($ret, $redirect) = $this->_module->activate();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(empty($redirect), 'activate redirect');

	/* Make sure the history was deleted */
	list ($ret, $history) = GalleryCoreApi::getPluginParameter('module', 'rewrite',
	    'history.rewritemodulemock');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(empty($history), 'empty history (activate)');

	/* Make sure the rules were not changed */
	list ($ret, $activeRules) = GalleryCoreApi::getPluginParameter('module', 'rewrite',
	    'activeRules');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($expectedRules, unserialize($activeRules), 'active rules (activate)');

	/* Deactivate the module */
	list ($ret, $redirect) = $this->_module->deactivate();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(empty($redirect), 'deactivate redirect');

	/* Make sure no history was saved */
	list ($ret, $history) = GalleryCoreApi::getPluginParameter('module', 'rewrite',
	    'history.rewritemodulemock');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(empty($history), 'empty history (dectivate)');

	/* Make sure the rules still were not changed */
	list ($ret, $activeRules) = GalleryCoreApi::getPluginParameter('module', 'rewrite',
	    'activeRules');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($expectedRules, unserialize($activeRules), 'rules (dectivate)');

	/* Uninstall the module */
	$ret = $this->_module->uninstall();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
}

/**
 * Mock module for this test
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */
class RewriteModuleMockModule extends GalleryModule {
    function RewriteModuleMockModule() {
	global $gallery;

	$this->setId('rewritemodulemock');
	$this->setName('RewriteModule Mock Module');
	$this->setDescription($gallery->i18n('Unit test module'));
	$this->setVersion('1');
	$this->setGroup('data', $gallery->i18n('Gallery'));
	$this->setCallbacks('');
	$this->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
	$this->setRequiredModuleApi(GalleryModule::getApiVersion());
    }

    function getRewriteRules() {
	return array(array('pattern' => 'phpunit/dummy/%itemId%.htm'));
    }
}

/**
 * Mock rewrite parser for this test
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */
GalleryCoreApi::requireOnce('modules/rewrite/classes/RewriteParser.class');
class RewriteModuleMockParser extends RewriteParser {
    function RewriteModuleMockParser() {
        $this->_setParserId('rewritemodulemock');
        $this->_setParserType('mock');
    }

    function saveActiveRules($activeRules=null, $rewriteModule=null) {
	if (is_null($activeRules)) {
	    list($ret, $activeRules) = GalleryCoreApi::getPluginParameter(
		'module', 'rewrite', 'activeRules');
	    if ($ret) {
		return array($ret->wrap(__FILE__, __LINE__), null, null);
	    }
	    $activeRules = unserialize($activeRules);
	}

	$regexRules = array();
	$shortUrls = array();
	if (!empty($activeRules)) {
	    list ($ret, $code, $regexRules, $shortUrls, $errorId) = RewriteHelper::parseActiveRules(
		$activeRules, $this, $rewriteModule);
	    if ($ret) {
		return array($ret->wrap(__FILE__, __LINE__), null, null);
	    }
	    if ($code != REWRITE_STATUS_OK) {
		return array(GalleryStatus::success(), $code, $errorId);
	    }
	}

	$ret = GalleryCoreApi::setPluginParameter(
	    'module', 'rewrite', 'shortUrls', serialize($shortUrls));
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	$ret = GalleryCoreApi::setPluginParameter(
	    'module', 'rewrite', 'activeRules', serialize($activeRules));
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	return array(null, REWRITE_STATUS_OK, null);
    }
}

/**
 * Test platform for this test
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */
class RewriteModuleMockPlatform extends GalleryPlatform {

    function file_exists($file) {
	if (strpos($file, 'modules/rewritemodulemock/module.inc') !== false) {
	    return true;
	}

	return parent::file_exists($file);
    }

    function opendir($path) {
	if (strpos($path, '/modules/') !== false) {
	    $this->_list = array();
	    if ($dir = parent::opendir($path)) {
		while(false !== ($file = parent::readdir($dir))) {
		    array_push($this->_list, $file);
		}
	    }
	    array_push($this->_list, 'rewritemodulemock');
	    return 'rewritemodulemock';
	}

	return parent::opendir($path);
    }

    function is_dir($path) {
	if (strpos($path, '/modules/rewritemodulemock') !== false) {
	    return true;
	}

	return parent::is_dir($path);
    }

    function readdir($handle) {
	if ($handle == 'rewritemodulemock') {
	    return array_shift($this->_list);
	}

	return parent::readdir($handle);
    }

    function closedir($handle) {
	if ($handle == 'rewritemodulemock') {
	    unset($this->_list);
	    return true;
	}

	return parent::closedir($handle);
    }

    function recursiveRmdir($path) {
	return true;
    }
    
}
?>
