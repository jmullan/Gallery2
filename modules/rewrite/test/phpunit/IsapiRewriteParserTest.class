<?php
/*
 * $RCSfile: IsapiRewriteParserTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.3 $ $Date: 2006/01/31 16:47:57 $
 * @package Rewrite
 * @subpackage PHPUnit
 * @author Douglas Cau <douglas@cau.se>
 */

/**
 * Isapi Rewrite Parser tests
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */
GalleryCoreApi::requireOnce('modules/rewrite/classes/RewriteHelper.class');
GalleryCoreApi::requireOnce('modules/rewrite/classes/parsers/isapirewrite/parser.inc');
GalleryCoreApi::requireOnce('modules/rewrite/test/phpunit/RewriteParserTestCase.class');
class IsapiRewriteParserTest extends RewriteParserTestCase {

    function IsapiRewriteParserTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp('IsapiRewriteParser');

	/* Set up our environment */
	foreach (array('isapirewrite.forced' => '0',
		       'isapirewrite.galleryLocation' => '/gallery2/',
		       'isapirewrite.httpdini' => '/phpunit/gallery2',
		       'isapirewrite.embeddedLocation' => '/embedded/')
		as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', $key, $value);
	    if ($ret) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	$this->_testPassString = 'PASS_ISAPI_REWRITE';
    }

    function testSaveAccessList() {
	$accessList = array('phpunit.test1', 'phpunit.test2');
	list ($ret, $code) = $this->_parser->saveAccessList($accessList, true);
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	list($ret, $savedList) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'accessList');
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	list($ret, $allowEmptyReferer) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'allowEmptyReferer');
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	$this->assertEquals(REWRITE_STATUS_OK, $code);
	$this->assertEquals($accessList, unserialize($savedList));
	$this->assertEquals('1', $allowEmptyReferer);
	$this->assert(!empty($this->_fileContent), 'fileContent');
    }

    function testSaveAccessListEmbedded() {
	GalleryDataCache::put('G2_EMBED', 1, true);
	$accessList = array('phpunit.test1', 'phpunit.test2');
	list ($ret, $code) = $this->_parser->saveAccessList($accessList, false);
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	list($ret, $savedList) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'accessList');
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	list($ret, $allowEmptyReferer) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'allowEmptyReferer');
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	$this->assertEquals(REWRITE_STATUS_OK, $code);
	$this->assertEquals($accessList, unserialize($savedList));
	$this->assertEquals('0', $allowEmptyReferer);
	$this->assert(!empty($this->_fileContent), 'fileContent');

	GalleryDataCache::remove('G2_EMBED');
    }


    function testSaveAccessListCantWrite() {
	$this->_platform->_isWriteable = false;
	$accessList = array('phpunit.test1', 'phpunit.test2');
	list ($ret, $code) = $this->_parser->saveAccessList($accessList, true);
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	list($ret, $savedList) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'accessList');
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	list($ret, $allowEmptyReferer) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'allowEmptyReferer');
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	$this->assertEquals(REWRITE_STATUS_HTTPDINI_CANT_WRITE, $code);
	$this->assertEquals(array('phpunit.test'), unserialize($savedList));
	$this->assertEquals('0', $allowEmptyReferer);
	$this->assert(!isset($this->_fileContent), 'fileContent');

	$this->_platform->_isWriteable = true;
    }

    function testSaveAccessListEmbeddedCantWrite() {
	$this->_platform->_isWriteable = false;
	GalleryDataCache::put('G2_EMBED', 1, true);
	$accessList = array('phpunit.test1', 'phpunit.test2');
	list ($ret, $code) = $this->_parser->saveAccessList($accessList, true);
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	list($ret, $savedList) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'accessList');
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	list($ret, $allowEmptyReferer) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'allowEmptyReferer');
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	$this->assertEquals(REWRITE_STATUS_HTTPDINI_CANT_WRITE, $code);
	$this->assertEquals(array('phpunit.test'), unserialize($savedList));
	$this->assertEquals('0', $allowEmptyReferer);
	$this->assert(!isset($this->_fileContent), 'fileContent');

	GalleryDataCache::remove('G2_EMBED');
    }

    function testNeedsConfigurationForced() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', 'isapirewrite.forced', '1');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('pathInfoTest', 'fail');
	list($ret, $status) = $this->_parser->needsConfiguration();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!$status, 'forced');
    }

    function testNeedsConfigurationEmbedded() {
	GalleryDataCache::put('G2_EMBED', 1, true);

	GalleryUtilities::putRequestVariable('rewriteTest', 'pass');
	list($ret, $status) = $this->_parser->needsConfiguration();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!$status, 'pass');

	GalleryDataCache::remove('G2_EMBED');
    }

    function testHandleTestResultsRequest1() {
	$form = array();

	$form['force']['test'] = 1;
	list ($ret, $error, $status) = $this->_parser->handleTestResultsRequest($form);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $forced) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'isapirewrite.forced');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('1', $forced);
	$this->assertEquals(array('saved' => 1), $status);
	$this->assertEquals(array(), $error);
    }

    function testHandleTestResultsRequest2() {
	$form = array();

	list ($ret, $error, $status) = $this->_parser->handleTestResultsRequest($form);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $forced) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'isapirewrite.forced');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('0', $forced);
	$this->assertEquals(array('saved' => 1), $status);
	$this->assertEquals(array(), $error);
    }

    function testHandleAdminParserRequest1() {
	$form = array();
	GalleryDataCache::put('G2_EMBED', 1, true);

	$form['embeddedLocation'] = 'test';
	$form['httpdini'] = '/phpunit/test';
	list ($ret, $error, $status) = $this->_parser->handleAdminParserRequest($form);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $embeddedLocation) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'isapirewrite.embeddedLocation');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $httpdini) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'isapirewrite.httpdini');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('/phpunit/test', $httpdini);
	$this->assertEquals('/test/', $embeddedLocation);
	$this->assertEquals(array('saved' => 1), $status);
	$this->assertEquals(array(), $error);
	$this->assert(!empty($this->_fileContent), 'file');

	GalleryDataCache::remove('G2_EMBED');
    }

    function testHandleAdminParserRequest2() {
	$form = array();
	GalleryDataCache::put('G2_EMBED', 1, true);

	$form['embeddedLocation'] = '/';
	$form['httpdini'] = '/phpunit/test';
	list ($ret, $error, $status) = $this->_parser->handleAdminParserRequest($form);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $embeddedLocation) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'isapirewrite.embeddedLocation');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $httpdini) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'isapirewrite.httpdini');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('/phpunit/test', $httpdini);
	$this->assertEquals('/', $embeddedLocation);
	$this->assertEquals(array('saved' => 1), $status);
	$this->assertEquals(array(), $error);
	$this->assert(!empty($this->_fileContent), 'file');

	GalleryDataCache::remove('G2_EMBED');
	$this->_platform->_isWriteable = true;
    }

    function testHandleAdminParserRequest3() {
	$form = array();
	GalleryDataCache::put('G2_EMBED', 1, true);
	$this->_platform->_isWriteable = false;

	$form['embeddedLocation'] = '/test/';
	$form['httpdini'] = '/phpunit/test';
	list ($ret, $error, $status) = $this->_parser->handleAdminParserRequest($form);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $embeddedLocation) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'isapirewrite.embeddedLocation');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $httpdini) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'isapirewrite.httpdini');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('/phpunit/gallery2', $httpdini);
	$this->assertEquals('/embedded/', $embeddedLocation);
	$this->assertEquals(array(), $status);
	$this->assertEquals(array('form[error][34]'), $error);
	$this->assert(!isset($this->_fileContent), 'file');

	GalleryDataCache::remove('G2_EMBED');
	$this->_platform->_isWriteable = true;
    }

    function testHandleAdminParserRequest4() {
	$form = array();
	GalleryDataCache::put('G2_EMBED', 1, true);

	list ($ret, $error, $status) = $this->_parser->handleAdminParserRequest($form);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $embeddedLocation) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'isapirewrite.embeddedLocation');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $httpdini) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'isapirewrite.httpdini');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('/phpunit/gallery2', $httpdini);
	$this->assertEquals('/embedded/', $embeddedLocation);
	$this->assertEquals(array(), $status);
	$this->assertEquals(array('form[error][5]'), $error);
	$this->assert(!isset($this->_fileContent), 'file');

	GalleryDataCache::remove('G2_EMBED');
    }

    function testNeedsEmbedConfig1() {
	list ($ret, $status) = $this->_parser->needsEmbedConfig();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!$status, 'status');
    }

    function testNeedsEmbedConfig2() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'rewrite',
	    'isapirewrite.embeddedLocation', '');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $status) = $this->_parser->needsEmbedConfig();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert($status, 'status');
    }

    function testFetchEmbedConfig() {
	list ($ret, $params) = $this->_parser->fetchEmbedConfig();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array('embeddedLocation' => '/embedded/'),
			    $params);
    }

    function testSaveEmbedConfig1() {
	$params = array('embeddedLocation' => '/test/');

	list ($ret, $code, $errstr) = $this->_parser->saveEmbedConfig($params);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(REWRITE_STATUS_OK, $code);
	$this->assertEquals(null, $errstr);
    }

    function testSaveEmbedConfig2() {
	$this->_platform->_isWriteable = false;
	$params = array('embeddedLocation' => '/test/');

	list ($ret, $code, $errstr) = $this->_parser->saveEmbedConfig($params);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(REWRITE_STATUS_HTTPDINI_CANT_WRITE, $code);
	$this->assert(!empty($errstr), 'errstr');
	$this->_platform->_isWriteable = true;
    }

    function testSaveEmbedConfig3() {
	$this->_platform->_isWriteable = false;
	$params = array();

	list ($ret, $code, $errstr) = $this->_parser->saveEmbedConfig($params);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(REWRITE_STATUS_EMPTY_VALUE, $code);
	$this->assert(!empty($errstr), 'errstr');
	$this->_platform->_isWriteable = true;
    }
}
?>
