<?php
/*
 * $RCSfile: RewriteParserTestCase.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.4 $ $Date: 2006/02/23 08:20:43 $
 * @package Rewrite
 * @subpackage PHPUnit
 * @author Douglas Cau <douglas@cau.se>
 */

/**
 * Global Rewrite Parser tests
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */
class RewriteParserTestCase extends GalleryTestCase {

    function setUp($rewriteParserName) {
	global $gallery;
	parent::setUp();

	$ret = $this->_markPluginParametersForCleanup('module', 'rewrite');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Set up our environment */
	$activeRules['rewriteparsermock'][0] = 'bogus';
	foreach (array('activeRules' => serialize($activeRules),
		       'allowEmptyReferer' => '0',
		       'accessList' => serialize(array('phpunit.test')))
		as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', $key, $value);
	    if ($ret) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	$this->_parser = new $rewriteParserName();
	GalleryUtilities::putRequestVariable('rewriteTest', 'pass');

	/* Set up our mock platform */
	$this->_platform = new RewriteParserMockPlatform();
	$this->_platform->init($this);
	unset($this->_fileContent);
	unset($this->_embeddedFileContent);
	$gallery->setPlatform($this->_platform);

	/* Register a new module */
	GalleryDataCache::reset();
	list ($ret, $this->_module) = GalleryCoreApi::loadPlugin('module', 'rewriteparsermock');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Install it */
	$ret = $this->_module->installOrUpgrade();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Activate the module */
	list ($ret, $redirect) = $this->_module->activate();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	list ($ret, $redirect) = $this->_module->deactivate();
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::removePlugin('module', 'rewriteparsermock');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::tearDown();
    }

    function testRefreshActiveRules() {
	list ($ret, $code, $errno) = $this->_parser->saveActiveRules();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $activeRules) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'activeRules');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$expected['rewriteparsermock'][0] = 'bogus';
	$this->assertEquals(REWRITE_STATUS_OK, $code);
	$this->assertEquals(null, $errno);
	$this->assertEquals($expected, unserialize($activeRules));
    }

    function testSaveActiveRules() {
	$testRules['rewriteparsermock'][0] = 'bogus1';
	list ($ret, $code, $errno) = $this->_parser->saveActiveRules($testRules);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $activeRules) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'activeRules');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$expected['rewriteparsermock'][0] = 'bogus1';
	$this->assertEquals(REWRITE_STATUS_OK, $code);
	$this->assertEquals(null, $errno);
	$this->assertEquals($expected, unserialize($activeRules));
    }

    function testSaveBadKeyword() {
	$testRules['rewriteparsermock'][0] = 'p/%bogus%';
	list ($ret, $code, $errno) = $this->_parser->saveActiveRules($testRules);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $activeRules) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'activeRules');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$expected['rewriteparsermock'][0] = 'bogus';
	$this->assertEquals(REWRITE_STATUS_BAD_KEYWORD, $code);
	$this->assertEquals(array('rewriteparsermock', '0'), $errno);
	$this->assertEquals($expected, unserialize($activeRules));
    }

    function testSaveDupeShortUrl() {
	$testRules['rewriteparsermock'][0] = 'bogus1';
	$testRules['rewriteparsermock'][1] = 'bogus2';
	list ($ret, $code, $errno) = $this->_parser->saveActiveRules($testRules);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $activeRules) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'activeRules');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$expected['rewriteparsermock'][0] = 'bogus';
	$this->assertEquals(REWRITE_STATUS_DUPE_SHORT_URL, $code);
	$this->assertEquals(array('php.Unit'), $errno);
	$this->assertEquals($expected, unserialize($activeRules));
    }

    function testSaveBadParser() {
	$testRules['rewriteparsermock'][2] = 'bogus3';
	list ($ret, $code, $errno) = $this->_parser->saveActiveRules($testRules);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $activeRules) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'activeRules');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$expected['rewriteparsermock'][0] = 'bogus';
	$this->assertEquals(REWRITE_STATUS_INVALID_PATTERN, $code);
	$this->assertEquals(array('rewriteparsermock', '2'), $errno);
	$this->assertEquals($expected, unserialize($activeRules));
    }

    function testSaveActiveRulesEmbedded() {
	GalleryDataCache::put('G2_EMBED', 1, true);
	$testRules['rewriteparsermock'][0] = 'bogus1';
	list ($ret, $code, $errno) = $this->_parser->saveActiveRules($testRules);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $activeRules) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'activeRules');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$expected['rewriteparsermock'][0] = 'bogus1';
	$this->assertEquals(REWRITE_STATUS_OK, $code);
	$this->assertEquals(null, $errno);
	$this->assertEquals($expected, unserialize($activeRules));

	if ($this->_parser->getParserType() == 'preGallery') {
	    $this->assert(!empty($this->_fileContent), 'fileContent');
	}

	GalleryDataCache::remove('G2_EMBED');
    }

    function testSaveBadActiveRulesEmbedded() {
	GalleryDataCache::put('G2_EMBED', 1, true);
	$testRules['rewriteparsermock'][0] = 'p/%bogus%';
	list ($ret, $code, $errno) = $this->_parser->saveActiveRules($testRules);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $activeRules) = GalleryCoreApi::getPluginParameter(
	    'module', 'rewrite', 'activeRules');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$expected['rewriteparsermock'][0] = 'bogus';
	$this->assertEquals(REWRITE_STATUS_BAD_KEYWORD, $code);
	$this->assertEquals(array('rewriteparsermock', '0'), $errno);
	$this->assertEquals($expected, unserialize($activeRules));

	if ($this->_parser->getParserType() == 'preGallery') {
	    $this->assert(!isset($this->_fileContent), 'fileContent');
	}

	GalleryDataCache::remove('G2_EMBED');
    }

    function testNeedsConfiguration() {
	list($ret, $status) = $this->_parser->needsConfiguration();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!$status, 'pass');

	GalleryUtilities::putRequestVariable('rewriteTest', 'fail');
	list($ret, $status) = $this->_parser->needsConfiguration();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($status, 'fail');

	GalleryUtilities::putRequestVariable('rewriteTest', '404');
	list($ret, $status) = $this->_parser->needsConfiguration();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($status, '404');
    }
}

/**
 * Mock module for this test
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */
class RewriteParserMockModule extends GalleryModule {
    function RewriteParserMockModule() {
	global $gallery;

	$this->setId('rewriteparsermock');
	$this->setName('RewriteParser Test Module');
	$this->setDescription($gallery->i18n('Unit test module'));
	$this->setVersion('1');
	$this->setGroup('gallery', $gallery->i18n('Gallery'));
	$this->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
	$this->setRequiredModuleApi(GalleryModule::getApiVersion());
    }

    function getRewriteRules() {
	return array(
	    array('pattern' => 'bogus1',
		  'match' => array('view' => 'php.Unit')),
	    array('pattern' => 'bogus2',
		  'match' => array('view' => 'php.Unit')),
	    array('pattern' => 'bogus3',
		  'parser' => 'bogus'));
    }
}

/**
 * Test platform for this test
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */
class RewriteParserMockPlatform extends GalleryPlatform {
    var $_readBuffer = array();
    var $_isWriteable = true;
    var $_isReadable = true;
    var $_fileExists = true;
    var $_embeddedPreviousContent = array();
    var $_previousContent = array();

    function init(&$test) {
	$this->_test =& $test;
    }

    function file_exists($file) {
	if (strpos($file, 'modules/rewriteparsermock/module.inc') !== false) {
	    return true;
	} else if (strpos($file, '/.htaccess') !== false ||
		strpos($file, '\httpd.ini') !== false) {
	    return $this->_fileExists;
	}

	return parent::file_exists($file);
    }

    function opendir($path) {
	if (strpos($path, '/modules/') !== false) {
	    $this->_list = array();
	    if ($dir = parent::opendir($path)) {
		while(false !== ($file = parent::readdir($dir))) {
		    array_push($this->_list, $file);
		}
	    }
	    array_push($this->_list, 'rewriteparsermock');
	    return 'rewriteparsermock';
	}

	return parent::opendir($path);
    }

    function is_dir($path) {
	if (strpos($path, '/modules/rewriteparsermock') !== false || $path == '/phpunit/test') {
	    return true;
	}

	return parent::is_dir($path);
    }

    function readdir($handle) {
	if ($handle == 'rewriteparsermock') {
	    return array_shift($this->_list);
	}

	return parent::readdir($handle);
    }

    function closedir($handle) {
	if ($handle == 'rewriteparsermock') {
	    unset($this->_list);
	    return true;
	}

	return parent::closedir($handle);
    }

    function recursiveRmdir($path) {
	return parent::recursiveRmdir($path);
    }

    function fsockopen($target, $port, &$errno, &$errstr, $timeout) {
	global $gallery;
	$urlGenerator =& $gallery->getUrlGenerator();
	/* The hostName can include the port part */
	list ($host) = explode(':', $urlGenerator->getHostName());
	if ($target == $host) {
	    return 'phpunit';
	}

	return parent::fsockopen($target, $port, $errno, $errstr, $timeout);
    }

    function fwrite($handle, $string, $length=0) {
	$buffer = array(
	    'pass' => array('HTTP/1.1 200 OK',
			    'Content-Type: text/html; charset=ISO-8859-1',
			    '',
			    $this->_test->_testPassString),
	    'fail' => array('HTTP/1.1 200 OK',
			    'Content-Type: text/html; charset=ISO-8859-1',
			    '',
			    'FAIL_NO_REWRITE'),
	    '404' => array('HTTP/1.1 404 Not Found',
			    'Content-Type: text/html; charset=ISO-8859-1',
			    '',
			    'Not Found'));

	if ($handle == 'phpunit') {
	    $response = GalleryUtilities::getRequestVariables('rewriteTest');
	    $this->_readBuffer = $buffer[$response];

	    return strlen($string);
	} else if ($handle == '.htaccess') {
	    $this->_test->_fileContent .= $string;
	    return strlen($string);
	} else if ($handle == '.embedded') {
	    $this->_test->_embeddedFileContent .= $string;
	    return strlen($string);
	}

	return parent::fwrite($handle, $string, $length=0);
    }

    function feof($handle) {
	if ($handle == 'phpunit') {
	    return empty($this->_readBuffer);
	}

	return parent::feof($handle);
    }

    function fgets($handle, $length) {
	if ($handle == 'phpunit') {
	    if (empty($this->_readBuffer)) {
		return null;
	    }

	    return array_shift($this->_readBuffer) . "\n";
	}

	return parent::fgets($handle, $length);
    }

    function fread($handle, $length) {
	if ($handle == 'phpunit') {
	    if (empty($this->_readBuffer)) {
		return null;
	    }

	    if ($length >= strlen(join("\n", $this->_readBuffer))) {
		$tmp = join("\n", $this->_readBuffer);
		$this->_readBuffer = array();
		return $tmp;
	    }

	    $buf = join("\n", $this->_readBuffer);
	    $tmp = substr($buf, 0, $length);
	    $this->_readBuffer = split("\n", substr($buf, $length + 1));
	    return $tmp;
	}

	return parent::fread($handle, $length);
    }

    function fflush($handle) {
	if ($handle == 'phpunit') {
	    return true;
	}

	return parent::fflush($handle);
    }

    function is_readable($file) {
	if (strpos($file, '/.htaccess') !== false || strpos($file, '\httpd.ini') !== false) {
	    return $this->_isReadable;
	}

	return parent::is_readable($file);
    }

    function is_writeable($file) {
	$pluginBaseDirs = GalleryCoreApi::getPluginBaseDirs();
	if (strpos($file, '/.htaccess') !== false ||
		$file == $pluginBaseDirs['base']  || strpos($file, '\httpd.ini') !== false) {
	    return $this->_isWriteable;
	}

	return parent::is_writeable($file);
    }

    function file($file) {
	if (strpos($file, '.htaccess') !== false || strpos($file, '\httpd.ini') !== false) {
	    return $passCodeAudit = array();
	}

	return parent::file($file);
    }
    function fopen($file, $mode, $useIncludePath=null, $zcontext=null) {
	if (strpos($file, 'embedded/.htaccess') !== false) {
	    if ($this->_isWriteable) {
		$this->_test->_embeddedFileContent = '';
		return '.embedded';
	    } else {
		return null;
	    }
	} else if (strpos($file, '/.htaccess') !== false ||
		strpos($file, '\httpd.ini') !== false) {
	    if ($this->_isWriteable) {
		$this->_test->_fileContent = '';
		return '.htaccess';
	    } else {
		return null;
	    }
	}

	return parent::fopen($file, $mode, $useIncludePath, $zcontext);
    }

    function fclose($handle) {
	if ($handle == '.htaccess' || $handle == '.embedded') {
	    return true;
	} else if ($handle == 'phpunit') {
	    $this->_readBuffer = array();
	    return true;
	}

	return fclose($handle);
    }
}
?>
