<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Rewrite
 * @subpackage PHPUnit
 * @author Douglas Cau <douglas@cau.se>
 */

/**
 * SetupRewrite controller tests
 *
 * @package Rewrite
 * @subpackage PHPUnit
 *
 */
class SetupRewriteControllerTest extends GalleryControllerTestCase {
    function SetupRewriteControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'rewrite:SetupRewrite');
    }

    function setUp() {
	global $gallery;
	parent::setUp();
	$urlGenerator =& $gallery->getUrlGenerator();
	
	foreach (array('galleryLocation' => '',
		       'usePrefixes' => 'true')
		as $param => $value) {
	    list ($ret, $this->_saveParameters[$param]) =
		    GalleryCoreApi::getPluginParameter('module', 'rewrite', $param);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', $param, $value);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	$this->_platform = new SetupRewriteControllerTestPlatform();
	$content =& $this->_platform->getContent();
	$content = null;
	$gallery->setPlatform($this->_platform);
    }
    
    function tearDown() {
    	global $gallery;
    	parent::tearDown();
    	
    	foreach ($this->_saveParameters as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', $key,
		    $value);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
    }
    
    function testWriteFile() {
    	global $gallery;
	GalleryUtilities::putRequestVariable('form[action][write]', 1);

	list ($ret, $expected) = RewriteHelper::getTemplate();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'rewrite:SetupRewrite'),
				  'status' => array('written' => 1),
				  'error' => array()),
			    $results);

	$this->assertEquals($expected, $this->_platform->getContent(), 'file content');
    }
    
    function testWriteBadFile() {
    	global $gallery;
    	$this->_platform->setIsWriteable(false);
	$gallery->setPlatform($this->_platform);
    	
	GalleryUtilities::putRequestVariable('form[action][write]', 1);
	
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:SiteAdmin',
						      'subView' => 'rewrite:SetupRewrite'),
				  'status' => array(),
				  'error' => array('form[error][cantWrite]')),
			    $results);

	$this->assertEquals(null, $this->_platform->getContent(), 'file content');
    }

    function testTestRedirect() {
	GalleryUtilities::putRequestVariable('form[action][test]', 1);
	
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'rewrite:SetupRewrite'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }
    
    function testDoneRedirect() {
	GalleryUtilities::putRequestVariable('form[action][done]', 1);
	GalleryUtilities::putRequestVariable('form[galleryLocation]', 'http://example.com/gallery2/');
	
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'core:AdminModules'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }
    
    function testSave() {
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[mode]', 'true');
	GalleryUtilities::putRequestVariable('form[galleryLocation]', 'http://example.com/gallery2/');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'rewrite:SetupRewrite'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);
    }
}

/**
 * Test platform for this test
 *
 * @package Rewrite
 * @subpackage PHPUnit
 */ 
class SetupRewriteControllerTestPlatform extends GalleryPlatform{
    var $_isWriteable = true;

    function setIsWriteable($value) {
    	$this->_isWriteable = $value;
    }
    
    function file_exists($file) {
	if ($file == dirname(dirname(dirname(dirname(dirname(__FILE__))))) . '/.htaccess') {
	    return true;
	}
	
	return parent::file_exists($file);
    }
    
    function is_readable($file) {
	if ($file == dirname(dirname(dirname(dirname(dirname(__FILE__))))) . '/.htaccess') {
	    return true;
	}
	
	return parent::is_readable($file);
    }
    
    function is_writeable($file) {
	if ($file == dirname(dirname(dirname(dirname(dirname(__FILE__))))) . '/.htaccess') {
	    return $this->_isWriteable;
	}
	
	return parent::is_writeable($file);
    }
    
    function file($file) {
	if ($file == dirname(dirname(dirname(dirname(dirname(__FILE__))))) . '/.htaccess') {
	    return array();
	}
	
	return parent::file($file);
    }

    function &getContent() {
	static $content;
	if (!isset($content)) {
	    $content = null;
	}
	return $content;
    }

    function fopen($file, $mode, $useIncludePath=null, $zcontext=null) {
	if ($file == dirname(dirname(dirname(dirname(dirname(__FILE__))))) . '/.htaccess') {
	    $content =& $this->getContent();
	    $content = '';
	    return '.htaccess';
	}
	
	return parent::file($file, $mode, $useIncludePath, $zcontext);
    }
    
    function fwrite($handle, $string, $length=null) {
	if ($handle == '.htaccess') {
	    $content =& $this->getContent();
	    $content .= $string;
	    return strlen($string);
	}
	
	return fwrite($handle, $string, $length);
    }
    
    function fclose($handle) {
	if ($handle == '.htaccess') {
	    return true;
	}
	
	return fclose($handle);
    }
}

?>