<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @package Rewrite
 * @version $Revision$ $Date$
 * @author Douglas Cau <douglas@cau.se>
 */

/**
 * Required class
 */
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryTemplate.class');

/**
 * Status codes
 */
define('REWRITE_STATUS_OK', 0);
define('REWRITE_STATUS_APACHE_NO_MOD_REWRITE', 1);
define('REWRITE_STATUS_APACHE_UNABLE_TO_TEST', 2);
define('REWRITE_STATUS_HTACCESS_MISSING', 3);
define('REWRITE_STATUS_HTACCESS_CANT_READ', 4);
define('REWRITE_STATUS_HTACCESS_CANT_WRITE', 5);
define('REWRITE_STATUS_HTACCESS_READY', 6);
define('REWRITE_STATUS_BAD_KEYWORD', 7);

/**
 * A helper class for the RewriteUrlGenerator class
 *
 * @package Rewrite
 * @subpackage Classes
 */
class RewriteHelper {

    /**
     * Return valid Gallery2 .htaccess content
     *
     * @return array object GalleryStatus a status code
     *               string valid Gallery2 .htaccess
     */
    function getTemplate($rewriteRules, $embedded=false) {
    	global $gallery;
    	$urlGenerator =& $gallery->getUrlGenerator();
    	
	$Htaccess = array();
	$Htaccess['usePrefixes'] = '';
	$Htaccess['g2Prefix'] = GALLERY_FORM_VARIABLE_PREFIX;
	$Htaccess['rules'] = $rewriteRules;
	
	list ($ret, $Htaccess['galleryDirectory']) =
		GalleryCoreApi::getPluginParameter('module', 'rewrite', 'galleryLocation');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	$Htaccess['directory'] = $Htaccess['galleryDirectory'];
	$Htaccess['baseFile'] = 'main.php';
	if ($embedded) {
	    list ($ret, $Htaccess['directory']) =
		    GalleryCoreApi::getPluginParameter('module', 'rewrite', 'embeddedLocation');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    
	    $Htaccess['baseFile'] = $urlGenerator->_baseFile;
	}
	
	if (strpos($Htaccess['baseFile'], '?') === false) {
	    $Htaccess['baseFile'] = $Htaccess['baseFile'] . '?';
	}
	
	list ($ret, $Htaccess['needOptions']) =
		GalleryCoreApi::getPluginParameter('module', 'rewrite', 'needOptions');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$template = new GalleryTemplate(dirname(__FILE__) . '/../templates');
	$template->setVariable('Htaccess', $Htaccess);
	list ($ret, $content) = $template->fetch('Htaccess.tpl', 'modules_rewrite');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

 	return array(GalleryStatus::success(), $content);
    }

    /**
     * Return .htaccess absolute file name
     *
     * @return array object GalleryStatus a status code
     *               string .htaccess file name
     */
    function getHtaccessPath($embedded=false) {
    	if ($embedded) {
	    list ($ret, $path) =
		    GalleryCoreApi::getPluginParameter('module', 'rewrite', 'embeddedHtaccess');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    
	    return array(GalleryStatus::success(), $path . '/.htaccess');
    	}
    	
	return array(GalleryStatus::success(),
		dirname(dirname(dirname(dirname(__FILE__)))) . '/.htaccess');
    }

    /**
     * Checks if the .htaccess file is valid with Gallery2 data.
     *
     * @return array object GalleryStatus a status code
     *               int rewrite status code
     */
    function checkFile($embedded=false) {
	global $gallery;
	$platform =& $gallery->getPlatform();

	list ($ret, $file) = RewriteHelper::getHtaccessPath($embedded);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* No .htaccess file */
	if (!$platform->file_exists($file)) {
	    return array(GalleryStatus::success(), REWRITE_STATUS_HTACCESS_MISSING);
	}

	/* Can't read the .htaccess file  */
	if (!$platform->is_readable($file)) {
	    return array(GalleryStatus::success(), REWRITE_STATUS_HTACCESS_CANT_READ);
	}

	/* Can't write the .htaccess file  */
	if (!$platform->is_writeable($file)) {
	    return array(GalleryStatus::success(), REWRITE_STATUS_HTACCESS_CANT_WRITE);
	}

	/* It exists, is writeable, and doesn't contain our rules already */
	return array(GalleryStatus::success(), REWRITE_STATUS_HTACCESS_READY);
    }

    /**
     * Writes Gallery2 data to the .htaccess file.
     *
     * @return array object GalleryStatus a status code
     *               int rewrite status code
     */
    function writeFile($rewriteRules, $embedded=false) {
	global $gallery;
	$platform =& $gallery->getPlatform();
	
	list ($ret, $file) = RewriteHelper::getHtaccessPath($embedded);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $htaccess) = RewriteHelper::getTemplate($rewriteRules, $embedded);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	list ($ret, $code) = RewriteHelper::checkFile($embedded);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	if ($code != REWRITE_STATUS_HTACCESS_READY) {
	    return array(GalleryStatus::success(), $code);
	} else {
	    $oldHtaccess = implode('', $platform->file($file));
	
	    /* Strip out the existing section and replace with the new one */
	    $newHtaccess = preg_replace(
		    '/\# BEGIN Url Rewrite section(.+)\# END Url Rewrite section\n/s',
		    '{gallerySection}', $oldHtaccess);
	    if (strpos($newHtaccess, '{gallerySection}') !== false) {
		$newHtaccess = str_replace('{gallerySection}', $htaccess, $newHtaccess);
	    } else {
		$newHtaccess .= $htaccess;
	    }
	}

	/* Write the new file */
	if ($fd = @$platform->fopen($file, 'w')) {
	    $platform->fwrite($fd, $newHtaccess);
	    $platform->fclose($fd);
	} else {
	    return array(GalleryStatus::success(), REWRITE_STATUS_CANT_WRITE);
	}

	return array(GalleryStatus::success(), REWRITE_STATUS_OK);
    }
    
    /**
     * Returns one of the following codes:
     *   REWRITE_STATUS_OK                              everything is fine
     *   REWRITE_STATUS_APACHE_NO_MOD_REWRITE           no mod rewrite support
     *   REWRITE_STATUS_APACHE_UNABLE_TO_TEST           unable to properly test mod_rewrite
     *
     * @return array object GalleryStatus a status code
     *               int rewrite status code.
     */
    function checkModRewrite() {
	global $gallery;
	$urlGenerator =& $gallery->getUrlGenerator();
	
	/* Get the correct Gallery directory. */
	$components = parse_url($urlGenerator->getCurrentUrlDir(true));
	$path = $components['path'];
	if (preg_match('/\/(upgrade|install)\/index.php$/', $path)) {
	    $path = dirname(dirname($path)) . '/';
	}

	/*
	 * Testing mod_rewrite functionality.  In order for mod_rewrite to work
	 * properly, it needs a .htaccess file containing a RewriteBase
	 * directive that matches the URL of its containing directory.
	 */
	if ($path == '/gallery2/') {
	    $target = 'gallery2';
	} else if ($path == '/gallery/') {
	    $target = 'gallery';
	} else {
	    $target = 'custom';
	}
	
	$fetch = $urlGenerator->generateUrl(
		array('href' => $urlGenerator->makeUrl($path) .
			'modules/rewrite/test/mod_rewrite_no_options/' . $target .
			'/Rewrite.txt'));
	list ($body, $headers, $url) = GalleryCoreAPI::fetchWebPage($fetch);

	if ($headers == 'HTTP/1.1 200 OK' && $body == "PASS_REWRITE\n") {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', 'needOptions', 'false');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    
	    return array(GalleryStatus::success(), REWRITE_STATUS_OK);
	}
	
	/*
	 * Apache mod_rewrite needs Options +FollowSymlinks, and we might need to explicit
	 * require it in the .htaccess file.
	 */
	$fetch = $urlGenerator->generateUrl(
		array('href' => $urlGenerator->makeUrl($path) .
			'modules/rewrite/test/mod_rewrite/' . $target . '/Rewrite.txt'));
	list ($body, $headers, $url) = GalleryCoreAPI::fetchWebPage($fetch);

	if ($headers == 'HTTP/1.1 200 OK' && $body == "PASS_REWRITE\n") {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'rewrite', 'needOptions', 'true');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    
	    return array(GalleryStatus::success(), REWRITE_STATUS_OK);
	}
	
	/*
	 * If we fail trying to test with the custom setup dont whine too much. Instead give
	 * the user directions to edit the custom .htaccess file and then test again.
	 */
	if ($target == 'custom') {
	    return array(GalleryStatus::success(), REWRITE_STATUS_APACHE_UNABLE_TO_TEST);
	}

	return array(GalleryStatus::success(), REWRITE_STATUS_APACHE_NO_MOD_REWRITE);
    }
    
    /**
     * Parses active rules and returns rewrite rules.
     *
     * @param array active rules
     * @return array rewrite rules
     */
    function parseActiveRules($activeRules) {
	$rewriteRules = array();
	foreach (array_keys($activeRules) as $moduleId) {
	    list($ret, $module) = GalleryCoreApi::loadPlugin('module', $moduleId);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    
	    $rules = $module->getRewriteRules();
	    foreach (array_keys($activeRules[$moduleId]) as $ruleId) {
		$keywords = array(
			'_path_' => array(
				'ignore' => 1),
			'itemId' => array(
				'pattern' => '([0-9]+)'));
		if (isset($rules[$ruleId]['keywords'])) {
		    $keywords = array_merge($keywords, $rules[$ruleId]['keywords']);
		}
		
		$queryString = array();
		if (isset($rules[$ruleId]['match'])) {
		    $queryString = $rules[$ruleId]['match'];
		}
		
		if (isset($rules[$ruleId]['queryString'])) {
		    $queryString = array_merge($queryString, $rules[$ruleId]['queryString']);
		}

		$urlPattern = str_replace('%path%', '%_path_%',
			$activeRules[$moduleId][$ruleId]['pattern']);
		list ($ret, $code) = RewriteHelper::_parseRule($urlPattern, $keywords,
			$queryString, $rewriteRules);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null, null);
		}
		if ($code != REWRITE_STATUS_OK) {
		    return array(GalleryStatus::success(), $code, null);
		}
	    }
	}

	usort($rewriteRules, array('RewriteHelper', '_sortRules'));
	return array(GalleryStatus::success(), REWRITE_STATUS_OK, $rewriteRules);
    }
    
    /**
     * Comparison function used to order rewrite rules.
     *
     * @access private
     */
    function _sortRules($a, $b) {
    	/* Regular expression in both */
	if (strpos($a['urlPattern'], '(') !== false && strpos($b['urlPattern'], '(') !== false) {
	    if (strpos($a['urlPattern'], '(') == strpos($b['urlPattern'], '(')) {
		if (strlen($a['urlPattern']) == strlen($b['urlPattern'])) {
		    return 0;
		}
		
		return (strlen($a['urlPattern']) < strlen($b['urlPattern'])) ? 1 : -1;
	    }
	    
	    return (strpos($a['urlPattern'], '(') < strpos($b['urlPattern'], '(')) ? 1 : -1;
	}
	if (strpos($a['urlPattern'], '(') !== false) {
	    return 1;
	}
	if (strpos($b['urlPattern'], '(') !== false) {
	    return -1;
	}
	
	return (strlen($a['urlPattern']) < strlen($b['urlPattern'])) ? 1 : -1;
    }
    
    /**
     * Replaces all keywords with apropriate rewrite pattern.
     *
     * @access private
     */
    function _parseRule($urlPattern, $keywords, $queryString, &$rewriteRules) {
	$reference = 1;
	preg_match_all('/\%([^\%]+)\%/', $urlPattern, $regs);

	foreach ($regs[1] as $keyword) {
	    if ($keyword == '_path_') {
		list ($ret, $code) = RewriteHelper::_parseRule(str_replace('%_path_%', '%path%',
			$urlPattern), $keywords, $queryString, $rewriteRules);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
		if ($code != REWRITE_STATUS_OK) {
		    return array(GalleryStatus::success(), $code);
		}
		$urlPattern = str_replace('%_path_%', '', $urlPattern);
	    } else {
	    	if (!isset($keywords[$keyword]['pattern'])) {
		    return array(GalleryStatus::success(), REWRITE_STATUS_BAD_KEYWORD);
	    	}
	    	
		$urlPattern = str_replace('%' . $keyword . '%',
			    $keywords[$keyword]['pattern'], $urlPattern);
	    }

	    if (!isset($keywords[$keyword]['ignore'])) {
		$queryString[$keyword] = '$' . $reference;
	    }
	    $reference++;
	}
	
	$args = array();
	foreach ($queryString as $key => $value) {
	    $args[] = GalleryUtilities::prefixFormVariable($key) . '=' . $value;
	}

	if (!empty($urlPattern)) {
	    $rewriteRules[] = array(
		    'urlPattern' => $urlPattern,
		    'queryString' => join('&', $args));
	}
	
	return array(GalleryStatus::success(), REWRITE_STATUS_OK);
    }
}

?>
