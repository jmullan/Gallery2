<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @package Rewrite
 * @version $Revision$ $Date$
 * @author Douglas Cau <douglas@cau.se>
 */

/**
 * Required class
 */
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryUrlGenerator.class');
GalleryCoreApi::relativeRequireOnce('modules/rewrite/classes/RewriteHelper.class');

/**
 * Url Generator
 *
 * @package Rewrite
 * @subpackage Classes
 */
class RewriteUrlGenerator extends GalleryUrlGenerator {

    /**
     * If there's an error, use parent GalleryUrlGenerator functions.
     *
     * @var bool has an error uccured?
     * @access private
     */
    var $_error = false;

    /**
     * Current Url cache.
     *
     * @var string current url cache
     * @access private
     */
    var $_currentUrl = '';

    /**
     * @see GalleryUrlGenerator::getCurrentUrl
     */
    function getCurrentUrl() {
	if ($this->_error) {
	    return parent::getCurrentUrl();
	}

	if (empty($this->_currentUrl)) {
	    list ($ret, $galleryLocation) =
		    GalleryCoreApi::getPluginParameter('module', 'rewrite', 'galleryLocation');
	    if ($ret->isError()) {
		$this->_error = true;
		return parent::getCurrentUrl();
	    }

	    $this->_currentUrl = $galleryLocation . $this->_baseFile;
	}

	return $this->_currentUrl;
    }

    /**
     * @see GalleryUrlGenerator::generateUrl()
     */
    function generateUrl($params=array(), $forceSessionId=null) {
	global $gallery;

	if ($this->_error) {
	    return parent::generateUrl($params, $forceSessionId);
	}

	if (isset($params['view']) && ($params['view'] == 'core:ShowItem' ||
				       $params['view'] == 'core:DownloadItem')) {
	    $url = $this->getCurrentUrlDir();
	    if ($params['view'] == 'core:ShowItem') {
		/* Transform the id into a path */
		if (isset($params['itemId'])) {
		    $url .= 'v';
		    list ($ret, $entity) = GalleryCoreApi::loadEntitiesById($params['itemId']);
		    if ($ret->isSuccess()) {
			list ($ret, $path) = $entity->fetchLogicalPath();
			if ($ret->isSuccess()) {
			    $url .= $path;
			    unset($params['itemId']);
			}
		    }

		    if (!GalleryUtilities::isA($entity, 'GalleryAlbumItem')) {
			$url .= '.html';
		    }
		} else {
		    $url .= $this->_baseFile;
		}
	    } else if ($params['view'] == 'core:DownloadItem') {
		list ($ret, $entity) = GalleryCoreApi::loadEntitiesById($params['itemId']);
		if ($ret->isError()) {
		    return null;
		}

		list ($ret, $pseudoFileName) = GalleryUtilities::getPseudoFileName($entity);
		if ($ret->isError()) {
		    return null;
		}

		$url .= 'd/' . $params['itemId'] . '-' . $entity->getSerialNumber() .
		    '/' . $pseudoFileName;

		if (strpos($pseudoFileName, '.') === false) {
		    $extension = GalleryCoreApi::convertMimeToExtension($entity->getMimeType());
		    if (!empty($extension)) {
			$url .= '.' . $extension;
		    }
		}

		unset($params['serialNumber']);
	    }

	    $session =& $gallery->getSession();
	    if ($forceSessionId === true) {
		$params[$session->getKey()] = $session->getId();
	    } else if ($forceSessionId === false) {
		unset($params[$session->getKey()]);
	    }

	    /* Add in anything else as a standard query element */
	    unset($params['view']);
	    unset($params['itemId']);
	    if (!empty($params)) {
		$url .= GalleryUrlGenerator::buildQueryString($params);
	    }
	} else {
	    /*
	     * Fall back to basic URL for all other prefixes than core:ShowItem,
	     * if prefixes are disabled.
	     */
	    $url = parent::generateUrl($params, $forceSessionId);
	}

	return $url;
    }
}

?>
