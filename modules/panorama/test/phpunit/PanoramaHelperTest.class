<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 13541 $ $Date: 2006-04-27 09:58:35 -0700 (Thu, 27 Apr 2006) $
 * @package Panorama
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Load required classes
 */
GalleryCoreApi::requireOnce('modules/panorama/classes/PanoramaHelper.class');

/**
 * PanoramaHelper tests
 *
 * @package Panorama
 * @subpackage PHPUnit
 */
class PanoramaHelperTest extends GalleryTestCase {

    function PanoramaHelperTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_item) = $this->_createRandomDataItem(
	    $this->_getRootId(), 'image/test',
	    array('renderer' => 'PanoramaRenderer', 'mimeType' => 'image/gif'),
	    __FILE__, 'GalleryPhotoItem');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->_markForCleanup($this->_item);
    }

    function testFetchViewableImagesViewableFullSizeNoPreferred() {
	global $gallery;

	$ret = GalleryCoreApi::addUserPermission(
	    $this->_item->getId(), $gallery->getActiveUserId(), 'core.viewSource');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $resize) = $this->_createDerivative(
	    $this->_item, $this->_item->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $results) = PanoramaHelper::fetchViewableImages(array($this->_item));
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	/* We only get the original back */
	$this->assertEquals(array($this->_item->getId() => $this->_item),
			    $results);
    }

    function testFetchViewableImagesViewableFullSizeWithPreferred() {
	global $gallery;

	$ret = GalleryCoreApi::addUserPermission(
	    $this->_item->getId(), $gallery->getActiveUserId(), 'core.viewSource');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $preferred) = $this->_createDerivative(
	    $this->_item, $this->_item->getId(), DERIVATIVE_TYPE_IMAGE_PREFERRED);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $resize) = $this->_createDerivative(
	    $this->_item, $this->_item->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $results) = PanoramaHelper::fetchViewableImages(array($this->_item));
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	/* Preferred trumps the original */
	$this->assertEquals(array($this->_item->getId() => $preferred),
			    $results);
    }

    function testFetchViewableImagesResized() {
	global $gallery;

	$ret = GalleryCoreApi::addUserPermission(
	    $this->_item->getId(), $gallery->getActiveUserId(), 'core.viewResizes');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $preferred) = $this->_createDerivative(
	    $this->_item, $this->_item->getId(), DERIVATIVE_TYPE_IMAGE_PREFERRED);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $resize) = $this->_createDerivative(
	    $this->_item, $this->_item->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $results) = PanoramaHelper::fetchViewableImages(array($this->_item));
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(array($this->_item->getId() => $resize),
			    $results);
    }

    function testFetchViewableImagesNothing() {
	global $gallery;

	list ($ret, $preferred) = $this->_createDerivative(
	    $this->_item, $this->_item->getId(), DERIVATIVE_TYPE_IMAGE_PREFERRED);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $resize) = $this->_createDerivative(
	    $this->_item, $this->_item->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $results) = PanoramaHelper::fetchViewableImages(array($this->_item));
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(array(), $results);
    }
}
?>
