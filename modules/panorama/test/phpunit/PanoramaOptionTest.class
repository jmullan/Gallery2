<?php
/*
 * $RCSfile: PanoramaOptionTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.12 $ $Date: 2006/01/24 00:41:53 $
 * @package Panorama
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

GalleryCoreApi::requireOnce('lib/tools/phpunit/ItemEditOptionTestCase.class');
GalleryCoreApi::requireOnce('modules/panorama/classes/PanoramaHelper.class');

/**
 * PanoramaOption tests
 * Also tests PanoramaHelper::fetchViewableImages
 * @package Panorama
 * @subpackage PHPUnit
 */
class PanoramaOptionTest extends ItemEditOptionTestCase {

    function PanoramaOptionTest($methodName) {
	$this->ItemEditOptionTestCase($methodName, 'panorama', 'PanoramaOption');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_item) =
	    $this->_createRandomDataItem($this->_getRootId(), 'image/test',
		    array('width' => 10000, 'height' => 100), __FILE__, 'GalleryPhotoItem');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_item);

	list ($ret, $this->_derivative) = $this->_createDerivative(
		$this->_item, $this->_item->getId(), DERIVATIVE_TYPE_IMAGE_PREFERRED,
		'test-operation|80', 'image/test', array('width' => 8000, 'height' => 80));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function _makePanoramas() {
	$ret = PanoramaHelper::assignEntityType($this->_item, true);
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	list ($ret, $this->_item) = $this->_item->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = PanoramaHelper::assignEntityType($this->_derivative, true);
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	list ($ret, $this->_derivative) = $this->_derivative->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	return null;
    }

    function testPanoramaOn() {
	$form['PanoramaOption']['isPanorama'] = 1;

	$result = $this->_handleRequestAfterEdit($form, $this->_item);
	$this->assertEquals(array(array(), array()), $result);

	list ($ret, $item) = $this->_item->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('PanoramaPhotoItem', $item->getEntityType());

	list ($ret, $item) = $this->_derivative->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('PanoramaDerivativeImage', $item->getEntityType());
    }

    function testPanoramaOff() {
	$ret = $this->_makePanoramas();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$result = $this->_handleRequestAfterEdit(array(), $this->_item);
	$this->assertEquals(array(array(), array()), $result);

	list ($ret, $item) = $this->_item->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('GalleryPhotoItem', $item->getEntityType());

	list ($ret, $item) = $this->_derivative->refresh();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('GalleryDerivativeImage', $item->getEntityType());
    }

    function testHelper() {
	list ($ret, $images) = PanoramaHelper::fetchViewableImages(array($this->_item));
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($images[$this->_item->getId()]), 'Missing result');
	$this->assertEquals($this->_derivative->getId(),
			    $images[$this->_item->getId()]->getId(), 'Id');
    }

    function testRender() {
	/* Make sure we use full urls in applet parameters, and sessionid in image url */
	$ret = $this->_makePanoramas();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$html = $this->_item->render('HTML', array());
	$this->assert(preg_match('{<object[^>]*archive="http}', $html),
		      'item: jar full url: ' . htmlentities($html));
	$this->assert(preg_match('{<param[^>]*name="ScrollerThumb"[^>]*value="http}', $html),
		      'item: slider full url: ' . htmlentities($html));
	$this->assert(preg_match('{<param[^>]*name="PanoramaTile"[^>]*value="http[^"]*'
				 . SESSION_ID_PARAMETER . '}', $html),
		      'item: image full url: ' . htmlentities($html));

	$html = $this->_derivative->render('HTML', $this->_item, array());
	$this->assert(preg_match('{<object[^>]*archive="http}', $html),
		      'deriv: jar full url: ' . htmlentities($html));
	$this->assert(preg_match('{<param[^>]*name="ScrollerThumb"[^>]*value="http}', $html),
		      'deriv: slider full url: ' . htmlentities($html));
	$this->assert(preg_match('{<param[^>]*name="PanoramaTile"[^>]*value="http[^"]*'
				 . SESSION_ID_PARAMETER . '}', $html),
		      'deriv: image full url: ' . htmlentities($html));
    
	/* Accept forceRawImage parameter to bypass applet display */
	$html = $this->_item->render('HTML', array('forceRawImage' => true));
	$this->assert(strpos($html, '<img') !== false && strpos($html, '<object') === false,
		      'item: raw image');
	$html = $this->_derivative->render('HTML', $this->_item, array('forceRawImage' => true));
	$this->assert(strpos($html, '<img') !== false && strpos($html, '<object') === false,
		      'deriv: raw image');
    }
}
?>
