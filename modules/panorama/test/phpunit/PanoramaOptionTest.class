<?php
/*
 * $RCSfile: PanoramaOptionTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.8 $ $Date: 2005/08/23 03:49:48 $
 * @package Panorama
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Load required classes
 */
GalleryCoreApi::relativeRequireOnce('lib/tools/phpunit/ItemEditOptionTestCase.class');
GalleryCoreApi::relativeRequireOnce('modules/panorama/classes/PanoramaHelper.class');

/**
 * PanoramaOption tests
 * Also tests PanoramaHelper::fetchViewableImages
 * @package Panorama
 * @subpackage PHPUnit
 */
class PanoramaOptionTest extends ItemEditOptionTestCase {

    function PanoramaOptionTest($methodName) {
	$this->ItemEditOptionTestCase($methodName, 'panorama', 'PanoramaOption');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $item) = $this->_createRandomDataItem($this->_getRootId(), 'image/test', array(), __FILE__, 'GalleryPhotoItem');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$item->setMimeType('image/gif');
	$ret = PanoramaHelper::assignEntityType($item, true);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_item = $item;
	$this->_markForCleanup($this->_item);

	list ($ret, $derivative) =
	    $this->_createDerivative($item, $item->getId(), DERIVATIVE_TYPE_IMAGE_PREFERRED);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = PanoramaHelper::assignEntityType($derivative, true);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_derivative = $derivative;
    }

    function testPanoramaOff() {
	$result = $this->_handleRequestAfterEdit(array(), $this->_item);
	$this->assertEquals(array(array(), array()), $result);

	list ($ret, $item) = $this->_item->refresh();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('GalleryPhotoItem', $item->getEntityType());

	list ($ret, $item) = $this->_derivative->refresh();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('GalleryDerivativeImage', $item->getEntityType());
    }

    function testPanoramaOn() {
	$form['PanoramaOption']['isPanorama'] = 1;

	$result = $this->_handleRequestAfterEdit($form, $this->_item);
	$this->assertEquals(array(array(), array()), $result);

	list ($ret, $item) = $this->_item->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('PanoramaPhotoItem', $item->getEntityType());

	list ($ret, $item) = $this->_derivative->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('PanoramaDerivativeImage', $item->getEntityType());
    }

    function testHelper() {
	list ($ret, $images) = PanoramaHelper::fetchViewableImages(array($this->_item));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($images[$this->_item->getId()]), 'Missing result');
	$this->assertEquals($this->_derivative->getId(),
			    $images[$this->_item->getId()]->getId(), 'Id');
    }
}
?>
