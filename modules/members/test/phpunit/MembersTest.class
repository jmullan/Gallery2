<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Members
 * @subpackage PHPUnit
 * @author Robert Balousek <rbalousek@hotmail.com>
 */

/**
 * Helper class
 */
require_once(dirname(__FILE__) . '/../../classes/GalleryMembersHelper.class');
   
/**
 * Test Members List/Profile functionality
 *
 * @package Members
 * @subpackage PHPUnit
 */
class MembersTest extends GalleryTestCase {

    function MembersTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    /**
     * Prepare for our test
     */
    function setUp() {
	parent::setUp();

	/* Create a container album for any data items we create */
	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_rootAlbumId);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create a dummy user */
	list ($ret, $this->_user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	list ($ret, $this->_originalCanViewMembersModule) = 
            GalleryCoreApi::getPluginParameter('module', 'members', 'canViewMembersModule');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	list ($ret, $this->_originalCanViewEmailAddress) = 
            GalleryCoreApi::getPluginParameter('module', 'members', 'canViewEmailAddress');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}	
    }

    function tearDown() {
	/* Remove our dummy user and album, return original settings */
	$ret = array();

	$ret[] = GalleryCoreApi::deleteEntityById($this->_user->getId());

	$ret[] = GalleryCoreApi::deleteEntityById($this->_album->getId());
	
	$ret[] = GalleryCoreApi::setPluginParameter('module', 
						    'members', 
						    'canViewMembersModule', 
						    $this->_originalCanViewMembersModule);

        $ret[] = GalleryCoreApi::setPluginParameter('module', 
						    'members', 
						    'canViewEmailAddress',
						    $this->_originalCanViewEmailAddress);

	/*
	 * We want to make sure all the original settings are replaced,
	 * so we do not check for errors until they have all completed 
	 */
	foreach ($ret as $return) {
	    if ($return->isError()) {
                print $return->getAsHtml();
                return array($return->wrap(__FILE__, __LINE__), null);
            }
	}

	parent::tearDown();
    }

    function testFetchLastUserItems() {
	/*
	 * Create some random items so that there's something for the API method to work with.  Set the
	 * timestamp to bogus (but well known) values and set the owner to our test user.
	 */
	for ($i = 0; $i < 4; $i++) {
	    list ($ret, $originalItems[$i]) =
		$this->_createRandomDataItem($this->_album->getId(),
					     'application/unknown',
					     array('creationTimeStamp' => $i * 1000,
						   'ownerId' => $this->_user->getId()));
	}

	/* Ask for the middle two items in ascending order */
	list ($ret, $items) =
	    GalleryMembersHelper::fetchLastUserItems($this->_user->getId(), 1, 2, ORDER_ASCENDING);

	$this->assertEquals(array($originalItems[1], $originalItems[2]), $items);
    }
    
    function testCanViewMembersModule() {
        global $gallery;
        
        list ($ret, $adminGroupId) = 
            GalleryCoreApi::getPluginParameter('module', 'core', 'id.adminGroup');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
         
	$ret = GalleryCoreApi::setPluginParameter('module', 
    	                                          'members', 
    	                                          'canViewMembersModule', 
    	                                          $adminGroupId);
    	if ($ret->isError()) {
    	    return array($ret->wrap(__FILE__, __LINE__), null);
    	}
	    
	list ($ret, $result) = 
            GalleryMembersHelper::canViewMembersModule($this->_user->getId());
        if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}	    
	$this->assertEquals(false, $result);
	    
	$ret = GalleryCoreApi::addUserToGroup($this->_user->getId(), $adminGroupId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	    	    	    
	list ($ret, $result) = GalleryMembersHelper::canViewMembersModule($this->_user->getId());
        if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}	    
	$this->assertEquals(true, $result);
    }
    
    function testCanViewProfileEmail() {
        global $gallery;
         
        /* not admin, view emails off */
	$ret = GalleryCoreApi::setPluginParameter('module', 
    	                                          'members', 
    	                                          'canViewEmailAddress', 
    	                                          0);
    	if ($ret->isError()) {
    	    return array($ret->wrap(__FILE__, __LINE__), null);
    	}
	    
	list ($ret, $result) = GalleryMembersHelper::canViewProfileEmail($this->_user->getId());
        if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}	    
	$this->assertEquals(false, $result);
	    
	/* not admin, view emails on*/ 
	$ret = GalleryCoreApi::setPluginParameter('module', 
    	                                          'members', 
    	                                          'canViewEmailAddress', 
    	                                          1);
    	if ($ret->isError()) {
    	    return array($ret->wrap(__FILE__, __LINE__), null);
    	}
	    
	list ($ret, $result) = GalleryMembersHelper::canViewProfileEmail($this->_user->getId());
        if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}	    
	$this->assertEquals(true, $result);
	    
	/* admin, view emails off*/ 
	$ret = GalleryCoreApi::setPluginParameter('module', 
    	                                          'members', 
    	                                          'canViewEmailAddress', 
    	                                          0);
    	if ($ret->isError()) {
    	    return array($ret->wrap(__FILE__, __LINE__), null);
    	}

        list ($ret, $adminGroupId) = 
            GalleryCoreApi::getPluginParameter('module', 'core', 'id.adminGroup');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
         
	$ret = GalleryCoreApi::addUserToGroup($this->_user->getId(), $adminGroupId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	    	    	    
	list ($ret, $result) = GalleryMembersHelper::canViewProfileEmail($this->_user->getId());
        if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}	    
	$this->assertEquals(true, $result);
	    
	/* admin, view emails on*/ 
	$ret = GalleryCoreApi::setPluginParameter('module', 
    	                                          'members', 
    	                                          'canViewEmailAddress', 
    	                                          1);
    	if ($ret->isError()) {
    	    return array($ret->wrap(__FILE__, __LINE__), null);
    	}

	$ret = GalleryCoreApi::addUserToGroup($this->_user->getId(), $adminGroupId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	    	    	    
	list ($ret, $result) = GalleryMembersHelper::canViewProfileEmail($this->_user->getId());
        if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}	    
	$this->assertEquals(true, $result);
    }
    
    function testDaysSinceCreation() {
        global $gallery;
       
        list ($ret, $result) = GalleryMembersHelper::daysSinceCreation($this->_user->getId());
        if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}	    
	$this->assertEquals(0, $result);
	    
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_user->getId());
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

	$this->_user->setcreationTimestamp(time()-90-7*24*60*60);
	$ret = $this->_user->save();
	if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

	list ($ret, $result) = GalleryMembersHelper::daysSinceCreation($this->_user->getId());
        if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}	    
	$this->assertEquals(7, $result);      

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_user->getId());
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        $this->_user->setcreationTimestamp(time()+90-7*24*60*60);
        $ret = $this->_user->save();
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $ret = GalleryCoreApi::releaseLocks($lockId);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        list ($ret, $result) = GalleryMembersHelper::daysSinceCreation($this->_user->getId());
        if ($ret->isError()) {
            return array($ret->wrap(__FILE__, __LINE__), null);
        }
        $this->assertEquals(7, $result);
    }
}
?>
