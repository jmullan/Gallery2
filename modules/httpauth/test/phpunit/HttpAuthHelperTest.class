<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/httpauth/classes/HttpAuthHelper.class');

/**
 * HTTP auth helper tests.
 * @package HttpAuth
 * @subpackage PHPUnit
 * @author Jack Bates <ms419@freezone.co.uk>
 * @version $Revision$
 */
class HttpAuthHelperTest extends GalleryTestCase {

    function HttpAuthHelperTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();
	global $gallery;
	$urlGenerator =& $gallery->getUrlGenerator();

	/* Mock activate the rewrite module */
	$moduleStatus = array('rewrite' => array('active' => true));
	GalleryDataCache::put('GalleryPluginHelper::fetchPluginList(module)', $moduleStatus);

	/* Mock preGallery rewrite parser.  Mock activate HTTP auth rewrite rules. */
	$parserType =& HttpAuthHelperTestRewriteApi::_getParserType();
	$parserType = 'preGallery';
	$activeRules =& HttpAuthHelperTestRewriteApi::_fetchActiveRulesForModule('httpauth');
	$activeRules = array('authorization');
	$this->_markFactoryForCleanup();
	$this->_registerFactoryImplementationForTest(
	    'RewriteApi', 'HttpAuthHelperTestRewriteApi', 'HttpAuthHelperTestRewriteApi',
	    'modules/httpauth/test/phpunit/HttpAuthHelperTest.class', 'test');

	/* Define HTTP auth works request */
	$this->_httpAuthWorksRequest = 'GET ' . $urlGenerator->generateUrl(
		array('view' => 'httpauth.HttpAuthWorks'),
		array('forceServerRelativeUrl' => true,
		      'htmlEntities' => false)) . " HTTP/1.0\r\n"
	    . 'Authorization: AUTHTYPE ' . base64_encode('USERNAME:PASSWORD') . "\r\n"
	    . 'Host: ' . $urlGenerator->getHostName() . "\r\n"
	    . "\r\n";

	/* Define success and failure responses */
	$this->_accessAuthorizationResponse = 'HTTP/1.1 200 OK
Date: Mon, 24 Nov 2003 05:40:03 GMT
Server: Apache/1.3.28 (Unix)
Content-Length: 26
Connection: close
Content-Type: text/html

AUTHTYPE
USERNAME
PASSWORD';
	$this->_missingAuthorizationResponse = 'HTTP/1.1 200 OK
Date: Mon, 24 Nov 2003 05:40:03 GMT
Server: Apache/1.3.28 (Unix)
Content-Length: 26
Connection: close
Content-Type: text/html



';

	/* Use HttpAuthHelperTestPlatform */
	$platform = new HttpAuthHelperTestPlatform();
	$platform->_messages[$this->_httpAuthWorksRequest] = $this->_accessAuthorizationResponse;
	$gallery->setPlatform($platform);

	/* Activate HTTP auth plugin */
	$ret = $this->_markPluginParametersForCleanup('module', 'httpauth');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$ret = GalleryCoreApi::setPluginParameter('module', 'httpauth', 'httpAuthPlugin', true);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
    }

    function tearDown() {
	GalleryDataCache::reset();
	parent::tearDown();
    }

    function testCheckConfiguration() {
	list ($ret, $code) = HttpAuthHelper::checkConfiguration();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assert(!$code);
    }

    function testCheckConfigurationRewriteModuleDisabled() {
	global $gallery;
	$platform =& $gallery->getPlatform();

	$platform->_messages[$this->_httpAuthWorksRequest] = $this->_missingAuthorizationResponse;
	$moduleStatus = array();
	GalleryDataCache::put('GalleryPluginHelper::fetchPluginList(module)', $moduleStatus);

	list ($ret, $code) = HttpAuthHelper::checkConfiguration();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(HTTPAUTH_STATUS_MISSING_AUTHORIZATION
			    | HTTPAUTH_STATUS_REWRITE_MODULE_DISABLED, $code);
    }

    function testCheckConfigurationBadRewriteParser() {
	global $gallery;
	$platform =& $gallery->getPlatform();

	$platform->_messages[$this->_httpAuthWorksRequest] = $this->_missingAuthorizationResponse;
	$parserType =& HttpAuthHelperTestRewriteApi::_getParserType();
	$parserType = 'bogus';

	list ($ret, $code) = HttpAuthHelper::checkConfiguration();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(HTTPAUTH_STATUS_MISSING_AUTHORIZATION
			    | HTTPAUTH_STATUS_BAD_REWRITE_PARSER, $code);
    }

    function testCheckConfigurationAuthorizationRuleDisabled() {
	global $gallery;
	$platform =& $gallery->getPlatform();

	$platform->_messages[$this->_httpAuthWorksRequest] = $this->_missingAuthorizationResponse;
	$activeRules =& HttpAuthHelperTestRewriteApi::_fetchActiveRulesForModule('httpauth');
	$activeRules = array();

	list ($ret, $code) = HttpAuthHelper::checkConfiguration();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(HTTPAUTH_STATUS_MISSING_AUTHORIZATION
			    | HTTPAUTH_STATUS_AUTHORIZATION_RULE_DISABLED, $code);
    }

    function testCheckConfigurationErrorUnknown() {
	global $gallery;
	$platform =& $gallery->getPlatform();

	$platform->_messages[$this->_httpAuthWorksRequest] = $this->_missingAuthorizationResponse;

	list ($ret, $code) = HttpAuthHelper::checkConfiguration();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(HTTPAUTH_STATUS_MISSING_AUTHORIZATION
			    | HTTPAUTH_STATUS_ERROR_UNKNOWN, $code);
    }

    function testCheckConfigurationHttpAuthWorksIgnoresCauses() {
	$moduleStatus = array();
	GalleryDataCache::put('GalleryPluginHelper::fetchPluginList(module)', $moduleStatus);
	$parserType =& HttpAuthHelperTestRewriteApi::_getParserType();
	$parserType = 'bogus';
	$activeRules =& HttpAuthHelperTestRewriteApi::_fetchActiveRulesForModule('httpauth');
	$activeRules = array();

	list ($ret, $code) = HttpAuthHelper::checkConfiguration();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assert(!$code);
    }

    function testCheckHttpAuth() {
	list ($ret, $success) = HttpAuthHelper::checkHttpAuth();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assert($success);
    }

    function testCheckHttpAuthMissingAuthorization() {
	global $gallery;
	$platform =& $gallery->getPlatform();

	$platform->_messages[$this->_httpAuthWorksRequest] = $this->_missingAuthorizationResponse;

	list ($ret, $success) = HttpAuthHelper::checkHttpAuth();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assert(!$success);
    }

    function testCheckHttpAuthPluginDisabled() {
	global $gallery;
	$platform =& $gallery->getPlatform();

	$platform->_messages[$this->_httpAuthWorksRequest] = $this->_missingAuthorizationResponse;
	$ret = GalleryCoreApi::removePluginParameter('module', 'httpauth', 'httpAuthPlugin');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $success) = HttpAuthHelper::checkHttpAuth();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assert($success);
    }

    function testGetHttpAuth() {
	$_SERVER['AUTH_TYPE'] = 'AUTHTYPE';
	$_SERVER['PHP_AUTH_USER'] = 'USERNAME';
	$_SERVER['PHP_AUTH_PW'] = 'PASSWORD';

	list ($authtype, $username, $password) = HttpAuthHelper::getHttpAuth();
	$this->assertEquals('AUTHTYPE', $authtype);
	$this->assertEquals('USERNAME', $username);
	$this->assertEquals('PASSWORD', $password);
    }

    function testGetHttpAuthFromRequestVariable() {
	GalleryUtilities::putRequestVariable(
	    'authorization', 'AUTHTYPE ' . base64_encode('USERNAME:PASSWORD'));

	list ($authtype, $username, $password) = HttpAuthHelper::getHttpAuth();
	$this->assertEquals('AUTHTYPE', $authtype);
	$this->assertEquals('USERNAME', $username);
	$this->assertEquals('PASSWORD', $password);
    }
}

class HttpAuthHelperTestRewriteApi {
    var $foo;

    function &_fetchActiveRulesForModule($moduleId) {
	static $activeRules;
	return $activeRules;
    }

    function &_getParserType() {
	static $parserType;
	return $parserType;
    }

    function isCompatibleWithApi($version) {
	return array(null, true);
    }

    function fetchActiveRulesForModule($moduleId) {
	return array(null, HttpAuthHelperTestRewriteApi::_fetchActiveRulesForModule($moduleId));
    }

    function getParserType() {
	return HttpAuthHelperTestRewriteApi::_getParserType();
    }
}

class HttpAuthHelperTestPlatform extends GalleryPlatform {
    var $_messages;
    var $_buffer;

    function fsockopen($target, $port, &$errno, &$errstr, $timeout) {
	return 'test';
    }

    function feof($handle) {
	return empty($this->_buffer);
    }

    function fgets($handle, $length) {
	if (empty($this->_buffer)) {
	    return null;
	}

	if (strpos($this->_buffer, "\n") < $length) {
	    $length = strpos($this->_buffer, "\n") + 1;
	}

	return $this->fread($handle, $length);
    }

    function fread($handle, $length) {
	if (empty($this->_buffer)) {
	    return null;
	}

	$buffer = substr($this->_buffer, 0, $length);
	$this->_buffer = substr($this->_buffer, $length);
	return $buffer;
    }

    function fwrite($handle, $string, $length=0) {
	if (isset($this->_messages[$string])) {
	    $this->_buffer = $this->_messages[$string];
	    return strlen($string);
	}
    }

    function fflush($handle) {
	return true;
    }

    function fclose($handle) {
	return true;
    }
}
?>
