<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/httpauth/classes/HttpAuthHelper.class');

/**
 * HTTP auth helper tests.
 * @package HttpAuth
 * @subpackage PHPUnit
 * @author Jack Bates <ms419@freezone.co.uk>
 * @version $Revision$
 */
class HttpAuthHelperTest extends GalleryTestCase {

    function HttpAuthHelperTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}
	global $gallery;
	$urlGenerator =& $gallery->getUrlGenerator();

	/* Mock activate the rewrite module */
	GalleryDataCache::put('GalleryPluginHelper::fetchPluginList(module)',
	    array('rewrite' => array('active' => true)));

	/* Mock preGallery rewrite parser.  Mock activate HTTP auth rewrite rules. */
	$this->_parserType =& HttpAuthHelperTestRewriteApi::_parserType();
	$this->_parserType = 'preGallery';
	$this->_activeRules =& HttpAuthHelperTestRewriteApi::_activeRules();
	$this->_activeRules = array(null, array('authorization'));
	$this->_markFactoryForCleanup();
	$this->_registerFactoryImplementationForTest(
	    'RewriteApi', 'HttpAuthHelperTestRewriteApi', 'HttpAuthHelperTestRewriteApi',
	    'modules/httpauth/test/phpunit/HttpAuthHelperTest.class', 'test');

	/* Define requests */
	$this->_httpAuthWorksRequest = 'GET ' . $urlGenerator->generateUrl(
		array('view' => 'httpauth.HttpAuthWorks'),
		array('forceServerRelativeUrl' => true,
		      'htmlEntities' => false)) . " HTTP/1.0\r\n"
	    . 'Host: ' . $urlGenerator->getHostName() . "\r\n"
	    . 'Authorization: Basic ' . base64_encode('USERNAME:PASSWORD') . "\r\n"
	    . "\r\n";

	/* Define success and failure responses */
	$this->_accessAuthorizationResponse = implode("\r\n", array(
		'HTTP/1.1 200 OK',
		'Date: Mon, 24 Nov 2003 05:40:03 GMT',
		'Server: Apache/1.3.28 (Unix)',
		'Content-Length: 26',
		'Connection: close',
		'Content-Type: text/html',
		'',
		'Basic',
		'USERNAME',
		'PASSWORD'));
	$this->_missingAuthorizationResponse = implode("\r\n", array(
		'HTTP/1.1 200 OK',
		'Date: Mon, 24 Nov 2003 05:40:03 GMT',
		'Server: Apache/1.3.28 (Unix)',
		'Content-Length: 26',
		'Connection: close',
		'Content-Type: text/html',
		'',
		''));

	/* Use HttpAuthHelperTestPlatform */
	$this->_platform =& $gallery->getPlatform();
	$this->_platform = new HttpAuthHelperTestPlatform();
	$this->_platform->_messages[$this->_httpAuthWorksRequest] =
	    $this->_accessAuthorizationResponse;

	$ret = $this->_markPluginParametersForCleanup('module', 'httpauth');
	if ($ret) {
	    return $ret;
	}

	/* Set plugin parameters */
	foreach (array('httpAuthPlugin' => true,
		       'authName' => 'Test Auth Name',
		       'serverAuthPlugin' => false,
		       'regexAuthPlugin' => true,
		       'authtypePattern' => '//',
		       'usernamePattern' => '/^(.+\\\\)?([^\\\\@]+)(@.+)?$/',
		       'usernameReplace' => '$2',
		       'useGlobally' => true) as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'httpauth', $key, $value);
	    if ($ret) {
		return $ret;
	    }
	}

	/* Create test user */
	list ($ret, $this->_user) = $this->_createRandomUser();
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_user);

	list ($ret, $this->_authInterface) = GalleryCoreApi::newFactoryInstance(
	    'HttpAuthInterface_1_0');
	if ($ret) {
	    return $ret;
	}
	$this->assert(isset($this->_authInterface), 'Could not instantiate HTTP auth interface');

	/* Use HttpAuthHelperTestPhpVm */
	$this->_phpVm =& $gallery->getPhpVm();
	$this->_phpVm = new HttpAuthHelperTestPhpVm();

	/* Reset response headers */
	$this->_responseHeaders =& GalleryUtilities::_getResponseHeaders();
	$this->_responseHeaders = null;

	/* Use HttpAuthHelperTestSession */
	$this->_saveSession = $gallery->_session;
	$this->_session =& $gallery->getSession();
	$this->_session = new HttpAuthHelperTestSession();

	/* Use NullEventListener */
	$this->_event =& NullEventListener::_event();
	$this->_event = null;

	$this->_markFactoryForCleanup();
	$this->_registerFactoryImplementationForTest('GalleryEventListener',
	    'NullEventListener', 'NullEventListener',
	    'lib/tools/phpunit/GalleryTestCase.class', 'test', array('Gallery::FailedLogin'));

	/* Reset server and request variables */
	$_SERVER['AUTH_TYPE'] = null;
	$_SERVER['PHP_AUTH_USER'] = null;
	$_SERVER['PHP_AUTH_PW'] = null;
	$_SERVER['HTTP_AUTHORIZATION'] = null;

	GalleryUtilities::removeRequestVariable('authorization');

	$this->_activeUser =& $gallery->_activeUser;
	$this->_activeUser = null;
    }

    function tearDown() {
	global $gallery;
	$gallery->_session = $this->_saveSession;

	$ret = GalleryCoreApi::removeAllMapEntries('FailedLoginsMap');
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	GalleryDataCache::reset();
	$ret = parent::tearDown();
	if ($ret) {
	   $this->failWithStatus($ret);
	}
    }

    function testCheckConfiguration() {
	list ($ret, $code) = HttpAuthHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(0, $code);
    }

    function testCheckConfigurationWithRewriteModuleDisabled() {
	$this->_platform->_messages[$this->_httpAuthWorksRequest] =
	    $this->_missingAuthorizationResponse;
	GalleryDataCache::put('GalleryPluginHelper::fetchPluginList(module)', array());

	list ($ret, $code) = HttpAuthHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(HTTPAUTH_STATUS_MISSING_AUTHORIZATION
			    | HTTPAUTH_STATUS_REWRITE_MODULE_DISABLED, $code);
    }

    function testCheckConfigurationWithBadRewriteParser() {
	$this->_platform->_messages[$this->_httpAuthWorksRequest] =
	    $this->_missingAuthorizationResponse;
	$this->_parserType = 'bogus';

	list ($ret, $code) = HttpAuthHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(HTTPAUTH_STATUS_MISSING_AUTHORIZATION
			    | HTTPAUTH_STATUS_BAD_REWRITE_PARSER, $code);
    }

    function testCheckConfigurationWithAuthorizationRuleDisabled() {
	$this->_platform->_messages[$this->_httpAuthWorksRequest] =
	    $this->_missingAuthorizationResponse;
	$this->_activeRules = array(null, array());

	list ($ret, $code) = HttpAuthHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(HTTPAUTH_STATUS_MISSING_AUTHORIZATION
			    | HTTPAUTH_STATUS_AUTHORIZATION_RULE_DISABLED, $code);
    }

    function testCheckConfigurationWithErrorUnknown() {
	$this->_platform->_messages[$this->_httpAuthWorksRequest] =
	    $this->_missingAuthorizationResponse;

	list ($ret, $code) = HttpAuthHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(HTTPAUTH_STATUS_MISSING_AUTHORIZATION
			    | HTTPAUTH_STATUS_ERROR_UNKNOWN, $code);
    }

    function testCheckConfigurationWithHttpAuthWorksIgnoresCauses() {
	GalleryDataCache::put('GalleryPluginHelper::fetchPluginList(module)', array());
	$this->_parserType = 'bogus';
	$this->_activeRules = array();

	list ($ret, $code) = HttpAuthHelper::checkConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(0, $code);
    }

    function testCheckHttpAuth() {
	list ($ret, $success) = HttpAuthHelper::checkHttpAuth();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(true, $success);
    }

    function testCheckHttpAuthWithMissingAuthorization() {
	$this->_platform->_messages[$this->_httpAuthWorksRequest] =
	    $this->_missingAuthorizationResponse;

	list ($ret, $success) = HttpAuthHelper::checkHttpAuth();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(false, $success);
    }

    function testCheckHttpAuthWithHttpAuthDisabled() {
	$this->_platform->_messages[$this->_httpAuthWorksRequest] =
	    $this->_missingAuthorizationResponse;
	$ret = GalleryCoreApi::removePluginParameter('module', 'httpauth', 'httpAuthPlugin');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $success) = HttpAuthHelper::checkHttpAuth();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(true, $success);
    }

    function testGetHttpAuth() {
	$_SERVER['AUTH_TYPE'] = 'AUTHTYPE';
	$_SERVER['PHP_AUTH_USER'] = 'USERNAME';
	$_SERVER['PHP_AUTH_PW'] = 'PASSWORD';
	$_SERVER['HTTP_AUTHORIZATION'] = 'BOGUS ' . base64_encode('BOGUSUSER:BOGUSPASS');
	GalleryUtilities::putRequestVariable(
	    'authorization', 'BOGUS ' . base64_encode('BOGUSUSER:BOGUSPASS'));

	list ($authtype, $username, $password) = HttpAuthHelper::getHttpAuth();
	$this->assertEquals('AUTHTYPE', $authtype);
	$this->assertEquals('USERNAME', $username);
	$this->assertEquals('PASSWORD', $password);
    }

    function testGetHttpAuthFromHttpAuthorizationHeader() {
	$_SERVER['HTTP_AUTHORIZATION'] = 'AUTHTYPE ' . base64_encode('USERNAME:PASSWORD');
	GalleryUtilities::putRequestVariable(
	    'authorization', 'BOGUS ' . base64_encode('BOGUSUSER:BOGUSPASS'));

	list ($authtype, $username, $password) = HttpAuthHelper::getHttpAuth();
	$this->assertEquals('AUTHTYPE', $authtype);
	$this->assertEquals('USERNAME', $username);
	$this->assertEquals('PASSWORD', $password);
    }

    function testGetHttpAuthFromRequestVariable() {
	GalleryUtilities::putRequestVariable(
	    'authorization', 'AUTHTYPE ' . base64_encode('USERNAME:PASSWORD'));

	list ($authtype, $username, $password) = HttpAuthHelper::getHttpAuth();
	$this->assertEquals('AUTHTYPE', $authtype);
	$this->assertEquals('USERNAME', $username);
	$this->assertEquals('PASSWORD', $password);
    }

    function testGetHttpAuthWithoutAuthTypeDefaultsToBasic() {
	$_SERVER['PHP_AUTH_USER'] = 'USERNAME';
	$_SERVER['PHP_AUTH_PW'] = 'PASSWORD';

	list ($authtype, $username, $password) = HttpAuthHelper::getHttpAuth();
	$this->assertEquals('Basic', $authtype);
	$this->assertEquals('USERNAME', $username);
	$this->assertEquals('PASSWORD', $password);
    }

    function testGetHttpAuthWithoutUsernameDoesNotDefault() {
	$_SERVER['PHP_AUTH_USER'] = null;
	$_SERVER['PHP_AUTH_PW'] = 'PASSWORD';

	list ($authtype, $username, $password) = HttpAuthHelper::getHttpAuth();
	$this->assertEquals(null, $authtype);
	$this->assertEquals(null, $username);
	$this->assertEquals('PASSWORD', $password);
    }

    function testGetUser() {
	list ($ret, $user) = HttpAuthHelper::getUser('Bogus', $this->_user->getUserName());
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($this->_user, $user);
    }

    function testGetUserInvalidUsername() {
	list ($ret, $user) = HttpAuthHelper::getUser('Bogus', 'bogusUsername-' . rand());
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(null, $user);
    }

    function testGetUserDisabledUsername() {
	$ret = $this->_disableUserName($this->_user->getUserName());
	if ($ret) {
	    return $ret;
	}

	list ($ret, $user) = HttpAuthHelper::getUser('Bogus', $this->_user->getUserName());
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(null, $user);
    }

    function testGetUserWithAuthtypePattern() {
	$ret = GalleryCoreApi::setPluginParameter(
	    'module', 'httpauth', 'regexAuthPlugin', true);
	if ($ret) {
	    return $ret;
	}

	$ret = GalleryCoreApi::setPluginParameter(
	    'module', 'httpauth', 'authtypePattern', '/^Pattern$/');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $user) = HttpAuthHelper::getUser('Bogus', $this->_user->getUserName());
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(null, $user);
    }

    function testGetUserWithUsernamePattern() {
	$ret = GalleryCoreApi::setPluginParameter(
	    'module', 'httpauth', 'usernamePattern', '/^Pattern$/');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $user) = HttpAuthHelper::getUser('Bogus', $this->_user->getUserName());
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(null, $user);
    }

    function testGetUserWithUsernameReplace() {
	list ($ret, $user) = HttpAuthHelper::getUser(
	    'Bogus', $this->_user->getUserName() . '@REALM.TLD');
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals($this->_user, $user);
    }

    function testGetUserIgnoresGloballyEnabled() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'httpauth', 'useGlobally', false);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $user) = HttpAuthHelper::getUser('Bogus', $this->_user->getUserName());
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals($this->_user, $user);
    }

    function testHttpAuthWithValidUsername() {
	$_SERVER['PHP_AUTH_USER'] = $this->_user->getUserName();
	$_SERVER['PHP_AUTH_PW'] = 'password';

	list ($ret, $eventResults) = HttpAuthHelper::httpAuth();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(null, $eventResults);
	$this->assertEquals($this->_user, $this->_activeUser);
	$this->assertEquals(null, $this->_event, 'There was a FailedLogin event!');
	$this->assertEquals(array(array()), $this->_session->_regenerateCalls,
	    'Session should have been regenerated');
    }

    function testHttpAuthWithInvalidUsername() {
	$_SERVER['PHP_AUTH_USER'] = 'bogusUsername-' . rand();
	$_SERVER['PHP_AUTH_PW'] = 'password';

	list ($ret, $eventResults) = HttpAuthHelper::httpAuth();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(null, $eventResults);
	$this->assertEquals(null, $this->_activeUser);

	if (!isset($this->_event)) {
	    return $this->fail('Should have handled an event');
	}

	$data = $this->_event->getData();
	$this->assertEquals($_SERVER['PHP_AUTH_USER'], $data['username']);
	$this->assertEquals($_SERVER['PHP_AUTH_PW'], $data['password']);

	$this->assertEquals(null, $this->_session->_regenerateCalls,
	    'Session should not have been regenerated');
    }

    function testHttpAuthWithValidUsernameAndInvalidPassword() {
	$_SERVER['PHP_AUTH_USER'] = $this->_user->getUserName();
	$_SERVER['PHP_AUTH_PW'] = 'bogusPassword';

	list ($ret, $eventResults) = HttpAuthHelper::httpAuth();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(null, $eventResults);
	$this->assertEquals(null, $this->_activeUser);

	if (!isset($this->_event)) {
	    return $this->fail('Should have handled an event');
	}

	$data = $this->_event->getData();
	$this->assertEquals($_SERVER['PHP_AUTH_USER'], $data['username']);
	$this->assertEquals($_SERVER['PHP_AUTH_PW'], $data['password']);

	$this->assertEquals(null, $this->_session->_regenerateCalls,
	    'Session should not have been regenerated');
    }

    function testHttpAuthNoFailedLoginEventWithSpecialLogoutUsername() {
	$_SERVER['PHP_AUTH_USER'] = '__LOGOUT__' . rand();
	$_SERVER['PHP_AUTH_PW'] = 'bogusPassword';

	list ($ret, $eventResults) = HttpAuthHelper::httpAuth();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(null, $eventResults);
	$this->assertEquals(null, $this->_activeUser);
	$this->assertEquals(null, $this->_event, 'There was a FailedLogin event!');
	$this->assertEquals(null, $this->_session->_regenerateCalls,
	    'Session should not have been regenerated');
    }

    function testServerAuthWithValidUsername() {
	$_SERVER['REMOTE_USER'] = $this->_user->getUserName();

	list ($ret, $eventResults) = HttpAuthHelper::serverAuth();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(null, $eventResults);
	$this->assertEquals($this->_user, $this->_activeUser);
	$this->assertEquals(null, $this->_event, 'There was a FailedLogin event!');
	$this->assertEquals(array(array()), $this->_session->_regenerateCalls,
	    'Session should have been regenerated');
    }

    function testServerAuthWithInvalidUsername() {
	$_SERVER['REMOTE_USER'] = 'bogusUsername-' . rand();

	list ($ret, $eventResults) = HttpAuthHelper::serverAuth();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'register.UserSelfRegistration',
						      'return' => true)), $eventResults);
	$this->assertEquals(null, $this->_activeUser);
	$this->assertEquals(null, $this->_event, 'There was a FailedLogin event!');
	$this->assertEquals(null, $this->_session->_regenerateCalls,
	    'Session should not have been regenerated');
    }

    function testAddHttpAuthToUrl() {
	$url = 'http://www.example.com/gallery2/main.php?foo=bar&amp;view=baz#some';
	$this->assertEquals(
	    'http://FAKEUSER:FAKEPASS@www.example.com/gallery2/main.php?foo=bar&amp;view=baz#some',
	    HttpAuthHelper::addHttpAuthToUrl($url, 'FAKEUSER', 'FAKEPASS'),
	    'URL with all components');

	$url = 'webdav://www.example.com/gallery2/main.php?foo=bar&view=baz#some';
	$this->assertEquals(
	    'webdav://FAKEUSER:FAKEPASS@www.example.com/gallery2/main.php?foo=bar&view=baz#some',
	    HttpAuthHelper::addHttpAuthToUrl($url, 'FAKEUSER', 'FAKEPASS'),
	    'Non-standard protocol, no HTML entities');

	$url = 'https://www.example.com/gallery2/main.php';
	$this->assertEquals(
	    'https://FAKEUSER:FAKEPASS@www.example.com/gallery2/main.php',
	    HttpAuthHelper::addHttpAuthToUrl($url, 'FAKEUSER', 'FAKEPASS'),
	    'No query string, anchor');

	$url = 'http://OLDUSER:OLDPASS@example.com/gallery2/main.php?foo=bar&amp;view=baz#some';
	$this->assertEquals(
	    'http://FAKEUSER:FAKEPASS@example.com/gallery2/main.php?foo=bar&amp;view=baz#some',
	    HttpAuthHelper::addHttpAuthToUrl($url, 'FAKEUSER', 'FAKEPASS'),
	    'URL with existing user:pass');	
    }

    function testStripHttpAuthFromUrl() {
	$url = 'http://OLDUSER:OLDPASS@example.com/gallery2/main.php?foo=bar&amp;view=baz#some';
	$this->assertEquals(
	    'http://example.com/gallery2/main.php?foo=bar&amp;view=baz#some',
	    HttpAuthHelper::stripHttpAuthFromUrl($url),
	    'URL with user:pass');

	$url = 'http://www.example.com/gallery2/main.php?foo=bar&amp;view=baz#some';
	$this->assertEquals(
	    'http://www.example.com/gallery2/main.php?foo=bar&amp;view=baz#some',
	    HttpAuthHelper::stripHttpAuthFromUrl($url),
	    'URL without user:pass');

	$url = 'webdav://OLDUSER:OLDPASS@example.com/gallery2/main.php?foo=bar&view=baz';
	$this->assertEquals('webdav://example.com/gallery2/main.php?foo=bar&view=baz',
	    HttpAuthHelper::stripHttpAuthFromUrl($url),
	    'URL without HTML entities, anchor, other protocol');
    }

    function testGetConfiguration() {
	list ($ret, $httpAuthEnabled, $serverAuthEnabled, $globallyEnabled) =
	    $this->_authInterface->getConfiguration();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array(true, false, true),
			    array($httpAuthEnabled, $serverAuthEnabled, $globallyEnabled));
    }

    function testSetConfiguration() {
	$ret = $this->_authInterface->setConfiguration(false, true, false);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters('module', 'httpauth');
	if ($ret) {
	    return $ret;
	}

	$this->assert(empty($params['httpAuthPlugin']), 'Wrong httpAuthEnabled value');
	$this->assert(!empty($params['serverAuthPlugin']), 'Wrong serverAuthEnabled value');
	$this->assert(empty($params['useGlobally']), 'Wrong globallyEnabled value');
    }

    function testSetConfigurationDefaults() {
	$ret = $this->_authInterface->setConfiguration(true);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters('module', 'httpauth');
	if ($ret) {
	    return $ret;
	}

	$this->assert(!empty($params['httpAuthPlugin']), 'Wrong httpAuthEnabled value');
	$this->assert(empty($params['serverAuthPlugin']), 'Wrong serverAuthEnabled value');
	$this->assert(empty($params['useGlobally']), 'Wrong globallyEnabled value');
    }

    function testRequestAuthentication() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'httpauth', 'useGlobally', false);
	if ($ret) {
	    return $ret;
	}

	$ret = $this->_authInterface->requestAuthentication();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(null, $this->_responseHeaders);
    }

    function testRequestAuthenticationRespectsGloballyEnabled() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'httpauth', 'useGlobally', false);
	if ($ret) {
	    return $ret;
	}

	$ret = HttpAuthHelper::requestAuthentication(true);
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 401 Unauthorized';
	$expectedHeaders['www-authenticate'] = 'WWW-Authenticate: Basic realm=\'Test Auth Name\'';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);
    }

    function testRequestAuthenticationIgnoredIfHttpAuthNotEnabled() {
	foreach (array('httpAuthPlugin' => false, 'serverAuthPlugin' => true) as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'httpauth', $key, $value);
	    if ($ret) {
		return $ret;
	    }
	}

	$ret = HttpAuthHelper::requestAuthentication();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(null, $this->_responseHeaders);
    }

    function testRequestAuthenticationRespectedIfAlreadyLoggedIn() {
	$this->_becomeGuestUser();

	$ret = HttpAuthHelper::requestAuthentication();
	if ($ret) {
	    return $ret;
	}

	$expectedHeaders = array();
	$expectedHeaders['status'] = 'HTTP/1.0 401 Unauthorized';
	$expectedHeaders['www-authenticate'] = 'WWW-Authenticate: Basic realm=\'Test Auth Name\'';
	$this->assertEquals($expectedHeaders, $this->_responseHeaders);
    }

    function testRegenerateSessionIfNecessary() {
	$ret = HttpAuthHelper::regenerateSessionIfNecessary($this->_user);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array(array()), $this->_session->_regenerateCalls);
    }

    function testRegenerateSessionIfNecessaryWithSessionUser() {
	$this->_session->_userId = $this->_user->getId();
	$ret = HttpAuthHelper::regenerateSessionIfNecessary($this->_user);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(null, $this->_session->_regenerateCalls);
    }

    function testRegenerateSessionIfNecessaryWithDifferentUser() {
	$this->_session->_userId = rand();
	$ret = HttpAuthHelper::regenerateSessionIfNecessary($this->_user);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array(array()), $this->_session->_regenerateCalls);
    }

    function testRegenerateSessionIfNecessaryWithoutUser() {
	$this->_session->_userId = $this->_user->getId();
	$ret = HttpAuthHelper::regenerateSessionIfNecessary(null);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(null, $this->_session->_regenerateCalls);
    }
}

class HttpAuthHelperTestRewriteApi {

    function &_activeRules() {
	static $activeRules;
	return $activeRules;
    }

    function &_parserType() {
	static $parserType;
	return $parserType;
    }

    function isCompatibleWithApi($version) {
	return array(null, true);
    }

    function fetchActiveRulesForModule($moduleId) {
	return HttpAuthHelperTestRewriteApi::_activeRules();
    }

    function getParserType() {
	return HttpAuthHelperTestRewriteApi::_parserType();
    }
}

class HttpAuthHelperTestPlatform extends GalleryPlatform {
    var $_messages;
    var $_buffer;

    function fsockopen($target, $port, &$errno, &$errstr, $timeout) {
	return 'test';
    }

    function feof($handle) {
	return empty($this->_buffer);
    }

    function fgets($handle, $length) {
	if (empty($this->_buffer)) {
	    return null;
	}

	if (strpos($this->_buffer, "\n") < $length) {
	    $length = strpos($this->_buffer, "\n") + 1;
	}

	return $this->fread($handle, $length);
    }

    function fread($handle, $length) {
	if (empty($this->_buffer)) {
	    return null;
	}

	$buffer = substr($this->_buffer, 0, $length);
	$this->_buffer = substr($this->_buffer, $length);
	return $buffer;
    }

    function fwrite($handle, $string, $length=0) {
	if (isset($this->_messages[$string])) {
	    $this->_buffer = $this->_messages[$string];
	    return strlen($string);
	}

	print "Unexpected fwrite: $string";
    }

    function fflush($handle) {
	return true;
    }

    function fclose($handle) {
	return true;
    }
}

class HttpAuthHelperTestPhpVm extends GalleryPhpVm {

    function header($header, $replace=null) {
	/* Avoid modifying actual header information */
    }
}

class HttpAuthHelperTestSession {
    var $_regenerateCalls;
    var $_userId;

    function getUserId() {
	return $this->_userId;
    }

    function setUserId($userId) {
	$this->_userId = $userId;
    }

    function regenerate() {
	$this->_regenerateCalls[] = array();
    }

    function getId() {
	return null;
    }

    function isUsingCookies() {
	return true;
    }
}
?>
