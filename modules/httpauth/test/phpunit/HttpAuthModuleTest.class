<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * HTTP auth module tests.
 * @package HttpAuth
 * @subpackage PHPUnit
 * @author Jack Bates <ms419@freezone.co.uk>
 * @version $Revision$
 */
class HttpAuthModuleTest extends GalleryTestCase {

    function HttpAuthModuleTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();
	global $gallery;
	$urlGenerator =& $gallery->getUrlGenerator();

	/* Require here to avoid loading if none of our tests will be run */
	GalleryCoreApi::requireOnce('modules/core/ErrorPage.inc');

	/* Use HttpAuthModuleTestPhpVm */
	$gallery->_phpVm = new HttpAuthModuleTestPhpVm();

	/* Clear response headers */
	$headers =& GalleryUtilities::_getResponseHeaders();
	$headers = array();

	/* Mock disable HTTP auth rewrite rules */
	$activeRules =& HttpAuthModuleTestRewriteApi::_fetchActiveRulesForModule('httpauth');
	$activeRules = array();
	$this->_markFactoryForCleanup();
	$this->_registerFactoryImplementationForTest(
	    'RewriteApi', 'HttpAuthModuleTestRewriteApi', 'HttpAuthModuleTestRewriteApi',
	    'modules/httpauth/test/phpunit/HttpAuthModuleTest.class', 'test');

	/* Define HTTP auth works request */
	$this->_httpAuthWorksRequest = 'GET ' . $urlGenerator->generateUrl(
		array('view' => 'httpauth.HttpAuthWorks'),
		array('forceServerRelativeUrl' => true,
		      'htmlEntities' => false)) . " HTTP/1.0\r\n"
	    . 'Authorization: AUTHTYPE ' . base64_encode('USERNAME:PASSWORD') . "\r\n"
	    . 'Host: ' . $urlGenerator->getHostName() . "\r\n"
	    . "\r\n";

	/* Define success and failure responses */
	$this->_accessAuthorizationResponse = 'HTTP/1.1 200 OK
Date: Mon, 24 Nov 2003 05:40:03 GMT
Server: Apache/1.3.28 (Unix)
Content-Length: 26
Connection: close
Content-Type: text/html

AUTHTYPE
USERNAME
PASSWORD';
	$this->_missingAuthorizationResponse = 'HTTP/1.1 200 OK
Date: Mon, 24 Nov 2003 05:40:03 GMT
Server: Apache/1.3.28 (Unix)
Content-Length: 26
Connection: close
Content-Type: text/html



';

	/* Use HttpAuthModuleTestPlatform */
	$platform =& new HttpAuthModuleTestPlatform();
	$platform->_messages[$this->_httpAuthWorksRequest] = $this->_accessAuthorizationResponse;
	$gallery->setPlatform($platform);

	/* Activate HTTP auth plugin */
	$ret = $this->_markPluginParametersForCleanup('module', 'httpauth');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$ret = GalleryCoreApi::setPluginParameter('module', 'httpauth', 'httpAuthPlugin', true);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
    }

    function tearDown() {
	GalleryDataCache::reset();
	parent::tearDown();
    }

    function testHandleEventErrorPermissionDenied() {
	/* Perform the request and verify that we succeeded */
	ob_start();
	ErrorPageView::errorHandler(GalleryCoreApi::error(ERROR_PERMISSION_DENIED));
	$output = ob_get_contents();
	ob_end_clean();

	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters('module', 'httpauth');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(array('status' => 'HTTP/1.0 401 Unauthorized',
		'www-authenticate' => "WWW-Authenticate: Basic realm='$params[authName]'"),
	    GalleryUtilities::_getResponseHeaders());

	//$this->assertEquals('', $output);
    }

    function testGetRewriteRules() {
	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'httpauth');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$rules = $module->getRewriteRules();

	$this->assertEquals(array(), array_keys($rules));
    }

    function testGetRewriteRulesAuthorizationRuleActive() {
	$activeRules =& HttpAuthModuleTestRewriteApi::_fetchActiveRulesForModule('httpauth');
	$activeRules = array('authorization');

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'httpauth');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$rules = $module->getRewriteRules();

	$this->assertEquals(array('authorization'), array_keys($rules));
    }

    function testGetRewriteRulesMissingAuthorization() {
	global $gallery;
	$platform =& $gallery->getPlatform();

	$platform->_messages[$this->_httpAuthWorksRequest] = $this->_missingAuthorizationResponse;

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'httpauth');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$rules = $module->getRewriteRules();

	$this->assertEquals(array('authorization'), array_keys($rules));
    }
}

class HttpAuthModuleTestPhpVm extends GalleryPhpVm {

    function header($header, $replace=null) {
	/* Avoid modifying actual header information */
    }
}

class HttpAuthModuleTestRewriteApi {
    var $foo;

    function &_fetchActiveRulesForModule($moduleId) {
	static $activeRules;
	return $activeRules;
    }

    function isCompatibleWithApi($version) {
	return array(null, true);
    }

    function fetchActiveRulesForModule($moduleId) {
	return array(null, HttpAuthModuleTestRewriteApi::_fetchActiveRulesForModule($moduleId));
    }
}

class HttpAuthModuleTestPlatform extends GalleryPlatform {
    var $_messages;
    var $_buffer;

    function fsockopen($target, $port, &$errno, &$errstr, $timeout) {
	return 'test';
    }

    function feof($handle) {
	return empty($this->_buffer);
    }

    function fgets($handle, $length) {
	if (empty($this->_buffer)) {
	    return null;
	}

	if (strpos($this->_buffer, "\n") < $length) {
	    $length = strpos($this->_buffer, "\n") + 1;
	}

	return $this->fread($handle, $length);
    }

    function fread($handle, $length) {
	if (empty($this->_buffer)) {
	    return null;
	}

	$buffer = substr($this->_buffer, 0, $length);
	$this->_buffer = substr($this->_buffer, $length);
	return $buffer;
    }

    function fwrite($handle, $string, $length=0) {
	if (isset($this->_messages[$string])) {
	    $this->_buffer = $this->_messages[$string];
	    return strlen($string);
	}
    }

    function fflush($handle) {
	return true;
    }

    function fclose($handle) {
	return true;
    }
}
?>
