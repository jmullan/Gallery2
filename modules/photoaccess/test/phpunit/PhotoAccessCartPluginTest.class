<?php
/*
 * $RCSfile: PhotoAccessCartPluginTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.23 $ $Date: 2006/02/24 02:32:07 $
 * @package PhotoAccess
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test PhotoAccess cart functionality
 *
 * @package PhotoAccess
 * @subpackage PHPUnit
 */
class PhotoAccessCartPluginTest extends GalleryTestCase {

    function PhotoAccessCartPluginTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	/* Control the user agent; we pass this to PhotoAccess */
	$_SERVER['HTTP_USER_AGENT'] = 'Test User Agent';
	$_SERVER['HTTP_REFERER'] = 'TestHttpReferer';

	/* Create some random photo items that we can print */
	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);

	$ret = GalleryCoreApi::removeItemPermissions($this->_album->getId());
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_album->getId(), $gallery->getActiveUserId(), 'core.all');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	for ($i = 0; $i < 3; $i++) {
	    /*
	     * Create a new item and force it to be a GalleryPhotoItem, cause that's the only
	     * type that this plugin will print.  Make it an unsupported mime type so that no
	     * graphics toolkits will get involved.
	     */
	    list ($ret, $this->_items[$i]) =
		$this->_createRandomDataItem($this->_album->getId(),
					     'test/jpeg', array(), __FILE__, 'GalleryPhotoItem');
	    if ($ret) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }


	    /* Create a stub thumbnail */
	    list ($ret, $derivative) = GalleryCoreApi::newFactoryInstanceByHint(
		'GalleryDerivative', $this->_items[$i]->getEntityType());
	    if ($ret) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $ret = $derivative->create($this->_items[$i]->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
	    if ($ret) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $derivative->setDerivativeSourceId($this->_items[$i]->getId());
	    $derivative->setDerivativeOperations('thumbnail|150');
	    $derivative->setMimeType('test/file');

	    $ret = $derivative->save();
	    if ($ret) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    /*
	     * Save the thumb and source ids for the test platform so that it can verify that
	     * the right post data goes through.
	     */
	    $this->_thumbIds[$i] = $derivative->getId();
	    $this->_sourceIds[$i] = $this->_items[$i]->getId();
	}

	/* Create a least one preferred */
	list ($ret, $derivative) = GalleryCoreApi::newFactoryInstanceByHint(
	    'GalleryDerivative', $this->_items[2]->getEntityType());
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $derivative->create($this->_items[2]->getId(), DERIVATIVE_TYPE_IMAGE_PREFERRED);
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$derivative->setDerivativeSourceId($this->_items[2]->getId());
	$derivative->setDerivativeOperations('thumbnail|150');
	$derivative->setMimeType('test/file');
	$derivative->setWidth(0);
	$derivative->setHeight(0);
	$ret = $derivative->save();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_sourceIds[2] = $derivative->getId();

        /* Print permission on all but one */
	$ret = GalleryCoreApi::removeUserPermission(
	    $this->_items[1]->getId(), $gallery->getActiveUserId(), 'photoaccess.print');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$storage =& $gallery->getStorage();
	$ret = $storage->checkPoint();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Empty out the plugin session id */
	$session =& $gallery->getSession();
	$this->_saveCartUrlFragment = $session->get('photoaccess.cartUrlFragment');
	$session->remove('photoaccess.cartUrlFragment');

	/* Make sure translate calls during test won't generate any platform calls */
	list ($ret) = GalleryCoreApi::getPermissionIds();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Swap in a dummy url generator */
	$gallery->_urlGenerator = new PhotoAccessCartPluginTestUrlGenerator();
    }

    function tearDown() {
	global $gallery;

	/* Restore session id */
	$session =& $gallery->getSession();
	if (isset($this->_saveCartUrlFragment)) {
	    $session->put('photoaccess.cartUrlFragment', $this->_saveCartUrlFragment);
	} else {
	    $session->remove('photoaccess.cartUrlFragment');
	}
	parent::tearDown();
    }

    function testFulfillCart() {
	global $gallery;
	GalleryCoreApi::requireOnce('modules/cart/classes/CartPluginInterface_1_0.class');
	GalleryCoreApi::requireOnce(
	    'modules/photoaccess/classes/PhotoAccessCartPlugin.class');

	/* Create our cart */
	$cartItemIds = array();
	for ($i = 0; $i < count($this->_items); $i++) {
	    $cartItemIds[$this->_items[$i]->getId()] = $i+1;
	}

	$platform = new UnitTestPlatform();
	$platform->setReply('fsockopen', array('www.photoworks.com', 80, '', '', 1), 'testFd');
	$postPattern = str_repeat('.*image\+id', count($this->_items) - 1) . '(?!.*image\+id)';
	$platform->setReply('fwrite', array('testFd',
	    'fuzzy' => '{POST /sbo/anonCartXML.jsp HTTP/1\.0' . $postPattern . '}s', ''), 100);
	$platform->setReply('fflush', array('testFd'), true);
	$platform->setReply('fgets', array('testFd', 4096), 'HTTP/1.1 200 OK');
	$platform->setReply('feof', array('testFd'), false);
	$platform->setReply('fgets', array('testFd', 4096), '');
	$platform->setReply('feof', array('testFd'), false);
	$platform->setReply('fread', array('testFd', 4096),
	    '<add-cart-response request-url="/REQUEST_URL" redirect-url="/REDIRECT_URL"/>');
	$platform->setReply('fflush', array('testFd'), true);
	$platform->setReply('feof', array('testFd'), true);
	$platform->setReply('fclose', array('testFd'), true);
	$gallery->setPlatform($platform);

	$cartPlugin = new PhotoAccessCartPlugin();
	list ($ret, $urlParams) = $cartPlugin->fulfillCart($cartItemIds);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array('href' => 'http://www.photoworks.com/REDIRECT_URL'), $urlParams);
    }
}

/**
 * Mock url generator for this test
 *
 * @package PhotoAccess
 * @subpackage PHPUnit
 */
class PhotoAccessCartPluginTestUrlGenerator {
    function generateUrl($params=array(), $options=array()) {
	$lines = array();
	foreach ($params as $key => $value) {
	    $lines[] = "$key=$value";
	}
	return implode('/', $lines);
    }
}
?>
