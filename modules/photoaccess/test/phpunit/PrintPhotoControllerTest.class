<?php
/*
 * $RCSfile: PrintPhotoControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.22 $ $Date: 2006/02/24 02:32:07 $
 * @package PhotoAccess
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test PhotoAccess cart functionality
 *
 * @package PhotoAccess
 * @subpackage PHPUnit
 */
class PrintPhotoControllerTest extends GalleryControllerTestCase {

    function PrintPhotoControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'photoaccess.PrintPhoto');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	/* Control the user agent; we pass this to PhotoAccess */
	$_SERVER['HTTP_USER_AGENT'] = 'Test User Agent';
	$_SERVER['HTTP_REFERER'] = 'TestHttpReferer';

	/* Create some random photo items that we can print */
	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    print $ret->getAsHtml();
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_album);

	/*
	 * Create a new item and force it to be a GalleryPhotoItem, cause that's the only type
	 * that this plugin will print.  Make it an unsupported mime type so that no graphics
	 * toolkits will get involved.
	 */
	list ($ret, $this->_photo) =
	    $this->_createRandomDataItem($this->_album->getId(),
					 'test/jpeg', array(), __FILE__, 'GalleryPhotoItem');
	if ($ret) {
	    print $ret->getAsHtml();
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create a stub thumbnail */
	list ($ret, $derivative) = GalleryCoreApi::newFactoryInstanceByHint(
					  'GalleryDerivative', $this->_photo->getEntityType());
	if ($ret) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$ret = $derivative->create($this->_photo->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
	if ($ret) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$derivative->setDerivativeSourceId($this->_photo->getId());
	$derivative->setDerivativeOperations('thumbnail|150');
	$derivative->setMimeType('test/file');

	$ret = $derivative->save();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Ensure we have print permission */
	$ret = GalleryCoreApi::removeItemPermissions($this->_photo->getId());
	if ($ret) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_photo->getId(), $gallery->getActiveUserId(), 'core.all');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/*
	 * Save the thumb and source ids for the test platform so that it can verify that
	 * the right post data goes through.
	 */
	$this->_thumbId = $derivative->getId();
	$this->_sourceId = $this->_photo->getId();

	$storage =& $gallery->getStorage();
	$ret = $storage->checkPoint();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Empty out the plugin session id */
	$session =& $gallery->getSession();
	$this->_saveCartUrlFragment = $session->get('photoaccess.cartUrlFragment');
	$session->remove('photoaccess.cartUrlFragment');

	 /* Make sure translate calls during test won't generate any platform calls */
	list ($ret) = GalleryCoreApi::getPermissionIds();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Swap in a dummy url generator */
	$gallery->_urlGenerator = new PrintPhotoControllerTestUrlGenerator();
    }

    function tearDown() {
	global $gallery;

	/* Restore session id */
	$session =& $gallery->getSession();
	if (isset($this->_saveCartUrlFragment)) {
	    $session->put('photoaccess.cartUrlFragment', $this->_saveCartUrlFragment);
	} else {
	    $session->remove('photoaccess.cartUrlFragment');
	}

	parent::tearDown();
    }

    function &_getTestPlatform($fragment, $requestUrl, $redirectUrl) {
	$platform = new UnitTestPlatform();
	$platform->setReply('fsockopen', array('www.photoworks.com', 80, '', '', 1), 'testFd');
	$platform->setReply('fwrite',
	    array('testFd', 'fuzzy' => "{POST /sbo/$fragment HTTP/1\.0}", ''), 100);
	$platform->setReply('fflush', array('testFd'), true);
	$platform->setReply('fgets', array('testFd', 4096), 'HTTP/1.1 200 OK');
	$platform->setReply('feof', array('testFd'), false);
	$platform->setReply('fgets', array('testFd', 4096), '');
	$platform->setReply('feof', array('testFd'), false);
	$platform->setReply('fread', array('testFd', 4096), '<add-cart-response request-url="' .
	    $requestUrl . '" redirect-url="' . $redirectUrl . '"/>');
	$platform->setReply('fflush', array('testFd'), true);
	$platform->setReply('feof', array('testFd'), true);
	$platform->setReply('fclose', array('testFd'), true);
	return $platform;
    }

    function testPrintPhoto() {
	global $gallery;
	$gallery->setPlatform(
	    $this->_getTestPlatform('anonCartXML.jsp', '/REQUEST_URL', '/REDIRECT_URL'));

	GalleryUtilities::putRequestVariable('itemId', $this->_photo->getId());
	GalleryUtilities::putRequestVariable('returnUrl', 'RETURN_URL');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$expectedHref = 'http://www.photoworks.com/REDIRECT_URL';
	$this->assertEquals(array('redirect' => array('href' => $expectedHref),
				  'status' => array(),
				  'error' => array()),
			    $results);

	$session =& $gallery->getSession();
	$this->assertEquals('/REQUEST_URL', $session->get('photoaccess.cartUrlFragment'));
    }

    function testPrintSecondPhoto() {
	global $gallery;
	$gallery->setPlatform($this->_getTestPlatform('EXISTING_FRAGMENT',
	    '/REQUEST_URL2?foo=1&#38;bar=2', '/REDIRECT_URL2?foo=1&#38;bar=2'));

	GalleryUtilities::putRequestVariable('itemId', $this->_photo->getId());
	GalleryUtilities::putRequestVariable('returnUrl', 'RETURN_URL');

	$session =& $gallery->getSession();
	$session->put('photoaccess.cartUrlFragment', '/sbo/EXISTING_FRAGMENT');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$expectedHref = 'http://www.photoworks.com/REDIRECT_URL2?foo=1&bar=2';
	$this->assertEquals(array('redirect' => array('href' => $expectedHref),
				  'status' => array(),
				  'error' => array()),
			    $results);

	$this->assertEquals('/REQUEST_URL2?foo=1&bar=2',
			    $session->get('photoaccess.cartUrlFragment'));
    }

}

/**
 * Mock url generator for this test
 *
 * @package PhotoAccess
 * @subpackage PHPUnit
 */
class PrintPhotoControllerTestUrlGenerator {
    function generateUrl($params=array(), $options=array()) {
	$lines = array();
	foreach ($params as $key => $value) {
	    $lines[] = "$key=$value";
	}
	return implode('/', $lines);
    }
}
?>
