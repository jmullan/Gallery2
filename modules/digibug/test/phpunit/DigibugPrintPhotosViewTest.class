<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/digibug/DigibugPrintPhotos.inc');

/**
 * Test DigibugPrintPhotos immediate view
 *
 * @package Digibug
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision$
 */
class DigibugPrintPhotosViewTest extends GalleryTestCase {

    function DigibugPrintPhotosViewtest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	$this->_view = new DigibugPrintPhotosView();

	list ($ret, $this->_item) = $this->_createRandomDataItem(
	    $this->_getRootId(), 'application/unknown', array(), __FILE__,
	    'GalleryPhotoItem');
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_item);
    }

    function testDigibugSesssionHasPrintServiceIds() {
	global $gallery;

	$itemId = $this->_item->getId();
	GalleryUtilities::putRequestVariable('itemId', $itemId);
	GalleryUtilities::putRequestVariable('returnUrl', 'RETURN_URL');

	/* We only have permission to print and view the thumbnail */
	$ret = GalleryCoreApi::removeItemPermissions($itemId);
	if ($ret) {
	    return ($ret);
	}

	$ret = GalleryCoreApi::addUserPermission(
	    $itemId, $gallery->getActiveUserId(), 'digibug.print');
	if ($ret) {
	    return ($ret);
	}

	$ret = GalleryCoreApi::addUserPermission(
	    $itemId, $gallery->getActiveUserId(), 'core.view');
	if ($ret) {
	    return ($ret);
	}

	ob_start();
	$ret = $this->_view->renderImmediate(array(), array());
	if ($ret) {
	    return ($ret);
	}
	$results = ob_get_contents();
	ob_end_clean();

	/* Grab session we provide for the raw image */
	$session =& $gallery->getSession();
	$sessionVar = GalleryUtilities::prefixFormVariable($session->getKey());
	preg_match_all("/image_1.*?$sessionVar=([0-9a-f]*)/", $results, $matches);
	$digibugSessionId = $matches[1][0];

	$_COOKIE[SESSION_ID_PARAMETER] = $digibugSessionId;
	$digibugSession = new GallerySession();
	$ret = $digibugSession->init();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array($itemId), $digibugSession->get('core.isPrintService'),
			    'Digibug session missing item id');
    }
}
?>