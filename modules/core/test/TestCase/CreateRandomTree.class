<?php

class CreateRandomTreeTestCase extends TestCase {

    var $_maxItems;
    var $_photoCount = 0;
    var $_imagePath;

    function getIterations() {
	return array(1, 50, 500, 1000, 10000);
    }

    function getDescription() {
	return "Create a random album tree containing $this->_maxItems photos with comments";
    }

    function testStart($iterations) {
	global $gallery;

	list ($ret, $rootId) =
	    $gallery->getModuleParameter('core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	$lockIds = array();

	$this->_imagePath = dirname(dirname(__FILE__)) . '/data/test1.jpg';
	$this->_maxItems = $iterations;

	list($ret, $lockIds[]) = $gallery->acquireReadLock($rootId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	while ($this->_photoCount < $this->_maxItems) {
	    $ret = $this->_createRandomAlbum($rootId, $lockIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	/* Release our locks */
	$ret = $gallery->releaseLocks($lockIds);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    function _randomName() {
	return "foo_" . $this->_photoCount . "_" . rand(1000,5000);
    }

    function _createRandomAlbum($parentId, &$lockIds) {
	global $gallery;

	$gallery->guaranteeTimeLimit(10);
	
	if ($this->_photoCount >= $this->_maxItems) {
	    return GalleryStatus::success();
	}

	/* Create a random album */
	list ($ret, $album) = $gallery->newEntity('GalleryAlbumItem');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	$ret = $album->create($parentId,
			      $this->_randomName(),
			      $gallery->getActiveUserId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$album->setTitle("Random album, child of $parentId");

	/* Save the album */
	$ret = $album->save();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Read lock it */
	list($ret, $lockIds[]) = $gallery->acquireReadLock($album->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Create 1-50 random photos inside it */
	$rand1 = rand(1, 50);
	$gallery->debug("<h3> Create $rand1 Photos </h3>");
	for ($i = 0; $i < $rand1; $i++) {
	    $this->_photoCount++;
	    $gallery->debug("<h4>$this->_photoCount, $this->_maxItems</h4>");
	    
	    /* Create the photo */
	    list ($ret, $photo) = $gallery->newEntity('GalleryPhotoItem');
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    
	    $ret = $photo->create($album->getId(),
				  $this->_imagePath,
				  $gallery->getActiveUserId(),
				  $this->_randomName());
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    /* Save the photo */
	    $photo->save();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    /* Create a derivative image for the thumbnail */
	    list ($ret, $thumbnail) = $gallery->newEntity('GalleryDerivativeImage');
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    
	    $ret = $thumbnail->create($photo->getId(), IMAGE_TYPE_THUMBNAIL);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $thumbnail->setDerivativeSourceId($photo->getId());
	    $thumbnail->setDerivativeCommands("scale 200");
	    $thumbnail->setDerivativeMimeType($photo->getMimeType());

	    $thumbnail->save();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    
	    /* Create 1-3 resizes */
	    $rand2 = rand(1, 3);
	    $gallery->debug("<h3> Create $rand2 resizes </h3>");
	    for ($j = 0; $j < $rand2; $j++) {
		list ($ret, $resize) = $gallery->newEntity('GalleryDerivativeImage');
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		
		$ret = $resize->create($photo->getId(), IMAGE_TYPE_RESIZE);
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}

		$scale = rand(300, 600);
		$resize->setDerivativeSourceId($photo->getId());
		$resize->setDerivativeCommands("scale $scale");
		$resize->setDerivativeMimeType($photo->getMimeType());

		$ret = $resize->save();
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }

	    if (false) {
		/* Create 0-3 comments */
		$rand4 = rand(0, 3);
		for ($j = 0; $j < $rand4; $j++) {
		    list ($ret, $comment) = $gallery->newEntity('GalleryComment');
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    
		    $ret = $comment->create($photo->getId());
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    
		    $comment->setCommenterId($gallery->getActiveUserId());
		    $comment->setComment('This is a test of the emergency broadcas'.
					 't system.  This is only a test.  This is'.
					 'a test of the emergency broadcast system'.
					 '.  This is only a test.  This is a test '.
					 'of the emergency broadcast system.  This'.
					 'is only a test.');
		    $comment->setDate(time());
		    $host = $GLOBALS['HTTP_SERVER_VARS']['REMOTE_HOST'];
		    if (empty($host)) {
			$host = $GLOBALS['HTTP_SERVER_VARS']['REMOTE_ADDR'];
		    }
		    $comment->setHost($host);
		}
	    }

	    if ($this->_photoCount >= $this->_maxItems) {
		break;
	    }
	}

	/* 1-in-3 chance of having sub-albums */
	if (rand(1, 3) == 1) {

	    /* Create 1-3 sub-albums */
	    $rand3 = rand(1, 3);
	    $gallery->debug("<h3> Create $rand3 sub-albums </h3>");
	    for ($i = 0; $i < $rand3; $i++) {
		$ret = $this->_createRandomAlbum($album->getId(), $lockIds);
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	    
	}

	return GalleryStatus::success();
    }
}

?>

