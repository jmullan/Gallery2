<?php

/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage TestCase
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * @package GalleryCore
 * @subpackage TestCase
 */
class CreateRandomTreeTestCase extends TestCase {

    var $_maxItems;
    var $_itemCount = 0;
    var $_imagePath;


    function getIterations() {
	return array(1, 5, 50, 500, 1000, 10000, 100000);
    }

    function getDescription() {
	return 'Create a random album tree containing X items';
    }

    function testStart($iterations) {
	global $gallery;

	list ($ret, $rootId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	$lockIds = array();

	foreach (array('test1.jpg',
		       'test1.gif',
		       'test2.gif',
		       'test3.gif',
		       'test4.gif') as $imageName) {
	    $this->_imagePath[] = dirname(dirname(__FILE__)) . '/data/' . $imageName;
	}
	$this->_maxItems = $iterations;

	list($ret, $lockIds[]) = GalleryCoreApi::acquireReadLock($rootId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	while ($this->_itemCount < $this->_maxItems) {
	    $ret = $this->_createRandomAlbum($rootId, $lockIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	/* Release our locks */
	$ret = GalleryCoreApi::releaseLocks($lockIds);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    function _randomName() {
	return "foo_" . $this->_itemCount . "_" . rand(1000,5000);
    }

    function _createRandomAlbum($parentId, &$lockIds) {
	global $gallery;

	if ($gallery->getDebug()) {
	    $gallery->debug("<h3> Create random album </h3>");
	}
	$gallery->guaranteeTimeLimit(10);
	
	if ($this->_itemCount >= $this->_maxItems) {
	    return GalleryStatus::success();
	}

	/* Create a random album */
	list ($ret, $album) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryAlbumItem');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	if (!isset($album)) {
	    return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__);
	}  
	
	$ret = $album->create($parentId, $this->_randomName());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	if (rand(1, 10) > 1) {
	    $album->setTitle($this->_randomWords(rand(2, 4)));
	}
	
	if (rand(1, 8) > 1) {
	    $album->setSummary($this->_randomWords(rand(4, 20)));
	}
	
	if (rand(1, 5) > 1) {
	    $album->setDescription($this->_randomWords(rand(20, 50)));
	}

	/* Save the album */
	$ret = $album->save();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Read lock it */
	list($ret, $lockIds[]) = GalleryCoreApi::acquireReadLock($album->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Create 1-50 random items inside it */
	$rand1 = rand(1, 50);
	if ($gallery->getDebug()) {
	    $gallery->debug("<h3> Create $rand1 items </h3>");
	}
	for ($i = 0; $i < $rand1; $i++) {
	    $this->_itemCount++;
	    if ($gallery->getDebug()) {
		$gallery->debug("<h4>$this->_itemCount, $this->_maxItems</h4>");
	    }
	    
	    $gallery->guaranteeTimeLimit(10);

	    $imageFile = $this->_imagePath[rand(0, sizeof($this->_imagePath)-1)];
	    $mimeType = GalleryUtilities::getMimeType($imageFile);
	    $extension = GalleryUtilities::getFileExtension($imageFile);

	    /* Create the item */
	    list ($ret, $item) = GalleryCoreApi::newItemByMimeType($mimeType);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    
	    $ret = $item->create($album->getId(),
				 $imageFile,
				 $mimeType,
				 $this->_randomName());
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    if (rand(1, 10) > 1) {
		$item->setTitle($this->_randomWords(rand(2, 4)));
	    }
	    if (rand(1, 8) > 1) {
		$item->setSummary($this->_randomWords(rand(4, 20)));
	    }
	    if (rand(1, 5) > 1) {
		$item->setDescription($this->_randomWords(rand(50, 100)));
	    }

	    /* Save the item */
	    $ret = $item->save();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    list ($ret, $toolkit, $outputMimeType) =
		GalleryCoreApi::getToolkitByOperation($item->getMimeType(), 'thumbnail');
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    /* Create a derivative image for the thumbnail */
	    if (isset($toolkit)) {
		list ($ret, $thumbnail) =
		    GalleryCoreApi::newFactoryInstanceByHint('GalleryDerivative', $item->getEntityType());
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}

		if (!isset($thumbnail)) {
		    return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__);
		}  
	    
		$ret = $thumbnail->create($item->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		$thumbnail->setDerivativeSourceId($item->getId());
		$thumbnail->setDerivativeOperations('thumbnail|100');
		$thumbnail->setMimeType($outputMimeType);

		$ret = $thumbnail->save();
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}

		/* If this is the first image in the album, make it the highlight */
		if ($i == 0) {
		    list ($ret, $thumbnail) =
			GalleryCoreApi::newFactoryInstanceByHint('GalleryDerivative', $item->getEntityType());
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }

		    if (!isset($thumbnail)) {
			return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__);
		    }  
		
		    $ret = $thumbnail->create($album->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    $thumbnail->setDerivativeSourceId($item->getId());
		    $thumbnail->setDerivativeOperations('thumbnail|100');
		    $thumbnail->setMimeType($outputMimeType);
		
		    $ret = $thumbnail->save();
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		}
	    }

	    list ($ret, $toolkit, $outputMimeType) =
		GalleryCoreApi::getToolkitByOperation($item->getMimeType(), 'scale');
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    if (isset($toolkit)) {
		/* Create 1-3 resizes */
		$rand2 = rand(1, 3);
		if ($gallery->getDebug()) {
		    $gallery->debug("<h3> Create $rand2 resizes </h3>");
		}
		for ($j = 0; $j < $rand2; $j++) {
		    list ($ret, $resize) =
			GalleryCoreApi::newFactoryInstanceByHint('GalleryDerivative', $item->getEntityType());
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }

		    if (!isset($resize)) {
			return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__);
		    }  
		
		    $ret = $resize->create($item->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE);
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }

		    $scale = 300 * ($j+1);
		    $resize->setDerivativeSourceId($item->getId());
		    $resize->setDerivativeOperations("scale|$scale");
		    $resize->setMimeType($outputMimeType);

		    $ret = $resize->save();
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		}
	    }

	    /* 1-3 random comments */
	    $rand3 = rand(1, 3);
	    for ($j = 0; $j < $rand3; $j++) {
		list ($ret, $comment) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryComment');
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		
		if (!isset($comment)) {
		    return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__);
		}
		
		$comment->create($item->getId());
		$comment->setCommenterId($gallery->getActiveUserId());
		$comment->setHost('127.0.0.1');
		$comment->setComment($this->_randomWords(rand(10,100)));
		$comment->setDate(time());
		$ret = $comment->save();
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }

	    if ($this->_itemCount >= $this->_maxItems) {
		break;
	    }
	}

	/* 1-in-3 chance of having sub-albums */
	if (rand(1, 3) == 1) {

	    /* Create 1-3 sub-albums */
	    $rand4 = rand(1, 3);
	    if ($gallery->getDebug()) {
		$gallery->debug("<h3> Create $rand4 sub-albums </h3>");
	    }
	    for ($i = 0; $i < $rand4; $i++) {
		$ret = $this->_createRandomAlbum($album->getId(), $lockIds);
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	    
	}

	return GalleryStatus::success();
    }

}

?>

