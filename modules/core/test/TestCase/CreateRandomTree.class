<?php

/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage TestCase
 * @author Bharat Mediratta <bharat@menalto.com>, Alan Harder <alan.harder@sun.com>
 */

/**
 * @package GalleryCore
 * @subpackage TestCase
 */
class CreateRandomTreeTestCase extends TestCase {

    var $_maxItems;
    var $_itemCount = 0;
    var $_imagePath = array();
    var $_customFieldInterface;

    // Configurable values below:
    var $_imageFiles = array('../data/test1.jpg', '../data/test1.gif', '../data/test2.gif',
			     '../data/test3.gif', '../data/test4.gif');
    var $_imageDir = '';

    var $_minThumbSize = 200;
    var $_maxThumbSize = 300;

    var $_minResizes = 2;
    var $_maxResizes = 4;
    var $_minResizeSize = 300;
    var $_maxResizeSize = 700;

    var $_minItemsPerAlbum = 1;
    var $_maxItemsPerAlbum = 50;
    var $_numSubAlbumsChoices = array(0, 0, 0, 0, 0, 0, 1, 2, 3);

    var $_minCustomFields = 0;
    var $_maxCustomFields = 0;
    var $_percentAlbumHasValue = 0;
    var $_percentItemHasValue = 0;

    var $_numCommentsChoices = array(1, 2, 3);

    var $_commitEvery = 1000;
    // End configurable values.


    function getIterations() {
	return array(1, 5, 50, 500, 1000, 10000, 100000);
    }

    function getDescription() {
	return 'Create a random album tree containing X items';
    }

    function testStart($iterations) {
	global $gallery;
	$platform = $gallery->getPlatform();
	$this->_maxItems = $iterations;

	// Build list of image/item files..
	foreach ($this->_imageFiles as $file) {
	    $file = dirname(__FILE__) . '/' . $file;
	    if ($platform->is_file($file)) {
		$this->_imagePath[] = $file;
	    }
	}
	$dir = dirname(__FILE__) . '/' . $this->_imageDir;
	if (!empty($this->_imageDir) && ($fd = $platform->opendir($dir))) {
	    while (($file = $platform->readdir($fd)) !== false) {
		if ($platform->is_file($dir . '/' . $file)) {
		    $this->_imagePath[] = $dir . '/' . $file;
		}
	    }
	}
	if (empty($this->_imagePath)) {
	    return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__,
					"no images found in $dir");
	}  

	list ($ret, $this->_customFieldInterface) =
	    GalleryCoreApi::newFactoryInstance('CustomFieldInterface_1_0');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	if (!isset($this->_customFieldInterface) && $this->_maxCustomFields > 0) {
	    return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__,
					"make sure custom field module is active");
	}

	if (!empty($this->_numCommentsChoices)) {
	    list ($ret, $comment) =
		GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryComment');
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    if (!isset($comment)) {
		return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__,
					    "make sure comments module is active");
	    }
	}

	list ($ret, $rootId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$lockIds = array();
	list($ret, $lockIds[]) = GalleryCoreApi::acquireReadLock($rootId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	while ($this->_itemCount < $this->_maxItems) {
	    $subLockIds = array();
	    
	    $ret = $this->_createRandomAlbum($rootId, $subLockIds);
	    if ($ret->isError()) {
		GalleryCoreApi::releaseLocks($lockIds);
		GalleryCoreApi::releaseLocks($subLockIds);
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    $ret = GalleryCoreApi::releaseLocks($subLockIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	/* Release our locks */
	$ret = GalleryCoreApi::releaseLocks($lockIds);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    function _randomName() {
	return "foo_" . $this->_itemCount . "_" . rand(1000,5000);
    }

    function _createRandomAlbum($parentId, &$lockIds) {
	global $gallery;
	if ($this->_itemCount >= $this->_maxItems) {
	    return GalleryStatus::success();
	}
	$gallery->guaranteeTimeLimit(10);
	if ($gallery->getDebug()) {
	    $gallery->debug("<h3> Create random album </h3>");
	}

	/* Create a random album */
	list ($ret, $album) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryAlbumItem');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	if (!isset($album)) {
	    return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__);
	}  

	$ret = $album->create($parentId, $this->_randomName());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$album->setTitle($this->_randomWords(rand(2, 4)));
	$album->setSummary($this->_randomWords(rand(4, 20)));
	$album->setDescription($this->_randomWords(rand(20, 50)));

	/* Save the album */
	$ret = $album->save();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Create some derivative preferences */
	$ret = GalleryCoreApi::removeDerivativePreferencesForItem($album->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$ret = GalleryCoreApi::addDerivativePreference(0, $album->getId(),
			       DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
			       'thumbnail|' . rand($this->_minThumbSize, $this->_maxThumbSize));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$max = rand($this->_minResizes, $this->_maxResizes);
	for ($i = 0; $i < $max; $i++) {
	    $ret = GalleryCoreApi::addDerivativePreference(0, $album->getId(),
				   DERIVATIVE_TYPE_IMAGE_RESIZE,
				   'scale|' . rand($this->_minResizeSize, $this->_maxResizeSize));
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	/* Add custom fields */
	$customFields = array();
	$max = rand($this->_minCustomFields, $this->_maxCustomFields);
	for ($i = 0; $i < $max; $i++) {
	    $customFields[] = $this->_randomWords(1);
	}
	if (!empty($customFields)) {
	    list ($ret) = $this->_customFieldInterface->createCustomFields(
				 $customFields, $album->getId());
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $values = array();
	    foreach ($customFields as $field) {
		if (rand(1, 100) <= $this->_percentAlbumHasValue) {
		    $values[$field] = $this->_randomWords(rand(1, 3));
		}
	    }
	    if (!empty($values)) {
		$ret = $this->_customFieldInterface->setCustomFieldValues($album->getId(), $values);
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	}

	/* Read lock it */
	list($ret, $lockIds[]) = GalleryCoreApi::acquireReadLock($album->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Create random items inside it */
	$max = rand($this->_minItemsPerAlbum, $this->_maxItemsPerAlbum);
	if ($gallery->getDebug()) {
	    $gallery->debug("<h3> Create $max items </h3>");
	}

	for ($i = 0; $i < $max; $i++) {
	    $this->_itemCount++;
	    if ($gallery->getDebug()) {
		$gallery->debug("<h4>$this->_itemCount, $this->_maxItems</h4>");
	    }

	    $gallery->guaranteeTimeLimit(10);

	    $imageFile = $this->_imagePath[rand(0, sizeof($this->_imagePath)-1)];
	    list ($ret, $item) = GalleryCoreApi::addItemToAlbum(
			$imageFile, $this->_randomName(),
			$this->_randomWords(rand(2, 4)),    // title
			$this->_randomWords(rand(4, 20)),   // summary
			$this->_randomWords(rand(50, 100)), // description
			GalleryCoreApi::getMimeType($imageFile),
			$album->getId());
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    /* custom fields */
	    $values = array();
	    foreach ($customFields as $field) {
		if (rand(1, 100) <= $this->_percentItemHasValue) {
		    $values[$field] = $this->_randomWords(rand(1, 3));
		}
	    }
	    if (!empty($values)) {
		$ret = $this->_customFieldInterface->setCustomFieldValues($item->getId(), $values);
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }

	    /* random comments */
	    $max2 = !empty($this->_numCommentsChoices)
		 ? $this->_numCommentsChoices[rand(0, sizeof($this->_numCommentsChoices)-1)] : 0;
	    for ($j = 0; $j < $max2; $j++) {
		list ($ret, $comment) =
		    GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryComment');
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		if (!isset($comment)) {
		    return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__);
		}

		$ret = $comment->create($item->getId());
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		$comment->setCommenterId($gallery->getActiveUserId());
		$comment->setHost('127.0.0.1');
		$comment->setComment($this->_randomWords(rand(10,100)));
		$comment->setDate(time());
		$ret = $comment->save();
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }

	    if ($this->_itemCount % $this->_commitEvery == 0) {
		$storage =& $gallery->getStorage();
		$ret = $storage->commitTransaction();
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		$ret = $storage->beginTransaction();
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }

	    if ($this->_itemCount >= $this->_maxItems) {
		break;
	    }
	}

	/* random sub-albums */
	$max = !empty($this->_numSubAlbumsChoices)
	     ? $this->_numSubAlbumsChoices[rand(0, sizeof($this->_numSubAlbumsChoices)-1)] : 0;
	if ($gallery->getDebug()) {
	    $gallery->debug("<h3> Create $max sub-albums </h3>");
	}
	$subLockIds = array();
	for ($i = 0; $i < $max; $i++) {
	    $ret = $this->_createRandomAlbum($album->getId(), $subLockIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	$ret = GalleryCoreApi::releaseLocks($subLockIds);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }
}
?>
