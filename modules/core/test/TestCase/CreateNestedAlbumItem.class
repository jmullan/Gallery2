<?php

class CreateNestedAlbumItemTestCase extends TestCase {

    function getDescription() {
	return "Create several nested album items";
    }

    function testStart() {
	global $gallery;

	$lockIds = array();
	
	print("Creating new root album item\n");
	$rootAlbum = new GalleryAlbumItem();
	$ret = $rootAlbum->createRoot("nestedRoot",
				      $gallery->getActiveUserId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	print("Saving new root album\n");
	$ret = $rootAlbum->save();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	print("Read locking root album\n");
	list ($ret, $lockIds[]) = $gallery->acquireReadLock($rootAlbum->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$parentId = $rootAlbum->getId();
	for ($i = 0; $i < 5; $i++) {

	    print("Read locking parent album\n");
	    list ($ret, $lockIds[]) = $gallery->acquireReadLock($parentId);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    
	    $nested[$i] = new GalleryAlbumItem();
	    $ret = $nested[$i]->create($parentId, "nested_$i",
				       $gallery->getActiveUserId());
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    
	    $ret = $nested[$i]->save();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    $parentId = $nested[$i]->getId();
	}

	/* Leggo of our locks */
	$ret = $gallery->releaseLocks($lockIds);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	return GalleryStatus::success();
    }
}

?>

