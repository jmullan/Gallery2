<?php

class CreateNestedAlbumItemTestCase extends TestCase {

    function getIterations() {
	return array(1, 3, 5, 10, 50, 100);
    }

    function getDescription() {
	return 'Create several nested album items';
    }

    function testStart($iterations) {
	global $gallery;

	$lockIds = array();

	$time = time();
	
	list ($ret, $parentId) =
	    $gallery->getModuleParameter('core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	for ($i = 0; $i < $iterations; $i++) {
	    $gallery->guaranteeTimeLimit(5);

	    $gallery->debug('Read locking parent album');
	    list ($ret, $lockIds[]) = $gallery->acquireReadLock($parentId);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    
	    list ($ret, $nested[$i]) = GalleryFactory::newInstance('GalleryEntity', 'GalleryAlbumItem');
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    
	    $ret = $nested[$i]->create($parentId, "nested_${time}_$i",
				       $gallery->getActiveUserId());
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $nested[$i]->setTitle("Nested album $i, created at $time");
	    
	    $ret = $nested[$i]->save();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    $parentId = $nested[$i]->getId();
	}

	/* Leggo of our locks */
	$ret = $gallery->releaseLocks($lockIds);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	return GalleryStatus::success();
    }
}

?>

