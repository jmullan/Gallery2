<?php

/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage TestCase
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * @package GalleryCore
 * @subpackage TestCase
 */
class CreateAlbumTestCase extends TestCase {

    function getIterations() {
	return array(1, 5, 50, 500, 1000, 10000, 100000);
    }

    function getDescription() {
	return 'Create a random album, somewhere in the gallery';
    }

    function testStart($iterations) {
	global $gallery;

	list ($ret, $rootId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	list($ret, $lockIds[]) = GalleryCoreApi::acquireReadLock($rootId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	for ($i = 0; $i < $iterations; $i++) {
	    /* Create a random album */
	    list ($ret, $album) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryAlbumItem');
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    if (!isset($album)) {
		return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__);
	    }  
	
	    $ret = $album->create($rootId, $this->_randomName());
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $album->setTitle($this->_randomWords(rand(2, 4)));
	    $album->setSummary($this->_randomWords(rand(4, 20)));
	    $album->setDescription($this->_randomWords(rand(20, 50)));

	    /* Save the album */
	    $ret = $album->save();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	/* Release our locks */
	$ret = GalleryCoreApi::releaseLocks($lockIds);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    function _randomName() {
	return "foo_" . rand(1000,5000);
    }
}

?>

