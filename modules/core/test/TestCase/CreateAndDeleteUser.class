<?php

/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage TestCase
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * @package GalleryCore
 * @subpackage TestCase
 */
class CreateAndDeleteUserTestCase extends TestCase {

    function getDescription() {
	return "Create and delete a user";
    }

    function testStart() {
	global $gallery;

	/* Create the user */
	$gallery->debug('Create a new user');
	list ($ret, $user) = GalleryFactory::newInstance('GalleryEntity', 'GalleryUser');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	$ret = $user->create('joe blow');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$user->setFullName('Joe Blow');
	
	$ret = $user->save();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Check what groups the user is in */
	$gallery->debug('See what groups the user is in');
	$ret = $this->_dumpGroups($user->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list ($ret, $groupId) =
	    $gallery->getModuleParameter('core', 'id.adminGroup');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	/* Make the user an admin */
	$gallery->debug('Add the user to the admin group');
	$ret = GalleryUserGroupMap::addUserToGroup($user->getId(), $groupId);

	/* Check groups again */
	$gallery->debug('Check groups again');
	$ret = $this->_dumpGroups($user->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Delete the user -- the lazy way. */
	$gallery->debug('Delete the user');
	$ret = $gallery->deleteEntityById($user->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Make sure that the user is not in the map anymore */
	$gallery->debug('Make sure the user is not in any groups');
	$ret = $this->_dumpGroups($user->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    function _dumpGroups($userId) {
	global $gallery;

	/* XXX: this doesn't work properly, since fetchGroupsForUser caches data */
	list ($ret, $groups) = GalleryUserGroupMap::fetchGroupsForUser($userId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$gallery->debug_r($groups);
	return GalleryStatus::success();
    }
}

?>

