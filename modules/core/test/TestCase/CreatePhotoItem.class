<?php

/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage TestCase
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * @package GalleryCore
 * @subpackage TestCase
 */
class CreatePhotoItemTestCase extends TestCase {

    function getIterations() {
	return array(1, 10, 50);
    }

    function getDescription() {
	return "Create a new PhotoItem in the root album and save it";
    }

    function testStart($iterations) {
	for ($i = 0; $i < $iterations; $i++) {
	    $ret = $this->_runTest();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	return GalleryStatus::success();
    }
    
    function _runTest() {
	global $gallery;

	list ($ret, $rootId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	$lockIds = array();

	/*
	 * Read lock the root.  Normally we'd have to read lock its
	 * ancestors too so that shit doesn't move around while we're working
	 * on it, but in this case we know it's the root.
	 */
	list ($ret, $lockIds[]) = GalleryCoreApi::acquireReadLock($rootId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list ($ret, $photo) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryPhotoItem');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if (!isset($photo)) {
	    return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__);
	}  
	
	$imagePath = dirname(dirname(__FILE__)) . '/data/test1.jpg';
	$extension = GalleryUtilities::getFileExtension($imagePath);
	$mimeType = GalleryUtilities::getMimeType($imagePath);
	$ret = $photo->create($rootId, $imagePath, $mimeType,
			      'itemPath_' . time() . '.' . $extension);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Set basic details for our PhotoItem */
	$photo->setTitle('PhotoItem Title');
	$photo->setDescription('This is the description of my PhotoItem');

	/* Save it */
	$ret = $photo->save();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Release our locks */
	$ret = GalleryCoreApi::releaseLocks($lockIds);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list ($ret, $toolkit, $outputMimeType) =
	    GalleryCoreApi::getToolkitByOperation($photo->getMimeType(), 'thumbnail');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if (isset($toolkit)) {
	    /* Create a thumbnail */
	    list ($ret, $thumbnail) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryDerivativeImage');
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

            if (!isset($thumbnail)) {
		return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__);
	    }  

	    $ret = $thumbnail->create($photo->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    /* Make it a derivative from the source image */
	    $thumbnail->setDerivativeSourceId($photo->getId());
	    $thumbnail->setDerivativeOperations('thumbnail|200');
	    $thumbnail->setMimeType($outputMimeType);
	    $ret = $thumbnail->save();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	list ($ret, $toolkit, $outputMimeType) =
	    GalleryCoreApi::getToolkitByOperation($photo->getMimeType(), 'scale');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if (isset($toolkit)) {
	    /* Create a resize */
	    list ($ret, $resize) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryDerivativeImage');
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

            if (!isset($resize)) {
		return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__);
	    }  

	    $ret = $resize->create($photo->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    /* Make it a derivative from the source image */
	    $resize->setDerivativeSourceId($photo->getId());
	    $resize->setDerivativeOperations('scale|600');
	    $resize->setMimeType($outputMimeType);
	    $ret = $resize->save();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	return GalleryStatus::success();
    }
}

?>

