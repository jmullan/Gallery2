<?php

class CreatePhotoItemTestCase extends TestCase {

    function getDescription() {
	return "Create a new PhotoItem in the root album and save it";
    }

    function testStart() {
	global $gallery;
	$rootId = $gallery->getConfig('core.id.rootAlbum');
	$lockIds = array();

	/*
	 * Read lock the root.  Normally we'd have to read lock its
	 * ancestors too so that shit doesn't move around while we're working
	 * on it, but in this case we know it's the root.
	 */
	list ($ret, $lockIds[]) = $gallery->acquireReadLock($rootId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	print("Creating new photo item\n");
	$photo = new GalleryPhotoItem();
	$ret = $photo->create($rootId,
			      'itemPath_' . time(),
			      $gallery->getActiveUserId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Set basic details for our PhotoItem */
	$photo->setTitle('PhotoItem Title');
	$photo->setDescription('This is the description of my PhotoItem');

	/* Save it */
	$ret = $photo->save();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/*
	 * Now read lock it so that nobody else dinks with it while we're
	 * adding data to it.
	 */
	list ($ret, $lockIds[]) = $gallery->acquireReadLock($photo->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Put an ImageContainer in our PhotoItem */
	$image = new GalleryImageContainer();
	$imagePath = dirname(dirname(__FILE__)) . '/data/test1.gif';
	$ret = $image->create($photo->getId(),
			      $imagePath,
			      $photo->getPathComponent());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Save the image */
	$ret = $image->save();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Create a thumbnail */
	$thumbnail = new GalleryDerivativeImage();
	$ret = $thumbnail->create($photo->getId(), IMAGE_TYPE_THUMBNAIL);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Make it a derivative from the source image */
	$thumbnail->setDerivativeSourceId($image->getId());
	$thumbnail->setDerivativeCommands("scale 200");
	$ret = $thumbnail->save();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Create a resize */
	$resize = new GalleryDerivativeImage();
	$ret = $resize->create($photo->getId(), IMAGE_TYPE_RESIZE);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Make it a derivative from the source image */
	$resize->setDerivativeSourceId($image->getId());
	$resize->setDerivativeCommands("scale 600");
	$ret = $resize->save();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Release our locks */
	$ret = $gallery->releaseLocks($lockIds);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/*
	 * Check to see if the thumbnail's cache is current.
	 * It shouldn't be, since we haven't built it yet.
	 */
	list ($ret, $bool) = $thumbnail->isCacheCurrent();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	if ($bool) {
	    print "Cache is current\n";
	} else {
	    print "Cache is not current\n";

	    /* Rebuild the cache */
	    $ret = $thumbnail->rebuildCache();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	return GalleryStatus::success();
    }
}

?>

