<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/core/AdminRepositoryDownload.inc');

/**
 * AdminRepository controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Jozef Selesi <selesi at gmail dot com>
 * @version $Revision$
 */
class AdminRepositoryDownloadControllerTest extends GalleryControllerTestCase {

    var $_galleryTemplateAdapter;

    function AdminRepositoryDownloadControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.AdminRepositoryDownload');
    }

    function setUp() {
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}
	global $gallery;

	$this->_galleryTemplateAdapter =& $gallery->getTemplateAdapter();

	$gallery->_phpVm = new AdminRepositoryDownloadControllerTestPhpVm();

	/* Use our own wrapped controller so that we can override _fetchPluginStatus */
	$this->_controller = new AdminRepositoryDownloadControllerTestWrapper();
	$this->_controller->_version = '0.1';
	$this->_controller->_active = true;
    }

    function tearDown() {
	global $gallery;
	$gallery->_templateAdapter =& $this->_galleryTemplateAdapter;

	$ret = parent::tearDown();
	if ($ret) {
	   $this->failWithStatus($ret);
	}
    }

    function testDownloadCancel() {
	global $gallery;

	GalleryUtilities::putRequestVariable('form[pluginType]', 'module');
	GalleryUtilities::putRequestVariable('form[pluginId]', 'testModule');

	GalleryUtilities::putRequestVariable('form[action][cancel]', '1');
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminRepository'),
				  'status' => array(),
				  'error' => array()),
			    $results);

    }

    function testInitiateDownload() {
	global $gallery;

	GalleryUtilities::putRequestVariable('form[pluginType]', 'module');
	GalleryUtilities::putRequestVariable('form[pluginId]', 'testModule');
	GalleryUtilities::putRequestVariable('form[base]', 'test:1000');
	GalleryUtilities::putRequestVariable(
	    'form[languages]', array('test:en_US:1000', 'test:hu_HU:1000'));
	GalleryUtilities::putRequestVariable(
	    'form[languagesAvailable]',
	    array('test:en_US', 'test:hu_HU', 'test:es', 'test:af'));
	GalleryUtilities::putRequestVariable('form[action][download]', '1');

	$mockAdapter = new MockTemplateAdapter();
	$gallery->_templateAdapter =& $mockAdapter;

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ProgressBar'),
				  'status' => array(),
				  'error' => array()),
			    $results, 'Expected only core.ProgressBar delegation.');

	$this->assertEquals(1, $mockAdapter->getCallbackCount());
	$callback = $mockAdapter->getCallback(0);

	$this->assertEquals(
	    array($this->_controller, 'performDownloadAndInstallation'),
	    $callback[0]);

	$this->assertEquals(
	    array('test' => array(
		      'module' => array(
			  'testModule' => array(
			      'base' => 1,
			      'lang-en_US' => 1,
			      'lang-hu_HU' => 1)))),
	    $callback[1][0],
	    'installPackages mismatch');

	$this->assertEquals(
	    array('module' => array('testModule' => array('es', 'af'))),
	    $callback[1][1],
	    'deleteLanguages mismatch');
    }
}

class AdminRepositoryDownloadControllerTestUrlGenerator {
    function generateUrl($params=array(), $options=array()) {
	$buf = array();
	foreach ($params as $key => $value) {
	    $buf[] = "$key=$value";
	}
	return implode(',', $buf);
    }
}

class AdminRepositoryDownloadControllerTestModule {
    function installOrUpgrade() {
	$_REQUEST['called']['installOrUpgrade'] = 1;
	return null;
    }

    function autoConfigure() {
	$_REQUEST['called']['autoConfigure'] = 1;
	return array(null, true);
    }

    function activate() {
	$_REQUEST['called']['activate'] = 1;
	return array(null, array());
    }
}

class AdminRepositoryDownloadControllerTestWrapper extends AdminRepositoryDownloadController {

    var $_version = null;
    var $_active = null;

    function _fetchPluginStatus($pluginType, $ignoreCache) {
	list ($ret, $pluginStatus) = parent::_fetchPluginStatus($pluginType, $ignoreCache);
	if ($ret) {
	    return array($ret, null);
	}

	$testModule = 'AdminRepositoryDownloadControllerTest';
	$pluginStatus[$testModule]['active'] = $this->_active;
	$pluginStatus[$testModule]['version'] = $this->_version;

	return array(null, $pluginStatus);
    }
}

class AdminRepositoryDownloadControllerTestPhpVm {
    function AdminRepositoryDownloadControllerTestPhpVm() {
	$this->_class_exists = false;
    }

    function class_exists($class_name) {
	return $this->_class_exists;
    }
}
?>
