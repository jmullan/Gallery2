<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Toolkit functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ToolkitTest extends GalleryTestCase {

    function ToolkitTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	/* Register a dummy toolkit */
	GalleryCoreApi::registerFactoryImplementation('GalleryToolkit',
					       'TestToolkit',
					       'TestToolkit',
					       __FILE__);
	GalleryCoreApi::registerFactoryImplementation('GalleryToolkit',
					       'TestToolkit2',
					       'TestToolkit2',
					       __FILE__);
    }

    function testOperation() {

	$params = array(array('type' => 'test-type1',
			      'description' => 'test-description1'),
			array('type' => 'test-type2',
			      'description' => 'test-description2')
			);
	$ret = GalleryCoreApi::registerToolkitOperation('TestToolkit',
						       array('test/type'),
						       'test-operation',
						       $params,
						       'test-description',
						       'test/outputType');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Get the operation */
	list ($ret, $operations) = GalleryCoreApi::getToolkitOperations('test/type');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(1, sizeof($operations));
	$this->assertEquals('test-operation', $operations[0]['name']);
	$this->assertEquals('test/outputType', $operations[0]['outputMimeType']);
	$this->assertEquals('test-description', $operations[0]['description']);
	$this->assertEquals($params, $operations[0]['parameters']);

	/* Get the toolkit */
	list ($ret, $toolkit, $outputMimeType) =
	    GalleryCoreApi::getToolkitByOperation('test/type', 'test-operation');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(new TestToolkit(), $toolkit);
	$this->assertEquals('test/outputType', $outputMimeType);

	/* Register another toolkit with same operation/mimetype, higher priority */
	$ret = GalleryCoreApi::registerToolkitOperation('TestToolkit2',
						       array('test/type'),
						       'test-operation',
						       $params,
						       'test-description2',
						       'test/outputType', 3);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Get the toolkit */
	list ($ret, $toolkit, $outputMimeType) =
	    GalleryCoreApi::getToolkitByOperation('test/type', 'test-operation');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(new TestToolkit2(), $toolkit);
	$this->assertEquals('test/outputType', $outputMimeType);

	/* Unregister */
	$ret = GalleryCoreApi::unregisterToolkit('TestToolkit');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::unregisterToolkit('TestToolkit2');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Get the toolkit */
	list ($ret, $toolkit, $outputMimeType) =
	    GalleryCoreApi::getToolkitByOperation('test/type', 'test-operation');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(null, $toolkit);
    }

    function testProperty() {
	$ret = GalleryCoreApi::registerToolkitProperty('TestToolkit',
						      array('test/type'),
						      'test-property',
						      'int',
						      'test-description');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Get the operation */
	list ($ret, $properties) = GalleryCoreApi::getToolkitProperties('test/type');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(1, sizeof($properties));
	$this->assertEquals('test-property', $properties[0]['name']);
	$this->assertEquals('int', $properties[0]['type']);
	$this->assertEquals('test-description', $properties[0]['description']);

	/* Get the toolkit */
	list ($ret, $toolkit) =
	    GalleryCoreApi::getToolkitByProperty('test/type', 'test-property');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(new TestToolkit(), $toolkit);

	/* Unregister */
	$ret = GalleryCoreApi::unregisterToolkit('TestToolkit');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Get the toolkit */
	list ($ret, $toolkit) =
	    GalleryCoreApi::getToolkitByProperty('test/type', 'test-property');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(null, $toolkit);
    }

    function testPropertyMultipleToolkits() {
	$ret = GalleryCoreApi::registerToolkitProperty('TestToolkit',
						      array('test/type'),
						      'test-property',
						      'int',
						      'test-description');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::registerToolkitProperty('TestToolkit2',
						      array('test/type'),
						      'test-property',
						      'int',
						      'test-description');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Get the toolkits */
	list ($ret, $toolkits) =
	    GalleryCoreApi::getToolkitsByProperty('test/type', 'test-property');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(new TestToolkit(), new TestToolkit2()), $toolkits);

	/* Unregister */
	$ret = GalleryCoreApi::unregisterToolkit('TestToolkit2');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::unregisterToolkit('TestToolkit');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Get the toolkits */
	list ($ret, $toolkitIds) =
	    GalleryCoreApi::getToolkitByProperty('test/type', 'test-property');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(null, $toolkitIds);
    }

    function testOperationSequence() {
	$params = array(array('type' => 'test-type1',
			      'description' => 'test-description1'),
			array('type' => 'test-type2',
			      'description' => 'test-description2')
			);
	$ret = GalleryCoreApi::registerToolkitOperation('TestToolkit',
						       array('test/type1', 'test/unused'),
						       'test-operation1',
						       $params,
						       'test-description',
						       'test/type2');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::registerToolkitOperation('TestToolkit',
						       array('test/type2'),
						       'test-operation2',
						       $params,
						       'test-description',
						       'test/type3');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $isSupported, $outputMimeType) =
	    GalleryCoreApi::isSupportedOperationSequence('test/type1',
							 'test-operation1|1,2;test-operation2|1,2');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert($isSupported, '1-1');
	$this->assertEquals('test/type3', $outputMimeType, '1-2');

	/* Unregister operation for single mime-type */
	$ret = GalleryCoreApi::unregisterToolkitOperation('TestToolkit', 'test-operation1', array('test/unused', 'test/nonexist'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $isSupported, $outputMimeType) =
	    GalleryCoreApi::isSupportedOperationSequence('test/type1',
							 'test-operation1|1,2;test-operation2|1,2');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert($isSupported, '2-1');
	$this->assertEquals('test/type3', $outputMimeType, '2-2');

	/* Unregister single operation */
	$ret = GalleryCoreApi::unregisterToolkitOperation('TestToolkit', 'test-operation2');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $isSupported, $outputMimeType) =
	    GalleryCoreApi::isSupportedOperationSequence('test/type1',
							 'test-operation1|1,2;test-operation2|1,2');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!$isSupported, '3-1');

	/* Unregister toolkit */
	$ret = GalleryCoreApi::unregisterToolkit('TestToolkit');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $isSupported, $outputMimeType) =
	    GalleryCoreApi::isSupportedOperationSequence('test/type1',
							 'test-operation1|1,2;test-operation2|1,2');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!$isSupported, '4-1');
    }

    function testGetOperationMimeTypes() {

	$params = array(array('type' => 'test-type1',
			      'description' => 'test-description1'),
			array('type' => 'test-type2',
			      'description' => 'test-description2')
			);
	$ret = GalleryCoreApi::registerToolkitOperation('TestToolkit',
						       array('test/type', 'test/type2'),
						       'test-operation',
						       $params,
						       'test-description',
						       'test/outputType');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $data) = GalleryCoreApi::getToolkitOperationMimeTypes('test-operation');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($data['test/type']) && in_array('TestToolkit', $data['test/type']),
		      'Operation mime type');

	/* Unregister */
	$ret = GalleryCoreApi::unregisterToolkit('TestToolkit');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testEstimateDerivativeDimensions() {
	list ($ret, $source) = GalleryCoreApi::newItemByMimeType('image/jpeg');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(GalleryUtilities::isA($source, 'GalleryPhotoItem'));

	$source->setWidth(1024);
	$source->setHeight(768);

	list ($ret, $derivative) =
	    GalleryCoreApi::newFactoryInstanceByHint('GalleryDerivative', $source->getEntityType());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(GalleryUtilities::isA($derivative, 'GalleryDerivativeImage'));

	$derivative->setDerivativeOperations('thumbnail|200');
	$derivative->setWidth(0);
	$derivative->setHeight(0);

	$ret = GalleryCoreApi::estimateDerivativeDimensions($derivative, $source);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(200, $derivative->getWidth());
	$this->assertEquals(150, $derivative->getHeight());
    }

    function testEstimateDerivativeDimensions2() {
	list ($ret, $source) = GalleryCoreApi::newItemByMimeType('image/jpeg');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(GalleryUtilities::isA($source, 'GalleryPhotoItem'));

	$source->setWidth(1024);
	$source->setHeight(768);

	list ($ret, $derivative) =
	    GalleryCoreApi::newFactoryInstanceByHint('GalleryDerivative', $source->getEntityType());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(GalleryUtilities::isA($derivative, 'GalleryDerivativeImage'));

	$derivative->setDerivativeOperations('scale|150');
	$derivative->setWidth(0);
	$derivative->setHeight(0);

	$ret = GalleryCoreApi::estimateDerivativeDimensions($derivative, $source);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(150, $derivative->getWidth());
	$this->assertEquals(113, $derivative->getHeight());
    }

    function testEstimateDerivativeDimensions3() {
	list ($ret, $source) = GalleryCoreApi::newItemByMimeType('image/jpeg');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(GalleryUtilities::isA($source, 'GalleryPhotoItem'));

	$source->setWidth(1024);
	$source->setHeight(768);

	list ($ret, $derivative) =
	    GalleryCoreApi::newFactoryInstanceByHint('GalleryDerivative', $source->getEntityType());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(GalleryUtilities::isA($derivative, 'GalleryDerivativeImage'));

	$derivative->setDerivativeOperations('crop|1,2,3,4;scale|150');
	$derivative->setWidth(0);
	$derivative->setHeight(0);

	$ret = GalleryCoreApi::estimateDerivativeDimensions($derivative, $source);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(0, $derivative->getWidth());
	$this->assertEquals(0, $derivative->getHeight());
    }

    function testApplyTransform() {
	$toolkit = new GalleryToolkit();

	/* Rotate transform of cropped operation results in rotated coordinates*/
	list ($success, $result) = $toolkit->applyTransform('rotate|90', 'rotate|90;crop|15,15,40,50');
	$this->assert($success);
	$this->assertEquals('rotate|90;crop|35,15,50,40', $result, 'test 1');

	/* Rotate transform of nothing returns nothing */
	list ($success, $result) = $toolkit->applyTransform('rotate|90', '');
	$this->assert($success);
	$this->assertEquals('', $result, 'test 2');

	/* Empty transform of cropped opreation returns original values */
	list ($success, $result) = $toolkit->applyTransform('', 'rotate|90;crop|15,15,40,50');
	$this->assert($success);
	$this->assertEquals('rotate|90;crop|15,15,40,50', $result, 'test 3');

	/* Reverse rotate transform of cropped operation results in rotated coordinates*/
	list ($success, $result) = $toolkit->applyTransform('rotate|90', 'rotate|90;crop|15,15,40,50', true);
	$this->assert($success);
	$this->assertEquals('rotate|90;crop|15,45,50,40', $result, 'test 4');
    }

    function testGetMaximumManagedPriority() {
	$ret = GalleryCoreApi::registerToolkitOperation('TestToolkit',
		array('test/type'), 'test-operation', array(),
		'test-description', 'test/outputType', 40);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $priority) = GalleryCoreApi::getMaximumManagedToolkitPriority();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('40', $priority);

	$ret = GalleryCoreApi::unregisterToolkit('TestToolkit');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testGetRedundantPriorities() {
	$ret = GalleryCoreApi::registerToolkitOperation('TestToolkit',
		array('test/type'), 'test-operation', array(),
		'test-description', 'test/outputType', 30);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::registerToolkitOperation('TestToolkit2',
		array('test/type'), 'test-operation', array(),
		'test-description', 'test/outputType', 27);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $list) = GalleryCoreApi::getRedundantToolkitPriorities();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(count($list) >= 2, 'count');
	$this->assertEquals(30, $list['TestToolkit'], 'TestToolkit');
	$this->assertEquals(27, $list['TestToolkit2'], 'TestToolkit2');

	$ret = GalleryCoreApi::unregisterToolkit('TestToolkit');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::unregisterToolkit('TestToolkit2');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
}

/**
 * Mock toolkit
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class TestToolkit { }
class TestToolkit2 { }
?>
