<?php
/*
 * $RCSfile: EventTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.12 $ $Date: 2006/01/13 18:34:03 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Required classes
 */
GalleryCoreApi::requireOnce('modules/core/classes/GalleryEventListener.class');

/**
 * Test Event functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class EventTest extends GalleryTestCase {

    function EventTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function testPostEvent() {
	$eventName = 'EventTest::test';

	$listener = new EventTestEventListener($this);
	GalleryCoreApi::registerEventListener($eventName, $listener);

	$event = GalleryCoreApi::newEvent($eventName);
	$event->setEntity("bogus entity");
	$event->setData('some data');
	list ($ret, $result) = GalleryCoreApi::postEvent($event);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($event, $listener->getEvent());
	$this->assertEquals(array(), $result);
    }

    function testPostEventReturnData() {
	$eventName = 'EventTest::test2';

	$listener = new EventTestEventListener($this);
	GalleryCoreApi::registerEventListener($eventName, $listener);

	$event = GalleryCoreApi::newEvent($eventName);
	$event->setEntity("bogus entity");
	$event->setData('send result');
	list ($ret, $result) = GalleryCoreApi::postEvent($event);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($event, $listener->getEvent());
	$this->assertEquals(array('result'), $result);
    }

    function testChangePermissions() {
	/* Verify that a GalleryEntity::save event handler can modify permissions of a new item */
	global $gallery;

	$listener = new EventTestEventListener($this);
	$this->_registerTestEventListener('GalleryEntity::save', $listener);

	list ($ret, $item) = $this->_createRandomDataItem($this->_getRootId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($item);

	$event = $listener->getEvent();
	$this->assertEquals('GalleryEntity::save', $event ? $event->getEventName() : 'unset');

	list ($ret, $permissions) = GalleryCoreApi::fetchAllPermissionsForItem($item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(array('userId' => $gallery->getActiveUserId(),
					'permission' => 'core.delete')),
			    $permissions);
    }
}

/**
 * Dummy event listener
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class EventTestEventListener extends GalleryEventListener {
    var $_event;

    function handleEvent($event) {
	$this->_event = $event;
	$data = $event->getData();
	$result = ($data == 'send result') ? 'result' : null;

	if ($event->getEventName() == 'GalleryEntity::save') {
	    global $gallery;
	    $item = $event->getEntity();
	    $ret = GalleryCoreApi::removeItemPermissions($item->getId());
	    if ($ret) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    $ret = GalleryCoreApi::addUserPermission(
		    $item->getId(), $gallery->getActiveUserId(), 'core.delete');
	    if ($ret) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	return array(null, $result);
    }

    function getEvent() {
	return $this->_event;
    }
}
?>
