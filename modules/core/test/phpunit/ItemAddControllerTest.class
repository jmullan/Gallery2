<?php
/*
 * $RCSfile: ItemAddControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.22 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemAdd controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemAddControllerTest extends GalleryControllerTestCase {

    function ItemAddControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.ItemAdd');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId(),
							       array('orderBy' => 'orderWeight'));
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);

	$path = 'modules/core/test/phpunit/ItemAddControllerTest.class';
	$ret = GalleryCoreApi::registerFactoryImplementation(
	    'ItemAddPlugin', 'ItemAddControllerTestPluginSuccess',
	    'ItemAddControllerTestPluginSuccess', $path, 'coreTest', null);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::registerFactoryImplementation(
	    'ItemAddPlugin', 'ItemAddControllerTestPluginContinue',
	    'ItemAddControllerTestPluginContinue', $path, 'coreTest', null);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::registerFactoryImplementation(
	    'ItemAddPlugin', 'ItemAddControllerTestPluginFail', 'ItemAddControllerTestPluginFail',
	    $path, 'coreTest', null);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::registerFactoryImplementation(
	    'GalleryToolkit', 'ItemAddControllerTestToolkit', 'ItemAddControllerTestToolkit',
	    $path, 'coreTest', null);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markToolkitForCleanup('ItemAddControllerTestToolkit');
	$this->_markFactoryModuleForCleanup('coreTest');

	$ret = GalleryCoreApi::registerToolkitOperation(
	    'ItemAddControllerTestToolkit', array('test/archive'), 'extract',
	    array(), 'test-description');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_controller->setOptionInstances(array());
    }

    function testHandleRequestContinueAdding() {
	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginContinue');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' =>
				  array('view' => 'core.ItemAdmin',
					'subView' => 'core.ItemAdd',
					'addPlugin' => 'ItemAddControllerTestPluginContinue'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testHandleRequestDoneAdding() {
	list ($ret, $item) = GalleryTestCase::_createRandomDataItem($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginSuccess');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemAddConfirmation',
						      'itemId' => $this->_album->getId()),
				  'status' => array('addedFiles' => array(
							array('fileName' => 'foo-' . $item->getId(),
							      'id' => $item->getId(),
							      'warnings' => array()))),
				  'error' => array()),
			    $results);
    }

    function testHandleRequestWithOption() {
	list ($ret, $item) = GalleryTestCase::_createRandomDataItem($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_controller->setOptionInstances(
	    array('ItemAddTestOption' => new ItemAddTestOption()));

	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginSuccess');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemAddConfirmation',
						      'itemId' => $this->_album->getId()),
				  'status' => array('addedFiles' => array(
							array('fileName' => 'foo-' . $item->getId(),
							      'id' => $item->getId(),
							      'warnings' => array('a warning')))),
				  'error' => array('an error')),
			    $results);
    }

    function testHandleRequestWithArchiveExtract() {
	$sortAddedFilesFunc =
	    create_function('$a, $b', 'return strcmp($a[\'fileName\'], $b[\'fileName\']);');

	list ($ret, $archive) = $this->_createRandomDataItem(
	    $this->_album->getId(), 'test/archive',
	    array('pathComponent' => 'foo.zip', 'title' => 'foo', 'summary' => 'hoho'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $item) = GalleryTestCase::_createRandomDataItem($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_controller->setOptionInstances(
	    array('ItemAddTestOption' => new ItemAddTestOption()));

	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginSuccess');

	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core.ItemAdmin',
					    'subView' => 'core.ItemAddConfirmation',
					    'itemId' => $this->_album->getId()),
			    $results['redirect'], 'redirect');
	$this->assertEquals(array('an error', 'an error', 'an error', 'an error'),
			    $results['error'], 'error');
	$this->assertEquals(4, count($results['status']['addedFiles']), 'added 4 items');
	$addedFiles = $results['status']['addedFiles'];

	/*
	 * Sort the added files list by filename because we can't guarantee
	 * the file order across platforms.
	 */
	usort($addedFiles, $sortAddedFilesFunc);

	$this->assertEquals(array('bar.ext', 'blah.ext', 'foo-' . $item->getId(), 'foo.ext'),
			    array($addedFiles[0]['fileName'], $addedFiles[1]['fileName'],
				  $addedFiles[2]['fileName'], $addedFiles[3]['fileName']), 'files');
	$this->assertEquals(array('a warning'), $addedFiles[0]['warnings'], 'warning 1');
	$this->assertEquals(array('a warning'), $addedFiles[1]['warnings'], 'warning 2');
	$this->assertEquals(array('a warning'), $addedFiles[2]['warnings'], 'warning 3');
	$this->assertEquals(array('a warning'), $addedFiles[3]['warnings'], 'warning 4');

	list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($this->_album);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!in_array($archive->getId(), $childIds), 'archive item has been deleted');

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($addedFiles[1]['id']);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('blah', $item->getTitle(), 'title set with base filename');
	$this->assertEquals('hoho', $item->getSummary(), 'summary set from archive');
	$this->assert($item->getParentId() != $this->_album->getId(), 'should be in subalbum');
    }

    function testHandleRequestWithErrors() {
	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginFail');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' =>
				  array('view' => 'core.ItemAdmin',
					'subView' => 'core.ItemAdd',
					'addPlugin' => 'ItemAddControllerTestPluginFail'),
				  'status' => array(),
				  'error' => array('failed')),
			    $results);
    }
}

/**
 * ItemAddPlugin that doesn't fail, nor complete
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemAddControllerTestPluginContinue {
    function handleRequest($form, &$item) {
	if (!GalleryUtilities::isExactlyA($item, 'GalleryAlbumItem')) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null, null);
	}

	return array(GalleryStatus::success(), array(), array());
    }
}

/**
 * ItemAddPlugin that always completes
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemAddControllerTestPluginSuccess {
    function handleRequest($form, &$item) {
	if (!GalleryUtilities::isExactlyA($item, 'GalleryAlbumItem')) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null, null);
	}

	/* Pretend we just added item(s) that are already there */
	list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($item);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}
	$addedFiles = array();
	foreach ($childIds as $id) {
	    $addedFiles[] = array('fileName' => 'foo-' . $id, 'id' => $id, 'warnings' => array());
	}

	return array(GalleryStatus::success(), array(), array('addedFiles' => $addedFiles));
    }
}

/**
 * ItemAddPlugin that always fails
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemAddControllerTestPluginFail {
    function handleRequest($form, &$item) {
	if (!GalleryUtilities::isExactlyA($item, 'GalleryAlbumItem')) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null, null);
	}
	return array(GalleryStatus::success(), array('failed'), array());
    }
}

/**
 * Test ItemAddOption
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemAddTestOption extends ItemAddOption {
    function ItemAddTestOption() {
    }

    function handleRequestAfterAdd($form, $items) {
	$errors = array();
	$warnings = array();
	for ($i = 0; $i < count($items); $i++) {
	    $errors[] = 'an error';
	    $warnings[$i] = array();
	    $warnings[$i][] = 'a warning';
	}
	return array(GalleryStatus::success(), $errors, $warnings);
    }

    function isAppropriate() {
	return array(GalleryStatus::success(), true);
    }
}

GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryToolkit.class');

/**
 * Test toolkit
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class ItemAddControllerTestToolkit extends GalleryToolkit {

    function performOperation($mimeType, $operationName, $sourceFilename,
			      $destFilename, $parameters, $context=array()) {
	global $gallery;
	$platform = $gallery->getPlatform();

	if ($operationName != 'extract') {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null, null);
	}

	$platform->copy(__FILE__, $destFilename . '/foo.ext');
	$platform->copy(__FILE__, $destFilename . '/bar.ext');
	$platform->mkdir($destFilename . '/subdir');
	$platform->copy(__FILE__, $destFilename . '/subdir/blah.ext');

	return array(GalleryStatus::success(), $mimeType, $context);
    }
}

function sortAddedFiles($a, $b) {
    return strcmp($a['fileName'], $b['fileName']);
}
?>
