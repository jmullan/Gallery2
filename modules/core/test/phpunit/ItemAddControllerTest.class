<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * ItemAdd controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision$
 */
class ItemAddControllerTest extends GalleryControllerTestCase {

    function ItemAddControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.ItemAdd');
    }

    function setUp() {
	global $gallery;
	$session =& $gallery->getSession();

    	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId(),
							       array('orderBy' => 'orderWeight'));
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_album);

	$this->_markFactoryForCleanup();
	$this->_unregisterFactoryImplementationForTest('ItemAddPlugin');
	$this->_unregisterFactoryImplementationForTest('ItemAddOption');
	$path = 'modules/core/test/phpunit/ItemAddControllerTest.class';

	$this->_registerFactoryImplementationForTest(
	    'ItemAddPlugin', 'ItemAddControllerTestPluginSuccess',
	    'ItemAddControllerTestPluginSuccess', $path, 'coreTest');

	$this->_registerFactoryImplementationForTest(
	    'ItemAddPlugin', 'ItemAddControllerTestPluginContinue',
	    'ItemAddControllerTestPluginContinue', $path, 'coreTest');

	$this->_registerFactoryImplementationForTest(
	    'ItemAddPlugin', 'ItemAddControllerTestPluginFail',
	    'ItemAddControllerTestPluginFail', $path, 'coreTest');
	
	$this->_registerFactoryImplementationForTest(
	    'GalleryToolkit', 'ItemAddControllerTestToolkit',
	    'ItemAddControllerTestToolkit', $path, 'coreTest');

	$this->_markToolkitForCleanup('ItemAddControllerTestToolkit');

	$ret = GalleryCoreApi::registerToolkitOperation(
	    'ItemAddControllerTestToolkit', array('test/archive'), 'extract',
	    array(), 'test-description');
	if ($ret) {
	    return $ret;
	}

	$this->_controller->setOptionInstances(array());

	$gallery->_templateAdapter = new MockTemplateAdapter();
	$this->_templateAdapter =& $gallery->getTemplateAdapter();

	$session->remove('itemAdd.error');
    }

    function handleRequestWithProgressBar($form, $item, $addPlugin) {
	return $this->_controller->handleRequestWithProgressBar($form, $item, $addPlugin);
    }

    /**
     * Assert form / validation errors from the progress-bar callback.
     * @param array $expectedError array of expected errors, or null
     */
    function _assertErrorFromProgressBar($expectedError) {
	global $gallery;
	$session =& $gallery->getSession();

	$error = $session->get('itemAdd.error');
	$this->assertEquals($expectedError, $error, 'item add error');
    }

    /**
     * Assert the completeProgressBar() parameters for progress-bar based tasks.
     * @param array $requiredUrlParameters URL generator parameters required to be part of the
     *                                     continue URL
     * @param bool $expectedDoRedirect expected value of doRedirect of the final completeProgressBar
     *                                 call
     */
    function _assertCompleteProgressBar($requiredUrlParameters, $expectedDoRedirect) {
	global $gallery;
	$urlGenerator =& $gallery->getUrlGenerator();

	$completeProgressBarDump = $this->_templateAdapter->getCompleteProgressBarDump();
	if (!isset($completeProgressBarDump[1])) {
	    $this->fail('missing continueUrl / doRedirect');
	    return;
	}

	$expectedUrl =
	    $urlGenerator->generateUrl($requiredUrlParameters);
	$this->assert(strpos($completeProgressBarDump[0], $expectedUrl) !== false,
		      'incorrect continueUrl: ' . $completeProgressBarDump[0]);

	$this->assertEquals($expectedDoRedirect, $completeProgressBarDump[1],
			    'expected doRedirect');
    }

    function _getStatusFromProgressBar() {
	global $gallery;
	$session =& $gallery->getSession();
	return $session->getStatus();
    }

    function testHandleRequestRequiresAddPermission() {
    	global $gallery;

    	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginContinue');

	$ret = GalleryCoreApi::removeItemPermissions($this->_album->getId());
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_album->getId(), $gallery->getActiveUserId(), 'core.view');
	if ($ret) {
	    return $ret;
	}

	$results = $this->handleRequest(ERROR_PERMISSION_DENIED);
	$this->assertEquals(null, $results);
    }

    function testHandleRequestRequiresContainerItem() {
	/* Some users report illegal child error when adding items.  Do the check ASAP. */
	list ($ret, $item) = $this->_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('itemId', $item->getId());
	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginContinue');

	$results = $this->handleRequest(ERROR_BAD_PARAMETER);
	$this->assertEquals(null, $results);
    }

    function testHandleRequestDelegatesToProgressBarView() {
	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginSuccess');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' =>
				  array('view' => 'core.ProgressBar'),
				  'status' => array(),
				  'error' => array()),
			    $results);

	if ($this->_templateAdapter->getCallbackCount() !== 1) {
	    $this->assertEquals(1, $this->_templateAdapter->getCallbackCount(),
			  'Wrong callback count. One callback required for handleRequest.');
	} else {
	    $callback = $this->_templateAdapter->getCallback(0);
	    $callbackMethod = $callback[0][1];
	    $this->assertEquals('handleRequestWithProgressBar', $callbackMethod);
	}
    }

    function testHandleRequestWithProgressBarWithFailure() {
	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginFail');

	$ret = $this->handleRequestWithProgressBar(array(), $this->_album,
						   new ItemAddControllerTestPluginFail());
	if ($ret) {
	    return $ret;
	}

	$this->_assertErrorFromProgressBar(array('failed'));
	$this->_assertCompleteProgressBar(
	    array('view' => 'core.ItemAdmin',
		  'subView' => 'core.ItemAdd',
		  'addPlugin' => 'ItemAddControllerTestPluginFail',
		  'itemId' => $this->_album->getId()),
	    true);
    }

    function testHandleRequestWithProgressBarContinueAdding() {
	/*
	 * An add item request that succeeds without actually adding any items and is forwarded to
	 * the view.
	 */
	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginContinue');

	$form = array('someParameter' => 'value 1', 'other&Parameter' => 'value two');
	$ret = $this->handleRequestWithProgressBar($form, $this->_album,
						   new ItemAddControllerTestPluginContinue());
	if ($ret) {
	    return $ret;
	}

	$this->_assertErrorFromProgressBar(null);
	$this->_assertCompleteProgressBar(
	    array('view' => 'core.ItemAdmin',
		  'subView' => 'core.ItemAdd',
		  'addPlugin' => 'ItemAddControllerTestPluginContinue',
		  'itemId' => $this->_album->getId(), 'form' => $form),
	    true);
	$this->assertEquals(array(), $this->_getStatusFromProgressBar(), 'status');
    }

    function testHandleRequestWithProgressBarSuccess() {
	list ($ret, $item) = GalleryTestCase::_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginSuccess');

	$ret = $this->handleRequestWithProgressBar(array(), $this->_album,
						   new ItemAddControllerTestPluginSuccess());
	if ($ret) {
	    return $ret;
	}

	$this->_assertErrorFromProgressBar(null);
	$this->_assertCompleteProgressBar(
	    array('view' => 'core.ItemAdmin',
		  'subView' => 'core.ItemAddConfirmation',
		  'itemId' => $this->_album->getId()),
	    true);
	$this->assertEquals(array('addedFiles' => array(
				array('fileName' => 'foo-' . $item->getId(),
				      'id' => $item->getId(),
				      'warnings' => array()))),
			    $this->_getStatusFromProgressBar(), 'status');
    }

    function testHandleRequestWithProgressBarWithOptionAndError() {
	list ($ret, $item) = GalleryTestCase::_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginSuccess');

	$this->_controller->setOptionInstances(
	    array('ItemAddTestOption' => new ItemAddTestOption(true)));

	$ret = $this->handleRequestWithProgressBar(array(), $this->_album,
						   new ItemAddControllerTestPluginSuccess());
	if ($ret) {
	    return $ret;
	}

	$this->_assertErrorFromProgressBar(
	    array('an error', 'form[error][itemsAddedDespiteFormErrors]'));
	$this->_assertCompleteProgressBar(
	    array('view' => 'core.ItemAdmin',
		  'subView' => 'core.ItemAdd',
		  'addPlugin' => 'ItemAddControllerTestPluginSuccess',
		  'itemId' => $this->_album->getId()),
	    true);
	/* No status information is saved / shown */
	$this->assertEquals(null, $this->_getStatusFromProgressBar(), 'status');
    }

    function testHandleRequestWithProgressBarWithOption() {
	list ($ret, $item) = GalleryTestCase::_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginSuccess');

	$this->_controller->setOptionInstances(
	    array('ItemAddTestOption' => new ItemAddTestOption(false)));

	$ret = $this->handleRequestWithProgressBar(array(), $this->_album,
						   new ItemAddControllerTestPluginSuccess());
	if ($ret) {
	    return $ret;
	}

	$this->_assertErrorFromProgressBar(null);
	$this->_assertCompleteProgressBar(
	    array('view' => 'core.ItemAdmin',
		  'subView' => 'core.ItemAddConfirmation',
		  'itemId' => $this->_album->getId()),
	    true);
	$this->assertEquals(array('addedFiles' => array(
				array('fileName' => 'foo-' . $item->getId(),
				      'id' => $item->getId(),
				      'warnings' => array('a warning')))),
			    $this->_getStatusFromProgressBar(), 'status');
    }

    function testHandleRequestWithProgressBarWithArchiveExtract() {
	list ($ret, $archive) = $this->_createRandomDataItem(
	    $this->_album->getId(), 'test/archive',
	    array('pathComponent' => 'foo.zip', 'title' => 'foo', 'summary' => 'hoho'));
	if ($ret) {
	    return $ret;
	}
	list ($ret, $item) = GalleryTestCase::_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginSuccess');

	$this->_controller->setOptionInstances(
	    array('ItemAddTestOption' => new ItemAddTestOption(false)));

	$ret = $this->handleRequestWithProgressBar(array(), $this->_album,
						   new ItemAddControllerTestPluginSuccess());
	if ($ret) {
	    return $ret;
	}

	$this->_assertErrorFromProgressBar(null);
	$this->_assertCompleteProgressBar(
	    array('view' => 'core.ItemAdmin',
		  'subView' => 'core.ItemAddConfirmation',
		  'itemId' => $this->_album->getId()),
	    true);

	$status = $this->_getStatusFromProgressBar();
	$addedItems = $status['addedFiles'];
	$this->assertEquals(5, count($addedItems), 'added 5 items');

	/*
	 * Sort the added files list by filename because we can't guarantee
	 * the file order across platforms.
	 */
	$sortAddedFilesFunc =
	    create_function('$a, $b', 'return strcmp($a[\'fileName\'], $b[\'fileName\']);');
	usort($addedItems, $sortAddedFilesFunc);

	$itemNames = array();
	foreach ($addedItems as $i => $addedItem) {
	    $itemNames[] = $addedItem['fileName'];
	    $this->assertEquals(array('a warning'), $addedItem['warnings'],
				"warning $i - item not processed by ItemAddOption");
	}
	$this->assertEquals(
	    array('bar.ext', 'blah.ext', 'foo-' . $item->getId(), 'foo.ext', 'subdir'),
	    $itemNames, 'files');

	list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($this->_album);
	if ($ret) {
	    return $ret;
	}
	$this->assert(!in_array($archive->getId(), $childIds), 'archive item has not been deleted');
	$this->assert(in_array($item->getId(), $childIds), 'normal item has been deleted');

	list ($ret, $item) =
	    GalleryCoreApi::loadEntitiesById($addedItems[1]['id'], 'GalleryDataItem');
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals('blah', $item->getTitle(), 'title set with base filename');
	$this->assertEquals('hoho', $item->getSummary(), 'summary set from archive');
	$this->assert($item->getParentId() != $this->_album->getId(), 'should be in subalbum');
    }

    function testHandleRequestWithProgressBarAutoRedirectOnError() {
    	global $gallery;

    	/* Ensure that we don't redirect because of time constraints */
    	$gallery->_phpVm = new ItemAddPhpVm(0, 0);

	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginFail');

	$ret = $this->handleRequestWithProgressBar(array(), $this->_album,
						   new ItemAddControllerTestPluginFail());
	if ($ret) {
	    return $ret;
	}

	$this->_assertErrorFromProgressBar(array('failed'));
	$this->_assertCompleteProgressBar(
	    array('view' => 'core.ItemAdmin',
		  'subView' => 'core.ItemAdd',
		  'addPlugin' => 'ItemAddControllerTestPluginFail',
		  'itemId' => $this->_album->getId()),
	    true);
	$this->assertEquals(null, $this->_getStatusFromProgressBar(), 'status');
    }

    function testHandleRequestWithProgressBarAutoRedirectOnSuccessWithinPeriod() {
	global $gallery;

	/* Time progresses very slowly */
    	$gallery->_phpVm = new ItemAddPhpVm(0, 1);

	list ($ret, $item) = GalleryTestCase::_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginSuccess');

	$ret = $this->handleRequestWithProgressBar(array(), $this->_album,
						   new ItemAddControllerTestPluginSuccess());
	if ($ret) {
	    return $ret;
	}

	$this->_assertErrorFromProgressBar(null);
	$this->_assertCompleteProgressBar(
	    array('view' => 'core.ItemAdmin',
		  'subView' => 'core.ItemAddConfirmation',
		  'itemId' => $this->_album->getId()),
	    true);
	$this->assertEquals(array('addedFiles' => array(
				array('fileName' => 'foo-' . $item->getId(),
				      'id' => $item->getId(),
				      'warnings' => array()))),
			    $this->_getStatusFromProgressBar(), 'status');
    }

    function testHandleRequestWithProgressBarNoAutoRedirectOnSuccessAfterPeriod() {
	global $gallery;

	/* Make the time progress in large steps */
    	$gallery->_phpVm = new ItemAddPhpVm(0, 16);

	list ($ret, $item) = GalleryTestCase::_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddControllerTestPluginSuccess');

	$ret = $this->handleRequestWithProgressBar(array(), $this->_album,
						   new ItemAddControllerTestPluginSuccess());
	if ($ret) {
	    return $ret;
	}

	$this->_assertErrorFromProgressBar(null);
	$this->_assertCompleteProgressBar(
	    array('view' => 'core.ItemAdmin',
		  'subView' => 'core.ItemAddConfirmation',
		  'itemId' => $this->_album->getId()),
	    false);
	$this->assertEquals(array('addedFiles' => array(
				array('fileName' => 'foo-' . $item->getId(),
				      'id' => $item->getId(),
				      'warnings' => array()))),
			    $this->_getStatusFromProgressBar(), 'status');
    }

    function testPostprocessItemsProtectsFromProcessingItemsTwice() {
	for ($i = 0; $i < 2; $i++) {
	    list ($ret, $items[$i]) =
		GalleryTestCase::_createRandomDataItem($this->_album->getId());
	    if ($ret) {
		return $ret;
	    }
	}

	$addOption = new ItemAddTestOption(false);
	$this->_controller->setOptionInstances(
	    array('ItemAddTestOption' => $addOption));

	$status['addedFiles'][0] = array('fileName' => 'file 1', 'id' => $items[0]->getId());
	$status['addedFiles'][1] = array('fileName' => 'file 2', 'id' => $items[1]->getId());

	list ($ret, $this->_controller->_coreModule) = GalleryCoreApi::loadPlugin('module', 'core');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $error) = $this->_controller->postProcessItems(array(), $status);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array(array(0 => $items[0]->getId(), 1 => $items[1]->getId())),
			    $_SERVER['ItemAddControllerTest']['optionCalls'], 'first call');

	list ($ret, $error) = $this->_controller->postProcessItems(array(), $status);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array(array(0 => $items[0]->getId(), 1 => $items[1]->getId())),
			    $_SERVER['ItemAddControllerTest']['optionCalls'], 'second call');
    }

    function testHandleRequestItemAddWebDavBackwardsCompatibility() {
	/*
	 * The webdav module used to invoke ItemAddController::handleRequest() from another
	 * controller which was a bad hack.  To keep this hack working, ItemAddController needs
	 * to handle ItemAddWebDav add-plugin requests in a special way, not delegating to the
	 * progress-bar view.
	 */

	/* Don't test with the real plugin instance */
	$this->_registerFactoryImplementationForTest(
	    'ItemAddPlugin', 'ItemAddControllerTestAddPluginWebDav', 'ItemAddWebDav',
	    'modules/core/test/phpunit/ItemAddControllerTest.class', 'coreTest');

	list ($ret, $item) = GalleryTestCase::_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('addPlugin', 'ItemAddWebDav');

	ob_start();
	/* Do a static call, that's how WebDAV invokes / invoked the controller. */
	list ($ret, $results) = ItemAddController::handleRequest(array());
	$output = ob_get_contents();
	ob_end_clean();
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ItemAdmin',
				      'subView' => 'core.ItemAddConfirmation',
				      'itemId' => $this->_album->getId()),
		  'status' => array('addedFiles' => array(
				array('fileName' => 'foo-' . $item->getId(),
				      'id' => $item->getId(),
				      'warnings' => array()))),
		  'error' => array()),
	    $results);

	$this->assertEquals(0, $this->_templateAdapter->getCallbackCount(),
			    'trailer callback count');
	$this->assertEquals('', $output, 'HTML output');
    }
}

/**
 * ItemAddPlugin that doesn't fail, nor complete
 */
class ItemAddControllerTestPluginContinue {
    function handleRequest($form, &$item) {
	if (!GalleryUtilities::isExactlyA($item, 'GalleryAlbumItem')) {
	    return
		array(GalleryCoreApi::error(ERROR_BAD_PARAMETER), null, null);
	}

	return array(null, array(), array());
    }
}

/**
 * ItemAddPlugin that always completes
 */
class ItemAddControllerTestPluginSuccess {
    function handleRequest($form, &$item) {
	if (!GalleryUtilities::isExactlyA($item, 'GalleryAlbumItem')) {
	    return
		array(GalleryCoreApi::error(ERROR_BAD_PARAMETER), null, null);
	}

	/* Pretend we just added item(s) that are already there */
	list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($item);
	if ($ret) {
	    return array($ret, null, null);
	}
	$addedFiles = array();
	foreach ($childIds as $id) {
	    $addedFiles[] = array('fileName' => 'foo-' . $id, 'id' => $id, 'warnings' => array());
	}

	return array(null, array(), array('addedFiles' => $addedFiles));
    }
}

/**
 * ItemAddPlugin to test backwards compatibility with the WebDAV module.
 */
class ItemAddControllerTestAddPluginWebDav {
    function handleRequest($form, &$item) {
	/* Pretend we just added item(s) that are already there */
	list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($item);
	if ($ret) {
	    return array($ret, null, null);
	}
	$addedFiles = array();
	foreach ($childIds as $id) {
	    $addedFiles[] = array('fileName' => 'foo-' . $id, 'id' => $id, 'warnings' => array());
	}
	return array(null, array(), array('addedFiles' => $addedFiles));
    }
}

/**
 * ItemAddPlugin that always fails
 */
class ItemAddControllerTestPluginFail {
    function handleRequest($form, &$item) {
	if (!GalleryUtilities::isExactlyA($item, 'GalleryAlbumItem')) {
	    return
		array(GalleryCoreApi::error(ERROR_BAD_PARAMETER), null, null);
	}
	return array(null, array('failed'), array());
    }
}

/**
 * Test ItemAddOption
 */
class ItemAddTestOption extends ItemAddOption {
    function ItemAddTestOption($withError=false) {
	$this->_withError = $withError;
	$_SERVER['ItemAddControllerTest']['optionCalls'] = array();
    }

    function handleRequestAfterAdd($form, $items) {
	$errors = array();
	$warnings = array();
	$itemIds = array();
	for ($i = 0; $i < count($items); $i++) {
	    if ($this->_withError) {
		$errors[] = 'an error';
	    }
	    $warnings[$i] = array();
	    $warnings[$i][] = 'a warning';
	    $itemIds[$i] = $items[$i]->getId();
	}
	$_SERVER['ItemAddControllerTest']['optionCalls'][] = $itemIds;
	return array(null, $errors, $warnings);
    }

    function isAppropriate() {
	return array(null, true);
    }
}

GalleryCoreApi::requireOnce('modules/core/classes/GalleryToolkit.class');

/**
 * Test toolkit
 */
class ItemAddControllerTestToolkit extends GalleryToolkit {

    function performOperation($mimeType, $operationName, $sourceFilename,
			      $destFilename, $parameters, $context=array()) {
	global $gallery;
	$platform =& $gallery->getPlatform();

	if ($operationName != 'extract') {
	    return array(GalleryCoreApi::error(ERROR_BAD_PARAMETER),
			 null, null);
	}

	$platform->copy(__FILE__, $destFilename . '/foo.ext');
	$platform->copy(__FILE__, $destFilename . '/bar.ext');
	$platform->mkdir($destFilename . '/subdir');
	$platform->copy(__FILE__, $destFilename . '/subdir/blah.ext');

	return array(null, $mimeType, $context);
    }
}

/**
 * Configurable PHP VM
 */
class ItemAddPhpVm extends GalleryPhpVm {
    /**
     * Constructor
     * @param int $timeIncrement time slice. time() increments by this value for each call.
     */
    function ItemAddPhpVm($time=0, $timeIncrement=1) {
	$_SERVER['phpVm.timeIncrement'] = $timeIncrement;
	$_SERVER['phpVm.time'] = $time;
    }

    function time() {
	return $_SERVER['phpVm.time'] += $_SERVER['phpVm.timeIncrement'];
    }
}
?>
