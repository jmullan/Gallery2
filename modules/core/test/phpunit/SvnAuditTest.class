<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Scan through all of our source code and verify proper subversion properties.
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision$
 */
class SvnAuditTest extends CodeAuditTestCase {

    function SvnAuditTest($methodName) {
	global $gallery;
	$this->_platform =& $gallery->getPlatform();

	$this->CodeAuditTestCase($methodName);
	$this->_errorCount = 0;
    }

    /**
     * @see CodeAuditTestCase::shouldCheckFile
     */
    function shouldCheckFile($fileName) {
	$base = basename($fileName);
	return in_array($base, array('MANIFEST', 'GNUmakefile', 'strings.raw'))
	    || preg_match('{\.(php|inc|class|tpl|html|css|js|txt|xml|po|mo|png|gif|jpg)$}', $base);
    }

    /**
     * @see CodeAuditTestCase::checkFile
     */
    function checkFile($fileName, $buffer) {
	$slash = $this->_platform->getDirectorySeparator();
	$base = basename($fileName);
	$propsFile = dirname($fileName) . "${slash}.svn${slash}props${slash}${base}.svn-work";

	if (in_array($base, array('mime.php', 'mimePart.php')) || preg_match('{\.txt$}', $base)
		|| preg_match('{.lib.yui.*\.js$}', $fileName)) {
	    $expected = array('svn:eol-style' => 'native');
	} else if (in_array($base, array('MANIFEST', 'GNUmakefile', 'strings.raw'))
		|| preg_match('{\.(php|inc|class|tpl|html|css|js|xml|po)$}', $base)) {
	    $expected = array('svn:eol-style' => 'native',
			      'svn:keywords' => 'Author Date Id Revision');
	} else {
	    $expected = array('svn:mime-type' => '(image|application)/.*');
	}

	$lines = $this->_platform->file($propsFile);
	if (empty($lines)) {
	    $this->assert(false, 'Properties missing or empty: ' . $propsFile);
	} else {
	    $props = array();
	    for ($i = 0; $i < count($lines); $i++) {
		if (preg_match('{^[KV]\s*\d+$}', $lines[$i])) {
		    continue;
		}
		if (isset($key)) {
		    $props[$key] = rtrim($lines[$i]);
		    $key = null;
		} else {
		    $key = rtrim($lines[$i]);
		}
	    }

	    foreach ($expected as $key => $valueMatch) {
		if (!isset($props[$key])) {
		    $this->assert(false, "svn property $key missing for $fileName");
		    $this->_errorCount++;
		} else if (!preg_match('{^' . $valueMatch . '$}', $props[$key])) {
		    $this->assert(false, "svn property $key = " . $props[$key]
			    . " for $fileName expected to match $valueMatch");
		    $this->_errorCount++;
		}
	    }
	}

	if ($this->_errorCount > 10) {
	    $this->halt();
	}
    }
}
?>
