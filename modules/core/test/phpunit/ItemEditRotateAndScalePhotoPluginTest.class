<?php
/*
 * $RCSfile: ItemEditRotateAndScalePhotoPluginTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.21 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemEditPhoto controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemEditRotateAndScalePhotoPluginTest extends ItemEditPluginTestCase {

    function ItemEditRotateAndScalePhotoPluginTest($methodName) {
	$this->ItemEditPluginTestCase($methodName, 'core', 'ItemEditRotateAndScalePhoto');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_album);

	/* Register a dummy toolkit */
	$path = 'modules/core/test/phpunit/ItemEditRotateAndScalePhotoPluginTest.class';
	$ret = GalleryCoreApi::registerFactoryImplementation(
	    'GalleryToolkit', 'ItemEditRotateAndScalePhotoPluginTestToolkit',
	    'ItemEditRotateAndScalePhotoPluginTestToolkit', $path, 'coreTest', null);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markToolkitForCleanup('ItemEditRotateAndScalePhotoPluginTestToolkit');

	/* Register operations that we can perform on our mock data items */
	$ret = GalleryCoreApi::registerToolkitOperation(
	    'ItemEditRotateAndScalePhotoPluginTestToolkit', array('test/file'), 'scale',
	    array(array('type' => 'int', 'description' => 'test'),
		  array('type' => 'int', 'description' => 'test')),
	    'test-description');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::registerToolkitOperation(
	    'ItemEditRotateAndScalePhotoPluginTestToolkit', array('test/file'), 'rotate',
	    array(array('type' => 'int', 'description' => 'test')), 'test-description');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::registerToolkitOperation(
	    'ItemEditRotateAndScalePhotoPluginTestToolkit', array('test/file'), 'resize',
	    array(array('type' => 'int', 'description' => 'test'),
		  array('type' => 'int', 'description' => 'test')),
	    'test-description', '');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_item) =
	    $this->_createRandomDataItem($this->_album->getId(), 'test/file');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_derivative[0]) = $this->_createDerivative(
	    $this->_item, $this->_item->getId(), DERIVATIVE_TYPE_IMAGE_PREFERRED, 'rotate|90');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_derivative[1]) = $this->_createDerivative(
	    $this->_item, $this->_derivative[0]->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
	    'crop|10,10,30,40;thumbnail|200');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_derivative[2]) = $this->_createDerivative(
	    $this->_item, $this->_derivative[0]->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE,
	    'scale|500');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testScalePreserveOriginal() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[preserveOriginal]', 'on');
	GalleryUtilities::putRequestVariable('form[action][resize]', 1);
	GalleryUtilities::putRequestVariable('form[resize][width]', 270);
	GalleryUtilities::putRequestVariable('form[resize][height]', 250);
	GalleryUtilities::putRequestVariable('form[serialNumber]', $this->_item->getSerialNumber());

	/* Reparent the thumbnail cause we're going to want to check it later */
	$ret = GalleryCoreApi::remapSourceIds($this->_derivative[0]->getId(),
					      $this->_item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete the preferred */
	$ret = GalleryCoreApi::deleteEntityById($this->_derivative[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Save current serial */
	$originalSerial = $this->_item->getSerialNumber();

	/* Perform the request and verify that we succeeded */
	$preferred = null;
	$results = $this->handleRequest($this->_item, $preferred);
	$this->assertEquals(array(array(),
				  $this->_translate('Scaled photo successfully')),
			    $results);

	/* Verify that we have a preferred again */
	list ($ret, $preferredIds) =
	    GalleryCoreApi::fetchPreferredsByItemIds(array($this->_item->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, sizeof($preferredIds), 'there should be a preferred');

	/* Verify that the item serial is the same */
	list ($ret, $this->_item) = $this->_item->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($originalSerial, $this->_item->getSerialNumber());

	/* Verify that the thumbnail's crop is the same */
	list ($ret, $this->_derivative[1]) = $this->_derivative[1]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('crop|10,10,30,40;thumbnail|200',
			    $this->_derivative[1]->getDerivativeOperations());
    }

    function testScaleReplaceOriginal() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][resize]', 1);
	GalleryUtilities::putRequestVariable('form[resize][width]', 270);
	GalleryUtilities::putRequestVariable('form[resize][height]', 250);
	GalleryUtilities::putRequestVariable('form[serialNumber]', $this->_item->getSerialNumber());

	/* Reparent the thumbnail cause we're going to want to check it later */
	$ret = GalleryCoreApi::remapSourceIds($this->_derivative[0]->getId(),
					      $this->_item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete the preferred */
	$ret = GalleryCoreApi::deleteEntityById($this->_derivative[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Save current size */
	$originalSize = $this->_item->getSize();

	/* Perform the request and verify that we succeeded */
	$preferred = null;
	$results = $this->handleRequest($this->_item, $preferred);
	$this->assertEquals(array(array(),
				  $this->_translate('Scaled photo successfully')),
			    $results);

	/* Verify that we don't have a preferred */
	list ($ret, $preferredIds) =
	    GalleryCoreApi::fetchPreferredsByItemIds(array($this->_item->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(0, sizeof($preferredIds), 'there should be no preferreds');

	/* Verify that the item modification time has changed */
	list ($ret, $this->_item) = $this->_item->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$newSize = $this->_item->getSize();
	$this->assert($originalSize != $newSize, "Item size should have changed ($newSize)");

	/* Verify that the thumbnail's crop is the same */
	list ($ret, $this->_derivative[1]) = $this->_derivative[1]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('crop|10,10,30,40;thumbnail|200',
			    $this->_derivative[1]->getDerivativeOperations());
    }

    function testScale() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][resize]', 1);
	GalleryUtilities::putRequestVariable('form[resize][width]', 200);
	GalleryUtilities::putRequestVariable('form[resize][height]', 200);
	GalleryUtilities::putRequestVariable('form[serialNumber]', $this->_item->getSerialNumber());

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest($this->_item, $this->_derivative[0]);
	$this->assertEquals(array(array(),
				  $this->_translate('Scaled photo successfully')),
			    $results);

	/* Verify that the transform went ok */
	list ($ret, $this->_derivative[0]) = $this->_derivative[0]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('rotate|90;scale|200,200',
			    $this->_derivative[0]->getDerivativeOperations());
    }

    function testScaleMissing() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][resize]', 1);
	GalleryUtilities::putRequestVariable('form[serialNumber]', $this->_item->getSerialNumber());

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest($this->_item, $this->_derivative[0]);
	$this->assertEquals(array(array('form[error][resize][size][missing]'), null),
			    $results);
    }

    function testScaleInvalid() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][resize]', 1);
	GalleryUtilities::putRequestVariable('form[resize][width]', 200);
	GalleryUtilities::putRequestVariable('form[resize][height]', 'scooby doo');


	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest($this->_item, $this->_derivative[0]);
	$this->assertEquals(array(array('form[error][resize][size][invalid]'), null),
			    $results);
    }

    function testRotateClockwise() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][rotate][clockwise]', 1);
	GalleryUtilities::putRequestVariable('form[serialNumber]', $this->_item->getSerialNumber());

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest($this->_item, $this->_derivative[0]);
	$this->assertEquals(array(array(), $this->_translate('Rotated photo successfully')),
			    $results);

	/* Verify that the transform went ok */
	list ($ret, $this->_derivative[0]) = $this->_derivative[0]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('rotate|180', $this->_derivative[0]->getDerivativeOperations());

	/* Verify that the thumbnail's crop was adjusted */
	list ($ret, $this->_derivative[1]) = $this->_derivative[1]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('crop|50,10,40,30;thumbnail|200',
			    $this->_derivative[1]->getDerivativeOperations());
    }

    function testRotateCounterClockwise() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][rotate][counterClockwise]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest($this->_item, $this->_derivative[0]);
	$this->assertEquals(array(array(), $this->_translate('Rotated photo successfully')),
			    $results);

	/* Verify that the derivative is now gone (90 + -90 == 0) */
	list ($ret, $this->_derivative[0]) = $this->_derivative[0]->refresh();
	$this->assert($ret->getErrorCode() & ERROR_MISSING_OBJECT);

	/* Verify that the thumbnail's crop was adjusted */
	list ($ret, $this->_derivative[1]) = $this->_derivative[1]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('crop|10,60,40,30;thumbnail|200',
			    $this->_derivative[1]->getDerivativeOperations());
    }

    function testRotateFlip() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][rotate][flip]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest($this->_item, $this->_derivative[0]);
	$this->assertEquals(array(array(), $this->_translate('Rotated photo successfully')),
			    $results);

	/* Verify that the transform went ok */
	list ($ret, $this->_derivative[0]) = $this->_derivative[0]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('rotate|-90', $this->_derivative[0]->getDerivativeOperations());

	/* Verify that the thumbnail's crop was adjusted */
	list ($ret, $this->_derivative[1]) = $this->_derivative[1]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('crop|60,50,30,40;thumbnail|200',
			    $this->_derivative[1]->getDerivativeOperations());
    }

    function testRotateFlipConvertedPreferred() {
	/* Put a convert operation on our preferred */
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_derivative[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_derivative[0]->setDerivativeOperations('convert-to-image/jpeg');
	$ret = $this->_derivative[0]->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][rotate][flip]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest($this->_item, $this->_derivative[0]);
	$this->assertEquals(array(array(), $this->_translate('Rotated photo successfully')),
			    $results);

	/* Verify that the transform went ok */
	list ($ret, $this->_derivative[0]) = $this->_derivative[0]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('convert-to-image/jpeg;rotate|180',
			    $this->_derivative[0]->getDerivativeOperations());

	/* Verify that the thumbnail's crop was adjusted */
	list ($ret, $this->_derivative[1]) = $this->_derivative[1]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('crop|60,50,30,40;thumbnail|200',
			    $this->_derivative[1]->getDerivativeOperations());
    }

    function testRevertToOriginal() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][revertToOriginal]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest($this->_item, $this->_derivative[0]);
	$this->assertEquals(
	    array(array(), $this->_translate('Reverted rotate and scale changes successfully')),
	    $results);

	/* Verify that the preferred is gone */
	list ($ret, $this->_derivative[0]) = $this->_derivative[0]->refresh();
	$this->assert($ret->getErrorCode() & ERROR_MISSING_OBJECT);

	/* And that the other derivatives now point at the item */
	for ($i = 1; $i <= 2; $i++) {
	    list ($ret, $this->_derivative[$i]) = $this->_derivative[$i]->refresh();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->assert($this->_item->getId(), $this->_derivative[$i]->getDerivativeSourceId());
	}

	/* Verify that the thumbnail's crop was adjusted */
	list ($ret, $this->_derivative[1]) = $this->_derivative[1]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('crop|10,60,40,30;thumbnail|200',
			    $this->_derivative[1]->getDerivativeOperations());

    }

    /**
     * This verifies that we don't remove preferred derivatives that have operations we don't
     * understand so it covers postfilters as well as convert-to-xxx operations.
     */
    function testRevertToOriginalWithPostfilter() {
	/* Put a postfilter on our derivative */
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_derivative[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_derivative[0]->setDerivativeOperations('rotate|90;bogus|1,2,3');
	$this->_derivative[0]->setPostFilterOperations('bogus|4,5,6');
	$ret = $this->_derivative[0]->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][revertToOriginal]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest($this->_item, $this->_derivative[0]);
	$this->assertEquals(
	    array(array(), $this->_translate('Reverted rotate and scale changes successfully')),
	    $results);

	/* Verify that the preferred is still there */
	list ($ret, $this->_derivative[0]) = $this->_derivative[0]->refresh();
	$this->assert($ret->isSuccess());

	/* Make sure that its postfilter is still the same, but its rotate op is gone */
	$this->assertEquals('bogus|1,2,3', $this->_derivative[0]->getDerivativeOperations());
	$this->assertEquals('bogus|4,5,6', $this->_derivative[0]->getPostFilterOperations());
    }

    function testScaleWithInvalidSerialNumber() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][resize]', 1);
	GalleryUtilities::putRequestVariable('form[resize][width]', 270);
	GalleryUtilities::putRequestVariable('form[resize][height]', 220);
	GalleryUtilities::putRequestVariable('form[serialNumber]', -1);

	/* Delete the preferred */
	$ret = GalleryCoreApi::deleteEntityById($this->_derivative[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$preferred = null;
	$results = $this->handleRequest($this->_item, $preferred, ERROR_OBSOLETE_DATA);
    }

    function testCheckForOperation() {
	list ($ret, $result) = $this->_plugin->_checkForOperation('scale', array('test/file'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($result, 'should be supported');

	list ($ret, $result) = $this->_plugin->_checkForOperation(
	    'scale', array('test/notsupported', 'test/file'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($result, 'should be supported');

	list ($ret, $result) = $this->_plugin->_checkForOperation(
	    'scale', array('test/file', 'test/notsupported'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($result, 'should be supported');

	list ($ret, $result) = $this->_plugin->_checkForOperation(
	    'scale', array('test/notsupported'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!$result, 'should not be supported');

	list ($ret, $result) = $this->_plugin->_checkForOperation('scale', array());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!$result, 'should not be supported');
    }
}

/**
 * Required by test toolkit
 */
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryToolkit.class');

/**
 * Test toolkit
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemEditRotateAndScalePhotoPluginTestToolkit extends GalleryToolkit {
    /**
     * @see GalleryToolkit::performOperation()
     * Dummy operation
     */
    function performOperation($mimeType, $operationName, $sourceFilename,
			      $destFilename, $parameters, $context=array()) {
	global $gallery;

	$platform = $gallery->getPlatform();
	if ($sourceFilename != $destFilename) {
	    $platform->copy($sourceFilename, $destFilename);
	}

	$fd = $platform->fopen($destFilename, 'a');
	fwrite($fd, $operationName);
	$platform->fclose($fd);
	/* Clear cache to ensure new filesize will be seen */
	$platform->clearstatcache();

	return array(GalleryStatus::success(), $mimeType, $context);
    }

    /**
     * @see GalleryToolkit::mergeOperations()
     * Dummy operation
     */
    function mergeOperations($operation1, $args1, $operation2, $args2) {

	switch (serialize(array($operation1, $args1, $operation2, $args2))) {
	case serialize(array('rotate', array(0 => '90'), 'rotate', array(0 => '90'))):
	    return array(true, 'rotate', array('180'));
	    break;

	case serialize(array('rotate', array(0 => '90'), 'rotate', array(0 => '-90'))):
	    return array(true, null, null);
	    break;

	case serialize(array('rotate', array(0 => '90'), 'rotate', array(0 => '180'))):
	    return array(true, 'rotate', array('-90'));
	    break;

	default:
	    return array(false, null, null);
	}

    }
}
?>
