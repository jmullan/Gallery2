<?php
/*
 * $RCSfile: MapTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.6 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Test Map functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class MapTest extends GalleryTestCase {

    function MapTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function testAddNull() {
	// Ensure addMapEntry() method will accept null input values..

	GalleryCoreApi::relativeRequireOnce(
	    'modules/core/classes/GalleryToolkitOperationMap.class');
	$name = 'test-' . rand();

	$ret = GalleryToolkitOperationMap::addMapEntry(
	    array('name' => $name, 'parametersCrc' => 'test', 'outputMimeType' => 'test'));
	$this->assert($ret->getErrorCode() & ERROR_BAD_PARAMETER, 'expect error for missing key');
	if ($ret->isError() && !($ret->getErrorCode() & ERROR_BAD_PARAMETER)) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryToolkitOperationMap::addMapEntry(
	    array('name' => $name, 'parametersCrc' => 'test', 'outputMimeType' => 'test',
		  'description' => null));
	$this->assert($ret->isSuccess(), 'should succeed with null value');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryToolkitOperationMap::removeMapEntry(array('name' => $name));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testUpdateNull() {
	// Ensure updateMapEntry() method will accept null input values..

	GalleryCoreApi::relativeRequireOnce(
	    'modules/core/classes/GalleryToolkitOperationMap.class');
	$name = 'test-' . rand();

	$ret = GalleryToolkitOperationMap::addMapEntry(
	    array('name' => $name, 'parametersCrc' => 'test', 'outputMimeType' => 'test',
		  'description' => 'test'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryToolkitOperationMap::updateMapEntry(
	    array('name' => $name, 'outputMimeType' => 'test'),
	    array('description' => null));
	$this->assert($ret->isSuccess(), 'should succeed setting null value');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryToolkitOperationMap::updateMapEntry(
	    array('name' => $name, 'description' => null),
	    array('parametersCrc' => 'changed'));
	$this->assert($ret->isSuccess(), 'should succeed matching null value');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryToolkitOperationMap::removeMapEntry(array('name' => $name));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
}
?>
