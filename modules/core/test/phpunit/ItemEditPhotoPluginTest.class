<?php
/*
 * $RCSfile: ItemEditPhotoPluginTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.13 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemEditPhoto controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemEditPhotoPluginTest extends ItemEditPluginTestCase {

    function ItemEditPhotoPluginTest($methodName) {
	$this->ItemEditPluginTestCase($methodName, 'core', 'ItemEditPhoto');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);

	/* Register a dummy toolkit */
	$path = 'modules/core/test/phpunit/ItemEditPhotoPluginTest.class';
	$ret = GalleryCoreApi::registerFactoryImplementation(
	    'GalleryToolkit', 'ItemEditPhotoPluginTestToolkit', 'ItemEditPhotoPluginTestToolkit',
	    $path, 'coreTest', null);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markToolkitForCleanup('ItemEditPhotoPluginTestToolkit');

	/* Register operations that we can perform on our mock data items */
	$ret = GalleryCoreApi::registerToolkitOperation('ItemEditPhotoPluginTestToolkit',
		array('test/file'), 'scale',
		array(array('type' => 'int', 'description' => 'test'),
		      array('type' => 'int', 'description' => 'test')),
		'test-description');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::registerToolkitOperation(
	    'ItemEditPhotoPluginTestToolkit', array('test/file'), 'convert-to-image/jpeg',
	    array(), 'test-description', 'image/jpeg');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::registerToolkitOperation('ItemEditPhotoPluginTestToolkit',
		array('test/file'), 'rotate',
		array(array('type' => 'int', 'description' => 'test')),
		'test-description');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::registerToolkitOperation('ItemEditPhotoPluginTestToolkit',
		array('test/file'), 'thumbnail',
		array(array('type' => 'int', 'description' => 'test'),
		      array('type' => 'int', 'description' => 'test')),
		'test-description', '');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::registerToolkitOperation('ItemEditPhotoPluginTestToolkit',
		array('test/file'), 'resize',
		array(array('type' => 'int', 'description' => 'test'),
		      array('type' => 'int', 'description' => 'test')),
		'test-description', '');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_item) =
	    $this->_createRandomDataItem($this->_album->getId(), 'test/file');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_derivative[0]) =
	    $this->_createDerivative($this->_item, $this->_item->getId(),
				     DERIVATIVE_TYPE_IMAGE_PREFERRED, 'rotate|90');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_derivative[1]) =
	    $this->_createDerivative($this->_item, $this->_derivative[0]->getId(),
				     DERIVATIVE_TYPE_IMAGE_THUMBNAIL, 'thumbnail|200');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_derivative[2]) =
	    $this->_createDerivative(
		$this->_item, $this->_derivative[0]->getId(),
		DERIVATIVE_TYPE_IMAGE_RESIZE, 'scale|500,500;convert-to-image/jpeg', 'test/file',
		array('postFilterOperations' => 'test-operation|0'));
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_preferred =& $this->_derivative[0];
    }

    function testEditResizes() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][save]', 1);

	for ($i = 0; $i < 3; $i++) {
	    GalleryUtilities::putRequestVariable('form[resizes][' . $i . '][active]', 1);
	    GalleryUtilities::putRequestVariable('form[resizes][' . $i . '][width]', 100 * ($i+1));
	    GalleryUtilities::putRequestVariable('form[resizes][' . $i . '][height]', 100 * ($i+1));
	}
	GalleryUtilities::putRequestVariable('form[resizes][2][height]', 600);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest($this->_item, $this->_preferred);
	$this->assertEquals(array(array(), $this->_translate('Changes saved successfully')),
			    $results);

	/* Examine the resizes and make sure they line up */
	list ($ret, $resizeTable) =
	    GalleryCoreApi::fetchResizesByItemIds(array($this->_item->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	if (!empty($resizeTable[$this->_item->getId()])) {
	    $this->assertEquals(3, sizeof($resizeTable[$this->_item->getId()]));
	    for ($i = 0; $i < 3; $i++) {
		$expectedOperations =
		    ($i < 2) ? ('scale|' . 100 * ($i+1) . ',' . 100 * ($i+1)) : 'scale|300,600';
		$expectedOperations .= ';convert-to-image/jpeg';
		$this->assertEquals(
		    $expectedOperations,
		    $resizeTable[$this->_item->getId()][$i]->getDerivativeOperations());
		/* check that postfilteroperations are maintained and added to new resizes.. */
		$this->assertEquals(
		    'test-operation|0',
		    $resizeTable[$this->_item->getId()][$i]->getPostFilterOperations(),
		    "postfilter $i");
	    }
	}
    }

    function testEditResizesMissing() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][save]', 1);

	for ($i = 0; $i < 3; $i++) {
	    GalleryUtilities::putRequestVariable('form[resizes][' . $i . '][active]', 1);
	}

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest($this->_item, $this->_preferred);
	$this->assertEquals(array(array('form[error][resizes][0][size][missing]',
					'form[error][resizes][1][size][missing]',
					'form[error][resizes][2][size][missing]'),
				  null),
			    $results);
    }

    function testEditResizesInvalid() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][save]', 1);

	for ($i = 0; $i < 3; $i++) {
	    GalleryUtilities::putRequestVariable('form[resizes][' . $i . '][active]', 1);
	    GalleryUtilities::putRequestVariable('form[resizes][' . $i . '][width]', 'x' . rand());
	    GalleryUtilities::putRequestVariable('form[resizes][' . $i . '][height]', 100);
	}
	GalleryUtilities::putRequestVariable('form[resizes][2][width]', 100);
	GalleryUtilities::putRequestVariable('form[resizes][2][height]', 'x' . rand());

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest($this->_item, $this->_preferred);
	$this->assertEquals(array(array('form[error][resizes][0][size][invalid]',
					'form[error][resizes][1][size][invalid]',
					'form[error][resizes][2][size][invalid]'),
				  null),
			    $results);
    }
}

/**
 * Required by our test toolkit
 */
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryToolkit.class');

/**
 * Test toolkit
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemEditPhotoPluginTestToolkit extends GalleryToolkit {
    /**
     * @see GalleryToolkit::performOperation()
     * Dummy operation
     */
    function performOperation($mimeType, $operationName, $sourceFilename,
			      $destFilename, $parameters, $context=array()) {
	global $gallery;
	$platform = $gallery->getPlatform();

	if ($sourceFilename != $destFilename) {
	    $platform->copy($sourceFilename, $destFilename);
	}

	$fd = $platform->fopen($destFilename, 'a');
	$platform->fwrite($fd, $operationName);
	$platform->fclose($fd);

	return array(GalleryStatus::success(), $mimeType, $context);
    }

    /**
     * @see GalleryToolkit::mergeOperations()
     * Dummy operation
     */
    function mergeOperations($operation1, $args1, $operation2, $args2) {
	/* Do something stupid, but predictable */
	return array(GalleryStatus::success(),
		     $operation1 . '+' . $operation2,
		     array_merge($args1, array('+'), $args2));
    }
}
?>
