<?php
/*
 * $RCSfile: ItemCreateLinkControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.14 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemCreateLink controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemCreateLinkControllerTest extends GalleryControllerTestCase {

    function ItemCreateLinkControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.ItemCreateLink');
    }

    function setUp() {
	parent::setUp();

	/* Create a container album for all our test items */
	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_album);
    }

    /**
     * Test linking an item
     */
    function testLinkItemSuccessful() {
	list ($ret, $childAlbum) = $this->_createRandomAlbum($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $childItem) = $this->_createRandomDataItem($childAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $childAlbum->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]',
					     array($childItem->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][link]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_album->getId());

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemCreateLink',
						      'itemId' => $childAlbum->getId()),
				  'status' => array('linked' => array('count' => 1)),
				  'error' => array()),
			    $results);
    }

    /**
     * Test linking an album (this should fail)
     */
    function testLinkAlbumUnsuccessful() {
	list ($ret, $childAlbum) = $this->_createRandomAlbum($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $grandChildAlbum) = $this->_createRandomAlbum($childAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $childAlbum->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]',
					     array($grandChildAlbum->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][link]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_album->getId());

	$results = $this->handleRequest(ERROR_PERMISSION_DENIED);
    }

    /**
     * Test linking an item without view permission (this should fail)
     */
    function testLinkItemWithoutViewFullPermissions() {
	global $gallery;
	list ($ret, $item) = $this->_createRandomDataItem($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::removeItemPermissions($item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]',
					     array($item->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][link]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_album->getId());

	$results = $this->handleRequest(ERROR_PERMISSION_DENIED);
    }

    /**
     * Test linking an item to a bogus destination
     */
    function testLinkItemIntoBogusDestination() {
	list ($ret, $childAlbum) = $this->_createRandomAlbum($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $childItem) = $this->_createRandomDataItem($childAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $childAlbum->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]',
					     array($childItem->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][link]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemCreateLink'),
				  'status' => array(),
				  'error' => array('form[error][destination][empty]')),
			    $results);
    }

    /**
     * Test moving an item into a container where we have no add permissions
     */
    function testLinkItemIntoAlbumWithNoAddPermissions() {
	list ($ret, $childAlbum) = $this->_createRandomAlbum($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $childItem) = $this->_createRandomDataItem($childAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Remove add permission in the destination */
	$ret = GalleryCoreApi::removeItemPermissions($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $childAlbum->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]',
					     array($childItem->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][link]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_album->getId());

	$results = $this->handleRequest(ERROR_PERMISSION_DENIED);
    }

    function testCreateLinkNextPageOutOfRange() {
	global $gallery;

	/* create random items */
	$items = array();
	for ($i = 0; $i < 5; $i++) {
	    list($ret, $items[$i]) = $this->_createRandomDataItem($this->_album->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	$selectedIds = array();
	foreach ($items as $item) {
	    $selectedIds[$item->getId()] = 1;
	}

	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]', $selectedIds);
	GalleryUtilities::putRequestVariable('form[numPerPage]', 3);
	GalleryUtilities::putRequestVariable('page', 3);
	GalleryUtilities::putRequestVariable('form[action][next]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemCreateLink',
						      'itemId' => $this->_album->getId(),
						      'page' => 2),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testCreateLinkPreviousPageOutOfRange() {
	global $gallery;

	/* create random items */
	$items = array();
	for ($i = 0; $i < 5; $i++) {
	    list($ret, $items[$i]) = $this->_createRandomDataItem($this->_album->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	$selectedIds = array();
	foreach ($items as $item) {
	    $selectedIds[$item->getId()] = 1;
	}

	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]', $selectedIds);
	GalleryUtilities::putRequestVariable('page', -1);
	GalleryUtilities::putRequestVariable('form[action][previous]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemCreateLink',
						      'itemId' => $this->_album->getId(),
						      'page' => 1),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    /*
     * Bug #995734
     * Cancel button should return to the current album view
     */
    function testCreateLinkCancelButton() {
	list ($ret, $childAlbum) = $this->_createRandomAlbum($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $childItem) = $this->_createRandomDataItem($childAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $childAlbum->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]',
					     array($childItem->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('return' => 1,
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    /*
     * Bug 1165669: Create link with no selection
     */
    function testLinkNoSelection() {
        list ($ret, $childAlbum) = $this->_createRandomAlbum($this->_album->getId());
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        GalleryUtilities::putRequestVariable('itemId', $childAlbum->getId());
        GalleryUtilities::putRequestVariable('form[action][link]', 1);
        GalleryUtilities::putRequestVariable('form[destination]', $this->_album->getId());

        $results = $this->handleRequest();
        $results = $this->handleRequest();
        $this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
            'subView' => 'core.ItemCreateLink'),
            'status' => array(),
            'error' => array('form[error][sources][empty]')), $results);
    }
}
?>
