<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemCreateLink controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemCreateLinkControllerTest extends GalleryControllerTestCase {

    function ItemCreateLinkControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core:ItemCreateLink');
    }

    function setUp() {
	global $gallery;
	
	parent::setUp();

	for ($i = 0; $i < 2; $i++) {
	    list ($ret, $this->_albums[$i]) = $this->_createRandomAlbum($this->_getRootId());
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $albumId = $this->_albums[$i]->getId();
	    $userId = $gallery->getActiveUserId();
	    switch ($i) {
	    case 0:
		/* Can add data items */
		$ret = GalleryCoreApi::removeItemPermissions($albumId);
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		
		$ret = GalleryCoreApi::addUserPermission($albumId, $userId, 'core.addDataItem');
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		break;

	    case 1:
		/* Can't do squat */
		$ret = GalleryCoreApi::removeItemPermissions($albumId);
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		break;
	    }

	    /* Create data items in each album */
	    for ($j = 0; $j < 2; $j++) {
		list ($ret, $this->_items[$i][$j]) =
		    $this->_createRandomDataItem($this->_albums[$i]->getId(), 'image/jpeg', array(),
						 dirname(__FILE__) . '/../../test/data/test1.gif');
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
	    }
	}

    }

    function tearDown() {
	global $gallery;

	for ($i = 0; $i < sizeof($this->_albums); $i++) {
	    $ret = GalleryCoreApi::deleteEntityById($this->_albums[$i]->getId());
	    if ($ret->isError()) {
		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	    
	parent::tearDown();
    }

    /**
     * Test linking an item
     */
    function testLinkItemSuccessful() {
	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_albums[1]->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]',
					     array($this->_items[1][0]->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][link]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_albums[0]->getId());

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemCreateLink',
						      'itemId' => $this->_albums[1]->getId()),
				  'status' => array('linked' => array('count' => 1)),
				  'error' => array()),
			    $results);
    }

    /**
     * Test linking an item to a bogus destination
     */
    function testLinkItemIntoBogusDestination() {
	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_albums[0]->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]',
					     array($this->_items[0][0]->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][link]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemCreateLink'),
				  'status' => array(),
				  'error' => array('form[error][destination][empty]')),
			    $results);
    }

    /**
     * Test moving an item into a container where we have no add permissions
     */
    function testLinkItemIntoAlbumWithNoAddPermissions() {
	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_albums[0]->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]',
					     array($this->_items[0][0]->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][link]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_albums[1]->getId());

	$results = $this->handleRequest(ERROR_PERMISSION_DENIED);
    }
}
?>
