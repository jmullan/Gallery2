<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test Plugin functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision$
 */
class PluginTest extends GalleryTestCase {

    function testCoreApiTooNew() {
	$plugin = new PluginTestPlugin();
	$plugin->setPluginType('theme');
	$version = GalleryCoreApi::getApiVersion();
	$plugin->setRequiredCoreApi(array($version[0], $version[1]+1));
	$plugin->setRequiredThemeApi(GalleryTheme::getApiVersion());
	$this->assert(!GalleryCoreApi::isPluginCompatibleWithApis($plugin),
		      'should not be compatible');
    }

    function testCoreApiOldMinorButOkMajor() {
	$plugin = new PluginTestPlugin();
	$plugin->setPluginType('theme');
	$version = GalleryCoreApi::getApiVersion();
	$plugin->setRequiredCoreApi(array($version[0], 0));
	$plugin->setRequiredThemeApi(GalleryTheme::getApiVersion());
	$this->assert(GalleryCoreApi::isPluginCompatibleWithApis($plugin),
		      'should be compatible');
    }

    function testCompatibleTheme() {
	$plugin = new PluginTestPlugin();
	$plugin->setPluginType('theme');
	$plugin->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
	$plugin->setRequiredThemeApi(GalleryTheme::getApiVersion());
	$this->assert(GalleryCoreApi::isPluginCompatibleWithApis($plugin),
		      'should be compatible');
    }

    function testThemeTooNew() {
	$plugin = new PluginTestPlugin();
	$plugin->setPluginType('theme');
	$plugin->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
	$version = GalleryTheme::getApiVersion();
	$plugin->setRequiredThemeApi(array($version[0], $version[1]+1));
	$this->assert(!GalleryCoreApi::isPluginCompatibleWithApis($plugin),
		      'should not be compatible');
    }

    function testCompatibleModule() {
	$plugin = new PluginTestPlugin();
	$plugin->setPluginType('module');
	$plugin->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
	$plugin->setRequiredModuleApi(GalleryModule::getApiVersion());
	$this->assert(GalleryCoreApi::isPluginCompatibleWithApis($plugin),
		      'should be compatible');
    }

    function testModuleTooNew() {
	$plugin = new PluginTestPlugin();
	$plugin->setPluginType('module');
	$plugin->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
	$version = GalleryModule::getApiVersion();
	$plugin->setRequiredModuleApi(array($version[0], $version[1]+1));
	$this->assert(!GalleryCoreApi::isPluginCompatibleWithApis($plugin),
		      'should not be compatible');
    }

    function testLoadBadPluginType() {
	list ($ret, $plugin) = GalleryCoreApi::loadPlugin('wrong_value', 'Anything');
	if (!$ret) {
	    return $this->assert(false, 'Should have been an error');
	}

	$this->assert($ret->getErrorCode() & ERROR_BAD_PARAMETER);
    }

    function testLoadPlugin() {
	list ($ret, $plugin) = GalleryCoreApi::loadPlugin('module', 'PluginTestCompatible');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
    }

    function testFetchPluginStatusForWrongPluginType() {
	list ($ret, $status) = GalleryCoreApi::fetchPluginStatus('foo');
	$this->assert(ERROR_BAD_PARAMETER & $ret->getErrorCode(), 'Wrong status code');
    }

    function testGetAllPluginIds() {
	global $gallery;

	foreach (array('theme', 'module') as $type) {
	    $expectedIds = array();

	    /* Mock platform */
	    $platform = new UnitTestPlatform();
	    foreach (GalleryCoreApi::getPluginBaseDirs() as $pluginBaseDir) {
		$path = $pluginBaseDir . $type . 's/';
		$platform->setReply('opendir', array($path), 'fh');
		$platform->setReply('readdir', array('fh'), '.');
		$platform->setReply('readdir', array('fh'), '..');
		$platform->setReply('readdir', array('fh'), 'CVS');
		$platform->setReply('readdir', array('fh'), 'moo');
		$platform->setReply('is_file', array($path . 'moo/' . $type . '.inc'), true);
		$platform->setReply('readdir', array('fh'), 'foo');
		$platform->setReply('is_file', array($path . 'foo/' . $type . '.inc'), false);
		$platform->setReply('readdir', array('fh'), 'bar');
		$platform->setReply('is_file', array($path . 'bar/' . $type . '.inc'), true);
		$platform->setReply('readdir', array('fh'), false);
		$platform->setReply('closedir', array('fh'), true);

		$expectedIds += array_merge($expectedIds, array('moo', 'bar'));
	    }
	    $gallery->setPlatform($platform);

	    list ($ret, $pluginIds) = GalleryCoreApi::getAllPluginIds($type);
	    if ($ret) {
		return $this->failWithStatus($ret);
	    }
	    $this->assertEquals($expectedIds, $pluginIds, "$type ids do not match");
	}
    }

    function testActivateFlushesTemplateAndTemplatePathMapCaches() {
	global $gallery;

	/* Test preparation */
	$plugin = new PluginTestPlugin();
	$plugin->setPluginType('theme');
	$plugin->setId('plugintest');
	$plugin->setVersion('1.0.0');
	$plugin->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
	$plugin->setRequiredThemeApi(GalleryTheme::getApiVersion());

	$themeStatus = array($plugin->getId() => array('available' => true));
	GalleryDataCache::put('GalleryPluginHelper::fetchPluginStatus(theme)', $themeStatus);

	GalleryDataCache::putTemplatePath('foo', 'bar');
	$this->assertEquals('bar', GalleryDataCache::getTemplatePath('foo'));
	$templateDir = '/templates';
	$gallery->setConfig('data.smarty.templates_c', $templateDir);

	$platform = new UnitTestPlatform();
	$platform->setReply('file_exists', array($templateDir), true);
	$platform->setReply('recursiveRmdir', array($templateDir), false);
	$gallery->setPlatform($platform);

	$gallery->_storage = new PluginTestMockStorage();

	/* Execute the test */
	list ($ret, $ignored) = $plugin->activate(false);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	/* Verify the results */
	$this->assertEquals(false, GalleryDataCache::getTemplatePath('foo'),
			    'template path mapping has not been flushed');
	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testDeactivateFlushesTemplateCache() {
	global $gallery;

	/* Test preparation */
	$plugin = new PluginTestPlugin();
	$plugin->setPluginType('theme');
	$plugin->setId('plugintest');
	$plugin->setVersion('1.0.0');
	$plugin->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
	$plugin->setRequiredThemeApi(GalleryTheme::getApiVersion());

	$themeStatus = array($plugin->getId() => array('active' => true, 'available' => true));
	GalleryDataCache::put('GalleryPluginHelper::fetchPluginStatus(theme)', $themeStatus);

	GalleryDataCache::putTemplatePath('foo', 'bar');
	$this->assertEquals('bar', GalleryDataCache::getTemplatePath('foo'));

	$platform = new UnitTestPlatform();
	$gallery->setPlatform($platform);

	$gallery->_storage = new PluginTestMockStorage();

	/* Execute the test */
	list ($ret, $ignored) = $plugin->deactivate(false);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	/* Verify the results */
	$this->assertEquals(false, GalleryDataCache::getTemplatePath('foo'),
			    'template path mapping has not been flushed');
	$this->assert($platform->isComplete(), $platform->getRemaining());
    }
}

class PluginTestCompatibleModule extends GalleryModule {
}

class PluginTestPlugin extends GalleryPlugin {
    function setPluginType($type) {
	$this->_type = $type;
    }

    function getPluginType() {
	return $this->_type;
    }

    function setRequiredModuleApi($requirement) {
	$this->_requiredModuleApi = $requirement;
    }

    function getRequiredModuleApi() {
	return $this->_requiredModuleApi;
    }

    function setRequiredThemeApi($requirement) {
	$this->_requiredThemeApi = $requirement;
    }

    function getRequiredThemeApi() {
	return $this->_requiredThemeApi;
    }
}

/**
 * @todo Replace with generic test storage similar to the UnitTestPlatform
 */
class PluginTestMockStorage {
    function addMapEntry($mapName, $data) {
	return null;
    }

    function updateMapEntry($mapName, $match, $change) {
	return null;
    }
}
?>
