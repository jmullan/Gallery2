<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemAddChildren controller tests
 */
class ItemAddChildrenControllerTest extends GalleryControllerTestCase {

    function ItemAddChildrenControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core:ItemAddChildren');
    }

    function setUp() {
	global $gallery;

	parent::setUp();

	list ($ret, $this->_rootAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_savePlatform = $gallery->getPlatform();
	$gallery->_platform = new ItemAddChildrenControllerTestPlatform($this->_savePlatform);
    }

    function tearDown() {
	global $gallery;

	$gallery->deleteEntityById($this->_rootAlbum->getId());
	$gallery->_platform = $this->_savePlatform;
	
	parent::tearDown();
    }

    function testAddChildrenFromBrowser() {
	global $gallery;

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_rootAlbum->getId());
	GalleryUtilities::putRequestVariable('form[action][addFromBrowser]', 1);

	$platform = $gallery->getPlatform();
	$baseDir = dirname(__FILE__) . '/../data/';
	$files = array('test1.gif', 'test1.jpg', 'test2.gif', 'test3.gif');
	$i = 0;
	foreach ($files as $file) {
	    $i++;
	    $fullPath = $baseDir . $file;

	    if (get_magic_quotes_gpc()) {
		$fullPath = addslashes($fullPath);
	    }
	    
	    GalleryUtilities::putRequestVariable('form[name][' . $i . ']', $file);
	    GalleryUtilities::putRequestVariable('form[type][' . $i . ']',
						 GalleryUtilities::getMimeType($fullPath));
	    GalleryUtilities::putRequestVariable('form[tmp_name][' . $i . ']', $fullPath);
	    GalleryUtilities::putRequestVariable('form[size][' . $i . ']', $platform->filesize($fullPath));
	    GalleryUtilities::putRequestVariable('form[error][' . $i . ']', 0);
	    GalleryUtilities::putRequestVariable('form[caption][' . $i . ']', 'this is a caption for ' . $file);
	}
	GalleryUtilities::putRequestVariable('form[uploadBoxCount]', $i);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:ItemAdmin',
				  'subView' => 'core:ItemAddChildrenConfirmation',
				  'itemId' => $this->_rootAlbum->getId()),
			    $results['redirect']);
	$this->assertEquals(array(), $results['error']);

	/* We don't know the ids, but we can verify everything else */
	$i = 0;
	foreach ($files as $file) {
	    $this->assertEquals($results['status']['addFromBrowser'][$i]['fileName'], $file);
	    $i++;
	}

	/* Verify item attributes (like order weight) */
	list ($ret, $ids) = $this->_rootAlbum->fetchChildIds();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$seenWeights = array();
	foreach ($ids as $id) {
	    list ($ret, $viewCount) = GalleryItemAttributesMap::fetchViewCount($id);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(0, $viewCount);
	    
	    list ($ret, $orderWeight) = GalleryItemAttributesMap::fetchOrderWeight($id);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assert(!isset($seenWeights[$orderWeight]), 'Seen this weight before');
	    $seenWeights[$orderWeight] = 1;
	}	    
    }

    function testAddChildrenFromLocalServer() {
	global $gallery;

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_rootAlbum->getId());
	GalleryUtilities::putRequestVariable('form[action][addFromLocalServer]', 1);

	$platform = $gallery->getPlatform();
	$baseDir = dirname(__FILE__) . '/../data/';
	$fileKeys = array();
	GalleryUtilities::putRequestVariable('form[localServerPath]', $baseDir);
	$files = array('test1.gif', 'test1.jpg', 'test2.gif', 'test3.gif');
	foreach ($files as $fileName) {
	    GalleryUtilities::putRequestVariable('form[localServerFiles][' . $fileName . ']', 1);
	}

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:ItemAdmin',
				  'subView' => 'core:ItemAddChildrenConfirmation',
				  'itemId' => $this->_rootAlbum->getId()),
			    $results['redirect']);
	$this->assertEquals(array(), $results['error']);

	/* We don't know the ids, but we can verify everything else */
	$i = 0;
	foreach ($files as $file) {
	    $this->assertEquals($results['status']['addFromLocalServer'][$i]['fileName'], $file);
	    $i++;
	}

	/* Verify item attributes (like order weight) */
	list ($ret, $ids) = $this->_rootAlbum->fetchChildIds();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$seenWeights = array();
	foreach ($ids as $id) {
	    list ($ret, $viewCount) = GalleryItemAttributesMap::fetchViewCount($id);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(0, $viewCount);
	    
	    list ($ret, $orderWeight) = GalleryItemAttributesMap::fetchOrderWeight($id);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assert(!isset($seenWeights[$orderWeight]), 'Seen this weight before');
	    $seenWeights[$orderWeight] = 1;
	}
    }

    function testAddChildrenFromWebPage() {
	global $gallery;

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_rootAlbum->getId());
	GalleryUtilities::putRequestVariable('form[action][addFromWebPage]', 1);
	GalleryUtilities::putRequestVariable('form[webPageUrls][http://test/test1.gif]', 1);
	GalleryUtilities::putRequestVariable('form[webPageUrls][http://test/test1.jpg]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:ItemAdmin',
				  'subView' => 'core:ItemAddChildrenConfirmation',
				  'itemId' => $this->_rootAlbum->getId()),
			    $results['redirect']);
	$this->assertEquals(2, sizeof($results['status']['addFromWebPage']));
	$this->assertEquals('http://test/test1.gif', $results['status']['addFromWebPage'][0]['fileName']);
	$this->assertEquals('http://test/test1.jpg', $results['status']['addFromWebPage'][1]['fileName']);
	$this->assertEquals(array(), $results['error']);
    }
}

class ItemAddChildrenControllerTestPlatform extends GalleryPlatform {
    function ItemAddChildrenControllerTestPlatform($delegate) {
	$this->_delegate = $delegate;
    }

    function exec($cmdArray, $returnErrorOutput=false) {
	return $this->_delegate->exec($cmdArray, $returnErrorOutput);
    }

    function getDirectorySeparator() {
	return $this->_delegate->getDirectorySeparator();
    }

    function fopen($filename, $mode, $use_include_path=0) {
	switch($filename) {
	case 'http://test/test1.gif':
	    return $this->_delegate->fopen(dirname(__FILE__) . '/../data/test1.gif', $mode, $use_include_path);
	    break;

	case 'http://test/test1.jpg':
	    return $this->_delegate->fopen(dirname(__FILE__) . '/../data/test1.jpg', $mode, $use_include_path);
	    break;
	}

	return $this->_delegate->fopen($filename, $mode, $use_include_path);
    }
}
?>
