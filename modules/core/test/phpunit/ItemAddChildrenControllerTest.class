<?php
/*
 * $RCSfile
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemAddChildren controller tests
 */
class ItemAddChildrenControllerTest extends GalleryControllerTestCase {

    function ItemAddChildrenControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core:ItemAddChildren');
    }

    function setUp() {
	global $gallery;

	parent::setUp();

	list ($ret, $rootId) = $gallery->getModuleParameter('core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_rootAlbum) = $this->_createRandomAlbum($rootId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	global $gallery;

	$gallery->deleteEntityById($this->_rootAlbum->getId());
	
	parent::tearDown();
    }

    function testAddChildren() {
	global $gallery;

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_rootAlbum->getId());
	GalleryUtilities::putRequestVariable('form.action.addFromComputer', 1);

	$platform = $gallery->getPlatform();
	$baseDir = dirname(__FILE__) . '/../data/';
	$files = array('test1.gif', 'test1.jpg', 'test2.gif', 'test3.gif');
	$i = 0;
	foreach ($files as $file) {
	    $i++;
	    $fullPath = $baseDir . $file;

	    if (get_magic_quotes_gpc()) {
		$fullPath = addslashes($fullPath);
	    }
	    
	    GalleryUtilities::putRequestVariable('form.fileUpload.' . $i,
		array('name' => $file,
		      'type' => GalleryUtilities::getMimeType($fullPath),
		      'tmp_name' => $fullPath,
		      'size' => $platform->filesize($fullPath)));
	    GalleryUtilities::putRequestVariable('form.fileUpload.' . $i . '.name', $file);
	    GalleryUtilities::putRequestVariable('form.fileUpload.' . $i . '.caption',
						 'this is a caption for ' . $file);
	}
	GalleryUtilities::putRequestVariable('form.uploadBoxCount', $i);

	/* Perform the request and verify that we succeeded */
	list ($ret, $results) = $this->_controller->handleRequest();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertRedirect(array('view' => 'core:ItemAdmin',
				    'subView' => 'core:ItemAddChildren',
				    'itemId' => $this->_rootAlbum->getId()),
			      $results);
    }

}
?>
