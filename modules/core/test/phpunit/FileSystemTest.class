<?php
/*
 * $RCSfile: FileSystemTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.16 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test FileSystem functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class FileSystemTest extends GalleryTestCase {

    function FileSystemTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;

	parent::setUp();

	$iterations = 3;
	$parentId = $this->_getRootId();
	for ($i = 0; $i < $iterations; $i++) {
	    $gallery->guaranteeTimeLimit(5);

	    list ($ret, $this->_albums[$i]) = $this->_createRandomAlbum($parentId);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $parentId = $this->_albums[$i]->getId();
	}

	/* delete the top album */
	$this->_markForCleanup($this->_albums[0]);
    }

    function testFetchItemIdByPath() {
	$path = '/';
	for ($i = 0; $i < sizeof($this->_albums); $i++) {
	    $path .= $this->_albums[$i]->getPathComponent() . '/';
	}
	list ($ret, $id) = GalleryCoreApi::fetchItemIdByPath($path);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($this->_albums[2]->getId(), $id);
    }

    function testFetchLogicalPath() {
	list ($ret, $root) = GalleryCoreApi::loadEntitiesById($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $logicalPath) = $root->fetchLogicalPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('/', $logicalPath);

	list ($ret, $logicalPath) = $this->_albums[1]->fetchLogicalPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(sprintf('/%s/%s/',
				    $this->_albums[0]->getPathComponent(),
				    $this->_albums[1]->getPathComponent()),
			    $logicalPath);

	list ($ret, $item) = $this->_createRandomDataItem($this->_albums[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $logicalPath) = $item->fetchLogicalPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(sprintf('/%s/%s/%s',
				    $this->_albums[0]->getPathComponent(),
				    $this->_albums[1]->getPathComponent(),
				    $item->getPathComponent()),
			    $logicalPath);
    }

    function testFetchPath() {
	global $gallery;
	$originalPlatform = $gallery->getPlatform();
	$gallery->_platform = new FileSystemTestPlatform('/');
	$originalAlbumsDir = $gallery->getConfig('data.gallery.albums');
	$gallery->setConfig('data.gallery.albums', '');

	list ($ret, $path) = $this->_albums[1]->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(sprintf('%s/%s/',
				    $this->_albums[0]->getPathComponent(),
				    $this->_albums[1]->getPathComponent()),
			    $path);

	$gallery->_platform = new FileSystemTestPlatform('\\');

	list ($ret, $path) = $this->_albums[1]->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(sprintf('%s\\%s\\',
				    $this->_albums[0]->getPathComponent(),
				    $this->_albums[1]->getPathComponent()),
			    $path);

	$gallery->_platform = $originalPlatform;
	$gallery->setConfig('data.gallery.albums', $originalAlbumsDir);
    }

    function testFetchChildIdByPathComponent() {
	list ($ret, $id) = GalleryCoreApi::fetchChildIdByPathComponent(
	    $this->_albums[1]->getId(), $this->_albums[2]->getPathComponent());

	$this->assertEquals($this->_albums[2]->getId(), $id);
    }

    /**
     * Verify that creating a second filesystem entity with the same path as
     * an existing one throws a collision error.
     */
    function testCreateCollision() {
	global $gallery;

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_albums[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	for ($i = 0; $i < 3; $i++) {
	    $entity[$i] = new GalleryFileSystemEntity();
	    $ret = $entity[$i]->create($this->_albums[0]->getId(), 'valid_path.jpg');
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $ret = $entity[$i]->save();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    if ($i > 0) {
		$this->assertEquals(sprintf('valid_path_%03d.jpg', $i),
				    $entity[$i]->getPathComponent());
	    }
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testMoveCollision() {
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock(array($this->_albums[0]->getId(),
								      $this->_albums[1]->getId(),
								      $this->_albums[2]->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $this->_albums[1]->rename('foo');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = $this->_albums[1]->save();

	$ret = $this->_albums[1]->move($this->_albums[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $this->_albums[2]->rename('foo');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = $this->_albums[2]->move($this->_albums[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('foo_001', $this->_albums[2]->getPathComponent());

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /*
     * Test the platform->rename($old,$newpath) call of FileSystemEntity::move.
     * The call should have legal platformspecific slashes.
     *
     * It tests not the functionality of FileSystemEntity::move, it only tests if
     * FileSystemEntity::move uses valid paths (no incorrect slashes) in its call to the platform
     * specific "rename($oldname, $newname)" function.
     */
    function testMoveRenameCall() {
	global $gallery;
	/* Use a windows alike mock platfrom */
	$originalPlatform = $gallery->getPlatform();
	$gallery->_platform = new FileSystemTestPlatformForRename('\\');
	/* Acquire the write locks */
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock(array($this->_albums[0]->getId(),
								      $this->_albums[1]->getId(),
								      $this->_albums[2]->getId()));
	if ($ret->isError()) {
	    $gallery->_platform = $originalPlatform;
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Execute the move command, success expected*/
	$ret = $this->_albums[2]->move($this->_albums[0]->getId());
	if ($ret->isError()) {
	    $gallery->_platform = $originalPlatform;
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Now change the mock platform to a unix alike system */
	$gallery->_platform = new FileSystemTestPlatformForRename('/');
	/* And move again album 1 (back, but all virtual move command), success expected */
	$ret = $this->_albums[2]->move($this->_albums[1]->getId());
	if ($ret->isError()) {
	    $gallery->_platform = $originalPlatform;
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$gallery->_platform = $originalPlatform;
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$gallery->_platform = $originalPlatform;
    }

    function testGetLegalPathComponent() {
	/* Simple case, no collision */
	list ($ret, $path) =
	    GalleryCoreApi::getLegalPathComponent('testpath', $this->_albums[2]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('testpath', $path, 'no collision');

	/* Collision with existing album: _001 gets added */
	list ($ret, $path) = GalleryCoreApi::getLegalPathComponent(
			     $this->_albums[1]->getPathComponent(), $this->_albums[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($this->_albums[1]->getPathComponent() . '_001', $path,
			    'avoid collision');

	/* Ignore self-collision */
	list ($ret, $path) = GalleryCoreApi::getLegalPathComponent(
			     $this->_albums[1]->getPathComponent(), $this->_albums[0]->getId(),
			     $this->_albums[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($this->_albums[1]->getPathComponent(), $path, 'ignore self-collision');

	/* Filename with some invalid path characters and .php extension */
	list ($ret, $path) = GalleryCoreApi::getLegalPathComponent(
			     'my/test&file!.php', $this->_albums[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('my_test_file__php', $path, 'a few bad characters');

	/* Filename of all extended characters, except extension: we rewrite with date-filename */
	list ($ret, $path) = GalleryCoreApi::getLegalPathComponent(
			     "\xe6\xaa\x94\xe6\xa1\x88.jpg", $this->_albums[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(strftime('%Y%m%d') . '.jpg', $path, 'extended characters');
    }
}

/**
 * Mock platform
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class FileSystemTestPlatform {
    function FileSystemTestPlatform($separator) {
	$this->_separator = $separator;
    }

    function getDirectorySeparator() {
	return $this->_separator;
    }
}


/**
 * Mock platform for the rename method
 *
 * Implements all methods used by FileSystemEntity::move()
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class FileSystemTestPlatformForRename extends GalleryPlatform {
    function FileSystemTestPlatformForRename($separator) {
	$this->_separator = $separator;
    }

    function getDirectorySeparator() {
	return $this->_separator;
    }

    /**
     * Rename a file/dir
     *
     * Override rename method for the testMoveRenamePaths
     * It won't rename the item actually, just check if the paths contain no invalid slashs
     */
    function rename($oldname, $newname) {
	global $gallery;
	if ($gallery->getDebug()) {
	    $gallery->debug("rename($oldname, $newname)");
	}
	/*
	 * Check if there are some platform specific slash problems in the paths
	 * The platform should be forced to have a '\' separator and thus, no '/'
	 * should be found in the paths.
	 */
	/*
	 * Strip off the g2data path part of the $oldname and $newname, because they are platform
	 * specific and correct anyway.
	 */
	$oldname = substr($oldname,
			  strlen($gallery->getConfig('data.gallery.albums')));
	$newname = substr($newname,
			  strlen($gallery->getConfig('data.gallery.albums')));
	/* We had a case where FileSystemEntity::move produced a rename(a,b) path b, which had a
	 * separator too much and this additional seapartor wasn't even platform specific, but
	 * just '/'. The consequence: ->move() didn't work on windows xp.
	 * What we do here is: Force a windows xp separator '\' and check if no '/' separator is
	 * found in the paths. nested ifs are not necessary, but more readable.
	 * And we don't accept // or \\ in our paths. Most probably this won't be an issue, but
	 * it's good to create exactly the paths that we actually indend to create.
	 */
	if ($this->_separator == '\\') {
	    if (strrchr($oldname, '/') || strrchr($newname, '/')
		    || strpos($oldname, '\\\\') || strpos($newname, '\\\\')) {
		return false;
	    }
	}  else if ($this->_separator == '/') {
	    if (strrchr($oldname, '\\') || strrchr($newname, '\\')
		    || strpos($oldname, '//') || strpos($newname, '//')) {
		return false;
	    }
	}

	/* Now pretend the rename command was successful */
	return true;
    }
}
?>
