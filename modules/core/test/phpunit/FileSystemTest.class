<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test FileSystem functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class FileSystemTest extends GalleryTestCase {

    function FileSystemTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	
	parent::setUp();
	
	$iterations = 3;
	$parentId = $this->_getRootId();
	for ($i = 0; $i < $iterations; $i++) {
	    $gallery->guaranteeTimeLimit(5);

	    list ($ret, $this->_albums[$i]) = $this->_createRandomAlbum($parentId);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $parentId = $this->_albums[$i]->getId();
	}
    }

    function tearDown() {
	global $gallery;

	$ret = $gallery->deleteEntityById($this->_albums[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::tearDown();
    }

    function testFetchItemIdByPath() {
	$path = '/';
	for ($i = 0; $i < sizeof($this->_albums); $i++) {
	    $path .= $this->_albums[$i]->getPathComponent() . '/';
	}
	list ($ret, $id) = GalleryFileSystemEntityHelper::fetchItemIdByPath($path);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($this->_albums[2]->getId(), $id);
    }

    function testFetchChildIdByPathComponent() {
	list ($ret, $id) = GalleryFileSystemEntityHelper::fetchChildIdByPathComponent(
	    $this->_albums[1]->getId(), $this->_albums[2]->getPathComponent());

	$this->assertEquals($this->_albums[2]->getId(), $id);
    }
}

?>
