<?php
/*
 * $RCSfile: ItemAddAlbumControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.21 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemAddAlbum controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemAddAlbumControllerTest extends GalleryControllerTestCase {

    function ItemAddAlbumControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.ItemAddAlbum');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_parentAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_parentAlbum);
    }

    function testAddAlbum() {
	/* Use valid inputs */
	$name = 'testalbum-'.rand();
	GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[pathComponent]', $name);
	GalleryUtilities::putRequestVariable('form[title]', 'title');
	GalleryUtilities::putRequestVariable('form[summary]', 'summary');
	GalleryUtilities::putRequestVariable('form[keywords]', 'keywords');
	GalleryUtilities::putRequestVariable('form[description]', 'description');

	list ($ret, $core) = GalleryCoreApi::loadPlugin('module', 'core');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemEdit',
						      'editPlugin' => 'ItemEditAlbum',
						      'itemId' => $this->_getChildId()),
				  'status' => array('editMessage' =>
						$core->translate('Album created successfully.')),
				  'error' => array()),
			    $results);
    }

    function testAddDuplicateAlbum() {
	/* Create an album */
	list ($ret, $subAlbum) = $this->_createRandomAlbum($this->_parentAlbum->getId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Use valid inputs */
	$name = 'testalbum-'.rand();
	GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[title]', 'title');
	GalleryUtilities::putRequestVariable('form[summary]', 'summary');
	GalleryUtilities::putRequestVariable('form[keywords]', 'keywords');
	GalleryUtilities::putRequestVariable('form[description]', 'description');

	/* Then re-use the path component that we know will conflict */
	GalleryUtilities::putRequestVariable('form[pathComponent]', $subAlbum->getPathComponent());

	list ($ret, $core) = GalleryCoreApi::loadPlugin('module', 'core');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemEdit',
						      'editPlugin' => 'ItemEditAlbum',
						      'itemId' => $this->_getSecondChildId()),
				  'status' => array('editMessage' =>
						$core->translate('Album created successfully.')),
				  'error' => array()),
			    $results);

	list ($ret, $newAlbum) = GalleryCoreApi::loadEntitiesById($this->_getSecondChildId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify that the new album's path component is unique (it's got _001 as a suffix) */
	$this->assertEquals($subAlbum->getPathComponent() . '_001', $newAlbum->getPathComponent());
    }

    function testAddAlbumMissingName() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[pathComponent]', '');
	GalleryUtilities::putRequestVariable('form[title]', 'title');
	GalleryUtilities::putRequestVariable('form[summary]', 'summary');
	GalleryUtilities::putRequestVariable('form[keywords]', 'keywords');
	GalleryUtilities::putRequestVariable('form[description]', 'description');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemAddAlbum'),
				  'status' => array(),
				  'error' => array('form[error][pathComponent][missing]')),
			    $results);
    }

    function testAddAlbumInvalidName() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[pathComponent]', 'Invalid!/\Chars');
	GalleryUtilities::putRequestVariable('form[title]', 'title');
	GalleryUtilities::putRequestVariable('form[summary]', 'summary');
	GalleryUtilities::putRequestVariable('form[keywords]', 'keywords');
	GalleryUtilities::putRequestVariable('form[description]', 'description');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemAddAlbum'),
				  'status' => array(),
				  'error' => array('form[error][pathComponent][invalid]')),
			    $results);
    }

    function testAddAlbumWithSpaces() {
	global $gallery;
	$platform = $gallery->getPlatform();

	$name = ' testalbum-' . rand() . ' ';
	GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[pathComponent]', $name);
	GalleryUtilities::putRequestVariable('form[title]', 'title');
	GalleryUtilities::putRequestVariable('form[summary]', 'summary');
	GalleryUtilities::putRequestVariable('form[keywords]', 'keywords');
	GalleryUtilities::putRequestVariable('form[description]', 'description');

	list ($ret, $core) = GalleryCoreApi::loadPlugin('module', 'core');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemEdit',
						      'editPlugin' => 'ItemEditAlbum',
						      'itemId' => ($id = $this->_getChildId())),
				  'status' => array('editMessage' =>
						$core->translate('Album created successfully.')),
				  'error' => array()),
			    $results);

	list ($ret, $newAlbum) = GalleryCoreApi::loadEntitiesById($id);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(trim($name), $newAlbum->getPathComponent(), 'path component');

	list ($ret, $path) = $newAlbum->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($platform->is_dir($path), "directory '$path'");
	$this->assertEquals(trim($name), basename($path),
			    'directory name: "' . basename($path) . '"');
    }

    function _getChildId() {
	list ($ret, $ids) = GalleryCoreApi::fetchChildItemIds($this->_parentAlbum);
	$this->assertEquals(1, sizeof($ids));
	return $ids[0];
    }

    function _getSecondChildId() {
	list ($ret, $ids) = GalleryCoreApi::fetchChildItemIds($this->_parentAlbum);
	$this->assertEquals(2, sizeof($ids));

	/* We want the larger id, since it's the newer one */
	return max($ids[0], $ids[1]);
    }
}
?>
