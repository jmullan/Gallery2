<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemAddAlbum controller tests
 */
class ItemAddAlbumControllerTest extends GalleryControllerTestCase {

    function ItemAddAlbumControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core:ItemAddAlbum');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	list ($ret, $rootId) = $gallery->getModuleParameter('core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	list ($ret, $this->_parentAlbum) = $this->_createRandomAlbum($rootId);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	global $gallery;
	
	$ret = $gallery->deleteEntityById($this->_parentAlbum->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	parent::tearDown();
    }

    function testAddAlbum() {
	global $gallery;

	/* Use valid inputs */
	$name = 'testalbum-'.rand();
	GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
	GalleryUtilities::putRequestVariable('form.action.create', 1);
	GalleryUtilities::putRequestVariable('form.pathComponent', $name);
	GalleryUtilities::putRequestVariable('form.title', 'title');
	GalleryUtilities::putRequestVariable('form.summary', 'summary');
	GalleryUtilities::putRequestVariable('form.keywords', 'keywords');
	GalleryUtilities::putRequestVariable('form.description', 'description');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditAlbum',
						      'itemId' => $this->_getChildId()),
				  'status' => array('createdAlbum' => 1),
				  'error' => array()),
			    $results);
    }

    function testAddDuplicateAlbum() {
	global $gallery;

	/* Create an album */
	list ($ret, $subAlbum) = $this->_createRandomAlbum($this->_parentAlbum->getId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Use valid inputs */
	$name = 'testalbum-'.rand();
	GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
	GalleryUtilities::putRequestVariable('form.action.create', 1);
	GalleryUtilities::putRequestVariable('form.title', 'title');
	GalleryUtilities::putRequestVariable('form.summary', 'summary');
	GalleryUtilities::putRequestVariable('form.keywords', 'keywords');
	GalleryUtilities::putRequestVariable('form.description', 'description');

	/* Then re-use the path component that we know will conflict */
	GalleryUtilities::putRequestVariable('form.pathComponent', $subAlbum->getPathComponent());

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemAddAlbum'),
				  'status' => array(),
				  'error' => array('form.error.pathComponent.collision')),
			    $results);
    }
    
    function testAddAlbumMissingName() {
	global $gallery;

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
	GalleryUtilities::putRequestVariable('form.action.create', 1);
	GalleryUtilities::putRequestVariable('form.pathComponent', '');
	GalleryUtilities::putRequestVariable('form.title', 'title');
	GalleryUtilities::putRequestVariable('form.summary', 'summary');
	GalleryUtilities::putRequestVariable('form.keywords', 'keywords');
	GalleryUtilities::putRequestVariable('form.description', 'description');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemAddAlbum'),
				  'status' => array(),
				  'error' => array('form.error.pathComponent.missing')),
			    $results);
    }
    
    function testAddAlbumInvalidName() {
	global $gallery;

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_parentAlbum->getId());
	GalleryUtilities::putRequestVariable('form.action.create', 1);
	GalleryUtilities::putRequestVariable('form.pathComponent', 'Invalid!/\Chars');
	GalleryUtilities::putRequestVariable('form.title', 'title');
	GalleryUtilities::putRequestVariable('form.summary', 'summary');
	GalleryUtilities::putRequestVariable('form.keywords', 'keywords');
	GalleryUtilities::putRequestVariable('form.description', 'description');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemAddAlbum'),
				  'status' => array(),
				  'error' => array('form.error.pathComponent.invalid')),
			    $results);
    }

    function _getChildId() {
	list ($ret, $ids) = GalleryChildEntityHelper::fetchChildIds($this->_parentAlbum->getId());
	$this->assertEquals(1, sizeof($ids));
	return $ids[0];
    }
}
?>
