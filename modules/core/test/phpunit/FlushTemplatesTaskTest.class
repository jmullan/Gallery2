<?php
/*
 * $RCSfile: FlushTemplatesTaskTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.4 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

GalleryCoreApi::relativeRequireOnce('modules/core/classes/FlushTemplatesTask.class');

/**
 * Test the FlushTemplates maintenance task functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class FlushTemplatesTaskTest extends GalleryTestCase {

    function FlushTemplatesTaskTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function testRunSuccess() {
	global $gallery;

	list ($ret, $dirPerms) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'permissions.directory');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$gallery->setConfig('data.smarty.templates_c', '/templates_c');
	$mockPlatform = new FlushTemplatesTaskTestPlatform(array());
	$gallery->setPlatform($mockPlatform);
	$task = new FlushTemplatesTask();

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'core');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $success, $details) = $task->run();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert($success, 'should have succeeded');
	$this->assertEquals(
	    array($module->translate('Template cache deleted successfully')), $details);
	$this->assertEquals(array('file_exists(/templates_c)',
				  'recursiveRmdir(/templates_c)'),
			    $mockPlatform->getCalls());
    }

    function testRunFail() {
	global $gallery;

	$gallery->setConfig('data.smarty.templates_c', '/templates_c');
	$mockPlatform = new FlushTemplatesTaskTestPlatform(array('recursiveRmdir(/templates_c)'));
	$gallery->setPlatform($mockPlatform);
	$task = new FlushTemplatesTask();

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'core');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $success, $details) = $task->run();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!$success, 'should have failed');
	$this->assertEquals(array($module->translate('Unable to delete directory: /templates_c')),
			    $details);
	$this->assertEquals(array('file_exists(/templates_c)',
				  'recursiveRmdir(/templates_c)'),
			    $mockPlatform->getCalls());
    }
}

class FlushTemplatesTaskTestPlatform {
    function FlushTemplatesTaskTestPlatform($failedCalls) {
	GalleryUtilities::putRequestVariable('calls', array());
	$this->_failedCalls = $failedCalls;
    }

    function _addCall($call) {
	$calls = GalleryUtilities::getRequestVariables('calls');
	$calls[] = $call;
	GalleryUtilities::putRequestVariable('calls', $calls);

	return !in_array($call, $this->_failedCalls);
    }

    function getCalls() {
	return GalleryUtilities::getRequestVariables('calls');
    }

    function file_exists($dir) {
	return $this->_addCall("file_exists($dir)");
    }

    function mkdir($dir, $stringPerms='123') {
	return $this->_addCall("mkdir($dir,$stringPerms)");
    }

    function recursiveRmdir($dir) {
	return $this->_addCall("recursiveRmdir($dir)");
    }
}
?>
