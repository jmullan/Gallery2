<?php
/*
 * $RCSfile: UrlGeneratorTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.74 $ $Date: 2006/03/19 06:08:15 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test UrlGenerator functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class UrlGeneratorTest extends GalleryTestCase {
    var $_urlGenerator;
    var $_savedGet;

    function UrlGeneratorTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();
	$_SERVER['REQUEST_URI'] = '/gallery2/phpunit_test.php?foo=bar';
	$_SERVER['HTTP_HOST'] = 'example.com';
	$_SERVER['SERVER_PORT'] = 80;

	/* PHP/CGI sets PATH_INFO, but we don't want that for our tests */
	unset($_SERVER['PATH_INFO']);

	/* For the cookie.path */
	$ret = $this->_markPluginParametersForCleanup('module', 'core');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$this->_urlGenerator = new GalleryUrlGenerator();
	$ret = $this->_urlGenerator->init('phpunit_test.php');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$this->_origEmbed = null;
	if (GalleryDataCache::containsKey('G2_EMBED')) {
	    $this->_origEmbed = GalleryDataCache::get('G2_EMBED');
	}
    }

    function tearDown() {
	if ($this->_origEmbed) {
	    GalleryDataCache::put('G2_EMBED', $this->_origEmbed, true);
	} else {
	    GalleryDataCache::remove('G2_EMBED');
	    $this->assert(!GalleryDataCache::containsKey('G2_EMBED'), 'Could not remove a GDC var');
	}

	parent::tearDown();
    }

    /*
     * Initiates a new url generator
     */
    function _initNewUrlGenerator($baseUri=null, $g2Uri=null, $embedSessionString=null) {
	$this->_urlGenerator = new GalleryUrlGenerator();
	$baseUri = !isset($baseUri) ? 'phpunit_test.php' : $baseUri;
	return $this->_urlGenerator->init($baseUri, $g2Uri, $embedSessionString);
    }

    /*
     * Set the cookie path to a new value / or make sure it isn't set. Then init the session
     * again, since the session and the Url Generator are both involved in this matter.
     */
    function _prepareGenerateUrl($cookiePath, $baseUri, $g2Uri, $embedSessionString=null) {
	global $gallery;

	/*
	 * Configure the cookie path:
	 *  - if empty (=not set): g2 should append the session id to embedded downloaditem requests
	 *  - else, no session id has to be appended
	 */
	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'cookie.path', $cookiePath);
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}
	/* Check if the correct value was stored */
	list ($ret, $realValue) = GalleryCoreApi::getPluginParameter('module', 'core',
								     'cookie.path');
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}
	$this->assertEquals($cookiePath, $realValue, 'Could not reset cookie path');

	/* Let the url generator know of the new cookie.path value */
	$this->_urlGenerator = new GalleryUrlGenerator();
	$ret = $this->_urlGenerator->init($baseUri, $g2Uri, $embedSessionString);
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}
	$gallery->setUrlGenerator($this->_urlGenerator);
	/* Let the session know of the new cookie.path value */
	$session = new GallerySession();
	$ret = $session->init();
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}
	$session->put('foo', 1);
	$ret = $session->start();
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	$gallery->_session = $session;

	$params['a'] = 123;
	$params['b'] = 'bBbB';
	$params['c'] = serialize(array(1, 2, 3));
	$params['d'] = array('<', 2);

	$values[] = GalleryUtilities::prefixFormVariable('a') . '=' . urlencode('123');
	$values[] = GalleryUtilities::prefixFormVariable('b') . '=' . urlencode('bBbB');
	$values[] = GalleryUtilities::prefixFormVariable('c') . '=' .
	    urlencode(serialize(array(1, 2, 3)));
	$values[] = GalleryUtilities::prefixFormVariable('d[0]') . '=' . urlencode('<');
	$values[] = GalleryUtilities::prefixFormVariable('d[1]') . '=' . urlencode('2');

	return array(null, $params, $values);
    }

    function testGenerateUrl() {
	global $gallery;

	/* Make sure the cookie path is not set etc. */
	list ($ret, $params, $values) = $this->_prepareGenerateUrl('', 'phpunit_test.php', null);
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$session =& $gallery->getSession();

	$actual = $this->_urlGenerator->generateUrl($params);

	/* If we're not using cookies, expect there to be an additional value */
	$session =& $gallery->getSession();
	if (!$session->isUsingCookies()) {
	    $values[] = GalleryUtilities::prefixFormVariable($session->getKey()) .
		'=' . urlencode($session->getId());
	}
	$expected = 'phpunit_test.php?' . join('&amp;', $values);

	$this->assertEquals($expected, $actual);
    }

    function testGenerateUrlEmbeddedFullBaseUri() {
	/* Simulate embbeded with full url as embedUri */
	$_SERVER['REQUEST_URI'] = '/cms/otherpage?foo=bar';
	GalleryDataCache::put( 'G2_EMBED', 1, true);
	list ($ret, $params, $values) =
	    $this->_prepareGenerateUrl('',
				       'http://example.com/cms/phpunit_test.php?module=gallery2',
				       '/gallery2/');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('/cms/phpunit_test.php?module=gallery2&amp;' .
	    implode('&amp;', $values), $this->_urlGenerator->generateUrl($params),
	    'embedded 1');
    }

    function testGenerateUrlEmbeddedPathBaseUri() {
	/* Simulate embedded, only path + uri */
	$_SERVER['REQUEST_URI'] = '/cms/phpunit_test.php?module=gallery2&foo=bar';
	GalleryDataCache::put('G2_EMBED', 1, true);

	list ($ret, $params, $values) =
	    $this->_prepareGenerateUrl('', '/cms/phpunit_test.php?module=gallery2', '/gallery2/');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('phpunit_test.php?module=gallery2&amp;' .
	    implode('&amp;', $values), $this->_urlGenerator->generateUrl($params),
	    'embedded 2');
    }

    function testGenerateUrlCookielessEmbedded() {
	global $gallery;

	/* Simulate cookieless embedded */
	$_SERVER['REQUEST_URI'] = '/cms/phpunit_test.php?module=gallery2&foo=bar';
	GalleryDataCache::put( 'G2_EMBED', 1, true);
	list ($ret, $params, $values) =
	    $this->_prepareGenerateUrl('', '/cms/phpunit_test.php?module=gallery2',
				       '/gallery2/', 'CMSSID=123456');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$session =& $gallery->getSession();

	$this->assertEquals('phpunit_test.php?module=gallery2&amp;' .
			    implode('&amp;', $values) . '&amp;CMSSID=123456',
			    $this->_urlGenerator->generateUrl($params,
							      array('forceSessionId' => true)),
			    'cookieless embedded');

	$this->assertEquals('/gallery2/main.php?g2_view=' .
			    urlencode('core.DownloadItem') . '&amp;g2_itemId=12345&amp;' .
			    GalleryUtilities::prefixFormVariable($session->getKey()) . '=' .
			    urlencode($session->getId()),
			    $this->_urlGenerator->generateUrl(array('view' => 'core.DownloadItem',
								    'itemId' => 12345),
							      array('forceSessionId' => true)),
			    'core.DownloadItem always direct-g2 url, even when embedded');

	$this->assertEquals('/gallery2/main.php?g2_view=' .
			    urlencode('test.View') . '&amp;g2_param=12345',
			    $this->_urlGenerator->generateUrl(
				array('view' => 'test.View', 'param' => 12345),
				array('forceDirect' => true,
				      'forceSessionId' => false)),
			    'force direct-g2 url, even when embedded');
    }

    function testGenerateUrlForView() {
	$this->assertEquals('phpunit_test.php?g2_view=' . urlencode('test.View') .
			    '&amp;g2_param=12345',
			    $this->_urlGenerator->generateUrl(
				array('view' => 'test.View', 'param' => 12345)));
    }

    function testGenerateUrlForController() {
	$this->assertEquals('phpunit_test.php?g2_controller=' . urlencode('test.Controller') .
			    '&amp;g2_param=12345',
			    $this->_urlGenerator->generateUrl(
				array('controller' => 'test.Controller', 'param' => 12345)));
    }

    function testGenerateUrlEmbeddedDownloadItemCookiePathNotSet() {
	global $gallery;

	/*
	 * DownloadItem requests in embedded G2 should have the GALLERYSID in the URL if the cookie
	 * path is not defined, independent of cookieless browsing
	 */
	GalleryDataCache::put('G2_EMBED', 1, true);
	$_SERVER['REQUEST_URI'] = '/cms/otherpage/?foo=bar';
	list ($ret) =
	    $this->_prepareGenerateUrl('', '/cms/phpunit_test.php?module=gallery2', '/gallery2/');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$session =& $gallery->getSession();

	/* Do the actual test */
	$this->assertEquals('/gallery2/main.php?g2_view=' .
			    urlencode('core.DownloadItem') . '&amp;g2_itemId=12345&amp;' .
			    GalleryUtilities::prefixFormVariable($session->getKey()) . '=' .
			    urlencode($session->getId()),
			    $this->_urlGenerator->generateUrl(array('view' => 'core.DownloadItem',
								    'itemId' => 12345)),
			    'embedded G2 DownloadItem URL without fixed cookie path test failed');

	/*
	 * All embedded G2 requests that do not go to the G2 base directly shouldn't have the
	 * GALLERYSID in the URLs
	 */
	$this->assertEquals('/cms/phpunit_test.php?module=gallery2&amp;g2_itemId=12345',
	    $this->_urlGenerator->generateUrl(array('view' => 'core.ShowItem', 'itemId' => 12345)),
	    'embedded G2 ShowItem URL without fixed cookie path test failed');
    }

    function testGenerateUrlInitWithForceEmptyFilePart() {
	global $gallery;

	/* Set g2Uri file to empty string with special override character '|' */
	GalleryDataCache::put('G2_EMBED', 1, true);
	$_SERVER['REQUEST_URI'] = '/cms/otherpage/?foo=bar';
	list ($ret) = $this->_prepareGenerateUrl('', '/cms/phpunit_test.php?module=gallery2',
							 '/gallery2/|');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$session =& $gallery->getSession();

	/* Do the actual test */
	$this->assertEquals('/gallery2/?g2_view=' .
			    urlencode('core.DownloadItem') . '&amp;g2_itemId=12345&amp;' .
			    GalleryUtilities::prefixFormVariable($session->getKey()) . '=' .
			    urlencode($session->getId()),
			    $this->_urlGenerator->generateUrl(array('view' => 'core.DownloadItem',
							     'itemId' => 12345)),
			    'embedded G2 DownloadItem URL without fixed cookie path test failed');
    }

    function testGenerateUrlEmbeddedWithCookiePathSet() {
	global $gallery;

	/* Now test the same with fixed cookie path */
	GalleryDataCache::put('G2_EMBED', 1, true);
	$_SERVER['REQUEST_URI'] = '/cms/otherpage?foo=bar';
	list ($ret) = $this->_prepareGenerateUrl('/', '/cms/phpunit_test.php?module=gallery2',
						 '/gallery2/main.php');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Do the actual test */
	$this->assertEquals('/gallery2/main.php?g2_view=' .
			    urlencode('core.DownloadItem') . '&amp;g2_itemId=12345',
			    $this->_urlGenerator->generateUrl(array('view' => 'core.DownloadItem',
								    'itemId' => 12345)),
			    'embedded G2 DownloadItem URL with fixed cookie path test failed');

	/* All other embedded G2 requests should still not have an appended SID */
	$this->assertEquals('/cms/phpunit_test.php?module=gallery2&amp;g2_itemId=12345',
			    $this->_urlGenerator->generateUrl(array('view' => 'core.ShowItem',
								    'itemId' => 12345)),
			    'embedded G2 ShowItem URL without fixed cookie path test failed');
    }

    function testGenerateUrlWithoutSession() {
	global $gallery;
	$backup = $gallery->_session;
	$gallery->_session = null;

	$urlGenerator = new GalleryUrlGenerator();
	$ret = $urlGenerator->init('phpunit_test.php');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('phpunit_test.php?g2_view=foo',
			    $urlGenerator->generateUrl(array('view' => 'foo')));
	$gallery->_session = $backup;
    }

    function testGenerateHref() {
	global $gallery;
	$session =& $gallery->getSession();

	/* href URLs default to no sessionid */
	$this->assertEquals('test/test.css',
	    $this->_urlGenerator->generateUrl(array('href' => 'test/test.css')),
	    'relative');

	/* Absolute URL */
	$this->assertEquals('http://sf.net/',
	    $this->_urlGenerator->generateUrl(array('href' => 'http://sf.net/')),
	    'absolute');

	/* Absolute URL path */
	$this->assertEquals('/cms/test/test.css',
	    $this->_urlGenerator->generateUrl(array('href' => '/cms/test/test.css')),
	    'absolute path');

	/* Simulate embedded */
	$_SERVER['REQUEST_URI'] = '/phpunit_test.php?module=gallery2&foo=bar';
	$urlGenerator = new GalleryUrlGenerator();
	$ret = $urlGenerator->init('/phpunit_test.php?module=gallery2', '/gallery2/');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('gallery2/test/test.css',
	    $urlGenerator->generateUrl(array('href' => 'test/test.css')),
	    'relative embedded');

	/* Embedded, trailing slash omitted */
	$_SERVER['REQUEST_URI'] = '/cms/phpunit_test.php?module=gallery2&foo=bar';
	$urlGenerator = new GalleryUrlGenerator();
	$ret = $urlGenerator->init('/cms/phpunit_test.php?module=gallery2', '/gallery2');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('/test/test.css',
	    $urlGenerator->generateUrl(array('href' => 'test/test.css')),
	    'relative embedded, no trailing slash');
    }

    function testGenerateUrlNoEntities() {
	$values[] = GalleryUtilities::prefixFormVariable('a') . '=' . urlencode('123');
	$values[] = GalleryUtilities::prefixFormVariable('b') . '=' . urlencode('ab&amp;c');

	$this->assertEquals(
	    'phpunit_test.php?' . implode('&', $values),
	    $this->_urlGenerator->generateUrl(array('a' => 123, 'b' => 'ab&amp;c'),
					      array('htmlEntities' => false)), 'url');

	$this->assertEquals(
	    'test/blah.php?' . implode('&', $values),
	    $this->_urlGenerator->generateUrl(array('href' => 'test/blah.php',
						    'a' => 123, 'b' => 'ab&amp;c'),
					      array('htmlEntities' => false)), 'href');
    }

    function testGenerateReturnUrl() {
	$_SERVER['REQUEST_URI'] = '/gallery2/phpunit_test.php?' .
	    GalleryUtilities::prefixFormVariable('view') . '=foo&' .
	    GalleryUtilities::prefixFormVariable('a') . '=123';
	$_GET[GalleryUtilities::prefixFormVariable('view')] = 'foo';
	$_GET[GalleryUtilities::prefixFormVariable('a')] = '123';

	$params['a+'] = 456;
	$params['view'] = 'bar';
	$params['return'] = 1;
	$actual = $this->_urlGenerator->generateUrl($params, array('forceSessionId' => false));

	$params['return'] =
	    GalleryUrlGenerator::appendParamsToUrl('phpunit_test.php',
						   array('view' => 'foo', 'a' => '123'));
	/*
	 * Note: encoded 'return' url should separate request variables with '%26'
	 * and not '%26amp%3D' because sending this back to G2 would yield &amp;amp;
	 */
	$params['return'] = str_replace('&amp;', '&', $params['return']);
	foreach ($params as $key => $value) {
	    $values[] = GalleryUtilities::prefixFormVariable(urlencode($key))
		      . '=' . urlencode($value);
	}
	$expected = 'phpunit_test.php?' . implode('&amp;', $values);
	$this->assertEquals($expected, $actual);
    }

    function testGenerateUrlWithEmbeddedSessionId() {
	global $gallery;

	$params['a'] = 123;
	$params['b'] = 'bBbB';
	$params['c'] = serialize(array(1, 2, 3));
	$actual = $this->_urlGenerator->generateUrl($params, array('forceSessionId' => true));

	foreach ($params as $key => $value) {
	    $values[] = GalleryUtilities::prefixFormVariable($key) . '=' . urlencode($value);
	}

	/* No matter what, expect the session id */
	$session =& $gallery->getSession();
	$values[] = GalleryUtilities::prefixFormVariable($session->getKey()) .
	    '=' . urlencode($session->getId());
	$expected = 'phpunit_test.php?' . join('&amp;', $values);
	$this->assertEquals($expected, $actual);
    }

    function testGenerateUrlWithoutEmbeddedSessionId() {
	$params['a'] = 123;
	$params['b'] = 'bBbB';
	$params['c'] = serialize(array(1, 2, 3));
	$actual = $this->_urlGenerator->generateUrl($params, array('forceSessionId' => false));

	foreach ($params as $key => $value) {
	    $values[] = GalleryUtilities::prefixFormVariable($key) . '=' . urlencode($value);
	}

	/* No matter what, expect no session id */
	$expected = 'phpunit_test.php?' . join('&amp;', $values);
	$this->assertEquals($expected, $actual);
    }

    function testGenerateUrlInMultisite() {
	global $gallery;
	/* Simulate multisite (url for codebase) */
	$gallery->setConfig('galleryBaseUrl', 'test://codebase/somepath/');

	/* Views should go to the multisite */
	$this->assertEquals('phpunit_test.php?g2_view=' . urlencode('test.View') .
			    '&amp;g2_param=12345',
			    $this->_urlGenerator->generateUrl(
				array('view' => 'test.View', 'param' => 12345)));

	$this->assertEquals('phpunit_test.php?g2_view=' . urlencode('core.DownloadItem') .
			    '&amp;g2_itemId=99',
			    $this->_urlGenerator->generateUrl(
				array('view' => 'core.DownloadItem', 'itemId' => 99)));

	/* Controllers too */
	$this->assertEquals('phpunit_test.php?g2_controller=' . urlencode('test.Controller') .
			    '&amp;g2_param=12345',
			    $this->_urlGenerator->generateUrl(
				array('controller' => 'test.Controller', 'param' => 12345)));

	/* Hrefs should go to the multisite codebase */
	$this->assertEquals('test://codebase/somepath/theme/test_3745/images/foo.jpg',
			    $this->_urlGenerator->generateUrl(
				array('href' => 'theme/test_3745/images/foo.jpg')));

	/* URL with baseUrl shouldn't be changed */
	$this->assertEquals('fix_base_url/foo.php?g2_foo=bar',
			    $this->_urlGenerator->generateUrl(
				array('foo' => 'bar'), array('baseUrl' => 'fix_base_url/foo.php')));
    }

    function testGenerateUrlEmbeddedMultisite() {
	global $gallery;
	/* Simulate multisite (url for codebase) */
	$gallery->setConfig('galleryBaseUrl', 'test://codebase/somepath/');
	/* Simulate embedded */
	GalleryDataCache::put('G2_EMBED', 1, true);
	$_SERVER['REQUEST_URI'] = '/cms/otherpage?foo=bar';
	list ($ret) = $this->_prepareGenerateUrl('/', '/cms/phpunit_test.php?module=gallery2',
						 '/gallery2/main.php');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Views should go to the embedded multisite */
	$this->assertEquals('/cms/phpunit_test.php?module=gallery2&amp;g2_view=' .
			    urlencode('test.View') . '&amp;g2_param=12345',
			    $this->_urlGenerator->generateUrl(
				array('view' => 'test.View', 'param' => 12345)));

	/* Download view should go to direct multisite */
	$this->assertEquals('/gallery2/main.php?g2_view=' . urlencode('core.DownloadItem') .
			    '&amp;g2_itemId=99',
			    $this->_urlGenerator->generateUrl(
				array('view' => 'core.DownloadItem', 'itemId' => 99)));

	/* Controllers should go to the embedded multisite */
	$this->assertEquals('/cms/phpunit_test.php?module=gallery2&amp;g2_controller=' .
			    urlencode('test.Controller') . '&amp;g2_param=12345',
			    $this->_urlGenerator->generateUrl(
				array('controller' => 'test.Controller', 'param' => 12345)));

	/* Hrefs should go to the multisite codebase */
	$this->assertEquals('test://codebase/somepath/theme/test_3745/images/foo.jpg',
			    $this->_urlGenerator->generateUrl(
				array('href' => 'theme/test_3745/images/foo.jpg')));

	/* URL with baseUrl shouldn't be changed */
	$this->assertEquals('fix_base_url/foo.php?g2_foo=bar',
			    $this->_urlGenerator->generateUrl(
				array('foo' => 'bar'), array('baseUrl' => 'fix_base_url/foo.php')));
    }

    function testGetCurrentRequestUri() {
	$expected = '/gallery2/phpunit_test.php?foo=bar';
	$this->assertEquals($expected, $this->_urlGenerator->getCurrentRequestUri());

	/* IIS.. REQUEST_URI is just empty; but has SCRIPT_NAME.. */
	$_SERVER['REQUEST_URI'] = '';
	$_SERVER['SCRIPT_NAME'] = '/gallery2/phpunit_test.php';
	$_SERVER['QUERY_STRING'] = 'foo=bar';
	$this->assertEquals($expected, $this->_urlGenerator->getCurrentRequestUri(), 'iis');

	/* Sometimes IIS has PATH_INFO value the same as SCRIPT_NAME.. */
	$_SERVER['PATH_INFO'] = $_SERVER['SCRIPT_NAME'];
	$this->assertEquals($expected, $this->_urlGenerator->getCurrentRequestUri(),
			    'iis path_info');
    }

    function testGetCurrentUrl() {
	$expected = 'http://example.com/gallery2/phpunit_test.php?foo=bar';
	$this->assertEquals($expected, $this->_urlGenerator->getCurrentUrl());

	/* IIS.. no REQUEST_URI; has SCRIPT_NAME.. */
	unset($_SERVER['REQUEST_URI']);
	$_SERVER['SCRIPT_NAME'] = '/gallery2/phpunit_test.php';
	$_SERVER['QUERY_STRING'] = 'foo=bar';
	unset($this->_urlGenerator->_currentUrl);
	$this->assertEquals($expected, $this->_urlGenerator->getCurrentUrl(), 'iis');

	/* Sometimes IIS has PATH_INFO value the same as SCRIPT_NAME.. */
	$_SERVER['PATH_INFO'] = $_SERVER['SCRIPT_NAME'];
	unset($this->_urlGenerator->_currentUrl);
	$this->assertEquals($expected, $this->_urlGenerator->getCurrentUrl(), 'iis path_info');
    }

    function testGetCurrentUrlDir() {
	$this->assertEquals('http://example.com/gallery2/',
			    $this->_urlGenerator->getCurrentUrlDir(), 'basic');

	/* Simulate embedded.. */
	$_SERVER['REQUEST_URI'] = '/phpunit_test.php?module=gallery2&foo=bar';
	$urlGenerator = new GalleryUrlGenerator();
	$ret = $urlGenerator->init('/phpunit_test.php?module=gallery2','/gallery2/');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('http://example.com/', $urlGenerator->getCurrentUrlDir(), 'embedded');
	$this->assertEquals('http://example.com/gallery2/', $urlGenerator->getCurrentUrlDir(true),
			    'embedded forceDirect');

	$_SERVER['REQUEST_URI'] = '/cms/phpunit_test.php?module=gallery2&foo=bar';
	$urlGenerator = new GalleryUrlGenerator();
	$ret = $urlGenerator->init('/cms/phpunit_test.php?module=gallery2', '/gallery2/');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('http://example.com/cms/', $urlGenerator->getCurrentUrlDir(),
			    'embedded, different path');
	$this->assertEquals('http://example.com/gallery2/', $urlGenerator->getCurrentUrlDir(true),
			    'embedded, different path, forceDirect');
    }

    function testGetCurrentUrlDirBaseFileNotFound() {
	$_SERVER['REQUEST_URI'] = '/somedir/?filter=foo';
	$urlGenerator = new GalleryUrlGenerator();
	$ret = $urlGenerator->init('index.php');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('http://example.com/somedir/', $urlGenerator->getCurrentUrlDir());
    }

    function testGetHostName() {
	$_SERVER['HTTP_HOST'] = 'http_host';
	if ($ret = $this->_initNewUrlGenerator()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('http_host', $this->_urlGenerator->getHostName());

	$_SERVER['HTTP_X_FORWARDED_SERVER'] = 'http_x_forwarded_server';
	if ($ret = $this->_initNewUrlGenerator()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('http_x_forwarded_server', $this->_urlGenerator->getHostName());
    }

    function testGetHostNameOverride() {
	$_SERVER['HTTP_HOST'] = 'http_host';
	$_SERVER['HTTP_X_FORWARDED_SERVER'] = 'http_host';

	if ($ret = $this->_initNewUrlGenerator('override/')) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('override', $this->_urlGenerator->getHostName());
	$this->assertEquals('override', $this->_urlGenerator->getHostName(false));
	$this->assertEquals('override', $this->_urlGenerator->getHostName(true));
    }

    function testGetHostNameEmbeddedOverride() {
	$_SERVER['HTTP_HOST'] = 'http_host';
	$_SERVER['HTTP_X_FORWARDED_SERVER'] = 'http_host';

	if ($ret = $this->_initNewUrlGenerator('embedded_override/', 'http://direct_override/')) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('embedded_override', $this->_urlGenerator->getHostName());
	$this->assertEquals('embedded_override', $this->_urlGenerator->getHostName(false));
	$this->assertEquals('direct_override', $this->_urlGenerator->getHostName(true));
    }

    /**
     * Basic tests
     */
    function testMakeUrl1() {
	$this->assertEquals('http://example.com/test/path.php',
			    $this->_urlGenerator->makeUrl('/test/path.php'), 'with slash');

	$this->assertEquals('http://example.com/test/test.jpg',
			    $this->_urlGenerator->makeUrl('test/test.jpg'), 'no slash');

	$this->assertEquals('http://example.com/',
			    $this->_urlGenerator->makeUrl(''), 'empty');
    }

    /**
     * Test non-standard ports go in both HTTP_HOST and SERVER_PORT (also tests ::init)
     */
    function testMakeUrl2() {
	$_SERVER['HTTP_HOST'] = 'example.com:8080';
	$_SERVER['SERVER_PORT'] = 8080;
	if ($ret = $this->_initNewUrlGenerator()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('http://example.com:8080/test.php?fun=yes',
			    $this->_urlGenerator->makeUrl('/test.php?fun=yes'));
    }

    /**
     * Test browsing to https://example.com
     */
    function testMakeUrl3() {
	$_SERVER['HTTP_HOST'] = 'example.com';
	$_SERVER['SERVER_PORT'] = 443;
	$_SERVER['HTTPS'] = 'on';
	if ($ret = $this->_initNewUrlGenerator()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('https://example.com/test/go.php?a=one&amp;b=two',
			    $this->_urlGenerator->makeUrl('test/go.php?a=one&amp;b=two'));
    }

    /**
     * Test non-standard port only in SERVER_PORT.  This is the case where the
     * browser went to http://example.com and got internally redirected to
     * something like http://internal.server:82/.  We want to serve up a new
     * url that the browser can handle.
     */
    function testMakeUrl4() {
	$_SERVER['HTTP_HOST'] = 'example.com';
	$_SERVER['SERVER_PORT'] = 82;
	if ($ret = $this->_initNewUrlGenerator()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('http://example.com/test.php?fun=yes',
			    $this->_urlGenerator->makeUrl('/test.php?fun=yes'));
    }

    /* Test host and protocol override */
    function testMakeUrl5() {
	$this->_urlGenerator->_currentBaseHost[0] = 'http://photos.example.com';
	$this->assertEquals('http://photos.example.com/test.php?fun=yes',
			    $this->_urlGenerator->makeUrl('/test.php?fun=yes'), 'override');
	$this->_urlGenerator->_currentBaseHost[0] = 'foo';
	$this->_urlGenerator->_currentBaseHost[1] = 'http://photos.example.com';
	$this->assertEquals('http://photos.example.com/test.php?fun=yes',
			    $this->_urlGenerator->makeUrl('/test.php?fun=yes', true),
			    'override with forceG2Base');
	$this->_urlGenerator->_currentBaseHost[0] = 'https://photos.example.com';
	$this->assertEquals('https://photos.example.com/test.php?fun=yes',
			    $this->_urlGenerator->makeUrl('/test.php?fun=yes'),
			    'host and protocol override');
	$this->assertEquals('http://photos.example.com/test.php?fun=yes',
			    $this->_urlGenerator->makeUrl('/test.php?fun=yes', true),
			    'host and protocol override with forceG2Base');
    }

    /**
     * Test non-standard ports go in both HTTP_HOST and SERVER_PORT
     */
    function testInit() {
	$_SERVER['HTTP_HOST'] = 'example.com:8080';
	$_SERVER['SERVER_PORT'] = 8080;
	if ($ret = $this->_initNewUrlGenerator()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('http', $this->_urlGenerator->_protocol[0], 'protocol');
	$this->assertEquals('http', $this->_urlGenerator->_protocol[1], 'forceDirect protocol');
	$this->assertEquals('example.com:8080', $this->_urlGenerator->_host[0], 'host');
	$this->assertEquals('example.com:8080', $this->_urlGenerator->_host[1], 'forceDirect host');
	$this->assertEquals('http://example.com:8080', $this->_urlGenerator->_currentBaseHost[0],
			    'currentBaseHost');
	$this->assertEquals('http://example.com:8080', $this->_urlGenerator->_currentBaseHost[1],
			    'forceDirect currentBaseHost');
    }

    function testInitDefault() {
	unset($_SERVER['HTTPS']);
	$_SERVER['HTTP_X_FORWARDED_SERVER'] = 'http_x_forwarded_server';
	$uG = new GalleryUrlGenerator();
	if ($ret = $uG->init()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	foreach (array(0, 1) as $i) {
	    $this->assertEquals(GALLERY_MAIN_PHP, $uG->_file[$i], "file[$i]");
	    $this->assert(empty($uG->_path[$i]), "path[$i]");
	    $this->assertEquals('http', $uG->_protocol[$i], "protocol[$i]");
	    $this->assertEquals('http_x_forwarded_server', $uG->_host[$i], "host[$i]");
	    $this->assertEquals('http://http_x_forwarded_server', $uG->_currentBaseHost[$i],
				"currentBaseHost[$i]");
	}
	$this->assertEquals(null, $uG->_embedSessionString, 'embedSessionString');
    }

    function testInitOverride() {
	unset($_SERVER['HTTPS']);
	$_SERVER['HTTP_X_FORWARDED_SERVER'] = 'http_x_forwarded_server';
	$uG = new GalleryUrlGenerator();
	if ($ret = $uG->init('https://override:8080/new_path/index.php?foo=bar')) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	foreach (array(0, 1) as $i) {
	    $this->assertEquals('index.php?foo=bar', $uG->_file[$i], "file[$i]");
	    $this->assertEquals('/new_path/', $uG->_path[$i], "path[$i]");
	    $this->assertEquals('https', $uG->_protocol[$i], "protocol[$i]");
	    $this->assertEquals('override:8080', $uG->_host[$i], "host[$i]");
	    $this->assertEquals('https://override:8080', $uG->_currentBaseHost[$i],
				"currentBaseHost[$i]");
	}
    }

    function testInitEmbedded() {
	$_SERVER['HTTPS'] = 'on';
	$_SERVER['HTTP_X_FORWARDED_SERVER'] = 'http_x_forwarded_server';
	$uG = new GalleryUrlGenerator();
	if ($ret = $uG->init('/cms/index.php?foo=bar', 'http://direct/gallery2/', 'session=123')) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('index.php?foo=bar', $uG->_file[0], 'file[0]');
	$this->assertEquals(GALLERY_MAIN_PHP, $uG->_file[1], 'file[1]');
	$this->assertEquals('/cms/', $uG->_path[0], 'path[0]');
	$this->assertEquals('/gallery2/', $uG->_path[1], 'path[1]');
	$this->assertEquals('https', $uG->_protocol[0], 'protocol[0]');
	$this->assertEquals('http', $uG->_protocol[1], 'protocol[1]');
	$this->assertEquals('http_x_forwarded_server', $uG->_host[0], 'host[0]');
	$this->assertEquals('direct', $uG->_host[1], 'host[1]');
	$this->assertEquals('https://http_x_forwarded_server', $uG->_currentBaseHost[0],
				'currentBaseHost[0]');
	$this->assertEquals('http://direct', $uG->_currentBaseHost[1],
				'currentBaseHost[1]');
    }

    function testBaseFileWithQMark() {
	global $gallery;
	$urlGenerator = new GalleryUrlGenerator();
	$ret = $urlGenerator->init('phpunit_test.php?test=on');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$_SERVER['REQUEST_URI'] = '/gallery2/phpunit_test.php?test=on&foo=bar';

	$params['a'] = 123;
	$params['b'] = 'bBbB';
	$params['c'] = serialize(array(1, 2, 3));
	$actual = $urlGenerator->generateUrl($params);

	foreach ($params as $key => $value) {
	    $values[] = GalleryUtilities::prefixFormVariable($key) . '=' . urlencode($value);
	}

	/* If we're not using cookies, expect there to be an additional value */
	$session =& $gallery->getSession();
	if (!$session->isUsingCookies()) {
	    $values[] = GalleryUtilities::prefixFormVariable($session->getKey()) .
		'=' . urlencode($session->getId());
	}
	$expected = 'phpunit_test.php?test=on&amp;' .
	    implode('&amp;', $values);

	$this->assertEquals($expected, $actual);
    }

    function testGetNavigationReturnUrl() {
	$_GET['g2_foo'] = 'bar';
	$_GET['g2_return'] = 'http://blabla';
	$_GET['g2_returnName'] = 'name';
	$_GET['g2_navId'] = 'navId';
	$_GET['g2_fromNavId'] = 'fromNavId';
	$expected = 'phpunit_test.php?g2_foo=bar';

	/* Normal behaviour (php+apache) */
	$this->assertEquals($expected, $this->_urlGenerator->getNavigationReturnUrl());

	/* IIS: no REQUEST_URI or PATH_INFO, just SCRIPT_NAME */
	unset($_SERVER['REQUEST_URI']);
	$_SERVER['SCRIPT_NAME'] = '/gallery2/phpunit_test.php';
	unset($this->_urlGenerator->_currentUrl);
	$this->assertEquals($expected, $this->_urlGenerator->getNavigationReturnUrl(), 'iis');

	/* Sometimes IIS has PATH_INFO value the same as SCRIPT_NAME.. */
	$_SERVER['PATH_INFO'] = $_SERVER['SCRIPT_NAME'];
	unset($this->_urlGenerator->_currentUrl);
	$this->assertEquals($expected, $this->_urlGenerator->getNavigationReturnUrl(),
			    'iis path_info');
    }

    function testGetNavigationReturnUrlNoCookies() {
	global $gallery;

	/* Session without cookies */
	$session =& $gallery->getSession();
	$savedIsUsingCookies = $session->_isUsingCookies;
	$session->_isUsingCookies = false;

	$sessionParam =
	    GalleryUtilities::prefixFormVariable($session->getKey()) . '=' . $session->getId();

	/* No other params in URL */
	$_SERVER['REQUEST_URI'] = '/gallery2/phpunit_test.php';
	$_GET = array();
	$expected = 'phpunit_test.php?' . $sessionParam;
	$this->assertEquals($expected, $this->_urlGenerator->getNavigationReturnUrl(),
			    'no other params');

	/* With other params in URL */
	$_SERVER['REQUEST_URI'] = '/gallery2/phpunit_test.php?foo=bar';
	$_GET['g2_foo'] = 'bar';
	unset($this->_urlGenerator->_currentUrl);
	$expected = 'phpunit_test.php?g2_foo=bar&amp;' . $sessionParam;
	$this->assertEquals($expected, $this->_urlGenerator->getNavigationReturnUrl(),
			    'with other params');

	/* With session already in URL */
	$_GET[GalleryUtilities::prefixFormVariable($session->getKey())] = $session->getId();
	unset($this->_urlGenerator->_currentUrl);
	$expected = 'phpunit_test.php?g2_foo=bar&amp;' . $sessionParam;
	$this->assertEquals($expected, $this->_urlGenerator->getNavigationReturnUrl(),
			    'with session already in URL');

	$session->_isUsingCookies = $savedIsUsingCookies;
    }

    function testGetNavigationReturnUrlArrayParam() {
	$_GET['g2_foo'] = array('test' => 'bar');
	$_GET['g2_form'] = array('one' => array('two' => array('three' => 'four')));
	$expected = 'phpunit_test.php?g2_foo[test]=bar&amp;'
		  . 'g2_form[one][two][three]=four';
	$this->assertEquals($expected, $this->_urlGenerator->getNavigationReturnUrl());
    }

    /*
     * With the g2_return parameter users can add any "back to " link or direct redirect to any
     * URL. We try to detect those phishing attacks by comparing the returnUrl with our current
     * $this->getCurrentUrlDir(). If returnUrl doesn't start with getCurrentUrlDir(), it's not a
     * redirect into the same G2 installation.
     * initNavigation is called after GalleryInitFirstPass and init storage, thus we can use
     * getCurrentUrlDir(), else it might have been a problem (RewriteUrlGenerator)
     */
    function testDetectPhishingAttack() {
	/* Not the same domain name or not the same path are not allowed */
	$badUrls = array(
	    'http://EVIL.com/gallery2/main.php?g2_view=core.UserAdmin&g2_subView=core.UserLogin',
	    'https://EVIL.com/gallery2/main.php',
	    $this->_urlGenerator->makeUrl('/EVIL/main.php?g2_subView=core.UserLogin'),
	    '../EVIL/main.php?g2_view=core.UserAdmin',
	    '/EVIL/../gallery2/main.php?g2_view=core.UserAdmin',
	    '/gallery2/../EVIL/main.php?g2_view=core.UserAdmin',
	    "..\\\\EVIL\\\\main.php",
	    "/gallery/foo\\\\../main.php",
	    ' /EVIL/gallery2/main.php',
	    ' /../gallery2/EVIL/main.php',
	    ' ../gallery2/EVIL/main.php');
	foreach ($badUrls as $url) {
	    $_GET['g2_return'] = $url;
	    $ret = $this->_urlGenerator->initNavigation();
	    $this->assert($ret->getErrorCode() & ERROR_PERMISSION_DENIED,
			  "Phishing attack '$url' not detected for url");
	}
	/*
	 * Check host and path for absolute urls, absolute path for server relative URLs
	 * and allow relative URLs that don't try to break out of the good path
	 */
	$goodUrls = array(
	    $this->_urlGenerator->generateUrl(
		array('view' => 'core.UserAdmin', 'subView' => 'core.UserLogin')),
	    '/gallery2/main.php?g2_view=core.UserAdmin',
	    'v/GoodAlbumName/',
	    'www.DONTCARE.com/gallery2/main.php',
	    '\\gallery2\\main.php');
	foreach ($goodUrls as $url) {
	    $_GET['g2_return'] = $url;
	    $ret = $this->_urlGenerator->initNavigation();
	    if ($ret) {
		$this->assert(false, "Normal returnUrl '$url' not accepted");
		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
    }

    /*
     * Make sure getNavigationLinks() returns unchanged URLs
     * (part of our phishing attack protection)
     */
    function testGetNavigationLinks() {
	list ($ret, $core) = GalleryCoreApi::loadPlugin('module', 'core');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/*
	 * In initNavigation we accept returnUrl = 'www.EVIL.com' because we have to interpret it
	 * as relative URL, e.g. for http://example.com/www.EVIL.com/ (album called www.EVIL.com)
	 * Here we must ensure that we don't add http:// in front the returned URL, since that
	 * would change the relative to an absolute URL.
	 */
	$_GET['g2_return'] = 'www.DONTCARE.com';
	$_GET['g2_returnName'] = 'I want a pony';
	$ret = $this->_urlGenerator->initNavigation();
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $links) = $this->_urlGenerator->getNavigationLinks();
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$params = array('fromNavId' => $this->_urlGenerator->_navId);
	$expectedUrl = GalleryUrlGenerator::appendParamsToUrl('www.DONTCARE.com', $params);
	$this->assertEquals(array(array('url' => $expectedUrl, 'name' => $core->translate(
				array('text' => 'Back to %s', 'arg1' => 'I want a pony')))),
			    $links, 'Navigation link was altered');
    }
    
    /* Regression test to check that we handle embedUri = /foo/bar/ correctly (no file part) */
    function testInitNavigationHandlesEmbedUriWithoutFilePart() {
	$urlGenerator = new GalleryUrlGenerator();
	$ret = $urlGenerator->init('/foo/bar/');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	GalleryUtilities::putRequestVariable('return', 'foo');
	/* Assert that there's no PHP warning during the execution of this function */
	$ret = $urlGenerator->initNavigation();
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	$this->assertEquals(null, $ret);
    }

    function testRelativeUrlOverrides() {
	global $gallery;
	$session =& $gallery->getSession();

	$gallery->setPlatform(new UrlGeneratorTestPlatform());
	$qs = $session->isUsingCookies() ? '' : '?' .
	    GalleryUtilities::prefixFormVariable($session->getKey()) . '=' .
	    urlencode($session->getId());

	/* Try with a file that has no local override */
	$actual = $this->_urlGenerator->generateUrl(array('href' => 'test/test1.css'));
	$this->assertEquals('test/test1.css' . $qs, $actual);

	/* Try with a file that has a local override */
	$actual = $this->_urlGenerator->generateUrl(array('href' => 'test/test2.css'));
	$this->assertEquals('test/local/test2.css' . $qs, $actual);

	/* We don't allow overrides with top level files (nor do we generate an error) */
	$actual = $this->_urlGenerator->generateUrl(array('href' => 'favicon.ico'));
	$this->assertEquals('favicon.ico' . $qs, $actual);
    }

    function testDownloadedPluginRelativeUrls() {
	/*
	 * href=themes/blah/blah.js should be rewritten to plugins/themes/blah/blah.js
	 * if theme blah lives in the downloaded plugins dir and not the base G2 dir.
	 */
	global $gallery;
	$savePlatform =& $gallery->getPlatform();
	$dirname = $gallery->getConfig('plugins.dirname');

	$platform = new UnitTestPlatform();
	$platform->setReply('file_exists', array('fuzzy' => '{config.php$}'), true);
	$platform->setReply('file_exists', array('fuzzy' => '{index.themes$}'), true);
	$platform->setReply('file', array('fuzzy' => '{index.themes$}', false), array('phpunit'));
	$gallery->setPlatform($platform);

	/* Reset cached info about theme locations */
	GalleryCoreApi::isPluginInDefaultLocation('theme', 'phpunit', true);
	$this->assert($platform->isComplete(), $platform->getRemaining(), 'init');

	$platform = new UnitTestPlatform();
	$platform->setReply('file_exists',
	    array('fuzzy' => '{' . $dirname . '.themes.phpunit.local.test.js$}'), false);
	$gallery->setPlatform($platform);

	$this->assertEquals($dirname . '/themes/phpunit/test.js',
	    $this->_urlGenerator->generateUrl(array('href' => 'themes/phpunit/test.js')));
	$this->assert($platform->isComplete(), $platform->getRemaining(), 'one');

	/* Local override */
	$platform = new UnitTestPlatform();
	$platform->setReply('file_exists',
	    array('fuzzy' => '{' . $dirname . '.themes.phpunit.local.test.css$}'), true);
	$gallery->setPlatform($platform);

	$this->assertEquals($dirname . '/themes/phpunit/local/test.css',
	    $this->_urlGenerator->generateUrl(array('href' => 'themes/phpunit/test.css')));
	$this->assert($platform->isComplete(), $platform->getRemaining(), 'two');

	/* Reset cache to real values */
	$gallery->setPlatform($savePlatform);
	GalleryCoreApi::isPluginInDefaultLocation('theme', 'phpunit', true);
    }

    function testCurrentUrlToken() {
	$_SERVER['REQUEST_URI'] = '/gallery2/phpunit_test.php?a=b';

	$url = $this->_urlGenerator->generateUrl(array('view' => 'foo', 'test' => '%CURRENT_URL%'));
	$this->assertEquals('phpunit_test.php?g2_view=foo&amp;' .
	    'g2_test=http%3A%2F%2Fexample.com%2Fgallery2%2Fphpunit_test.php%3Fa%3Db', $url);
    }

    function testGetCookiePath() {
	/* First check if the configured value is taken if available */
	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'cookie.path', '/bad/');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Check if the correct value was stored */
	list ($ret, $realValue) = GalleryCoreApi::getPluginParameter('module', 'core',
								     'cookie.path');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('/bad/', $realValue, 'could not set plugin parameter cookie.path');
	/* Now do the actual check */
	$_SERVER['REQUEST_URI'] = '/cms/phpunit_test.php?a=b';
	$urlGenerator = new GalleryUrlGenerator();
	$ret = $urlGenerator->init('/cms/phpunit_test.php', '/gallery2/');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $path) = $urlGenerator->getCookiePath();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('/bad/', $path, 'test 0');
	list ($ret, $path) = $urlGenerator->getCookiePath(true);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('/bad/', $path, 'test 0.1');

	/*
	 * Now reset the cookie path configuration parameter such that the computed value is
	 * chosen
	 */
	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'cookie.path', '');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Check if the correct value was stored */
	list ($ret, $realValue) = GalleryCoreApi::getPluginParameter('module', 'core',
								     'cookie.path');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('', $realValue, 'could not reset plugin parameter cookie.path');

	/* Check the computed cookie path */
	$tests = array();
	$tests[] = array('baseUri' => '/gallery2/phpunit_test.php?foo=bar', 'er' => '/gallery2/',
			 'g2Uri' => '/gallery2/phpunit_test.php', 'force' => false);
	$tests[] = array('baseUri' => '/phpunit_test.php?foo=bar','g2Uri' => '/gallery2/foo.php',
			 'er' => '/', 'force' => false);
	/* g2Uri is only relevant if forceG2Path is true */
	$tests[] = array('g2Uri' => '/gallery2/index.php?module=gallery2&foo=bar', 'er' => '/cms/',
			 'baseUri' => '/cms/index.php?module=gallery2', 'force' => false);
	$tests[] = array('baseUri' => '/index.php?module=gallery2&foo=bar',  'er' => '/',
			 'g2Uri' => '/gallery2/index.php?module=gallery2', 'force' => false);
	$tests[] = array('baseUri' => '/cms/index.php?module=gallery2&foo=bar', 'force' => false,
			 'g2Uri' => '/modules/gallery2/index.php?module=gallery2', 'er' => '/cms/');
	$tests[] = array('baseUri' => '/apps/cms/index.php?module=gallery2&foo=bar',
			 'g2Uri' => '/apps/galery2/index.php?module=gallery2', 'force' => false,
			 'er' => '/apps/cms/');
	$tests[] = array('baseUri' => '/cms/index.php?module=gallery2&foo=bar',
			 'g2Uri' => '/gallery2/index.php?module=gallery2', 'force' => true,
			 'er' => '/gallery2/');
	$tests[] = array('baseUri' => '/cms/index.php?module=gallery2&foo=bar', 'force' => true,
			 'g2Uri' => '/cms/modules/gallery2/index.php?module=gallery2',
			 'er' => '/cms/modules/gallery2/');
	$tests[] = array('baseUri' => 'phpunit_test.php', 'g2Uri' => null, 'force' => true,
			 'er' => '/foobar/');
	$tests[] = array('baseUri' => 'phpunit_test.php', 'g2Uri' => null, 'force' => false,
			 'er' => '/foobar/');

	$i = 1;
	foreach ($tests as $testCase) {
	    $_SERVER['REQUEST_URI'] = !isset($testCase['g2Uri']) ? '/foobar/' : '';
	    $_SERVER['REQUEST_URI'] .= $testCase['baseUri'];
	    $urlGenerator = new GalleryUrlGenerator();
	    $ret = $urlGenerator->init($testCase['baseUri'], $testCase['g2Uri']);
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    list ($ret, $path) = $urlGenerator->getCookiePath($testCase['force']);
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals($testCase['er'], $path, "test $i");
	    $i++;
	}
    }

    function testEmbedForceSessionId() {
	$key = 'G2_EMBED';
	$savedEmbed = null;
	if (GalleryDataCache::containsKey($key)) {
	    $savedEmbed = GalleryDataCache::get($key);
	}

	/* Permute all involved variables, exhaustive test */
	foreach (array(true, false) as $downloadItemRequest) {
	    $params = array('view' => 'core.ShowItem');
	    if ($downloadItemRequest) {
		$params = array('view' => 'core.DownloadItem');
	    }
	    foreach (array(true, false) as $isEmbedded) {
		GalleryDataCache::put($key, $isEmbedded, true);
		$this->assertEquals($isEmbedded, GalleryDataCache::get($key),
				    'Could not set isEmbedded');
		foreach (array(true, false) as $cookiePathConfigured) {
		    $this->_urlGenerator->_isCookiePathConfigured = $cookiePathConfigured;
		    /* Execute the test */
		    $result = $this->_urlGenerator->embedForceSessionId($params);
		    /* Some debug information */
		    $debugInfo = 'isEmbedded: ' . intval($isEmbedded) . ', cookiePathConfigured: ' .
			intval($cookiePathConfigured) . ', downloadItemRequest: ' .
			intval($downloadItemRequest);
		    /* Check the result */
		    if ($isEmbedded && !$cookiePathConfigured && $downloadItemRequest) {
			$this->assertEquals(true, $result, 'wrong result for test case: ' .
					    $debugInfo);
		    } else {
			$this->assertEquals(false, $result, 'wrong result for test case: ' .
					    $debugInfo);
		    }
		}
	    }
	}

	/* Restore */
	if ($savedEmbed) {
	    GalleryDataCache::put($key, $savedEmbed, true);
	} else {
	    GalleryDataCache::remove($key);
	    $this->assert(!GalleryDataCache::containsKey($key), 'Could not remove a GDC var');
	}
    }

    function testGenerateFullUrlOn() {
	$this->assertEquals('http://example.com/gallery2/phpunit_test.php?g2_a=b',
	    $this->_urlGenerator->generateUrl(array('a' => 'b'), array('forceFullUrl' => true)));
    }

    function testGenerateFullUrlOnForRelative() {
	$this->assertEquals('http://example.com/gallery2/favicon.ico',
			    $this->_urlGenerator->generateUrl(array('href' => 'favicon.ico'),
							      array('forceFullUrl' => true)));
    }

    function testGenerateFullUrlOff() {
	$this->assertEquals('phpunit_test.php?g2_a=b',
	    $this->_urlGenerator->generateUrl(array('a' => 'b'), array('forceFullUrl' => false)));
    }

    function testGenerateServerRelativeUrlOn() {
	$this->assertEquals('/gallery2/phpunit_test.php?g2_a=b',
			    $this->_urlGenerator->generateUrl(
				array('a' => 'b'), array('forceServerRelativeUrl' => true)));
    }

    function testGenerateServerRelativeUrlOnForRelative() {
	$this->assertEquals('/gallery2/favicon.ico',
			    $this->_urlGenerator->generateUrl(
				array('href' => 'favicon.ico'),
				array('forceServerRelativeUrl' => true)));
    }

    function testGenerateServerRelativeUrlOff() {
	$this->assertEquals('phpunit_test.php?g2_a=b',
			    $this->_urlGenerator->generateUrl(
				array('a' => 'b'), array('forceServerRelativeUrl' => false)));
    }

    /* ForceFullUrl has precedence over ForceServerRelativeUrl */
    function testGenerateServerRelativeUrlOnFullUrlOn() {
	$this->assertEquals('http://example.com/gallery2/phpunit_test.php?g2_a=b',
			    $this->_urlGenerator->generateUrl(
				array('a' => 'b'), array('forceServerRelativeUrl' => true,
							 'forceFullUrl' => true)));
    }

    function testMakeRelativeUrl() {
	$this->assertEquals('phpunit_test.php?g2_a=b', $this->_urlGenerator->makeRelativeUrl(
				'http://example.com/gallery2/phpunit_test.php?g2_a=b'));
    }

    function testMakeRelativeUrlForceServerRelative() {
	$this->assertEquals('/gallery2/phpunit_test.php?g2_a=b',
			    $this->_urlGenerator->makeRelativeUrl(
				'http://example.com/gallery2/phpunit_test.php?g2_a=b', true));
    }

    function testMakeRelativeUrlDontForceServerRelative() {
	$this->assertEquals('phpunit_test.php?g2_a=b',
			    $this->_urlGenerator->makeRelativeUrl(
				'http://example.com/gallery2/phpunit_test.php?g2_a=b', false));
    }

    function testMakeServerRelativeUrl() {
	$this->_urlGenerator->_file[0] = '';
	$this->assertEquals('/gallery2/v/AlbumName', $this->_urlGenerator->makeRelativeUrl(
				'http://example.com/gallery2/v/AlbumName'));
    }

    /* Multisite / embedded G2 case, some URLs go to another (sub)domain */
    function testMakeRelativeUrlDifferentSubdomains() {
	$this->_urlGenerator->_host[0] = 'www.example.com';
	$this->assertEquals('http://photos.example.com/gallery2/phpunit_test.php',
			    $this->_urlGenerator->makeRelativeUrl(
				'http://photos.example.com/gallery2/phpunit_test.php'));
    }

    function testMakeRelativeUrlBaseFileNotInRequestUri() {
	$_SERVER['REQUEST_URI'] = '/gallery2/v/AlbumName';
	$this->_urlGenerator->_file[0] = 'main.php';
	$this->assertEquals('/gallery2/v/AnotherAlbum', $this->_urlGenerator->makeRelativeUrl(
				'http://example.com/gallery2/v/AnotherAlbum'));
    }

    /* Don't be fooled by baseFile in the return URL */
    function testMakeRelativeUrlBaseFileInReturnUrl() {
	$_SERVER['REQUEST_URI'] = '/gallery2/v/AlbumName?g2_return=main.php';
	$this->_urlGenerator->_file[0] = 'main.php';
	$this->assertEquals('/gallery2/v/AnotherAlbum?g2_return=main.php',
			    $this->_urlGenerator->makeRelativeUrl(
				'http://example.com/gallery2/v/AnotherAlbum?g2_return=main.php'));

    }

    function testMakeRelativeUrlBaseFileNotInReturnUrl() {
	$_SERVER['REQUEST_URI'] = '/gallery2/phpunit_test.php';
	$this->_urlGenerator->_file[0] = 'phpunit_test.php';
	$this->assertEquals('phpunit_test.php?foo=bar',
			    $this->_urlGenerator->makeRelativeUrl(
				'http://example.com/gallery2/phpunit_test.php?foo=bar'));

    }

    function testMakeRelativeUrlOtherProtocol() {
	$this->_urlGenerator->_currentBaseHost[0] = 'https://example.com';
	$this->assertEquals('http://example.com/gallery2/phpunit_test.php',
			    $this->_urlGenerator->makeRelativeUrl(
				'http://example.com/gallery2/phpunit_test.php'));
    }

    /* A multisite / embedded G2 scenario */
    function testMakeRelativeUrlDifferentServerPath() {
	$this->_urlGenerator->_path[0] = '/portal/';
	$this->assertEquals('/gallery2/phpunit_test.php',
			    $this->_urlGenerator->makeRelativeUrl('/gallery2/phpunit_test.php'));
    }

    /*
     * _ parseUri should accept various formats and - similar to parse_url() -
     * split the URI into its subparts
     */
    function testParseUri() {
	$tests = array();
	$tests[] = array('uri' => 'main.php', 'protocol' => null,
			 'host' => null, 'path' => null, 'file' => 'main.php');
	$tests[] = array('uri' => '/main.php', 'protocol' => null,
			 'host' => null, 'path' => '/', 'file' => 'main.php');
	$tests[] = array('uri' => 'index.php?module=gallery2', 'protocol' => null,
			 'host' => null, 'path' => null, 'file' => 'index.php?module=gallery2');
	$tests[] = array('uri' => 'main.php/', 'protocol' => null,
			 'host' => 'main.php', 'path' => '/', 'file' => '');
	$tests[] = array('uri' => '/index.php/', 'protocol' => null,
			 'host' => null, 'path' => '/index.php/', 'file' => '');
	$tests[] = array('uri' => '/gallery2/foo', 'protocol' => null,
			 'host' => null, 'path' => '/gallery2/', 'file' => 'foo');
	$tests[] = array('uri' => '/', 'protocol' => null,
			 'host' => null, 'path' => '/', 'file' => '');
	$tests[] = array('uri' => 'www.example.com/', 'protocol' => null,
			 'host' => 'www.example.com', 'path' => '/', 'file' => '');
	$tests[] = array('uri' => 'www.example.com', 'protocol' => null,
			 'host' => null, 'path' => null, 'file' => 'www.example.com');
	$tests[] = array('uri' => 'https://www.example.com', 'protocol' => 'https',
			 'host' => 'www.example.com', 'path' => null, 'file' => null);
	$tests[] = array('uri' => 'www.example.com', 'protocol' => null,
			 'host' => null, 'path' => null, 'file' => 'www.example.com');
	$tests[] = array('uri' => 'www.example.com/mod/gallery2/', 'protocol' => null,
			 'host' => 'www.example.com', 'path' => '/mod/gallery2/', 'file' => '');
	$tests[] = array('uri' => 'http://localhost/index.php?mod=gallery2', 'protocol' => 'http',
			 'host' => 'localhost', 'path' => '/', 'file' => 'index.php?mod=gallery2');
	$tests[] = array('uri' => 'https://127.0.0.1/test/index.php', 'protocol' => 'https',
			 'host' => '127.0.0.1', 'path' => '/test/', 'file' => 'index.php');
	$tests[] = array('uri' => '127.0.0.1/test/index.php/', 'protocol' => null,
			 'host' => '127.0.0.1', 'path' => '/test/index.php/', 'file' => '');

	foreach ($tests as $test) {
	    $expected = array($test['protocol'], $test['host'], $test['path'], $test['file']);
	    $this->assertEquals($expected, $this->_urlGenerator->_parseUri($test['uri']),
				"URI = '" . $test['uri'] . "'");
	}
    }

    function testInitSetsIsCookiePathConfiguredIfEmbedded() {
	foreach (array(true, false) as $embedded) {
	    GalleryDataCache::put( 'G2_EMBED', $embedded, true);
	    foreach (array(true, false) as $isSet) {
		$value = $isSet ? '/' : '';
		$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'cookie.path', $value);
		if ($ret) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		/* Check if the correct value was stored */
		list ($ret, $realValue) = GalleryCoreApi::getPluginParameter('module', 'core',
									     'cookie.path');
		if ($ret) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		$this->assertEquals($value, $realValue,
				    'could not set plugin parameter cookie.path');

		/* Execute the test */
		$urlGenerator = new GalleryUrlGenerator();
		$ret = $urlGenerator->init();
		if ($ret) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		/* Check what we want to verfiy */
		$msg = $embedded ? 'embedded, ' : 'standalone, ';
		$msg .= $isSet ? 'cookie path set' : 'cookie path not set';
		if ($embedded) {
		    $this->assertEquals($isSet, $urlGenerator->_isCookiePathConfigured, $msg);
		} else {
		    $this->assert(!isset($urlGenerator->_isCookiePathConfigured), $msg);
		}
	    }
	}
    }

    function testGetCacheableUrl1() {
	$_SERVER['REQUEST_URI'] = '/gallery2/phpunit_test.php?foo=bar&g2_navId=blah&bar=baz';
	$this->assertEquals('http://example.com/gallery2/phpunit_test.php?foo=bar&bar=baz',
			    $this->_urlGenerator->getCacheableUrl());
    }

    function testGetCacheableUrl2() {
	$_SERVER['REQUEST_URI'] =
	    '/gallery2/phpunit_test.php?foo=bar&g2_navId=blah&bar=baz&g2_return=blaa';
	$this->assertEquals('http://example.com/gallery2/phpunit_test.php?foo=bar&bar=baz',
			    $this->_urlGenerator->getCacheableUrl());
    }

    function testGetCacheableUrl3() {
	$_SERVER['REQUEST_URI'] = '/gallery2/phpunit_test.php?g2_navId=blah';
	$this->assertEquals('http://example.com/gallery2/phpunit_test.php',
			    $this->_urlGenerator->getCacheableUrl());
    }

    function testGetCacheableUrl4() {
	$_SERVER['REQUEST_URI'] = '/gallery2/phpunit_test.php';
	$this->assertEquals('http://example.com/gallery2/phpunit_test.php',
			    $this->_urlGenerator->getCacheableUrl());
    }

    function testGenerateUrlWithNavIdAndSessionString() {
	global $gallery;
	list ($ret) = $this->_prepareGenerateUrl('', 'phpunit_test.php', null);
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$session =& $gallery->getSession();
	$this->assertEquals(true, $session->isPersistent(), 'persistent session');
	$this->assert(!empty($session->_sessionId), 'session id');

	$actual = $this->_urlGenerator->generateUrl(array('view' => 'foo.Bar', 'navId' => '1234'),
						    array('forceSessionId' => true));
	$expected = 'phpunit_test.php?g2_view=foo.Bar&amp;g2_navId=1234&amp;g2_' .
	    $session->getKey() . '=' . $session->getId();

	$this->assertEquals($expected, $actual, 'url');
    }

    function testGenerateUrlWithoutPersistentSession() {
	global $gallery;
	GalleryUtilities::removeRequestVariable(SESSION_ID_PARAMETER);
	unset($_COOKIE[SESSION_ID_PARAMETER]);
	unset($_SERVER['HTTP_COOKIE']);
	
	$session = new GallerySession();
	$ret = $session->init();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$backup = $gallery->_session;
	$gallery->_session =& $session;
	$this->assertEquals(false, $session->isPersistent(), 'not persistent');
	$this->assert(empty($session->_sessionId), 'session id');
	$this->assertEquals(SESSION_TEMP_ID, $session->getId(), 'temp id');

	$actual = $this->_urlGenerator->generateUrl(array('view' => 'foo.Bar', 'navId' => '1234'),
						    array('forceSessionId' => true));
	/* No navId since there's no persistent session to store the nav history */
	$expected = 'phpunit_test.php?g2_view=foo.Bar&amp;g2_' . $session->getKey() .
	    '=' . $session->getId();

	$this->assertEquals($expected, $actual, 'url');

	/* And now force to not use the temp id */
	$gallery->_session->doNotUseTempId();
	$actual = $this->_urlGenerator->generateUrl(array('view' => 'foo.Bar', 'navId' => '1234'),
						    array('forceSessionId' => true));
	$expected = 'phpunit_test.php?g2_view=foo.Bar';
	$this->assertEquals($expected, $actual, 'url without temp session id');
	
	$gallery->_session = $backup;
    }
}

class UrlGeneratorTestPlatform extends GalleryPlatform {

    function file_exists($filename) {
	$basedir = realpath(dirname(__FILE__) . '/../../classes');
	switch($filename) {
	case "$basedir/../../../test/local/test1.css":
	    return false;

	case "$basedir/../../../test/local/test2.css":
	    return true;

	default:
	    print "Unexpected file_exists($filename) call";
	    return false;
	}
    }
}
?>
