<?php
/*
 * $RCSfile: SimpleCallbackTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.4 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test SimpleCallback functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class SimpleCallbackTest extends GalleryTestCase {

    function SimpleCallbackTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	$this->_tag = 'SmplCb-' . rand(0, 999999);
	list ($ret, $this->_view) = GalleryView::loadView('core.SimpleCallback');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_userNames = $this->_groupNames = array();
	GalleryDataCache::reset();
    }

    function _createUser() {
	list ($ret, $user) =
	    $this->_createRandomUser($this->_tag . '-' . count($this->_userNames));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user);
	$this->_users[] = $user;
	$this->_userNames[] = $user->getUsername();
    }

    function _createGroup() {
	list ($ret, $group) =
	    $this->_createRandomGroup($this->_tag . '-' . count($this->_groupNames));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($group);
	$this->_groupNames[] = $group->getGroupName();
    }

    function _runCallback() {
	ob_start();
	$ret = $this->_view->renderImmediate(array(), array());
	$results = ob_get_contents();
	ob_end_clean();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	return $results;
    }

    function testLookupUsername() {
	$this->_createUser();
	$this->_createUser();
	$this->_createUser();

	GalleryUtilities::putRequestVariable('command', 'lookupUsername');
	GalleryUtilities::putRequestVariable('prefix', $this->_tag);
	$results = $this->_runCallback();

	sort($this->_userNames);
	$this->assertEquals(join("\n", $this->_userNames), $results);
    }

    function testLookupUsernameAsGuestUser() {
	$this->_createUser();
	$this->_createUser();
	$this->_createUser();
	$this->_becomeGuestUser();

	GalleryUtilities::putRequestVariable('command', 'lookupUsername');
	GalleryUtilities::putRequestVariable('prefix', $this->_tag);
	$results = $this->_runCallback();

	/* Guest can't see results */
	$this->assertEquals("", $results);
    }

    function testLookupUsernameWithEntity() {
	/* We expect user/group names in db to be entitized.. search for < should match &lt; */
	$search = $this->_tag . '<t';
	$this->_tag .= '&lt;t';
	$this->_createUser();
	$this->_createUser();

	GalleryUtilities::putRequestVariable('command', 'lookupUsername');
	GalleryUtilities::putRequestVariable('prefix', $search);
	$results = $this->_runCallback();

	sort($this->_userNames);
	$this->assertEquals(join("\n", $this->_userNames), $results);
    }

    function testLookupGroupname() {
	$this->_createGroup();
	$this->_createGroup();
	$this->_createGroup();

	GalleryUtilities::putRequestVariable('command', 'lookupGroupname');
	GalleryUtilities::putRequestVariable('prefix', $this->_tag);
	$results = $this->_runCallback();

	sort($this->_groupNames);
	$this->assertEquals(join("\n", $this->_groupNames), $results);
    }

    function testLookupGroupnameAsGuestUser() {
	$this->_createGroup();
	$this->_createGroup();
	$this->_createGroup();
	$this->_becomeGuestUser();

	GalleryUtilities::putRequestVariable('command', 'lookupGroupname');
	GalleryUtilities::putRequestVariable('prefix', $this->_tag);
	$results = $this->_runCallback();

	/* Guest can't see results */
	$this->assertEquals('', $results);
    }

    function testLookupGroupnameWithEntity() {
	/* We expect user/group names in db to be entitized.. search for " should match &quot; */
	$search = $this->_tag . '"test';
	$this->_tag .= '&quot;test';
	$this->_createGroup();
	$this->_createGroup();

	GalleryUtilities::putRequestVariable('command', 'lookupGroupname');
	GalleryUtilities::putRequestVariable('prefix', $search);
	$results = $this->_runCallback();

	sort($this->_groupNames);
	$this->assertEquals(join("\n", $this->_groupNames), $results);
    }

    function testLookupDirectories() {
	GalleryUtilities::putRequestVariable('command', 'lookupDirectories');
	GalleryUtilities::putRequestVariable('prefix', dirname(dirname(__FILE__)));
	$results = $this->_runCallback();

	$this->assert(strstr($results, dirname(__FILE__)), 'Missing result');
    }

    function testLookupDirectoriesWithEntity() {
	/* Filesystem isn't entitized.. search for < should match literal < */
	global $gallery;
	$platform = new UnitTestPlatform();
	$platform->setReply('file_exists', array('/php<unit'), true);
	$platform->setReply('is_dir', array('/php<unit'), true);
	$platform->setReply('getDirectorySeparator', array(), '/');
	$platform->setReply('opendir', array('/php<unit'), 'dh');
	$platform->setReply('readdir', array('dh'), 'test');
	$platform->setReply('is_dir', array('/php<unit/test'), true);
	$platform->setReply('readdir', array('dh'), false);
	$platform->setReply('closedir', array('dh'), true);
	$gallery->setPlatform($platform);

	GalleryUtilities::putRequestVariable('command', 'lookupDirectories');
	GalleryUtilities::putRequestVariable('prefix', '/php<unit');
	$results = $this->_runCallback();

	$this->assertEquals('/php&lt;unit/test', $results, 'results');
	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testLookupDirectoriesWithUmlauts() {
	/* Filesystem doesn't accept / return UTF-8 characters */
	global $gallery;
	$gallery->_phpVm =  new SimpleCallbackTestPhpVm();
	$platform = new UnitTestPlatform();
	$platform->setReply('file_exists', array('/phpäunit'), true);
	$platform->setReply('is_dir', array('/phpäunit'), true);
	$platform->setReply('getDirectorySeparator', array(), '/');
	$platform->setReply('opendir', array('/phpäunit'), 'dh');
	$platform->setReply('readdir', array('dh'), 'täst');
	$platform->setReply('is_dir', array('/phpäunit/täst'), true);
	$platform->setReply('readdir', array('dh'), false);
	$platform->setReply('closedir', array('dh'), true);
	$gallery->setPlatform($platform);

	/* German umlaut 'ä' in ISO-8859-1 */
	$umlautUtf8 = GalleryCoreApi::convertToUtf8(chr(228), 'ISO-8859-1');
	$prefix = '/php' . $umlautUtf8 . 'unit';
	GalleryUtilities::putRequestVariable('command', 'lookupDirectories');
	GalleryUtilities::putRequestVariable('prefix', $prefix);
	$results = $this->_runCallback();
	
	$this->assertEquals($prefix . '/t' . $umlautUtf8 . 'st', $results, 'results');
	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testLookupDirectoriesAsNonSiteAdmin() {
	global $gallery;

	$this->_createUser();
	$gallery->setActiveUser($this->_users[0]);

	GalleryUtilities::putRequestVariable('command', 'lookupDirectories');
	GalleryUtilities::putRequestVariable('prefix', dirname(dirname(__FILE__)));
	$results = $this->_runCallback();

	/* Regular users can't see results */
	$this->assertEquals('', $results);
    }

    function testLookupDirectoriesAsGuestUser() {
	$this->_becomeGuestUser();

	GalleryUtilities::putRequestVariable('command', 'lookupDirectories');
	GalleryUtilities::putRequestVariable('prefix', dirname(dirname(__FILE__)));
	$results = $this->_runCallback();

	/* Guests can't see results */
	$this->assertEquals('', $results);
    }

    function testLookupFiles() {
	GalleryUtilities::putRequestVariable('command', 'lookupFiles');
	GalleryUtilities::putRequestVariable('prefix', dirname(__FILE__));
	$results = $this->_runCallback();

	$this->assert(strstr($results, __FILE__), 'Missing result');
    }

    function testLookupFilesWithEntity() {
	/* Filesystem isn't entitized.. search for & should match literal & */
	global $gallery;
	$platform = new UnitTestPlatform();
	$platform->setReply('file_exists', array('/php&unit'), true);
	$platform->setReply('is_dir', array('/php&unit'), true);
	$platform->setReply('getDirectorySeparator', array(), '/');
	$platform->setReply('opendir', array('/php&unit'), 'dh');
	$platform->setReply('readdir', array('dh'), 'test');
	$platform->setReply('is_dir', array('/php&unit/test'), false);
	$platform->setReply('is_file', array('/php&unit/test'), true);
	$platform->setReply('readdir', array('dh'), 'dir');
	$platform->setReply('is_dir', array('/php&unit/dir'), true);
	$platform->setReply('readdir', array('dh'), false);
	$platform->setReply('closedir', array('dh'), true);
	$gallery->setPlatform($platform);

	GalleryUtilities::putRequestVariable('command', 'lookupFiles');
	GalleryUtilities::putRequestVariable('prefix', '/php&unit');
	$results = $this->_runCallback();

	/* Dirs listed first, results entitized */
	$this->assertEquals("/php&amp;unit/dir\n/php&amp;unit/test", $results, 'results');
	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testLookupFilesWithUmlauts() {
	/* Filesystem doesn't accepts / return UTF-8 characters */
	global $gallery;
	$gallery->_phpVm = new SimpleCallbackTestPhpVm();
	$platform = new UnitTestPlatform();
	$platform->setReply('file_exists', array('/phpäunit'), true);
	$platform->setReply('is_dir', array('/phpäunit'), true);
	$platform->setReply('getDirectorySeparator', array(), '/');
	$platform->setReply('opendir', array('/phpäunit'), 'dh');
	$platform->setReply('readdir', array('dh'), 'täst');
	$platform->setReply('is_dir', array('/phpäunit/täst'), false);
	$platform->setReply('is_file', array('/phpäunit/täst'), true);
	$platform->setReply('readdir', array('dh'), 'dir');
	$platform->setReply('is_dir', array('/phpäunit/dir'), true);
	$platform->setReply('readdir', array('dh'), false);
	$platform->setReply('closedir', array('dh'), true);
	$gallery->setPlatform($platform);

	/* German umlaut 'ä' in ISO-8859-1 */
	$umlautUtf8 = GalleryCoreApi::convertToUtf8(chr(228), 'ISO-8859-1');
	$prefix = '/php' . $umlautUtf8 . 'unit';
	GalleryUtilities::putRequestVariable('command', 'lookupFiles');
	GalleryUtilities::putRequestVariable('prefix', $prefix);
	$results = $this->_runCallback();

	/* Dirs listed first, results in UTF-8  */
	$this->assertEquals("$prefix/dir\n$prefix/t" . $umlautUtf8 . "st", $results, 'results');
	$this->assert($platform->isComplete(), $platform->getRemaining());
    }
    
    function testLookupFilesAsNonSiteAdmin() {
	global $gallery;

	$this->_createUser();
	$gallery->setActiveUser($this->_users[0]);

	GalleryUtilities::putRequestVariable('command', 'lookupFiles');
	GalleryUtilities::putRequestVariable('prefix', dirname(__FILE__));
	$results = $this->_runCallback();

	/* Regular users can't see results */
	$this->assertEquals('', $results);
    }

    function testLookupFilesAsGuestUser() {
	$this->_becomeGuestUser();

	GalleryUtilities::putRequestVariable('command', 'lookupFiles!');
	GalleryUtilities::putRequestVariable('prefix', dirname(__FILE__));
	$results = $this->_runCallback();

	/* Guests can't see results */
	$this->assertEquals('', $results);
    }
}

/* For the directory listing tests, we need a mock PHP VM */
class SimpleCallbackTestPhpVm {
    function function_exists($functionName) {
	/* make it use our charset tables, they work on all platforms */
	switch ($functionName) {
	case 'iconv':
	case 'mb_convert_encoding':
	case 'recode_string':
	    return false;
	case 'nl_langinfo':
	    return true;
	default:
	    return function_exists($functionName);
	}
    }

    function nl_langinfo($item) {
	if ($item == CODESET) {
	    return 'ISO-8859-1';
	} else {
	    return '';
	}
    }

    function setlocale($category, $locale) {
	return '';
    }
}
?>
