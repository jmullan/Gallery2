<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test SimpleCallback functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class SimpleCallbackTest extends GalleryTestCase {

    function SimpleCallbackTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;

	parent::setUp();

	$this->_tag = 'SmplCb-' . rand();
	list ($ret, $this->_view) = GalleryView::loadView('core.SimpleCallback');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function _createUser() {
	list ($ret, $user) = $this->_createRandomUser($this->_tag . '-' . rand());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user);
	$this->_users[] = $user;
	$this->_userNames[] = $user->getUsername();
    }

    function _createGroup() {
	list ($ret, $group) = $this->_createRandomGroup($this->_tag . '-' . rand());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($group);
	$this->_groupNames[] = $group->getGroupName();
    }

    function _runCallback() {
	ob_start();
	$ret = $this->_view->renderImmediate(array(), array());
	$results = ob_get_contents();
	ob_end_clean();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	return $results;
    }

    function testLookupUsername() {
	$this->_createUser();
	$this->_createUser();
	$this->_createUser();

	GalleryUtilities::putRequestVariable('command', 'lookupUsername');
	GalleryUtilities::putRequestVariable('prefix', $this->_tag);
	$results = $this->_runCallback();

	sort($this->_userNames);
	$this->assertEquals(join("\n", $this->_userNames), $results);
    }

    function testLookupUsernameAsGuestUser() {
	$this->_createUser();
	$this->_createUser();
	$this->_createUser();
	$this->_becomeGuestUser();

	GalleryUtilities::putRequestVariable('command', 'lookupUsername');
	GalleryUtilities::putRequestVariable('prefix', $this->_tag);
	$results = $this->_runCallback();

	/* Guest can't see results */
	$this->assertEquals("", $results);
    }

    function testLookupGroupname() {
	$this->_createGroup();
	$this->_createGroup();
	$this->_createGroup();

	GalleryUtilities::putRequestVariable('command', 'lookupGroupname');
	GalleryUtilities::putRequestVariable('prefix', $this->_tag);
	$results = $this->_runCallback();

	sort($this->_groupNames);
	$this->assertEquals(join("\n", $this->_groupNames), $results);
    }

    function testLookupGroupnameAsGuestUser() {
	$this->_createGroup();
	$this->_createGroup();
	$this->_createGroup();
	$this->_becomeGuestUser();

	GalleryUtilities::putRequestVariable('command', 'lookupGroupname');
	GalleryUtilities::putRequestVariable('prefix', $this->_tag);
	$results = $this->_runCallback();

	/* Guest can't see results */
	$this->assertEquals('', $results);
    }

    function testLookupDirectories() {
	GalleryUtilities::putRequestVariable('command', 'lookupDirectories');
	GalleryUtilities::putRequestVariable('prefix', dirname(dirname(__FILE__)));
	$results = $this->_runCallback();

	$this->assert(strstr($results, dirname(__FILE__)), 'Missing result');
    }

    function testLookupDirectoriesAsNonSiteAdmin() {
	global $gallery;

	$this->_createUser();
	$gallery->setActiveUser($this->_users[0]);

	GalleryUtilities::putRequestVariable('command', 'lookupDirectories');
	GalleryUtilities::putRequestVariable('prefix', dirname(dirname(__FILE__)));
	$results = $this->_runCallback();

	/* Regular users can't see results */
	$this->assertEquals('', $results);
    }

    function testLookupDirectoriesAsGuestUser() {
	$this->_becomeGuestUser();

	GalleryUtilities::putRequestVariable('command', 'lookupDirectories');
	GalleryUtilities::putRequestVariable('prefix', dirname(dirname(__FILE__)));
	$results = $this->_runCallback();

	/* Guests can't see results */
	$this->assertEquals('', $results);
    }

    function testLookupFiles() {
	GalleryUtilities::putRequestVariable('command', 'lookupFiles');
	GalleryUtilities::putRequestVariable('prefix', dirname(__FILE__));
	$results = $this->_runCallback();

	$this->assert(strstr($results, __FILE__), 'Missing result');
    }

    function testLookupFilesAsNonSiteAdmin() {
	global $gallery;

	$this->_createUser();
	$gallery->setActiveUser($this->_users[0]);

	GalleryUtilities::putRequestVariable('command', 'lookupFiles');
	GalleryUtilities::putRequestVariable('prefix', dirname(__FILE__));
	$results = $this->_runCallback();

	/* Regular users can't see results */
	$this->assertEquals('', $results);
    }

    function testLookupFilesAsGuestUser() {
	$this->_becomeGuestUser();

	GalleryUtilities::putRequestVariable('command', 'lookupFiles!');
	GalleryUtilities::putRequestVariable('prefix', dirname(__FILE__));
	$results = $this->_runCallback();

	/* Guests can't see results */
	$this->assertEquals('', $results);
    }
}
?>
