<?php
/*
 * $RCSfile: UserRecoverPasswordAdminControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.6 $ $Date: 2005/08/24 06:37:25 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Jay Rossiter <cryptographite@users.sf.net>
 */

/**
 * UserRecoverPassword controller tests
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class UserRecoverPasswordAdminControllerTest extends GalleryControllerTestCase {

    function UserRecoverPasswordAdminControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.UserRecoverPasswordAdmin');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	list ($ret, $rootAlbumId) = GalleryCoreApi::getPluginParameter('module', 'core',
		'id.rootAlbum');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__,
						    'Unable to fetch id.rootAlbum'));
	}

	list ($ret, $rootAlbum) = GalleryCoreApi::loadEntitiesById($rootAlbumId);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__,
						    'Unable to load root album'));
	}

	list ($ret, $this->_admin) = GalleryCoreApi::loadEntitiesById($rootAlbum->getOwnerId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__,
						    'Unable to load admin user'));
	}

	$this->_savedAdminPassword = $this->_admin->getHashedPassword();

	$session =& $gallery->getSession();
	$session->put('core.UserRecoverPasswordAdminAuthKey', 'abcdefghijklmnopqrstuvwxyz123456');
    }

    function tearDown() {
	global $gallery;

	$session =& $gallery->getSession();

	if ($session->get('core.UserRecoverPasswordAdminAuthKey')) {
	    $session->remove('core.UserRecoverPasswordAdminAuthKey');
	}

	$user =& $this->_admin;

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($user->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $user) = $user->refresh();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$user->setHashedPassword($this->_savedAdminPassword);

	$ret = $user->save();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::tearDown();
    }

    function testRecoverAdminPassword() {
	global $gallery;

	GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
	GalleryUtilities::putRequestVariable('form[userName]', $this->_admin->getUserName());
	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[password1]', 'abcdefg');
	GalleryUtilities::putRequestVariable('form[password2]', 'abcdefg');

	$platform = $gallery->getPlatform();
	$gallery->_platform = new UserRecoverPasswordAdminDummyPlatform($platform,
				  'abcdefghijklmnopqrstuvwxyz123456');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserLogin'),
				  'status' => array('passwordRecovered' => 1),
				  'return' => 0,
				  'error' => array()),
			    $results);

        list ($ret, $user) = $this->_admin->refresh();
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

	$this->assert($user->isCorrectPassword('abcdefg'), 'Password Incorrect');
    }

    function testRecoverAdminPasswordAlternateUser() {
	global $gallery;

	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user);

	GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
	GalleryUtilities::putRequestVariable('form[userName]', $user->getUserName());
	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[password1]', 'abcdefg');
	GalleryUtilities::putRequestVariable('form[password2]', 'abcdefg');

	$platform = $gallery->getPlatform();
	$gallery->_platform = new UserRecoverPasswordAdminDummyPlatform($platform,
				  'abcdefghijklmnopqrstuvwxyz123456');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserLogin'),
				  'status' => array('passwordRecovered' => 1),
				  'return' => 0,
				  'error' => array()),
			    $results);

        list ($ret, $user) = $user->refresh();
        if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

	$this->assert($user->isCorrectPassword('abcdefg'), 'Password Incorrect');
    }

   function testRecoverAdminPasswordBadAuth() {
	global $gallery;

	GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[password1]', 'abcdefg');
	GalleryUtilities::putRequestVariable('form[password2]', 'abcdefg');

	$platform = $gallery->getPlatform();
	$gallery->_platform = new UserRecoverPasswordAdminDummyPlatform($platform,
				  '123456abcdefghijklmnopqrstuvwxyz');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserRecoverPasswordAdmin'),
				  'status' => array(),
				  'error' => array('form[error][authString][incorrect]')),
			    $results);
    }

    function testRecoverAdminUsernameMissing() {
	global $gallery;

	GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
	GalleryUtilities::putRequestVariable('form[userName]', '');
	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[password1]', 'abcdefg');
	GalleryUtilities::putRequestVariable('form[password2]', 'abcdefg');

	$platform = $gallery->getPlatform();
	$gallery->_platform = new UserRecoverPasswordAdminDummyPlatform($platform,
				  'abcdefghijklmnopqrstuvwxyz123456');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserRecoverPasswordAdmin'),
				  'status' => array(),
				  'error' => array('form[error][userName][missing]')),
			    $results);
    }

    function testRecoverAdminUsernameIncorrect() {
	global $gallery;

	GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
	GalleryUtilities::putRequestVariable('form[userName]', 'UserRecoverPasswordAdminUnitTest');
	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[password1]', 'abcdefg');
	GalleryUtilities::putRequestVariable('form[password2]', 'abcdefg');

	$platform = $gallery->getPlatform();
	$gallery->_platform = new UserRecoverPasswordAdminDummyPlatform($platform,
				  'abcdefghijklmnopqrstuvwxyz123456');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserRecoverPasswordAdmin'),
				  'status' => array(),
				  'error' => array('form[error][userName][incorrect]')),
			    $results);
    }

    function testRecoverAdminPasswordMismatch() {
	global $gallery;

	GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
	GalleryUtilities::putRequestVariable('form[userName]', 'admin');
	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[password1]', 'abcdefg');
	GalleryUtilities::putRequestVariable('form[password2]', 'abcdefghijklmn');

	$platform = $gallery->getPlatform();
	$gallery->_platform = new UserRecoverPasswordAdminDummyPlatform($platform,
				  'abcdefghijklmnopqrstuvwxyz123456');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserRecoverPasswordAdmin'),
				  'status' => array(),
				  'error' => array('form[error][password][mismatch]')),
			    $results);
    }

    function testRecoverAdminPasswordMissing() {
	global $gallery;

	GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
	GalleryUtilities::putRequestVariable('form[userName]', 'admin');
	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[password1]', '');
	GalleryUtilities::putRequestVariable('form[password2]', 'abcdefg');

	$platform = $gallery->getPlatform();
	$gallery->_platform = new UserRecoverPasswordAdminDummyPlatform($platform,
				  'abcdefghijklmnopqrstuvwxyz123456');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserRecoverPasswordAdmin'),
				  'status' => array(),
				  'error' => array('form[error][password][missing]')),
			    $results);

	GalleryUtilities::putRequestVariable('form[formName]', 'UserRecoverPasswordAdmin');
	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[password1]', 'abcdefg');
	GalleryUtilities::putRequestVariable('form[password2]', '');

	$platform = $gallery->getPlatform();
	$gallery->_platform = new UserRecoverPasswordAdminDummyPlatform($platform,
				  'abcdefghijklmnopqrstuvwxyz123456');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserRecoverPasswordAdmin'),
				  'status' => array(),
				  'error' => array('form[error][password][missing]')),
			    $results);
    }

    function testRecoverAdminPasswordCancel() {
	global $gallery;

	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

	$platform = $gallery->getPlatform();
	$gallery->_platform = new UserRecoverPasswordAdminDummyPlatform($platform,
				  'abcdefghijklmnopqrstuvwxyz123456');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserRecoverPasswordAdmin'),
				  'status' => array(),
				  'error' => array(),
				  'return' => 1),
			    $results);
    }
}

class UserRecoverPasswordAdminDummyPlatform {
    function UserRecoverPasswordAdminDummyPlatform($platform, $loginTxtValue) {
	$this->_platform = $platform;
	$this->_loginTxtValue = $loginTxtValue;
    }

    function file($file) {
	if ($file == dirname(dirname(dirname(dirname(dirname(__FILE__))))) . '/login.txt') {
	    $results = array($this->_loginTxtValue);
	} else {
	    $results = $this->_platform->file($file);
	}
	return $results;
    }

    function realpath($file) {
	return $this->_platform->realpath($file);
    }

    function getDirectorySeparator() {
	return $this->_platform->getDirectorySeparator();
    }

    function file_exists($filename) {
	return $this->_platform->file_exists($filename);
    }

    function is_dir($filename) {
	return $this->_platform->is_dir($filename);
    }

    function is_readable($filename) {
	if ($filename == dirname(dirname(dirname(dirname(dirname(__FILE__))))) . '/login.txt') {
	    return true;
	}

	return $this->_platform->is_readable($filename);
    }

    function is_writeable($filename) {
	return $this->_platform->is_writeable($filename);
    }

    function stat($filename) {
	return $this->_platform->stat($filename);
    }

    function mkdir($path) {
	return $this->_platform->mkdir($path);
    }

    function fopen($filename, $mode, $use_include_path=0) {
	return $this->_platform->fopen($filename, $mode, $use_include_path);
    }

    function recursiveRmdir($dirname) {
	return $this->_platform->recursiveRmdir($dirname);
    }

    function fclose($handle) {
	return $this->_platform->fclose($handle);
    }

    function flock($handle, $operation, &$wouldblock) {
	return $this->_platform->flock($handle, $operation, $wouldblock);
    }

    function unlink($file) {
	return $this->_platform->unlink($file);
    }
}

?>
