<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test DataCache functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class DataCacheTest extends GalleryTestCase {

    function DataCacheTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp();
    }

    function tearDown() {
	global $gallery;
	parent::tearDown();
    }

    function testPutAndGet() {
	$key = 'test-key';
	$value = 'test-value';
	GalleryDataCache::put($key, $value);
	$this->assertEquals($value, GalleryDataCache::get($key));
    }

    function testContainsKey() {
	$key = 'test-key';
	$value = 'test-value';
	GalleryDataCache::put($key, $value);
	$this->assert(GalleryDataCache::containsKey($key));
    }

    function testReset() {
	$key = 'test-key';
	$value = 'test-value';
	GalleryDataCache::put($key, $value);
	$this->assert(GalleryDataCache::containsKey($key));
	GalleryDataCache::reset();
	$this->assert(!GalleryDataCache::containsKey($key));
    }

    function testRemoveByPattern() {
	GalleryDataCache::put('foo(1, 2, 3, 4)', 'baz');
	GalleryDataCache::put('foo(2, 3, 4)', 'baz');
	GalleryDataCache::put('bar(3, 4)', 'baz');
	GalleryDataCache::put('bar(4)', 'baz');

	GalleryDataCache::removeByPattern('foo\(2, ');
	GalleryDataCache::removeByPattern('bar');

	$this->assert(GalleryDataCache::containsKey('foo(1, 2, 3, 4)', 'baz'));
	$this->assert(!GalleryDataCache::containsKey('foo(2, 3, 4)', 'baz'));
	$this->assert(!GalleryDataCache::containsKey('bar(3, 4)', 'baz'));
	$this->assert(!GalleryDataCache::containsKey('bar(4)', 'baz'));
    }

    function testGetCacheTuple() {
	$this->assertEquals(array('0', '0'), GalleryDataCache::getCacheTuple(0));
	$this->assertEquals(array('0', '0'), GalleryDataCache::getCacheTuple(1));
	$this->assertEquals(array('0', '2'), GalleryDataCache::getCacheTuple(21));
	$this->assertEquals(array('0', '9'), GalleryDataCache::getCacheTuple(99));
	$this->assertEquals(array('7', '2'), GalleryDataCache::getCacheTuple(721));
	$this->assertEquals(array('3', '4'), GalleryDataCache::getCacheTuple(3412312));
    }

    function testGetCachePath() {
	global $gallery;
	$gallery->setConfig('data.gallery.cache', '/');
	
	$this->assertEquals('/module/core/0/0/1.inc',
			    GalleryDataCache::getCachePath(array('type' => 'module',
								 'id' => 'core',
								 'itemId' => 1)));
	$this->assertEquals('/layout/matrix',
			    GalleryDataCache::getCachePath(array('type' => 'layout', 'id' => 'matrix')));
	
	$this->assertEquals('/entity/7/2/725.inc',
			    GalleryDataCache::getCachePath(array('type' => 'entity', 'itemId' => 725)));

	$this->assertEquals('/derivative/1/2/123.dat',
			    GalleryDataCache::getCachePath(array('type' => 'derivative', 'itemId' => 123)));

	$this->assertEquals('/derivative/1/2/123-meta.inc',
			    GalleryDataCache::getCachePath(array('type' => 'derivative-meta', 'itemId' => 123)));
    }

    function testPutToDisk() {
	global $gallery;

	GalleryDataCache::setFileCachingEnabled(true);

	$gallery->setConfig('data.gallery.cache', '/');
	$gallery->setPlatform(new DataCacheTestPlatform());
	
	$testdata = "testdata";
	GalleryDataCache::putToDisk(array('type' => 'entity', 'itemId' => 1), $testdata);
	$this->assertEquals(htmlentities("<?php \$data = unserialize('s:8:\"testdata\";'); ?>"),
			    htmlentities(DataCacheTestPlatform::getFileContents('/entity/0/0/1.inc')));
	DataCacheTestPlatform::reset();

	GalleryDataCache::putToDisk(array('type' => 'entity', 'itemId' => 1), $testdata, array('required-class'));
	$this->assertEquals(htmlentities("<?php GalleryCoreApi::relativeRequireOnce(\"required-class\"); " .
					 "\$data = unserialize('s:8:\"testdata\";'); ?>"),
			    htmlentities(DataCacheTestPlatform::getFileContents('/entity/0/0/1.inc')));
	DataCacheTestPlatform::reset();
	
	GalleryDataCache::putToDisk(array('type' => 'entity', 'itemId' => 21), $testdata);
	$this->assertEquals(htmlentities("<?php \$data = unserialize('s:8:\"testdata\";'); ?>"),
			    htmlentities(DataCacheTestPlatform::getFileContents('/entity/0/2/21.inc')));
	DataCacheTestPlatform::reset();

	$testdata = '|test#with\'funky"chars? \\*&%$[]}{ end';
	GalleryDataCache::putToDisk(array('type' => 'entity', 'itemId' => 721), $testdata);
	$this->assertEquals(htmlentities("<?php \$data = unserialize('s:37:\"|test#with\\'funky\"chars? \\*&%\$[]}{ end\";'); ?>"),
			    htmlentities(DataCacheTestPlatform::getFileContents('/entity/7/2/721.inc')));
	DataCacheTestPlatform::reset();
    }
    
    function testRemoveFromDisk() {
	global $gallery;

	GalleryDataCache::setFileCachingEnabled(true);

	list ($ret, $modulePluginStatus) = GalleryCoreApi::fetchPluginStatus('module');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $layoutPluginStatus) = GalleryCoreApi::fetchPluginStatus('layout');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$gallery->setConfig('data.gallery.cache', '/');
	$gallery->setPlatform(new DataCacheTestPlatform());
	
	GalleryDataCache::removeFromDisk(array('type' => 'entity', 'itemId' => 1));
	$this->assert(DataCacheTestPlatform::wasFileDeleted('/entity/0/0/1.inc'), 'file was not deleted');
	DataCacheTestPlatform::reset();

	GalleryDataCache::removeFromDisk(array('type' => 'module', 'id' => 'core', 'itemId' => 1));
	$this->assert(DataCacheTestPlatform::wasFileDeleted('/module/core/0/0/1.inc'), 'file was not deleted');
	DataCacheTestPlatform::reset();

	GalleryDataCache::removeFromDisk(array('type' => 'module', 'id' => 'core'));
	$this->assert(DataCacheTestPlatform::wasDirDeleted('/module/core'), 'dir was not deleted');
	DataCacheTestPlatform::reset();

	GalleryDataCache::removeFromDisk(array('type' => 'module', 'itemId' => 1));
	foreach (array_keys($modulePluginStatus) as $moduleId) {
	    $targetFile = '/module/' . $moduleId . '/0/0/1.inc';
	    $this->assert(DataCacheTestPlatform::wasFileDeleted($targetFile), "$targetFile was not deleted");
	}
	DataCacheTestPlatform::reset();
	
	GalleryDataCache::removeFromDisk(array('type' => 'layout', 'itemId' => 1));
	foreach (array_keys($layoutPluginStatus) as $layoutId) {
	    $targetFile = '/layout/' . $layoutId . '/0/0/1.inc';
	    $this->assert(DataCacheTestPlatform::wasFileDeleted($targetFile), "$targetFile was not deleted");
	}
	DataCacheTestPlatform::reset();
    }
    
    function testGetFromDisk() {
	global $gallery;
	
	GalleryDataCache::setFileCachingEnabled(true);

	$gallery->setConfig('data.gallery.cache', '/');
	$gallery->setPlatform(new DataCacheTestPlatform_testGetFromDisk());

	/*
	 * GalleryDataCache::getFromDisk uses include() and we don't have a platform wrapper for that.  We
	 * can't easily wrap that function because we want to take advantage of the fact that include() shares
	 * the lexical scope of the calling function, and wrapping it would change that scope.  But we can at
	 * least partially exercise the function and make sure it doesn't throw any errors.
	 */
	GalleryDataCache::getFromDisk(array('type' => 'entity', 'itemId' => 1));
	GalleryDataCache::getFromDisk(array('type' => 'module', 'id' => 'core', 'itemId' => 1));
    }

    function testCachePermission() {
	global $gallery;
	
	GalleryDataCache::cachePermissions(array('1', '2'), 'test.TestPermission');
	$this->assert(GalleryDataCache::hasPermission('1', 'test.TestPermission'),
			'1 should have permission test.TestPermission');
	$this->assert(GalleryDataCache::hasPermission('2', 'test.TestPermission'),
			'2 should have permission test.TestPermission');
	$this->assert(! GalleryDataCache::hasPermission('3', 'test.TestPermission'),
			'3 shouldn\'t have permission test.TestPermission');
	$this->assert(! GalleryDataCache::hasPermission('1', 'test.OtherPermission'),
			'1 shouldn\'t have permission test.OtherPermission');
	
	GalleryDataCache::cachePermissions(array('3'), 'test.OtherPermission');
	$this->assert(GalleryDataCache::hasPermission('1', 'test.TestPermission'),
			'1 should still have permission test.TestPermission');
	$this->assert(! GalleryDataCache::hasPermission('1', 'test.OtherPermission'),
			'1 still shouldn\'t have permission test.OtherPermission');
	$this->assert(GalleryDataCache::hasPermission('3', 'test.OtherPermission'),
			'3 should now have permission test.OtherPermission');
	$this->assert(! GalleryDataCache::hasPermission('3', 'test.TestPermission'),
			'3 shouldn\'t have permission test.TestPermission');
    }
}

/**
 * Mock platform
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class DataCacheTestPlatform_testGetFromDisk {
    function file_exists($path) {
	return false;
    }
}

/**
 * Mock platform
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class DataCacheTestPlatform {

    function DataCacheTestPlatform() {
	$this->reset();
    }

    function reset() {
	$record =& DataCacheTestPlatform::getRecord();
	$record = array();
    }

    function &getRecord() {
	static $record;
	if (!isset($record)) {
	    $record = array();
	}

	return $record;
    }

    function getFileContents($path) {
	$record =& DataCacheTestPlatform::getRecord();
	if (isset($record['contents'][$path])) {
	    return $record['contents'][$path];
	}
	
	return null;
    }

    function wasFileDeleted($path) {
	$record =& DataCacheTestPlatform::getRecord();
	return isset($record['deleted-file'][$path]);
    }
    
    function wasDirDeleted($path) {
	$record =& DataCacheTestPlatform::getRecord();
	return isset($record['deleted-dir'][$path]);
    }
    
    function fopen($path, $modes) {
	$record =& DataCacheTestPlatform::getRecord();
	if ($modes == 'wb') {
	    $record['contents'][$path] = '';
	} else if ($modes == 'rb') {
	    $record['contents'][$path] = 'contents of ' . $path;
	}
	return $path;
    }

    function flock($handle, $type) {
	// Ignore for now
    }

    function fwrite($handle, $data) {
	$record =& DataCacheTestPlatform::getRecord();
	if (!isset($record['contents'][$handle])) {
	    $record['contents'][$handle] = '';
	}
	
	$record['contents'][$handle] .= $data;
    }

    function unlink($filename) {
	$record =& DataCacheTestPlatform::getRecord();
	$record['deleted-file'][$filename] = 1;
    }

    function recursiveRmDir($dir) {
	$record =& DataCacheTestPlatform::getRecord();
	$record['deleted-dir'][$dir] = 1;
    }

    function fclose($handle) {
	// Ignore for now
    }

    function file_exists($path) {
	return true;
    }

    function is_dir($path) {
	return preg_match('{/(module|layout)/\w+$}', $path);
    }
}

?>
