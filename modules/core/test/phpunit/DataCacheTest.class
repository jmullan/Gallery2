<?php
/*
 * $RCSfile: DataCacheTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.36 $ $Date: 2006/02/16 20:04:49 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test DataCache functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class DataCacheTest extends GalleryTestCase {

    function DataCacheTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();
	global $gallery;

	$ret = $this->_markPluginParametersForCleanup('module', 'core');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$acceleration['user']['type'] = 'full';
	$acceleration['user']['expiration'] = 30;
	$acceleration['guest']['type'] = 'none';
	$ret = GalleryCoreApi::setPluginParameter(
	    'module', 'core', 'acceleration', serialize($acceleration));
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$session =& $gallery->getSession();
	$session->remove('theme.guestPreviewMode');

	unset($_SERVER['HTTP_PRAGMA']);
	unset($_SERVER['HTTP_CACHE_CONTROL']);
    }

    function tearDown() {
	$ret = GalleryCoreApi::removeMapEntry('GalleryCacheMap', array('itemId' => 0));
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::tearDown();
    }

    function testPutAndGet() {
	$key = 'test-key';
	$value = 'test-value';
	GalleryDataCache::put($key, $value);
	$this->assertEquals($value, GalleryDataCache::get($key));
    }

    function testContainsKey() {
	$key = 'test-key';
	$value = 'test-value';
	GalleryDataCache::put($key, $value);
	$this->assert(GalleryDataCache::containsKey($key));
    }

    function testReset() {
	$key = 'test-key';
	$value = 'test-value';
	GalleryDataCache::put($key, $value);
	$this->assert(GalleryDataCache::containsKey($key), 'Could not put a var to GDC');
	/* Add a protected var */
	$pKey = 'prot-test-key';
	$pValue = 'prot-test-value';
	GalleryDataCache::put($pKey, $pValue, true);
	$this->assert(GalleryDataCache::containsKey($pKey), 'Could not put a protected var to GDC');
	GalleryDataCache::reset();
	$this->assert(!GalleryDataCache::containsKey($key), 'Could not reset GDC');
	$this->assert(GalleryDataCache::containsKey($pKey), 'Reset GDC deleted a protected var');
	GalleryDataCache::reset(true);
	$this->assert(!GalleryDataCache::containsKey($pKey),
		      'Reset(true) did not delete protected vars');
    }

    function testRemoveByPattern() {
	GalleryDataCache::put('foo(1, 2, 3, 4)', 'baz');
	GalleryDataCache::put('foo(2, 3, 4)', 'baz');
	GalleryDataCache::put('bar(3, 4)', 'baz');
	GalleryDataCache::put('bar(4)', 'baz');

	GalleryDataCache::removeByPattern('foo\(2, ');
	GalleryDataCache::removeByPattern('bar');

	$this->assert(GalleryDataCache::containsKey('foo(1, 2, 3, 4)', 'baz'));
	$this->assert(!GalleryDataCache::containsKey('foo(2, 3, 4)', 'baz'));
	$this->assert(!GalleryDataCache::containsKey('bar(3, 4)', 'baz'));
	$this->assert(!GalleryDataCache::containsKey('bar(4)', 'baz'));
    }

    function testGetCacheTuple() {
	$this->assertEquals(array('0', '0'), GalleryDataCache::getCacheTuple(0));
	$this->assertEquals(array('0', '0'), GalleryDataCache::getCacheTuple(1));
	$this->assertEquals(array('0', '2'), GalleryDataCache::getCacheTuple(21));
	$this->assertEquals(array('0', '9'), GalleryDataCache::getCacheTuple(99));
	$this->assertEquals(array('7', '2'), GalleryDataCache::getCacheTuple(721));
	$this->assertEquals(array('3', '4'), GalleryDataCache::getCacheTuple(3412312));
	$this->assertEquals(array('0', '0'), GalleryDataCache::getCacheTuple('_all'));
    }

    function testGetCachePath() {
	global $gallery;
	$gallery->setConfig('data.gallery.cache', '/data/cache/');

	$cases = array();
	$cases['/data/cache/module/core/0/0/1.inc'] =
	    array('type' => 'module', 'id' => 'core', 'itemId' => 1);
	$cases['/data/cache/module/core/0/0/0.inc'] =
	    array('type' => 'module', 'id' => 'core', 'itemId' => '../EVIL');
	$cases['/data/cache/module/0/0/0/1.inc'] =
	    array('type' => 'module', 'id' => '../EVIL', 'itemId' => 1);

	/* We use itemId to store keys like 'GalleryFactoryHelper_loadRegistry' */
	$cases['/data/cache/module/core/0/0/Legal_key.inc'] =
	    array('type' => 'module', 'id' => 'core', 'itemId' => 'Legal_key');


	$cases['/data/cache/theme/matrix'] =
	    array('type' => 'theme', 'id' => 'matrix');
	$cases['/data/cache/theme/matrix/1/2/123.inc'] =
	    array('type' => 'theme', 'id' => 'matrix', 'itemId' => 123);
	$cases['/data/cache/theme/0/1/2/123.inc'] =
	    array('type' => 'theme', 'id' => '../EVIL', 'itemId' => 123);
	$cases['/data/cache/theme/matrix/0/0/0.inc'] =
	    array('type' => 'theme', 'id' => 'matrix', 'itemId' => '../EVIL');

	$cases['/data/cache/entity/7/2/725.inc'] =
	    array('type' => 'entity', 'itemId' => 725);
	$cases['/data/cache/entity/0/0/0.inc'] =
	    array('type' => 'entity', 'itemId' => '../EVIL');

	$cases['/data/cache/derivative/1/2/123.dat'] =
	    array('type' => 'derivative', 'itemId' => 123);
	$cases['/data/cache/derivative/0/0/0.dat'] =
	    array('type' => 'derivative', 'itemId' => '../EVIL');

	$cases['derivative/1/2/123.dat'] =
	    array('type' => 'derivative-relative', 'itemId' => 123);
	$cases['derivative/0/0/0.dat'] =
	    array('type' => 'derivative-relative', 'itemId' => '../EVIL');

	$cases['/data/cache/derivative/1/2/123-meta.inc'] =
	    array('type' => 'derivative-meta', 'itemId' => 123);
	$cases['/data/cache/derivative/0/0/0-meta.inc'] =
	    array('type' => 'derivative-meta', 'itemId' => '../EVIL');

	$cases['/data/cache/entity/1/2/123-fast.inc'] =
	    array('type' => 'fast-download', 'itemId' => 123);
	$cases['/data/cache/entity/0/0/0-fast.inc'] =
	    array('type' => 'fast-download', 'itemId' => '../EVIL');

	$cases['/data/cache/module/foo/1/2/123.dat'] =
	    array('type' => 'module-data', 'module' => 'foo', 'itemId' => 123);
	$cases['/data/cache/module/foo/1/2/123_AZ_az.dat'] =
	    array('type' => 'module-data', 'module' => 'foo', 'itemId' => '123_AZ_az');
	$cases['/data/cache/module/foo/0/0/___EVIL.dat'] =
	    array('type' => 'module-data', 'module' => 'foo', 'itemId' => '../EVIL');
	$cases['/data/cache/module/0/1/2/123.dat'] =
	    array('type' => 'module-data', 'module' => '../EVIL', 'itemId' => 123);

	$cases['/data/cache/module/foo/'] =
	    array('type' => 'module-data', 'module' => 'foo');

	foreach ($cases as $expectedPath => $info) {
	    $this->assertEquals($expectedPath, GalleryDataCache::getCachePath($info));
	}
    }

    function testPutToDisk() {
	global $gallery;

	GalleryDataCache::setFileCachingEnabled(true);

	$gallery->setConfig('data.gallery.cache', '/data/cache/');
	$gallery->setPlatform(new DataCacheTestPlatform());

	$testdata = "testdata c:\foo\bar";
	GalleryDataCache::putToDisk(array('type' => 'entity', 'itemId' => 1), $testdata);
	$this->assertEquals('|' . serialize($testdata),
	    DataCacheTestPlatform::getFileContents('/data/cache/entity/0/0/1.inc'));
	DataCacheTestPlatform::reset();

	GalleryDataCache::putToDisk(array('type' => 'entity', 'itemId' => 1),
				    $testdata, array('required-class'));
	$this->assertEquals('required-class|' . serialize($testdata),
	    DataCacheTestPlatform::getFileContents('/data/cache/entity/0/0/1.inc'));
	DataCacheTestPlatform::reset();

	GalleryDataCache::putToDisk(array('type' => 'entity', 'itemId' => 1),
				    $testdata, array('required-class1', 'required-class2'));
	$this->assertEquals('required-class1,required-class2|' . serialize($testdata),
	    DataCacheTestPlatform::getFileContents('/data/cache/entity/0/0/1.inc'));
	DataCacheTestPlatform::reset();

	GalleryDataCache::putToDisk(array('type' => 'entity', 'itemId' => 21), $testdata);
	$this->assertEquals('|' . serialize($testdata),
	    DataCacheTestPlatform::getFileContents('/data/cache/entity/0/2/21.inc'));
	DataCacheTestPlatform::reset();

	$testdata = '|test#with\'funky"chars? \\*&%$[]}{ end';
	GalleryDataCache::putToDisk(array('type' => 'entity', 'itemId' => 721), $testdata);
	$this->assertEquals('|' . serialize($testdata),
	    DataCacheTestPlatform::getFileContents('/data/cache/entity/7/2/721.inc'));
	DataCacheTestPlatform::reset();
    }

    function testRemoveFromDisk() {
	global $gallery;

	GalleryDataCache::setFileCachingEnabled(true);

	list ($ret, $modulePluginStatus) = GalleryCoreApi::fetchPluginStatus('module');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $themePluginStatus) = GalleryCoreApi::fetchPluginStatus('theme');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$gallery->setConfig('data.gallery.cache', '/data/cache/');
	$gallery->setPlatform(new DataCacheTestPlatform());

	GalleryDataCache::removeFromDisk(array('type' => 'entity', 'itemId' => 1));
	$this->assert(DataCacheTestPlatform::wasFileDeleted('/data/cache/entity/0/0/1.inc'),
		      'file was not deleted');
	DataCacheTestPlatform::reset();

	GalleryDataCache::removeFromDisk(array('type' => 'module', 'id' => 'core', 'itemId' => 1));
	$this->assert(DataCacheTestPlatform::wasFileDeleted('/data/cache/module/core/0/0/1.inc'),
		      'file was not deleted');
	DataCacheTestPlatform::reset();

	GalleryDataCache::removeFromDisk(array('type' => 'module', 'id' => 'core'));
	$this->assert(DataCacheTestPlatform::wasDirDeleted('/data/cache/module/core'),
		      'dir was not deleted');
	DataCacheTestPlatform::reset();

	GalleryDataCache::removeFromDisk(array('type' => 'module', 'itemId' => 1));
	foreach (array_keys($modulePluginStatus) as $moduleId) {
	    $targetFile = '/data/cache/module/' . $moduleId . '/0/0/1.inc';
	    $this->assert(DataCacheTestPlatform::wasFileDeleted($targetFile),
			  "$targetFile was not deleted");
	}
	DataCacheTestPlatform::reset();

	GalleryDataCache::removeFromDisk(array('type' => 'theme', 'itemId' => 1));
	foreach (array_keys($themePluginStatus) as $themeId) {
	    $targetFile = '/data/cache/theme/' . $themeId . '/0/0/1.inc';
	    $this->assert(DataCacheTestPlatform::wasFileDeleted($targetFile),
			  "$targetFile was not deleted");
	}
	DataCacheTestPlatform::reset();
    }

    function testGetFromDisk() {
	global $gallery;

	GalleryDataCache::setFileCachingEnabled(true);

	$gallery->setConfig('data.gallery.cache', '/data/cache/');
	$gallery->setPlatform(new DataCacheTestPlatform_testGetFromDisk());

	/*
	 * GalleryDataCache::getFromDisk uses include() and we don't have a
	 * platform wrapper for that.  We can't easily wrap that function
	 * because we want to take advantage of the fact that include() shares
	 * the lexical scope of the calling function, and wrapping it would
	 * change that scope.  But we can at least partially exercise the
	 * function and make sure it doesn't throw any errors.
	 */
	GalleryDataCache::getFromDisk(array('type' => 'entity', 'itemId' => 1));
	GalleryDataCache::getFromDisk(array('type' => 'module', 'id' => 'core', 'itemId' => 1));
    }

    function testPutAndGetFromDisk() {
	GalleryDataCache::setFileCachingEnabled(true);

	/* Put some content containing | and , and make sure it parses back ok */
	$cacheParams = array('type' => 'module',
			     'itemId' => 'phpunit_DataCacheTest_testData',
			     'id' => '_all');
	$data = array('key' => 'value,with|pipe', 'test' => 5);
	GalleryDataCache::putToDisk($cacheParams, $data);
	$readBack = GalleryDataCache::getFromDisk($cacheParams);
	$this->assertEquals($data, $readBack, 'no classes');
	GalleryDataCache::removeFromDisk($cacheParams);

	/* Put content with multiple required classes and make sure all are read */
	$data = array('one' => array('2|two' => 3), 4.5 => 'six,7');
	GalleryDataCache::putToDisk($cacheParams, $data,
				    array('modules/core/test/data/DataCacheTest_1.class',
					  'modules/core/test/data/DataCacheTest_2.class'));
	$readBack = GalleryDataCache::getFromDisk($cacheParams);
	$this->assertEquals($data, $readBack, 'two required classes');
	GalleryDataCache::removeFromDisk($cacheParams);
	$this->assert(class_exists('DataCacheTest_class1'), 'class1 should exist');
	$this->assert(class_exists('DataCacheTest_class2'), 'class2 should exist');
    }

    function testCachePermission() {
	global $gallery;
	GalleryDataCache::remove('GalleryDataCache::cachePermissions::newEntries');
	
	GalleryDataCache::cachePermissions(array('1', '2'), 'test.TestPermission');
	$this->assert(GalleryDataCache::hasPermission('1', 'test.TestPermission'),
			'1 should have permission test.TestPermission');
	$this->assert(GalleryDataCache::hasPermission('2', 'test.TestPermission'),
			'2 should have permission test.TestPermission');
	$this->assert(! GalleryDataCache::hasPermission('3', 'test.TestPermission'),
			'3 shouldn\'t have permission test.TestPermission');
	$this->assert(! GalleryDataCache::hasPermission('1', 'test.OtherPermission'),
			'1 shouldn\'t have permission test.OtherPermission');

	GalleryDataCache::cachePermissions(array('3'), 'test.OtherPermission');
	$this->assert(GalleryDataCache::hasPermission('1', 'test.TestPermission'),
			'1 should still have permission test.TestPermission');
	$this->assert(! GalleryDataCache::hasPermission('1', 'test.OtherPermission'),
			'1 still shouldn\'t have permission test.OtherPermission');
	$this->assert(GalleryDataCache::hasPermission('3', 'test.OtherPermission'),
			'3 should now have permission test.OtherPermission');
	$this->assert(! GalleryDataCache::hasPermission('3', 'test.TestPermission'),
			'3 shouldn\'t have permission test.TestPermission');
    }

    function testPutAndGetPageData() {
	$value = '<html><head><title>foo</title><body>this is some content</body></html>';
	$ret = GalleryDataCache::putPageData('test', 0, array('key'), $value);
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $result) = GalleryDataCache::getPageData('test', array('key'));
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($value, $result);
    }

    function testRemovePageData() {
	$ret = GalleryDataCache::putPageData('test', 0, array('key'), 'test');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $result) = GalleryDataCache::getPageData('test', array('key'));
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('test', $result);

	$ret = GalleryDataCache::removePageData(0);
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $result) = GalleryDataCache::getPageData('test', array('key'));
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(NULL, $result);
    }

    function testGetPageDataExpiredData() {
	global $gallery;
	$phpVm = new DataCacheTestMockVm();
	$gallery->_phpVm =& $phpVm;

	$phpVm->setTime(0);
	$ret = GalleryDataCache::putPageData('test', 0, array('key'), 'test');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$phpVm->setTime(time());
	list ($ret, $result) = GalleryDataCache::getPageData('test', array('key'));
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(NULL, $result);
    }

    function testShouldCachePostRequest() {
	$_SERVER['REQUEST_METHOD'] = 'POST';
	list ($ret, $shouldCache) = GalleryDataCache::shouldCache('read', 'page');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(false, $shouldCache);
    }

    function testShouldCacheReadNoCache1() {
	global $gallery;

	$_SERVER['HTTP_PRAGMA'] = 'no-cache';
	$_SERVER['REQUEST_METHOD'] = 'POST';
	list ($ret, $shouldCache) = GalleryDataCache::shouldCache('read', 'page');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(false, $shouldCache);
    }

    function testShouldCacheReadNoCache2() {
	global $gallery;

	$_SERVER['HTTP_CACHE_CONTROL'] = 'no-cache';
	$_SERVER['REQUEST_METHOD'] = 'POST';
	list ($ret, $shouldCache) = GalleryDataCache::shouldCache('read', 'page');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(false, $shouldCache);
    }

    function testShouldCacheReadUserOk() {
	global $gallery;
	
	$acceleration['user']['type'] = 'full';
	$ret = GalleryCoreApi::setPluginParameter(
	    'module', 'core', 'acceleration', serialize($acceleration));
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $shouldCache) = GalleryDataCache::shouldCache('read', 'full');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(true, $shouldCache);
    }

    function testShouldCacheReadGuestOk() {
	global $gallery;

	$acceleration['user']['type'] = 'full';
	$acceleration['guest']['type'] = 'full';
	$ret = GalleryCoreApi::setPluginParameter(
	    'module', 'core', 'acceleration', serialize($acceleration));
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $shouldCache) = GalleryDataCache::shouldCache('read', 'full');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(true, $shouldCache);
    }

    function testShouldCacheReadUserNotOk() {
	global $gallery;

	/* Make myself the anon user temporarily */
	$ret = GalleryCoreApi::setPluginParameter(
	    'module', 'core', 'id.anonymousUser', $gallery->getActiveUserId());
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$acceleration['user']['type'] = 'none';
	$acceleration['guest']['type'] = 'none';
	$ret = GalleryCoreApi::setPluginParameter(
	    'module', 'core', 'acceleration', serialize($acceleration));
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $shouldCache) = GalleryDataCache::shouldCache('read', 'full');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(false, $shouldCache);
    }

    function testShouldCacheNone() {
	global $gallery;

	$acceleration['user']['type'] = 'none';
	$ret = GalleryCoreApi::setPluginParameter(
	    'module', 'core', 'acceleration', serialize($acceleration));
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Use mock VM to enforce valid headers, so that the active browser doesn't interfere */
	$phpVm = new DataCacheTestMockVm();
	$gallery->_phpVm =& $phpVm;

	list ($ret, $shouldCache) = GalleryDataCache::shouldCache('read', 'partial');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(false, $shouldCache);
    }
    
    function testGetExtraPageCacheKey() {
    	global $gallery;
    	$session =& $gallery->getSession();
    	
    	/* Backup values */
    	$isUsingCookies = $session->isUsingCookies();
    	list ($ret, $activeLanguageCode) = $gallery->getActiveLanguageCode();
    	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Set test environment */
	$ret = $gallery->setActiveLanguageCode('en');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$session->_isUsingCookies = false;
	
    	list ($ret, $extraKey) = GalleryDataCache::_getExtraPageCacheKey();
    	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$this->assertEquals('0-en', $extraKey);
	
	/* Clean up */
	$ret = $gallery->setActiveLanguageCode($activeLanguageCode);
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$session->_isUsingCookies = $isUsingCookies;
    }
    
    /* Same test as userOk, but in guest preview mode */
    function testShouldNotCacheGuestPreviewPages() {
    	global $gallery;
    	$session =& $gallery->getSession();
    	
    	$session->put('theme.guestPreviewMode', 1);
    	
	$acceleration['user']['type'] = 'full';
	$ret = GalleryCoreApi::setPluginParameter(
	    'module', 'core', 'acceleration', serialize($acceleration));
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $shouldCache) = GalleryDataCache::shouldCache('read', 'full');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(false, $shouldCache);
    	
    	$session->remove('theme.guestPreviewMode');
    }
}

GalleryCoreApi::requireOnce('modules/core/classes/GalleryPhpVm.class');

/**
 * Mock VM
 */
class DataCacheTestMockVm extends GalleryPhpVm {

    function setTime($time) {
	$this->_time = $time;
    }
    function time() {
	return $this->_time;
    }
}

/**
 * Mock platform
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class DataCacheTestPlatform_testGetFromDisk {
    function file_exists($path) {
	return false;
    }
}

/**
 * Mock platform
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class DataCacheTestPlatform {

    function DataCacheTestPlatform() {
	$this->reset();
    }

    function reset() {
	$record =& DataCacheTestPlatform::getRecord();
	$record = array();
    }

    function &getRecord() {
	static $record;
	if (!isset($record)) {
	    $record = array();
	}

	return $record;
    }

    function getFileContents($path) {
	$record =& DataCacheTestPlatform::getRecord();
	if (isset($record['contents'][$path])) {
	    return $record['contents'][$path];
	}

	return null;
    }

    function wasFileDeleted($path) {
	$record =& DataCacheTestPlatform::getRecord();
	return isset($record['deleted-file'][$path]);
    }

    function wasDirDeleted($path) {
	$record =& DataCacheTestPlatform::getRecord();
	return isset($record['deleted-dir'][$path]);
    }

    function atomicWrite($filename, $data) {
	$record =& DataCacheTestPlatform::getRecord();
	$record['contents'][$filename] = $data;
	return strlen($data);
    }

    function flock($handle, $type) {
	/* Ignore for now */
    }

    function unlink($filename) {
	$record =& DataCacheTestPlatform::getRecord();
	$record['deleted-file'][$filename] = 1;
    }

    function recursiveRmDir($dir) {
	$record =& DataCacheTestPlatform::getRecord();
	$record['deleted-dir'][$dir] = 1;
    }

    function file_exists($path) {
	return true;
    }

    function is_dir($path) {
	return preg_match('{/(module|theme)/\w+$}', $path);
    }
}
?>
