<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemMove controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemMoveControllerTest extends GalleryControllerTestCase {

    function ItemMoveControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core:ItemMove');
    }

    function setUp() {
	global $gallery;
	
	parent::setUp();

	$parentId = $this->_getRootId();
	for ($i = 0; $i < 5; $i++) {
	    list ($ret, $this->_album[$i]) = $this->_createRandomAlbum($parentId);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $parentId = $this->_album[$i]->getId();

	    $itemId = $this->_album[$i]->getId();
	    $userId = $gallery->getActiveUserId();
	    switch ($i) {
	    case 0:
		/* Can delete, can add albums */
		$ret = GalleryCoreApi::removeItemPermissions($itemId);
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		
		$ret = GalleryCoreApi::addUserPermission($itemId, $userId, 'core.delete');
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		
		$ret = GalleryCoreApi::addUserPermission($itemId, $userId, 'core.addAlbumItem');
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		break;
		
	    case 1:
		/* Can delete, can add data items */
		$ret = GalleryCoreApi::removeItemPermissions($itemId);
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		
		$ret = GalleryCoreApi::addUserPermission($itemId, $userId, 'core.delete');
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		
		$ret = GalleryCoreApi::addUserPermission($itemId, $userId, 'core.addDataItem');
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		break;

	    case 2:
		/* Can delete, can't add albums or data items */
		$ret = GalleryCoreApi::removeItemPermissions($itemId);
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		
		$ret = GalleryCoreApi::addUserPermission($itemId, $userId, 'core.delete');
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		break;

	    case 3:
		/* full permissions */
		$ret = GalleryCoreApi::addUserPermission($itemId, $userId, 'core.all');
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		
		break;

	    case 4:
		/* No permissions */
		$ret = GalleryCoreApi::removeItemPermissions($itemId);
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		break;
	    }
	}

	/* Create a data item */
	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_album[3]->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	global $gallery;
	
	$ret = GalleryCoreApi::deleteEntityById($this->_album[0]->getId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	parent::tearDown();
    }

    /**
     * Test moving an item
     */
    function testMoveItem() {
	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_album[1]->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]', array($this->_album[2]->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][move]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_album[0]->getId());

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemMove',
						      'itemId' => $this->_album[1]->getId()),
				  'status' => array('moved' => array('count' => 1)),
				  'error' => array()),
			    $results);

	/* Verify parent sequence */
	list ($ret, $parentSequence) = GalleryCoreApi::fetchParentSequence($this->_album[2]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array($this->_getRootId(), $this->_album[0]->getId()),
			    $parentSequence);


	/* Verify that the album now has a thumbnail */
	$this->assert('implement me');
    }

    /**
     * Test moving an item into a peer.  This is to find a regression in the parent sequence code.
     */
    function testMoveItemIntoPeer() {
	global $gallery;

	list ($ret, $peer) = $this->_createRandomAlbum($this->_album[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	GalleryUtilities::putRequestVariable('itemId', $this->_album[0]->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]', array($this->_album[1]->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][move]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $peer->getId());

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemMove',
						      'itemId' => $this->_album[0]->getId()),
				  'status' => array('moved' => array('count' => 1)),
				  'error' => array()),
			    $results);

	/* Verify parent sequences */
	list ($ret, $parentSequence) = GalleryCoreApi::fetchParentSequence($this->_album[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($this->_getRootId(),
				  $this->_album[0]->getId(),
				  $peer->getId()),
			    $parentSequence,
			    'album 1 is inside peer');

	list ($ret, $parentSequence) = GalleryCoreApi::fetchParentSequence($peer->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($this->_getRootId(), $this->_album[0]->getId()),
			    $parentSequence, 'peer is under the root');

	list ($ret, $parentSequence) = GalleryCoreApi::fetchParentSequence($this->_album[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($this->_getRootId()), $parentSequence, 'album 0 is under the root');


	/* Verify that the album now has a thumbnail */
	$this->assert('implement me');
    }

    /**
     * Test changing pages with to an invalid page number
     */
    function testMoveNextPageOutOfRange() {
	global $gallery;

	/* create random items */
	$items = array();
	for ($i = 0; $i < 5; $i++) {
	    if (($i % 2) == 0) {
		list($ret, $items[$i]) = $this->_createRandomAlbum($this->_album[1]->getId());
	    } else {
		list($ret, $items[$i]) = $this->_createRandomDataItem($this->_album[1]->getId());
	    }
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	$selectedIds = array();
	foreach ($items as $item) {
	    $selectedIds[$item->getId()] = 1;
	}
	
	GalleryUtilities::putRequestVariable('itemId', $this->_album[1]->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]', $selectedIds);
	GalleryUtilities::putRequestVariable('form[numPerPage]', 3);
	GalleryUtilities::putRequestVariable('page', 3);	
	GalleryUtilities::putRequestVariable('form[action][next]', 1);
	
	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemMove',
						      'itemId' => $this->_album[1]->getId(),
						      'page' => 2),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testMovePreviousPageOutOfRange() {
	global $gallery;

	/* create random items */
	$items = array();
	for ($i = 0; $i < 5; $i++) {
	    if (($i % 2) == 0) {
		list($ret, $items[$i]) = $this->_createRandomAlbum($this->_album[1]->getId());
	    } else {
		list($ret, $items[$i]) = $this->_createRandomDataItem($this->_album[1]->getId());
	    }
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	$selectedIds = array();
	foreach ($items as $item) {
	    $selectedIds[$item->getId()] = 1;
	}
	
	GalleryUtilities::putRequestVariable('itemId', $this->_album[1]->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]', $selectedIds);
	GalleryUtilities::putRequestVariable('page', -1);	
	GalleryUtilities::putRequestVariable('form[action][previous]', 1);
	
	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemMove',
						      'itemId' => $this->_album[1]->getId(),
						      'page' => 1),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    
    /**
     * Test moving an item to a bogus destination
     */
    function testMoveItemIntoBogusDestination() {
	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_album[2]->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]', array($this->_album[2]->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][move]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemMove'),
				  'status' => array(),
				  'error' => array('form[error][destination][empty]')),
			    $results);
    }

    /**
     * Test moving an item into itself
     */
    function testMoveItemIntoSelf() {
	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_album[0]->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]', array($this->_album[1]->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][move]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_album[1]->getId());

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemMove'),
				  'status' => array(),
				  'error' => array('form[error][source][' .
						   $this->_album[1]->getId() .
						   '][selfMove]')),
			    $results);
    }

    /**
     * Test moving an item into its own child
     */
    function testMoveItemIntoChild() {
	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_album[0]->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]', array($this->_album[1]->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][move]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_album[3]->getId());

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemMove'),
				  'status' => array(),
				  'error' => array('form[error][source][' .
						   $this->_album[1]->getId() .
						   '][selfMove]')),
			    $results);
    }

    /**
     * Test moving an item into a container where we have no add permissions
     */
    function testMoveItemIntoAlbumWithNoAddPermissions() {
	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_album[3]->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]', array($this->_album[4]->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][move]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_album[2]->getId());

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemMove'),
				  'status' => array(),
				  'error' => array('form[error][destination][permission]')),
			    $results);
    }

    /**
     * Test moving an item that we can't delete
     */
    function testMoveItemWithNoDeletePermissions() {
	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_album[3]->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]', array($this->_album[4]->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][move]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_album[0]->getId());

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemMove'),
				  'status' => array(),
				  'error' => array('form[error][source][' .
						   $this->_album[4]->getId() . 
						   '][permission][delete]')),
			    $results);
    }

    /**
     * Test moving an album into a container where we have no add album permissions
     */
    function testMoveAlbumIntoDestinationWithNoAddAlbumPermissions() {
	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_album[2]->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]', array($this->_album[3]->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][move]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_album[1]->getId());

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemMove'),
				  'status' => array(),
				  'error' => array('form[error][source][' .
						   $this->_album[3]->getId() .
						   '][permission][addAlbumItem]')),
			    $results);
    }

    /**
     * Test moving an album into a container where we have no add album permissions
     */
    function testMoveDataItemIntoDestinationWithNoAddDataItemPermissions() {
	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_album[3]->getId());
	GalleryUtilities::putRequestVariable('form[selectedIds]', array($this->_item->getId() => 1));
	GalleryUtilities::putRequestVariable('form[action][move]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_album[0]->getId());

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemMove'),
				  'status' => array(),
				  'error' => array('form[error][source][' .
						   $this->_item->getId() .
						   '][permission][addDataItem]')),
			    $results);
    }
}
?>
