<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test DownloadItem functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision$
 */
class DownloadItemTest extends GalleryTestCase {

    function DownloadItemTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_item);

	list ($ret, $this->_view) = GalleryView::loadView('core.DownloadItem');
	if ($ret) {
	    return $ret;
	}
	$this->_userId = $gallery->getActiveUserId();
	$gallery->_phpVm = new DownloadItemTestPhpVm();
    }

    function _download() {
	set_error_handler('DownloadItemTest_error_handler');
	ob_start();
	$ret = $this->_view->renderImmediate(array(), array());
	$output = ob_get_contents();
	ob_end_clean();
	return array($ret, $output);
    }

    function testNoItemId() {
	list ($ret, $output) = $this->_download();
	$this->assert($ret && $ret->getErrorCode() & ERROR_BAD_PARAMETER, 'expected error');
    }

    function testMaliciousFilename() {
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('fileName', 'voodoo');

	list ($ret, $output) = $this->_download();
	if ($ret) {
	    $this->assert($ret->getErrorCode() & ERROR_MISSING_OBJECT, 'expected error 1');
	    if (!($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
		return $ret;
	    }
	} else {
	    $this->fail('expected error 1, got no error');
	}

	/* Now add the required permissions to see the item */
	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.view');
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.viewSource');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $output) = $this->_download();
	if ($ret) {
	    $this->assert($ret->getErrorCode() & ERROR_BAD_PARAMETER, 'expected error 2');
	    if (!($ret->getErrorCode() & ERROR_BAD_PARAMETER)) {
		return $ret;
	    }
	} else {
	    $this->fail('expected error 2, got no error');
	}
    }

    function testItemPermission() {
	/* Item needs core.viewSource */
	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.view');
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.viewResizes');
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	list ($ret, $output) = $this->_download();
	$this->assert($ret && $ret->getErrorCode() & ERROR_PERMISSION_DENIED, 'expected error');

	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.viewSource');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $output) = $this->_download();
	$this->assert(!$ret, 'expected success');
    }

    function testPreferredPermission() {
	/* Preferred needs core.viewSource */
	list ($ret, $derivative) = $this->_createDerivative($this->_item, $this->_item->getId(),
							    DERIVATIVE_TYPE_IMAGE_PREFERRED);
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.view');
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.viewResizes');
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('itemId', $derivative->getId());
	list ($ret, $output) = $this->_download();
	$this->assert($ret && $ret->getErrorCode() & ERROR_PERMISSION_DENIED, 'expected error');

	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.viewSource');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $output) = $this->_download();
	$this->assert(!$ret, 'expected success');
    }

    function testResizePermission() {
	/* Resize needs core.viewResizes */
	list ($ret, $derivative) = $this->_createDerivative($this->_item, $this->_item->getId(),
							    DERIVATIVE_TYPE_IMAGE_RESIZE);
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.view');
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.viewSource');
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('itemId', $derivative->getId());
	list ($ret, $output) = $this->_download();
	$this->assert($ret && $ret->getErrorCode() & ERROR_PERMISSION_DENIED, 'expected error');

	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.viewResizes');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $output) = $this->_download();
	$this->assert(!$ret, 'expected success');
    }

    function testThumbnailPermission() {
	/* Thumbnail needs core.view */
	list ($ret, $derivative) = $this->_createDerivative($this->_item, $this->_item->getId(),
							    DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.viewResizes');
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.viewSource');
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('itemId', $derivative->getId());
	list ($ret, $output) = $this->_download();
	$this->assert($ret && $ret->getErrorCode() & ERROR_MISSING_OBJECT, 'expected error');

	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.view');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $output) = $this->_download();
	$this->assert(!$ret, 'expected success');
    }

    function testPrintService() {
	/* Flag in session allows print service to bypass viewResizes/viewSource for set of ids */
	global $gallery;
	$session =& $gallery->getSession();
	$session->put('core.isPrintService', array(2, $this->_item->getId()));

	/* Still need core.view */
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	list ($ret, $output) = $this->_download();
	$this->assert($ret && $ret->getErrorCode() & ERROR_MISSING_OBJECT, 'expected error 1');

	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.view');
	if ($ret) {
	    return $ret;
	}

	$session->put('core.isPrintService', array(2, 5));
	list ($ret, $output) = $this->_download();
	$this->assert($ret && $ret->getErrorCode() & ERROR_PERMISSION_DENIED, 'expected error 2');

	$session->put('core.isPrintService', array(2, $this->_item->getId(), 5));
	list ($ret, $output) = $this->_download();
	$this->assert(!$ret, 'expected success');
    }

    function testDownloadChildEntityFailsWithErrorMissingObject() {
	list ($ret, $entity) =
	    GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryChildEntity');
	if ($ret) {
	    return $ret;
	}
	$ret = $entity->create($this->_item->getId());
	if ($ret) {
	    return $ret;
	}
	$ret = $entity->save();
	if ($ret) {
	    return $ret;
	}

	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(), $this->_userId,
						 'core.view');
	if ($ret) {
	    return $ret;
	}
	GalleryUtilities::putRequestVariable('itemId', $entity->getId());

	list ($ret, $output) = $this->_download();
	if ($ret) {
	    /*
	     * We don't know what permission to check for arbitrary entities. Avoid information
	     * disclosure by treating such bogus requests as if the entity didn't exist.
	     */
	    $this->assert($ret->getErrorCode() & ERROR_MISSING_OBJECT, 'expected error');
	    if (!($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
		return $ret;
	    }
	} else {
	    $this->fail('expected error, got none');
	}
    }

    function testDownloadNonItemRelatedEntityFailsWithErrorMissingObject() {
	/*
	 * Create an entity that has no GalleryItem as parent (like WatermarkImage or
	 * ThumbnailImage).
	 */
	list ($ret, $parent) =
	    GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryChildEntity');
	if ($ret) {
	    return $ret;
	}
	$ret = $parent->create($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($parent);
	$ret = $parent->save();
	if ($ret) {
	    return $ret;
	}

	$entity = new DownloadItemTestEntity();
	$entity->create($parent->getId());
	if ($ret) {
	    return $ret;
	}
	$ret = $entity->save();
	if ($ret) {
	    return $ret;
	}
	$cacheKey = 'GalleryEntityHelper::loadEntitiesById(' . $entity->getId() . ')';
	GalleryDataCache::put($cacheKey, $entity);

	GalleryUtilities::putRequestVariable('itemId', $entity->getId());

	/* Execute the test and verify that it fail */
	list ($ret, $output) = $this->_download();
	if ($ret) {
	    /*
	     * We don't know what permission to check for arbitrary entities. Avoid information
	     * disclosure by treating such bogus requests as if the entity didn't exist.
	     */
	    $this->assert($ret->getErrorCode() & ERROR_MISSING_OBJECT, 'expected error');
	    if (!($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
		return $ret;
	    }
	} else {
	    $this->fail('expected error, got none');
	}
    }
}

/**
 * Test PhpVm to ignore header() calls
 */
class DownloadItemTestPhpVm extends GalleryPhpVm {
    function header($string, $replace=null) {
    }
}

class DownloadItemTestEntity extends GalleryChildEntity {
    function getMimeType() {
	return 'image/jpeg';
    }

    function fetchPath() {
	return array(null, __FILE__);
    }
}

function DownloadItemTest_error_handler($errorNumber, $errorString, $file, $line, $context) {
    if ($errorNumber == 2048) {
    	return; /* E_STRICT */
    }

    if (error_reporting() == 0 && strpos($errorString, 'apacheSetenvBroken') !== false) {
	return;
    }

    /* Else call our default error_handler */
    return PHPUnit_error_handler($errorNumber, $errorString, $file, $line, $context);
}
?>
