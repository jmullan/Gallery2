<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Jesse Mullan
 */

/**
 * Required classes
 */
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryTemplateAdapter.class');

/**
 * Test Gallery Template Adapter functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class TemplateAdapterTest extends GalleryTestCase {
    function GalleryTemplateAdapterTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function _setupMockAdapter() {
	global $gallery;
	$this->_mockUrlGenerator = new TemplateAdapterMockUrlGenerator();
	$gallery->setUrlGenerator($this->_mockUrlGenerator);

	$this->_mockSmarty = new TemplateAdapterMockSmarty();
	$this->_templateAdapter = new GalleryTemplateAdapter();
    }

    function testLinkId1() {
	$test = array('urlParams' => array());
	$result = GalleryTemplateAdapter::linkId($test);
	$this->assertEquals('gbAdminLink gbLink', $result);
    }

    function testLinkId2() {
	$test = array('urlParams' => array('view' => 'core.:ItemAdmin'));
	$result = GalleryTemplateAdapter::linkId($test);
	$this->assertEquals('gbAdminLink gbLink-core_ItemAdmin', $result);
    }

    function testLinkId3() {
	$test = array('urlParams' => array('view' => '.;-_monkey'));
	$result = GalleryTemplateAdapter::linkId($test);
	$this->assertEquals('gbAdminLink gbLink-monkey', $result);
    }

    function testLinkId4() {
	$test = array('urlParams' => array('controller' => 'core.Monkey',
					   'view' => 'core.Pirate',
					   'subView' => 'core.Ninja'));
	$result = GalleryTemplateAdapter::linkId($test);
	$this->assertEquals('gbAdminLink gbLink-core_Monkey-core_Pirate-core_Ninja', $result);
    }

    function testLinkId5() {
	$test = array('view' => 'core.Pirate');
	$result = GalleryTemplateAdapter::linkId($test);
	$this->assertEquals('gbAdminLink gbLink-core_Pirate', $result);
    }

    function testLinkId6() {
	$test = array('view' => 'core.Pirate',
		      'urlParams' => array('controller' => 'core.Monkey',
					   'view' => 'core.Pirate',
					   'subView' => 'core.Ninja'));
	$result = GalleryTemplateAdapter::linkId($test);
	$this->assertEquals('gbAdminLink gbLink-core_Monkey-core_Pirate-core_Ninja', $result);
    }

    function testSafeCssName1() {
	$string = 'core.ItemAdmin';
	$result = GalleryTemplateAdapter::_safeCssName($string);
	$this->assertEquals('core_ItemAdmin', $result);
    }

    function testSafeCssName2() {
	$string = 'core..ItemAdmin';
	$result = GalleryTemplateAdapter::_safeCssName($string);
	$this->assertEquals('core_ItemAdmin', $result);
    }

    function testSafeCssName3() {
	$string = '.;-_monkey';
	$result = GalleryTemplateAdapter::_safeCssName($string);
	$this->assertEquals('-monkey', $result);
    }

    function testForceFullUrlOn() {
	$this->_setupMockAdapter();
	$this->_templateAdapter->url(array('arg1' => 'foo=bar',
				    'forceFullUrl' => 'anything'), $this->_mockSmarty);

	$this->assertEquals(array(array('foo' => 'bar'), null, null, true),
			    $this->_mockUrlGenerator->_calls[0]);
    }

    function testForceFullUrlOff() {
	$this->_setupMockAdapter();
	$this->_templateAdapter->url(array('arg1' => 'foo=bar'), $this->_mockSmarty);

	$this->assertEquals(array(array('foo' => 'bar'), null, null, false),
			    $this->_mockUrlGenerator->_calls[0]);
    }
}

class TemplateAdapterMockSmarty {
}

class TemplateAdapterMockUrlGenerator {
    function generateUrl($hrefParams, $forceSessionId, $baseUrl, $forceFullUrl) {
	$this->_calls[] = array($hrefParams, $forceSessionId, $baseUrl, $forceFullUrl);
    }
}
?>
