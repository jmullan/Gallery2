<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/* Define FORCE_GZIP for PHP environments without the zlib extension */
if (!defined('FORCE_GZIP')) {
    define('FORCE_GZIP', 'FORCE_GZIP');
}

GalleryCoreApi::requireOnce('modules/core/classes/GalleryTemplateAdapter.class');

/**
 * Test Gallery Template Adapter functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Jesse Mullan
 * @version $Revision$
 */
class TemplateAdapterTest extends GalleryTestCase {
    function GalleryTemplateAdapterTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function _setupAdapterWithMocks() {
	global $gallery;
	$this->_mockUrlGenerator =& new TemplateAdapterMockUrlGenerator();
	$gallery->setUrlGenerator($this->_mockUrlGenerator);

	$this->_mockSmarty = new TemplateAdapterMockSmarty();
	$this->_templateAdapter = new GalleryTemplateAdapter();

	$this->_templateAdapter->_theme = new TemplateAdapterMockTheme();
    }

    function testLinkId1() {
	$test = array('urlParams' => array());
	$result = GalleryTemplateAdapter::linkId($test);
	$this->assertEquals('gbAdminLink gbLink', $result);
    }

    function testLinkId2() {
	$test = array('urlParams' => array('view' => 'core.:ItemAdmin'));
	$result = GalleryTemplateAdapter::linkId($test);
	$this->assertEquals('gbAdminLink gbLink-core_ItemAdmin', $result);
    }

    function testLinkId3() {
	$test = array('urlParams' => array('view' => '.;-_monkey'));
	$result = GalleryTemplateAdapter::linkId($test);
	$this->assertEquals('gbAdminLink gbLink-monkey', $result);
    }

    function testLinkId4() {
	$test = array('urlParams' => array('controller' => 'core.Monkey',
					   'view' => 'core.Pirate',
					   'subView' => 'core.Ninja'));
	$result = GalleryTemplateAdapter::linkId($test);
	$this->assertEquals('gbAdminLink gbLink-core_Monkey-core_Pirate-core_Ninja', $result);
    }

    function testLinkId5() {
	$test = array('view' => 'core.Pirate');
	$result = GalleryTemplateAdapter::linkId($test);
	$this->assertEquals('gbAdminLink gbLink-core_Pirate', $result);
    }

    function testLinkId6() {
	$test = array('view' => 'core.Pirate',
		      'urlParams' => array('controller' => 'core.Monkey',
					   'view' => 'core.Pirate',
					   'subView' => 'core.Ninja'));
	$result = GalleryTemplateAdapter::linkId($test);
	$this->assertEquals('gbAdminLink gbLink-core_Monkey-core_Pirate-core_Ninja', $result);
    }

    function testSafeCssName1() {
	$string = 'core.ItemAdmin';
	$result = GalleryTemplateAdapter::_safeCssName($string);
	$this->assertEquals('core_ItemAdmin', $result);
    }

    function testSafeCssName2() {
	$string = 'core..ItemAdmin';
	$result = GalleryTemplateAdapter::_safeCssName($string);
	$this->assertEquals('core_ItemAdmin', $result);
    }

    function testSafeCssName3() {
	$string = '.;-_monkey';
	$result = GalleryTemplateAdapter::_safeCssName($string);
	$this->assertEquals('-monkey', $result);
    }

    function testForceFullUrlOn() {
	$this->_setupAdapterWithMocks();
	$this->_templateAdapter->url(array('arg1' => 'foo=bar',
				    'forceFullUrl' => 'anything'), $this->_mockSmarty);

	$this->assertEquals(array(array('foo' => 'bar'), array('forceFullUrl' => true)),
			    $this->_mockUrlGenerator->_calls[0]);
    }

    function testForceFullUrlOff() {
	$this->_setupAdapterWithMocks();
	$this->_templateAdapter->url(array('arg1' => 'foo=bar'), $this->_mockSmarty);

	$this->assertEquals(array(array('foo' => 'bar'), array()),
			    $this->_mockUrlGenerator->_calls[0]);
    }

    function testUrlParamsAndArgs() {
	$this->_setupAdapterWithMocks();
	$this->_templateAdapter->url(array('params' => array('view' => 'fun.View'),
					   'arg1' => 'foo=bar'), $this->_mockSmarty);

	$this->assertEquals(array(array('view' => 'fun.View', 'foo' => 'bar'), array()),
			    $this->_mockUrlGenerator->_calls[0]);
    }

    function testUrlOptionsAndBulkOptions() {
	$this->_setupAdapterWithMocks();
	$this->_templateAdapter->url(array('options' => array('foo' => 'foo', 'bar' => 'bar'),
					   'foo' => 'bar'), $this->_mockSmarty);

	$this->assertEquals(array(array(), array('foo' => 'bar', 'bar' => 'bar')),
			    $this->_mockUrlGenerator->_calls[0]);
    }

    function testChangeInDescendents() {
	$test = array('module' => 'pirate', 'text' => 'ninja', 'l10Domain' => 'modules_foo');
	$this->_setupAdapterWithMocks();
	$result = GalleryTemplateAdapter::changeInDescendents($test, $this->_mockSmarty);
	$this->assertEquals('<input type="checkbox" id="pirate_ChangeInDescendents" ' .
	    'name="g2_form[changeInDescendents][pirate]"/> <label ' .
	    'for="pirate_ChangeInDescendents"> ninja</label>', $result);
    }

    /* Make sure viewL10domain doesn't get ignored */
    function testTextViewL10domain() {
	global $gallery;
	$gallery->_translator = new TemplateAdapterMockTranslator();
	$this->_setupAdapterWithMocks();
	$this->_mockSmarty->_tpl_vars['l10Domain'] = 'modules_testfail';
	$this->_mockSmarty->_tpl_vars['viewL10domain'] = 'modules_testpass';
	$translated = $this->_templateAdapter->text(array('text' => 'Test failed'),
						    $this->_mockSmarty);

	$this->assertEquals('Test passed', $translated);
    }

    function testTextNotForJavaScript() {
	$this->_setupAdapterWithMocks();
	$this->_mockSmarty->_tpl_vars['l10Domain'] = 'modules_foo';
	$translated = $this->_templateAdapter->text(array('text' => "Text with a single ' quote"),
						    $this->_mockSmarty);
	$this->assertEquals("Text with a single ' quote", $translated);
    }

    function testTextForJavaScript() {
	$this->_setupAdapterWithMocks();
	$this->_mockSmarty->_tpl_vars['l10Domain'] = 'modules_foo';
	$translated = $this->_templateAdapter->text(array('text' => "Text with a single ' quote",
							  'forJavascript' => true),
						    $this->_mockSmarty);
	$this->assertEquals("Text with a single \\' quote", $translated, 'single quote');

	$translated = $this->_templateAdapter->text(array('text' => 'Text with a double " quote',
							  'forJavascript' => true),
						    $this->_mockSmarty);
	$this->assertEquals('Text with a double \\" quote', $translated, 'double quote');

	$translated = $this->_templateAdapter->text(array('text' => 'Text with a %s backslash',
							  'arg1' => '\\', 'forJavascript' => true),
						    $this->_mockSmarty);
	$this->assertEquals('Text with a \\\\ backslash', $translated, 'backslash in arg1');
    }

    function testThemeUrls() {
	$this->_setupAdapterWithMocks();
	$results = $this->_templateAdapter->theme(
	    array('url' => 'foo.css'), $this->_mockSmarty);
	$this->assertEquals(array('href' => 'themes/mock/foo.css'),
			    $results);
    }

    function testThemeUrlsWithOverride() {
	global $gallery;
	$this->_setupAdapterWithMocks();

	$base = dirname(dirname(dirname(__FILE__))) . '/../../';
	$mockPlatform = new UnitTestPlatform();
	$mockPlatform->setReply('file_exists', array($base . 'themes/mock/local/foo.css'), 1);
	$mockPlatform->setReply('is_readable', array($base . 'themes/mock/local/foo.css'), 1);
	$gallery->_platform =& $mockPlatform;

	$results = $this->_templateAdapter->theme(
	    array('url' => 'foo.css'), $this->_mockSmarty);
	$this->assertEquals(array('href' => 'themes/mock/local/foo.css'),
			    $results);
    }

    function testThemeUrlsWithOverrideSubdir() {
	global $gallery;
	$this->_setupAdapterWithMocks();

	$base = dirname(dirname(dirname(__FILE__))) . '/../../';
	$mockPlatform = new UnitTestPlatform();
	$mockPlatform->setReply(
	    'file_exists', array($base . 'themes/mock/templates/local/foo.css'), 1);
	$mockPlatform->setReply(
	    'is_readable', array($base . 'themes/mock/templates/local/foo.css'), 1);
	$gallery->_platform =& $mockPlatform;

	$results = $this->_templateAdapter->theme(
	    array('url' => 'templates/foo.css'), $this->_mockSmarty);
	$this->assertEquals(array('href' => 'themes/mock/templates/local/foo.css'),
			    $results);
    }

    function testAutoCompleteIncludesAuthToken() {
	global $gallery;
	$session =& $gallery->getSession();
	$this->_setupAdapterWithMocks();

	$url = 'http://example.com/main.php?foo=bar';
	$this->_mockSmarty->_tpl_vars = 1;
	$this->_templateAdapter->autoComplete(
				array('element' => 'giFormUsername'), $url, $this->_mockSmarty);
	$expectedUrl = $url . '&g2_authToken=' . $session->getAuthToken();
	$this->assertEquals(
	    array('smarty_include_tpl_file' => 'gallery:modules/core/templates/AutoComplete.tpl',
		  'smarty_include_vars' => array('element' => 'giFormUsername',
						 'url' => $expectedUrl,
			      'callCount' => 1)),
	    $this->_mockSmarty->_includes[0]);
    }

    function testCombineJavascriptFiles() {
	global $gallery;
	$gallery->_phpVm = new UnitTestPhpVm();
	$gallery->_platform = new UnitTestPlatform();
	$gallery->_urlGenerator = new UnitTestUrlGenerator();
	GalleryDataCache::setFileCachingEnabled(true);
	$gallery->setConfig('data.gallery.cache', '/cache/');

	$base = GalleryCoreApi::getCodeBasePath();
	$gallery->_platform->setReply('file_exists', array($base . 'path/file1.js'), true);
	$gallery->_platform->setReply(
	    'stat', array($base . 'path/file1.js'), array(7 => 7, 9 => 9));
	$gallery->_platform->setReply('file_exists', array($base . 'path/file2.txt'), true);
	$gallery->_platform->setReply(
	    'stat', array($base . 'path/file2.txt'), array(7 => 7, 9 => 9));
	$gallery->_phpVm->setReply('md5', array('path/file1.js 7 9,path/file2.txt 7 9,'), 'MD5KEY');
	$gallery->_platform->setReply(
	    'file_exists', array('/cache/module/_all/0/0/CombinedJavascript_MD5KEY.inc'), false);
	$gallery->_platform->setReply('file_get_contents', array($base . 'path/file1.js'), 'ONE');
	$gallery->_phpVm->setReply('function_exists', array('gzencode'), true);
	$gallery->_platform->setReply('file_get_contents', array($base . 'path/file2.txt'), 'TWO');
	$gallery->_platform->setReply('file_exists', array('/cache/module/_all/0/0'), true);
	$gallery->_platform->setReply('is_dir', array('/cache/module/_all/0/0'), true);
	$gallery->_platform->setReply(
	    'atomicWrite',
	    array('/cache/module/_all/0/0/CombinedJavascript_MD5KEY.inc', '|s:6:"ONETWO";'),
	    true);
	$gallery->_platform->setReply('file_exists', array('/cache/module/_all/0/0'), true);
	$gallery->_platform->setReply('is_dir', array('/cache/module/_all/0/0'), true);
	$gallery->_phpVm->setReply('gzencode', array('ONETWO', 9, FORCE_GZIP), 'gzencode(ONETWO)');
	$gallery->_platform->setReply(
	    'atomicWrite',
	    array('/cache/module/_all/0/0/CombinedJavascript_gzip_MD5KEY.inc',
		  '|s:16:"gzencode(ONETWO)";'),
	    true);

	$templateAdapter = new GalleryTemplateAdapter();
	$templateAdapter->_combineJavascriptFiles(
	    array('path/file1.js', 'path/file2.txt', 'main.php?foo=bar'),
	    $output);

	$this->assertEquals(
	    array('<script type="text/javascript" ' .
		  'src="http://gallery2|href=main.php?foo=bar"></script>',
		  '<script type="text/javascript" ' .
		  'src="http://gallery2|view=core.CombinedJavascript|key=MD5KEY"></script>'),
	    $output);

	$this->assert($gallery->_phpVm->isComplete());
	$this->assert($gallery->_platform->isComplete());
    }
}

class TemplateAdapterMockTheme {
    function getId() {
	return 'mock';
    }
}

class TemplateAdapterMockSmarty {
    var $_includes = array();

    function _smarty_include($params) {
	$this->_includes[] = $params;
    }
}

class TemplateAdapterMockUrlGenerator {
    function generateUrl($params=array(), $options=array()) {
	$this->_calls[] = array($params, $options);
	return $params;
    }
}

class TemplateAdapterMockTranslator {
    function translateDomain($domain, $params) {
	if ($domain == 'modules_testpass' && $params['text'] == 'Test failed') {
	    return array(null, 'Test passed');
	}
	return array(null, null);
    }
}
?>
