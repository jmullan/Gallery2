<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test storage class used for testing functions that interact with the database.
 * Only the features required for testing the repository code are implemented.
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Jozef Selesi <selesi at gmail dot com>
 * @version $Revision$ $Date$
 */
class RepositoryTestStorage {

    var $_addedMapData;
    var $_updatedMapData;
    var $_searchResults;
    var $_searches;
    var $_removedMapData;

    function &getSingleton() {
	static $singleton;
	if (!isset($singleton)) {
	    $singleton = new RepositoryTestStorage();
	}

	return $singleton;
    }

    function reset() {
	$singleton =& $this->getSingleton();
	$singleton->_searches = array();
	$singleton->_searchResults = array();
	$singleton->_addedMapData = array();
	$singleton->_updatedMapData = array();
	$singleton->_removedMapData = array();
    }

    function search($query, $args) {
	$singleton =& $this->getSingleton();
	$singleton->_searches[] = array('query' => $query, 'arguments' => $args);

	return array(null,
		     new RepositoryTestSearchResults($singleton->_searchResults));
    }

    function setSearchResults($results) {
	$singleton =& $this->getSingleton();
	$singleton->_searchResults = $results;
    }

    function getSearches() {
	$singleton =& $this->getSingleton();
	return $singleton->_searches;
    }

    function addMapEntry($map, $data) {
	$singleton =& $this->getSingleton();
	$singleton->_addedMapData[$map][] = $data;
	return null;
    }

    function getMapEntry($map, $data, $match) {
	$singleton =& $this->getSingleton();
	$singleton->_searches[] = array('map' => $map, 'select' => $data, 'where' => $match);

	return array(null,
		     new RepositoryTestSearchResults($singleton->_searchResults));
    }

    function getAddedMapData() {
	$singleton =& $this->getSingleton();
	return $singleton->_addedMapData;
    }

    function updateMapEntry($map, $match, $change) {
	$singleton =& $this->getSingleton();
	$singleton->_updatedMapData[$map][] = array('match' => $match, 'change' => $change);
	return null;
    }

    function removeMapEntry($map, $match) {
	$singleton =& $this->getSingleton();
	$singleton->_removedMapData[$map][] = array('match' => $match);
	return null;
    }

    function getUpdatedMapData() {
	$singleton =& $this->getSingleton();
	return $singleton->_updatedMapData;
    }

    function getRemovedMapData() {
	$singleton =& $this->getSingleton();
	return $singleton->_removedMapData;
    }

    function rollbackTransaction() {
    }
}

class RepositoryTestSearchResults {

    var $_results;
    var $_resultIndex;

    function RepositoryTestSearchResults($results) {
	$this->_results = $results;
	$this->_resultIndex = 0;
    }

    function resultCount() {
	return count($this->_results);
    }

    function nextResult() {
	$result = $this->_resultIndex < $this->resultCount() ? $this->_results[$this->_resultIndex]
							     : false;
	$this->_resultIndex++;
	return $result;
    }
}
?>
