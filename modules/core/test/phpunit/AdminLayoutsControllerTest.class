<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * AdminLayouts controller tests
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class AdminLayoutsControllerTest extends GalleryControllerTestCase {

    function AdminLayoutsControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core:AdminLayouts');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	$this->_testLayout =& AdminLayoutsControllerTestLayout::getSingleton();
	$this->_testLayout->resetCalls();

	list ($ret, $this->_params) = GalleryCoreApi::fetchAllPluginParameters('module', 'core');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	foreach ($this->_params as $key => $value) {
	    if (strpos($key, 'default.') === 0) {
		$ret = GalleryCoreApi::setPluginParameter('module', 'core', $key, $value);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
	    }
	}
	parent::tearDown();
    }

    function testInstall() {
	GalleryUtilities::putRequestVariable('layoutId', 'AdminLayoutsControllerTest');
	GalleryUtilities::putRequestVariable('form[action][install]', 1);
	$this->_testLayout->_set('_isActive', false);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'core:AdminLayouts',
						      'mode' => 'config'),
				  'status' => array('installed' => 'AdminLayouts Controller Test'),
				  'error' => array()),
			    $results);

	$this->assert($this->_testLayout->wasCalled('installOrUpgrade'),
		      'installOrUpgrade not called');
    }

    function testUninstall() {
	GalleryUtilities::putRequestVariable('layoutId', 'AdminLayoutsControllerTest');
	GalleryUtilities::putRequestVariable('form[action][uninstall]', 1);
	$this->_testLayout->_set('_isActive', false);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
            array('redirect' => array('view' => 'core:SiteAdmin',
				      'subView' => 'core:AdminLayouts',
				      'mode' => 'config'),
		  'status' => array('uninstalled' => 'AdminLayouts Controller Test'),
		  'error' => array()),
			    $results);

	$this->assert($this->_testLayout->wasCalled('uninstall'),
		      'uninstall not called');
    }

    function testUninstallActiveLayout() {
	GalleryUtilities::putRequestVariable('layoutId', 'AdminLayoutsControllerTest');
	GalleryUtilities::putRequestVariable('form[action][uninstall]', 1);
	$this->_testLayout->_set('_isActive', true);

	/* The ui doesn't permit this, so expect a silent failure */
	
	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'core:AdminLayouts',
						      'mode' => 'config'),
				  'status' => array(),
				  'error' => array()),
			    $results);

	$this->assert(!$this->_testLayout->wasCalled('uninstall'),
		      'uninstall unexpectedly called');
    }

    function testUpgrade() {
	GalleryUtilities::putRequestVariable('layoutId', 'AdminLayoutsControllerTest');
	GalleryUtilities::putRequestVariable('form[action][upgrade]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'core:AdminLayouts',
						      'mode' => 'config'),
				  'status' => array('upgraded' => 'AdminLayouts Controller Test'),
				  'error' => array()),
			    $results);

	$this->assert($this->_testLayout->wasCalled('installOrUpgrade'),
		      'installOrUpgrade not called');
    }

    function testActivate() {
	GalleryUtilities::putRequestVariable('layoutId', 'AdminLayoutsControllerTest');
	GalleryUtilities::putRequestVariable('form[action][activate]', 1);
	$this->_testLayout->_set('_isActive', false);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'core:AdminLayouts',
						      'mode' => 'config'),
				  'status' => array('activated' => 'AdminLayouts Controller Test'),
				  'error' => array()),
			    $results);

	$this->assert($this->_testLayout->wasCalled('activate'),
		      'activate not called');
    }

    function testActivateAlreadyActiveLayout() {
	GalleryUtilities::putRequestVariable('layoutId', 'AdminLayoutsControllerTest');
	GalleryUtilities::putRequestVariable('form[action][activate]', 1);
	$this->_testLayout->_set('_isActive', true);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'core:AdminLayouts',
						      'mode' => 'config'),
				  'status' => array(),
				  'error' => array()),
			    $results);

	$this->assert(!$this->_testLayout->wasCalled('activate'),
		      'activate unexpectedly called');
    }

    function testDeactivate() {
	GalleryUtilities::putRequestVariable('layoutId', 'AdminLayoutsControllerTest');
	GalleryUtilities::putRequestVariable('form[action][deactivate]', 1);
	$this->_testLayout->_set('_isActive', true);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
            array('redirect' => array('view' => 'core:SiteAdmin',
				      'subView' => 'core:AdminLayouts',
				      'mode' => 'config'),
		  'status' => array('deactivated' => 'AdminLayouts Controller Test'),
		  'error' => array()),
	    $results);

	$this->assert($this->_testLayout->wasCalled('deactivate'),
		      'deactivate not called');
    }

    function testDeactivateDefaultLayout() {
	GalleryUtilities::putRequestVariable('layoutId', 'AdminLayoutsControllerTest');
	GalleryUtilities::putRequestVariable('form[action][deactivate]', 1);
	$this->_testLayout->_set('_isActive', true);

	$ret = GalleryCoreApi::setPluginParameter(
	    'module', 'core', 'default.layout', 'AdminLayoutsControllerTest');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* The ui doesn't permit this, so expect a silent failure */
	
	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
            array('redirect' => array('view' => 'core:SiteAdmin',
				      'subView' => 'core:AdminLayouts',
				      'mode' => 'config'),
		  'status' => array(),
		  'error' => array()),
	    $results);

	$this->assert(!$this->_testLayout->wasCalled('deactivate'),
		      'deactivate unexpectedly called');
    }

    function testDeactivateAlreadyInactive() {
	GalleryUtilities::putRequestVariable('layoutId', 'AdminLayoutsControllerTest');
	GalleryUtilities::putRequestVariable('form[action][deactivate]', 1);
	$this->_testLayout->_set('_isActive', false);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
            array('redirect' => array('view' => 'core:SiteAdmin',
				      'subView' => 'core:AdminLayouts',
				      'mode' => 'config'),
		  'status' => array(),
		  'error' => array()),
	    $results);

	$this->assert(!$this->_testLayout->wasCalled('deactivate'),
		      'deactivate unexpectedly called');
    }

    function testSaveLayout() {
	GalleryUtilities::putRequestVariable('layoutId', 'testLayoutId2');
	GalleryUtilities::putRequestVariable('form[key][rows]', '2');
	GalleryUtilities::putRequestVariable('form[key][columns]', '4');
	GalleryUtilities::putRequestVariable('form[action][saveLayout]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
            array('redirect' => array('view' => 'core:SiteAdmin',
				      'subView' => 'core:AdminLayouts',
				      'mode' => 'editLayout',
				      'layoutId' => 'testLayoutId2'),
		  'status' => array('savedLayout' => 'Test Layout 2'),
		  'error' => array()),
            $results);

	$map =& TestLayoutId2Layout::getMap();
	$this->assertEquals(2, (int)$map['rows']);
	$this->assertEquals(4, (int)$map['columns']);
    }

    function testUndoLayout() {
	GalleryUtilities::putRequestVariable('layoutId', 'testLayoutId2');
	GalleryUtilities::putRequestVariable('form[key][rows]', '2');
	GalleryUtilities::putRequestVariable('form[key][columns]', '4');
	GalleryUtilities::putRequestVariable('form[action][undoLayout]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
            array('redirect' => array('view' => 'core:SiteAdmin',
				      'subView' => 'core:AdminLayouts',
				      'mode' => 'editLayout',
				      'layoutId' => 'testLayoutId2'),
		  'status' => array('restoredLayout' => 'Test Layout 2'),
		  'error' => array()),
	    $results);
    }

    function testSaveLayoutWithValidationErrors() {
	GalleryUtilities::putRequestVariable('layoutId', 'testLayoutId1');
	GalleryUtilities::putRequestVariable('form[key][rows]', '2');
	GalleryUtilities::putRequestVariable('form[key][columns]', '4');
	GalleryUtilities::putRequestVariable('form[action][saveLayout]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
            array('delegate' => array('view' => 'core:SiteAdmin',
				      'subView' => 'core:AdminLayouts'),
		  'status' => array(),
		  'error' => array('form[error][key][rows][invalid]',
				   'form[error][key][columns][invalid]')),
            $results);
    }

    function testSaveDefaults() {
	GalleryUtilities::putRequestVariable('form[default][orderBy]', 'viewCount');
	GalleryUtilities::putRequestVariable('form[default][orderDirection]', 'desc');
	GalleryUtilities::putRequestVariable('form[default][presort]', 'albumsFirst');
	GalleryUtilities::putRequestVariable('form[default][layout]', 'matrix');
	GalleryUtilities::putRequestVariable('form[default][theme]', 'matrix');
	GalleryUtilities::putRequestVariable('form[default][newAlbumsUseDefaults]', 'true');
	GalleryUtilities::putRequestVariable('form[action][saveDefaults]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'core:AdminLayouts',
						      'mode' => 'defaults'),
				  'status' => array('savedDefaults' => 1),
				  'error' => array()),
			    $results);

	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters('module', 'core');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('albumsFirst|viewCount', $params['default.orderBy'], 'orderBy');
	$this->assertEquals('desc', $params['default.orderDirection'], 'orderDirection');
	$this->assertEquals('matrix', $params['default.layout'], 'layout');
	$this->assertEquals('matrix', $params['default.theme'], 'theme');
	$this->assertEquals('true', $params['default.newAlbumsUseDefaults'], 'newAlbumsUseDefaults');
    }
}

/**
 * Required classes
 */
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryLayout.class');

/**
 * Test Layout that fails to validate settings
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class TestLayoutId1Layout extends GalleryLayout {

    /**
     * @see GalleryLayout::getSettings()
     */
    function getSettings($itemId=0) {
	$settings = array();
	$settings[] = array('key' => 'rows',
			    'name' => 'Rows per album page',
			    'type' => 'text-field',
			    'type-params' => array('size' => 2),
			    'value' => 4);
	$settings[] = array('key' => 'columns',
			    'name' => 'Columns per album page',
			    'type' => 'text-field',
			    'type-params' => array('size' => 2),
			    'value' => 99);
	return array(GalleryStatus::success(), $settings);
    }

    /**
     * @see GalleryLayout::validateSettings
     */
    function validateSettings($settings) {
	$error = array();
	$error['rows'] = 'rows error';
	$error['columns'] = 'columns error';
	return $error;
    }

    function TestLayoutId1Layout() {
	$this->setId('testLayoutId1');
	$this->setName('Test Layout 1');
    }

    function isActive() {
	return array(GalleryStatus::success(), true);
    }
}

/**
 * Test Layout that successfully validates settings
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class TestLayoutId2Layout extends GalleryLayout {

    function &getMap() {
	static $map;
	if (!isset($map)) {
	    $map = array();
	}
	return $map;
    }

    function setParameter($key, $value) {
	$map =& $this->getMap();
	$map[$key] = $value;
	return GalleryStatus::success();
    }

    function TestLayoutId2Layout() {
	$this->setId('testLayoutId2');
	$this->setName('Test Layout 2');
    }

    /**
     * @see GalleryLayout::getSettings()
     */
    function getSettings($itemId=0) {
	$settings = array();
	$settings[] = array('key' => 'rows',
			    'name' => 'Rows per album page',
			    'type' => 'text-field',
			    'type-params' => array('size' => 2),
			    'value' => 4);
	$settings[] = array('key' => 'columns',
			    'name' => 'Columns per album page',
			    'type' => 'text-field',
			    'type-params' => array('size' => 2),
			    'value' => 3);
	return array(GalleryStatus::success(), $settings);
    }

    /**
     * @see GalleryLayout::validateSettings
     */
    function validateSettings($settings) {
	return array();
    }

    function isActive() {
	return array(GalleryStatus::success(), true);
    }
}


/**
 * Test layout
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class AdminLayoutsControllerTestLayout {

    function &getSingleton() {
	static $singleton;
	if (!isset($singleton)) {
	    $singleton = new AdminLayoutsControllerTestLayout();
	}

	return $singleton;
    }

    function getId() {
	return 'AdminLayoutsControllerTest';
    }

    function getName() {
	return 'AdminLayouts Controller Test';
    }

    function init() {
	$this->_setCalled('init');
	return GalleryStatus::success();
    }
    
    function installOrUpgrade() {
	$this->_setCalled('installOrUpgrade');
	return GalleryStatus::success();
    }

    function activate() {
	$this->_setCalled('activate');
	return array(GalleryStatus::success(), array());
    }

    function uninstall() {
	$this->_setCalled('uninstall');
	return GalleryStatus::success();
    }

    function deactivate() {
	$this->_setCalled('deactivate');
	return array(GalleryStatus::success(), array());
    }

    function _setCalled($function) {
	$singleton = &$this->getSingleton();
	$singleton->_callMap[$function] = 1;
    }

    function wasCalled($function) {
	$singleton = &$this->getSingleton();
	return isset($singleton->_callMap[$function]);
    }

    function resetCalls() {
	$singleton = &$this->getSingleton();
	$singleton->_callMap = array();
    }

    function _set($key, $val) {
	$singleton = &$this->getSingleton();
	$singleton->$key = $val;
    }

    function isActive() {
	$singleton = &$this->getSingleton();
	return array(GalleryStatus::success(), $singleton->_isActive);
    }

    function isAdvancedSettings() {
	$singleton = &$this->getSingleton();
	return $singleton->_isAdvancedSettings;
    }
}
?>
