<?php
/*
 * $RCSfile
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * AdminCreateGroup controller tests
 */
class AdminCreateGroupControllerTest extends GalleryControllerTestCase {

    function AdminCreateGroupControllerTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function getControllerName() {
	return "core:AdminCreateGroup";
    }

    function testCancel() {
	GalleryUtilities::putRequestVariable('form.action.cancel', 1);

	list ($ret, $results) = $this->_controller->handleRequest();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('view' => 'core:SiteAdmin'), $results);
	$this->assertEquals('core:AdminGroups', GalleryUtilities::getRequestVariables('subView'));
    }

    function testCreateGroup() {
	$groupName = 'group-'.rand();
	GalleryUtilities::putRequestVariable('form.action.create', 1);
	GalleryUtilities::putRequestVariable('form.groupName', $groupName);
	
	list ($ret, $results) = $this->_controller->handleRequest();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertRedirect(array('view' => 'core:SiteAdmin',
				    'subView' => 'core:AdminGroups',
				    'form.status.createdGroup' => $groupName),
			      $results);

	$this->_deleteGroup($groupName);
    }
    
    function testMissingGroupName() {
	/* Create one group */
	GalleryUtilities::putRequestVariable('form.action.create', 1);
	
	list ($ret, $results) = $this->_controller->handleRequest();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('view' => 'core:SiteAdmin'), $results);
	$this->assertEquals('core:AdminCreateGroup', GalleryUtilities::getRequestVariables('subView'));
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.groupName.missing'));
    }
    

    function testCreateDuplicateGroup() {
	$groupName = 'group-' . rand();

	/* Create one group */
	GalleryUtilities::putRequestVariable('form.action.create', 1);
	GalleryUtilities::putRequestVariable('form.groupName', $groupName);
	
	list ($ret, $results) = $this->_controller->handleRequest();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertRedirect(array('view' => 'core:SiteAdmin',
				    'subView' => 'core:AdminGroups',
				    'form.status.createdGroup' => $groupName),
			      $results);


	/* Create a second group with the same name */
	list ($ret, $results) = $this->_controller->handleRequest();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('view' => 'core:SiteAdmin'), $results);
	$this->assertEquals('core:AdminCreateGroup', GalleryUtilities::getRequestVariables('subView'));
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.groupName.exists'));
	
	$this->_deleteGroup($groupName);
    }

    function _deleteGroup($groupName) {
	global $gallery;
	
	list ($ret, $group) = GalleryGroupHelper::fetchGroupByGroupName($groupName);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $gallery->deleteEntityById($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
}
?>
