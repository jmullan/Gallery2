<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/core/classes/GalleryStorage/GalleryDatabaseExport.class');
GalleryCoreApi::requireOnce('modules/core/classes/GalleryStorage.class');

/**
 * Test Database Export functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Tim Almdal <tnalmdal@shaw.ca>
 * @version $Revision$
 */
class DatabaseExportTest extends GalleryTestCase {
    function DatabaseExportTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	/* Preload these now, so we don't have to try loading them with the UnitTestPlatform */
	list ($ret, $info) = GalleryCoreApi::loadPlugin('theme', 'matrix');
	if ($ret) {
	    return $ret;
	}
	list ($ret, $info) = GalleryCoreApi::loadPlugin('theme', 'carbon');
	if ($ret) {
	    return $ret;
	}

    	global $gallery;
    	$gallery->setPlatform(new UnitTestPlatform());
    	$gallery->_storage = new UnitTestStorage();
    	$storage =& $gallery->getStorage();
    	$storage->_tablePrefix = 'g2_';

    	$this->_export = new GalleryDatabaseExport();
    }

    function tearDown() {
    	global $gallery;
    	$platform =& $gallery->getPlatform();
    	$storage =& $gallery->getStorage();

	$this->assert($platform->isComplete(), $platform->getRemaining());
	$this->assert($storage->isComplete(), $storage->getRemaining());
	$extras =& $storage->_getExtras();
	$this->assert($extras->isComplete(), $extras->getRemaining());

	$ret = parent::tearDown();
	if ($ret) {
	   return $ret;
	}
    }

    function progressCallback($percentage) {
    }

    function testExportPluginStatus() {
    	global $gallery;
    	$storage =& $gallery->getStorage();
    	$platform =& $gallery->getPlatform();

	$this->_export->_callBack = array('callback' => array($this, 'progressCallback'),
				 'progress' => 0, 'total' => 100);

	$modules = array('captcha' => array('active' => 1, 'available' => 1, 'version' => '1.1.5',
					    'callbacks' => 'getSiteAdminViews',
					    'requiredCoreApi' => array(7, 20),
					    'requiredModuleApi' =>  array(3, 6)),
			 'cart' => array('active' => 0, 'available' => 1, 'version' => '1.0.8',
			 		 'callbacks' => 'getItemLinks',
			 		 'requiredCoreApi' =>  array(7, 27),
					 'requiredModuleApi' =>  array(3, 6)),
			 'core' =>  array('available' => 1, 'version' => '1.2.12', 'active' => '1',
					  'callbacks' => 'registerEventListeners|getItemLinks|'
							 . 'getSystemLinks|getSiteAdminViews|'
					  		 . 'getUserAdminViews|getItemAdminViews',
					  'requiredCoreApi' =>  array(7, 27),
					  'requiredModuleApi' => array(3,6))
	);

	$line = '    <plugin-status id="captcha" required-core-api="7.20" required-api="3.6" '
		 . 'version="1.1.5" active="1" type="module"/>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $line, null), strlen($line) + 1);

	$line = '    <plugin-status id="cart" required-core-api="7.27" required-api="3.6" '
		 . 'version="1.0.8" active="0" type="module"/>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $line, null), strlen($line) + 1);

	$line = '    <plugin-status id="core" required-core-api="7.27" required-api="3.6" '
		 . 'version="1.2.12" active="1" type="module"/>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $line, null), strlen($line) + 1);

    	$ret = $this->_export->_exportPluginStatus('testHandle', 'module', $modules);
	if ($ret) {
	    return $ret;
	}

	$themes = array('matrix' => array('active' => 1, 'available' => 1, 'version' => '1.1.5',
					    'callbacks' => null,
					    'requiredCoreApi' => array(7, 20),
					    'requiredThemeApi' =>  array(2, 4)),
			 'carbon' => array('available' => 1, 'version' => '1.2.5',
			 		 'callbacks' => null,
			 		 'requiredCoreApi' =>  array(7, 20),
					 'requiredThemeApi' =>  array(2, 5))
	);

	$line = '    <plugin-status id="matrix" required-core-api="7.20" required-api="2.4" '
		 . 'version="1.1.5" active="1" type="theme"/>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $line, null), strlen($line) + 1);

	$line = '    <plugin-status id="carbon" required-core-api="7.20" required-api="2.5" '
		 . 'version="1.2.5" active="0" type="theme"/>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $line, null), strlen($line) + 1);
    	$ret = $this->_export->_exportPluginStatus('testHandle', 'theme', $themes);
	if ($ret) {
	    return $ret;
	}
    }

    function testExportConfig() {
    	global $gallery;
    	$platform =& $gallery->getPlatform();

	$source = '<?php'  . "\n"
    	. '@ini_set(\'display_errors\', 1);'  . "\n"
    	. '$storeConfig[\'tablePrefix\'] = \'g2_\';'  . "\n"
    	. '$storeConfig[\'columnPrefix\'] = \'g_\';'  . "\n"
    	. '$storeConfig[\'usePersistentConnections\'] = false;'  . "\n"
    	. '$gallery->setConfig(\'storage.config\', $storeConfig);'  . "\n"
    	. '$gallery->setConfig(\'baseUri\', \'\');'  . "\n"
    	. '?>';

	$configFile = GALLERY_CONFIG_DIR . '/config.php';
	$platform->setReply('file_get_contents', array($configFile), $source);

    	$outputConfig = '&lt;?php'  . "\n"
    	. '@ini_set(\'display_errors\', 1);'  . "\n"
    	. '$storeConfig[\'tablePrefix\'] = \'g2_\';'  . "\n"
    	. '$storeConfig[\'columnPrefix\'] = \'g_\';'  . "\n"
    	. '$storeConfig[\'usePersistentConnections\'] = false;'  . "\n"
    	. '$gallery-&gt;setConfig(\'storage.config\', $storeConfig);'  . "\n"
    	. '$gallery-&gt;setConfig(\'baseUri\', \'\');'  . "\n"
    	. '?&gt;';
	$line = '  <config>' . $outputConfig . '</config>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $line, null), strlen($line));

    	$ret = $this->_export->_exportConfigFile('testHandle');
	if ($ret) {
	    return $ret;
	}
    }

    function testExportSequences() {
    	global $gallery;
    	$storage =& $gallery->getStorage();
    	$platform =& $gallery->getPlatform();

	$storage->setReply('getUniqueId', array('g2_sequenceid'), array(null, 57));

	$expected = '    <sequence name="sequenceid" seq="57" />' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

 	$this->_export->_callBack = array('callback' => array($this, 'progressCallback'),
				   'progress' => 0, 'total' => 100);
    	$ret = $this->_export->_exportSequence('testHandle', 'sequenceid');
	if ($ret) {
	    return $ret;
	}
    }

    function testExportTableIgnoreData() {
    	global $gallery;
    	$storage =& $gallery->getStorage();
    	$platform =& $gallery->getPlatform();

	$moduleSql = array('table' => array('TestTable' => 'Create Sql Statement'),
			   'alter' => array('TestTable' => array('1' =>
			   				array('0' => 'Alter1; Alter2;',
							      '1' => 'Alter3; Alter4;'))),
			   'remove' => array(), 'test' => array());

	$expected = '    <table name="TestTable">' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$expected = '      <create-sql>' . "\n" . '<![CDATA[Create Sql Statement]]>' . "\n"
			. '      </create-sql>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$expected = '    </table>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

    	$this->_export->_ignoreTables['testtable'] = 1;
	$this->_export->_callBack = array('callback' => array($this, 'progressCallback'),
				 'progress' => 0, 'total' => 100);
    	$ret = $this->_export->_exportTable('testHandle', 'TestTable', $moduleSql);
	if ($ret) {
	    return $ret;
	}
    }

    function testExportData() {
    	global $gallery;
     	$storage =& $gallery->getStorage();
     	$platform =& $gallery->getPlatform();

	$storage->setReply('_translateTableName', array('TestTable'), array('g2_TestTable', null));

	$storage->setReply('search', array('SELECT COUNT(*) FROM g2_TestTable', null, array()),
				  array(null, new UnitTestStorageSearchResults(array(array('2')))));

	$storage->setExtrasReply('metaColumns', array('g2_TestTable', 1),
				 array(null, array('g_name', 'g_major', 'g_minor')));

	$expected = '        <data>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$expected = '          <field name="g_name" />' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$expected = '          <field name="g_major" />' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$expected = '          <field name="g_minor" />' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$storage->setReply('search',
			   array('SELECT g_name, g_major, g_minor FROM g2_TestTable '
			       . 'ORDER BY g_name ASC, g_major ASC, g_minor ASC', array(),
			         array('limit' => array('count' => 200, 'offset' => 0))),
			   array(null, new UnitTestStorageSearchResults(
			   		array(array('nameValue1', 1, 1),
			   		      array('nameValue2', 1, 1)))));

	$expected = '          <row><f>nameValue1</f><f>1</f><f>1</f></row>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$expected = '          <row><f>nameValue2</f><f>1</f><f>1</f></row>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$storage->setReply('search',
			   array('SELECT g_name, g_major, g_minor FROM g2_TestTable '
			       . 'ORDER BY g_name ASC, g_major ASC, g_minor ASC', array(),
				 array('limit' => array('count' => 200, 'offset' => 2))),
			   array(null, new UnitTestStorageSearchResults(array())));

	$expected = '        </data>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$this->_export->_callBack = array('callback' => array($this, 'progressCallback'),
				 'progress' => 0, 'total' => 100);
    	$ret = $this->_export->_exportData('testHandle', 'TestTable');
	if ($ret) {
	    return $ret;
	}

	return null;
    }
}
?>
