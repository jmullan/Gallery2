<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/core/classes/GalleryStorage/GalleryDatabaseExport.class');
GalleryCoreApi::requireOnce('modules/core/classes/GalleryStorage.class');

/**
 * Test Database Export functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Tim Almdal <tnalmdal@shaw.ca>
 * @version $Revision$
 */
class DatabaseExportTest extends GalleryTestCase {
    function DatabaseExportTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	$ret = parent::setUp();
	if ($ret) {
	    return $ret;
	}

	/* Preload these now, so we don't have to try loading them with the UnitTestPlatform */
	list ($ret, $info) = GalleryCoreApi::loadPlugin('theme', 'matrix');
	if ($ret) {
	    return $ret;
	}
	list ($ret, $info) = GalleryCoreApi::loadPlugin('theme', 'carbon');
	if ($ret) {
	    return $ret;
	}

	global $gallery;
	$gallery->setPlatform(new UnitTestPlatform());
	$gallery->_storage = new UnitTestStorage();
	$storage =& $gallery->getStorage();
	$storage->_tablePrefix = 'g2_';

	$this->_export = new GalleryDatabaseExport();
    }

    function tearDown() {
	global $gallery;
	$platform =& $gallery->getPlatform();
	$storage =& $gallery->getStorage();

	$this->assert($platform->isComplete(), $platform->getRemaining());
	$this->assert($storage->isComplete(), $storage->getRemaining());
	$extras =& $storage->_getExtras();
	$this->assert($extras->isComplete(), $extras->getRemaining());

	$ret = parent::tearDown();
	if ($ret) {
	   return $ret;
	}
    }

    function progressCallback($percentage) {
    }

    function testExportPluginStatus() {
	global $gallery;
	$storage =& $gallery->getStorage();
	$platform =& $gallery->getPlatform();

	$this->_export->_callBack = array('callback' => array($this, 'progressCallback'),
				 'progress' => 0, 'total' => 100);

	$modules = array('captcha' => array('active' => 1, 'available' => 1, 'version' => '1.1.5',
					    'callbacks' => 'getSiteAdminViews',
					    'requiredCoreApi' => array(7, 20),
					    'requiredModuleApi' =>  array(3, 6)),
			 'cart' => array('active' => 0, 'available' => 1, 'version' => '1.0.8',
			 		 'callbacks' => 'getItemLinks',
			 		 'requiredCoreApi' =>  array(7, 27),
					 'requiredModuleApi' =>  array(3, 6)),
			 'core' =>  array('available' => 1, 'version' => '1.2.12', 'active' => '1',
					  'callbacks' => 'registerEventListeners|getItemLinks|'
							 . 'getSystemLinks|getSiteAdminViews|'
					  		 . 'getUserAdminViews|getItemAdminViews',
					  'requiredCoreApi' =>  array(7, 27),
					  'requiredModuleApi' => array(3,6))
	);

	$line = '    <plugin-status id="captcha" required-core-api="7.20" required-api="3.6" '
		 . 'version="1.1.5" active="1" type="module"/>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $line, null), strlen($line) + 1);

	$line = '    <plugin-status id="cart" required-core-api="7.27" required-api="3.6" '
		 . 'version="1.0.8" active="0" type="module"/>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $line, null), strlen($line) + 1);

	$line = '    <plugin-status id="core" required-core-api="7.27" required-api="3.6" '
		 . 'version="1.2.12" active="1" type="module"/>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $line, null), strlen($line) + 1);

	$warnings = array();
	$ret = $this->_export->_exportPluginStatus('testHandle', 'module', $modules, $warnings);
	if ($ret) {
	    return $ret;
	}

	$themes = array('matrix' => array('active' => 1, 'available' => 1, 'version' => '1.1.5',
					    'callbacks' => null,
					    'requiredCoreApi' => array(7, 20),
					    'requiredThemeApi' =>  array(2, 4)),
			 'carbon' => array('available' => 1, 'version' => '1.2.5',
			 		 'callbacks' => null,
			 		 'requiredCoreApi' =>  array(7, 20),
					 'requiredThemeApi' =>  array(2, 5))
	);

	$line = '    <plugin-status id="matrix" required-core-api="7.20" required-api="2.4" '
		 . 'version="1.1.5" active="1" type="theme"/>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $line, null), strlen($line) + 1);

	$line = '    <plugin-status id="carbon" required-core-api="7.20" required-api="2.5" '
		 . 'version="1.2.5" active="0" type="theme"/>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $line, null), strlen($line) + 1);
	$ret = $this->_export->_exportPluginStatus('testHandle', 'theme', $themes, $warnings);
	if ($ret) {
	    return $ret;
	}
    }

    function testExportConfig() {
	global $gallery;
	$platform =& $gallery->getPlatform();

	$source = '<?php'  . "\n"
	. '@ini_set(\'display_errors\', 1);'  . "\n"
	. '$storeConfig[\'tablePrefix\'] = \'g2_\';'  . "\n"
	. '$storeConfig[\'columnPrefix\'] = \'g_\';'  . "\n"
	. '$storeConfig[\'usePersistentConnections\'] = false;'  . "\n"
	. '$gallery->setConfig(\'storage.config\', $storeConfig);'  . "\n"
	. '$gallery->setConfig(\'baseUri\', \'\');'  . "\n"
	. '?>';

	$configFile = GALLERY_CONFIG_DIR . '/config.php';
	$platform->setReply('file_get_contents', array($configFile), $source);

	$outputConfig = '&lt;?php'  . "\n"
	. '@ini_set(\'display_errors\', 1);'  . "\n"
	. '$storeConfig[\'tablePrefix\'] = \'g2_\';'  . "\n"
	. '$storeConfig[\'columnPrefix\'] = \'g_\';'  . "\n"
	. '$storeConfig[\'usePersistentConnections\'] = false;'  . "\n"
	. '$gallery-&gt;setConfig(\'storage.config\', $storeConfig);'  . "\n"
	. '$gallery-&gt;setConfig(\'baseUri\', \'\');'  . "\n"
	. '?&gt;';
	$line = '  <config>' . $outputConfig . '</config>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $line, null), strlen($line));

	$ret = $this->_export->_exportConfigFile('testHandle');
	if ($ret) {
	    return $ret;
	}
    }

    function testExportSequences() {
	global $gallery;
	$storage =& $gallery->getStorage();
	$platform =& $gallery->getPlatform();

	$storage->setReply('getUniqueId', array('sequenceid'), array(null, 57));

	$expected = '    <sequence name="sequenceid" start-value="57" />' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

 	$this->_export->_callBack = array('callback' => array($this, 'progressCallback'),
				   'progress' => 0, 'total' => 100);
	$ret = $this->_export->_exportSequence('testHandle', 'sequenceid');
	if ($ret) {
	    return $ret;
	}
    }

    function testExportTableIgnoreData() {
	global $gallery;
	$storage =& $gallery->getStorage();
	$platform =& $gallery->getPlatform();

	$expected = '    <table name="TestTable">' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$storage->setReply('_translateTableName', array('TestTable'),
								    array(null, null, 'TestTable'));

	$storage->setReply('search',
	      array('SELECT [::createSql] FROM [GallerySchema] WHERE [::name] = ?',
		    array('TestTable'), array()),
	      array(null, new UnitTestStorageSearchResults(array(array('Create Sql Statement')))));

	$expected = '      <create-sql><![CDATA[Create Sql Statement]]>      </create-sql>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$expected = '    </table>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$this->_export->_ignoreTables['testtable'] = 1;
	$this->_export->_callBack = array('callback' => array($this, 'progressCallback'),
				 'progress' => 0, 'total' => 100);

	$warnings = array();
	$ret = $this->_export->_exportTable('testHandle', 'TestTable', $warnings);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(0, count($warnings), 'Warnings were issued');
    }

    function testExportTableNoCreateSql() {
	global $gallery;
	$storage =& $gallery->getStorage();
	$platform =& $gallery->getPlatform();

	$storage->setReply('_translateTableName', array('TestTable2'),
								   array(null, null, 'TestTable2'));

	$storage->setReply('search',
	      array('SELECT [::createSql] FROM [GallerySchema] WHERE [::name] = ?',
		    array('TestTable2'), array()),
	      array(null, new UnitTestStorageSearchResults(array(array(null)))));
	$warnings = array();
	$ret = $this->_export->_exportTable('testHandle', 'TestTable2', $warnings);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $coreModule) = GalleryCoreApi::loadPlugin('module', 'core', true);
	if ($ret) {
	    return $ret;
	}
	$expected = $coreModule->translate(
		array('text' => '"%s" has no creation sql and will not be backed up.',
		      'arg1' => 'TestTable2'));
	$this->assert(count($warnings) > 0, 'Warnings were not issued');
	$this->assertEquals($expected, $warnings[0], 'The message was not equal');
    }

    function testExportDataNoError() {
	global $gallery;
 	$storage =& $gallery->getStorage();
 	$platform =& $gallery->getPlatform();

	$storage->setReply('_translateTableName', array('TestTableMap'),
							array('g2_TestTableMap', null, null));

	$storage->setReply('search', array('SELECT COUNT(*) FROM g2_TestTableMap', null, array()),
				  array(null, new UnitTestStorageSearchResults(array(array('2')))));

	$storage->setReply('describeMap', array('TestTableMap', null),
				 array(null, array('name' => array('type' => STORAGE_TYPE_STRING,
								   'size' => STORAGE_SIZE_MEDIUM,
								   'notNull' => 1),
						   'major' => array('type' => STORAGE_TYPE_INTEGER,
								    'size' => STORAGE_SIZE_MEDIUM,
								    'notNullEmptyAllowed' => 1,
								    'notNull' => 1),
						   'minor' => array('type' => STORAGE_TYPE_INTEGER,
								  'size' => STORAGE_SIZE_MEDIUM))));

	$expected = '        <data>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$expected = '          <field name="name" type="' . STORAGE_TYPE_STRING . '" size="'
		      . STORAGE_SIZE_MEDIUM . '" not-null="1" />' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$expected = '          <field name="major" type="' . STORAGE_TYPE_INTEGER . '" size="'
		      . STORAGE_SIZE_MEDIUM . '" not-null="1" not-null-empty-allowed="1" />' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$expected = '          <field name="minor" type="' . STORAGE_TYPE_INTEGER . '" size="'
		      . STORAGE_SIZE_MEDIUM . '" />' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$storage->setReply('_translateColumnName', array('name'), 'g_name');
	$storage->setReply('_translateColumnName', array('major'), 'g_major');
	$storage->setReply('_translateColumnName', array('minor'), 'g_minor');

	$storage->setReply('search',
			   array('SELECT g_name, g_major, g_minor FROM g2_TestTableMap '
			       . 'ORDER BY g_name ASC, g_major ASC, g_minor ASC', array(),
			         array('limit' => array('count' => 200, 'offset' => 0))),
			   array(null, new UnitTestStorageSearchResults(
			   		array(array('nameValue1', 1, 1),
			   		      array('nameValue2', 1, null)))));

	$storage->setReply('_normalizeValue',
			   array('nameValue1', array('type' => STORAGE_TYPE_STRING,
						     'size' => STORAGE_SIZE_MEDIUM,
						     'notNull' => 1), true), 'nameValue1');
	$storage->setReply('_normalizeValue',
			   array('1', array('type' => STORAGE_TYPE_INTEGER,
						     'size' => STORAGE_SIZE_MEDIUM,
						     'notNullEmptyAllowed' => 1,
						     'notNull' => 1), true), 1);
	$storage->setReply('_normalizeValue',
			   array('1', array('type' => STORAGE_TYPE_INTEGER,
						     'size' => STORAGE_SIZE_MEDIUM), true), 1);
	$storage->setReply('_normalizeValue',
			   array('nameValue2', array('type' => STORAGE_TYPE_STRING,
						     'size' => STORAGE_SIZE_MEDIUM,
						     'notNull' => 1), true), 'nameValue2');
	$storage->setReply('_normalizeValue',
			   array('1', array('type' => STORAGE_TYPE_INTEGER,
						     'size' => STORAGE_SIZE_MEDIUM,
						     'notNullEmptyAllowed' => 1,
						     'notNull' => 1), true), 1);

	$expected = '          <row><f>nameValue1</f><f>1</f><f>1</f></row>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$expected = '          <row><f>nameValue2</f><f>1</f><f null="1" /></row>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$expected = '        </data>' . "\n";
	$platform->setReply('fwrite', array('testHandle', $expected, null), strlen($expected));

	$this->_export->_callBack = array('callback' => array($this, 'progressCallback'),
				 'progress' => 0, 'total' => 100);

	$warnings = array();
	$ret = $this->_export->_exportData('testHandle', 'TestTableMap', $warnings);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(0, count($warnings), 'Warnings were issued');

	return null;
    }

    function testExportDataDescribeFailure() {
	global $gallery;
 	$storage =& $gallery->getStorage();
 	$platform =& $gallery->getPlatform();

	$storage->setReply('_translateTableName', array('TestTable'),
			   array('g2_TestTable', null, null));

	$storage->setReply('search', array('SELECT COUNT(*) FROM g2_TestTable', null, array()),
			   array(null, new UnitTestStorageSearchResults(array(array('2')))));

	$storage->setReply('describeMap', array('TestTable', null),
			   array(GalleryCoreApi::error(ERROR_MISSING_VALUE, __FILE__,
						 __LINE__, "Undefined map: TestTable"), null));

	$storage->setReply('describeEntity', array('TestTable', null),
			   array(GalleryCoreApi::error(ERROR_MISSING_VALUE, __FILE__,
						 __LINE__, "Unknown entity: TestTable"), null));

	$this->_export->_callBack = array('callback' => array($this, 'progressCallback'),
				 'progress' => 0, 'total' => 100);

	$warnings = array();
	$ret = $this->_export->_exportData('testHandle', 'TestTable', $warnings);
	if ($ret) {
	    return $ret;
	}

	list ($ret, $coreModule) = GalleryCoreApi::loadPlugin('module', 'core', true);
	if ($ret) {
	    return $ret;
	}

	$expectedMsg = $coreModule->translate(
		array('text' => 'Unable to load table description for "%s", no data will be '
				. 'exported.', 'arg1' => 'TestTable'));
	$this->assert(count($warnings) > 0, 'Warnings were not issued');
	$this->assertEquals($expectedMsg, $warnings[0], 'The message was not equal');

	return null;
    }
}
?>
