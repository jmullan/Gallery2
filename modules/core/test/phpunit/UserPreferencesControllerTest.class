<?php
/*
 * $RCSfile: UserPreferencesControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.28 $ $Date: 2006/03/06 06:56:06 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * UserPreferences controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class UserPreferencesControllerTest extends GalleryControllerTestCase {

    function UserPreferencesControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.UserPreferences');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	$session =& $gallery->getSession();
	$this->_currentLanguage = $session->get('core.language');
	list ($ret, $this->_user) =
	    $this->_createUser(array('hashedPassword' => GalleryUtilities::md5Salt('TestPassword'),
				     'email' => 'test@email.com',
				     'fullName' => 'Test User',
				     'language' => 'te'));
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_user);

	$gallery->setActiveUser($this->_user);
    }

    function tearDown() {
	global $gallery;
	$session =& $gallery->getSession();
	$session->put('core.language', $this->_currentLanguage);
	parent::tearDown();
    }

    function testCancel() {
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserPreferences'),
				  'return' => true,
				  'status' => array(),
				  'error' => array()),
			    $results);

    }

    function testUndo() {
	GalleryUtilities::putRequestVariable('form[action][undo]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserPreferences'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testEditAll() {
	global $gallery;
	$session =& $gallery->getSession();
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'email@test.me');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	GalleryUtilities::putRequestVariable('form[currentPassword]', 'TestPassword');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserPreferences'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	/* Load back the user object and make sure the data got saved */
	list ($ret, $this->_user) = $this->_user->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('full name', $this->_user->getFullName());
	$this->assertEquals('email@test.me', $this->_user->getEmail());
	$this->assertEquals('language', $this->_user->getLanguage());
	$this->assertEquals('language', $session->get('core.language'), 'Language');
    }

    function testEditRequiredOnly() {
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]',
					     '  email_with-leading@space.test-o.com');
	GalleryUtilities::putRequestVariable('form[currentPassword]', 'TestPassword');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserPreferences'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	/* Load back the user object and make sure the data got saved */
	list ($ret, $this->_user) = $this->_user->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('full name', $this->_user->getFullName());
	$this->assertEquals('email_with-leading@space.test-o.com', $this->_user->getEmail());
    }

    function testEditMissingEmail() {
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[currentPassword]', 'TestPassword');

	/* As a non-admin, we'll get an error about it being missing */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserPreferences'),
				  'status' => array(),
				  'error' => array('form[error][email][missing]')),
			    $results);

	$this->_addUserToAdminGroup($this->_user);

	/* Now it lets us submit with a missing email */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserPreferences'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);
    }

    function testEditInvalidEmail() {
	foreach (array('user', 'admin') as $userType) {
	    if ($userType == 'admin') {
		/* We have to do 'admin' last for this to work */
		$this->_addUserToAdminGroup($this->_user);
	    }

	    GalleryUtilities::putRequestVariable('form[action][save]', 1);
	    GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	    GalleryUtilities::putRequestVariable('form[email]', 'no-at.test.com');
	    GalleryUtilities::putRequestVariable('form[currentPassword]', 'TestPassword');

	    $results = $this->handleRequest();
	    $this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
							  'subView' => 'core.UserPreferences'),
				      'status' => array(),
				      'error' => array('form[error][email][invalid]')),
				$results, 'no at');

	    GalleryUtilities::putRequestVariable('form[email]', 'bad,char@test.com');

	    $results = $this->handleRequest();
	    $this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
							  'subView' => 'core.UserPreferences'),
				      'status' => array(),
				      'error' => array('form[error][email][invalid]')),
				$results, 'bad char');

	    GalleryUtilities::putRequestVariable('form[email]', 'space test@fun.com');

	    $results = $this->handleRequest();
	    $this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
							  'subView' => 'core.UserPreferences'),
				      'status' => array(),
				      'error' => array('form[error][email][invalid]')),
				$results, 'space');

	    GalleryUtilities::putRequestVariable('form[email]', 'bad.suffix@test.commm');

	    $results = $this->handleRequest();
	    $this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
							  'subView' => 'core.UserPreferences'),
				      'status' => array(),
				      'error' => array('form[error][email][invalid]')),
				$results, 'bad suffix');

	    GalleryUtilities::putRequestVariable('form[email]', 'no@suffix');

	    $results = $this->handleRequest();
	    $this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
							  'subView' => 'core.UserPreferences'),
				      'status' => array(),
				      'error' => array('form[error][email][invalid]')),
				$results, 'no suffix');
	}
    }

    /* No password is needed for non-email changes */
    function testEditOtherThanEmailWithoutPassword() {
	global $gallery;
	$session =& $gallery->getSession();
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'test@email.com');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	/* Make sure the test suit actually unsets previous request vars */
	$form = GalleryUtilities::getFormVariables('form');
	$this->assert(!isset($form['currentPassword']),
		      'precondition failed, password was specified');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserPreferences'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	/* Load back the user object and make sure the data got saved */
	list ($ret, $this->_user) = $this->_user->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('full name', $this->_user->getFullName());
	$this->assertEquals('test@email.com', $this->_user->getEmail());
	$this->assertEquals('language', $this->_user->getLanguage());
	$this->assertEquals('language', $session->get('core.language'), 'Language');
    }

    /* If you provide an email, then return a error message if it's invalid */
    function testEditOtherThanEmailInvalidPassword() {
	global $gallery;
	$session =& $gallery->getSession();
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'test@email.com');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	GalleryUtilities::putRequestVariable('form[currentPassword]', 'invalid');

	$results = $this->handleRequest();
	 $this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
							  'subView' => 'core.UserPreferences'),
				      'status' => array(),
				      'error' => array('form[error][currentPassword][incorrect]')),
				$results, 'invalid password');

	/* Load back the user object and make sure the data got not saved */
	list ($ret, $this->_user) = $this->_user->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('Test User', $this->_user->getFullName());
	$this->assertEquals('test@email.com', $this->_user->getEmail());
	$this->assertEquals('te', $this->_user->getLanguage());
    }

    function testEditEmailWithInvalidPassword() {
	global $gallery;
	$session =& $gallery->getSession();
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'new@email.com');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	GalleryUtilities::putRequestVariable('form[currentPassword]', 'invalid');

	$results = $this->handleRequest();
	 $this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
							  'subView' => 'core.UserPreferences'),
				      'status' => array(),
				      'error' => array('form[error][currentPassword][incorrect]')),
				$results, 'invalid password');

	/* Load back the user object and make sure the data got not saved */
	list ($ret, $this->_user) = $this->_user->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('Test User', $this->_user->getFullName());
	$this->assertEquals('test@email.com', $this->_user->getEmail());
	$this->assertEquals('te', $this->_user->getLanguage());
    }

    function testEditEmailWithoutPassword() {
	global $gallery;
	$session =& $gallery->getSession();
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'new@email.com');
	GalleryUtilities::putRequestVariable('form[language]', 'language');

	$results = $this->handleRequest();
	 $this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
							  'subView' => 'core.UserPreferences'),
				      'status' => array(),
				      'error' => array('form[error][currentPassword][missing]')),
				$results, 'missing password');

	/* Load back the user object and make sure the data got not saved */
	list ($ret, $this->_user) = $this->_user->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('Test User', $this->_user->getFullName());
	$this->assertEquals('test@email.com', $this->_user->getEmail());
	$this->assertEquals('te', $this->_user->getLanguage());
    }
    
    function _addUserToAdminGroup() {
	/* Make ourselves an admin */
	list ($ret, $adminGroupId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.adminGroup');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::addUserToGroup($this->_user->getId(), $adminGroupId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
}
?>
