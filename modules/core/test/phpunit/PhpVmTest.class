<?php
/*
 * $RCSfile: PhpVmTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.6 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Jay Rossiter <cryptographite@users.sf.net>
 */

GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryPhpVm.class');

/**
 * Test the GalleryPhpVm.  These are passthrough functions so all we do is perform a smoke test to
 * make sure that the basic arguments are getting passed through correctly.
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class PhpVmTest extends GalleryTestCase {

    function PhpVmTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();
	$this->_phpVm = new GalleryPhpVm();
    }

    function testMd5() {
	$this->assertEquals(md5('foobar'), $this->_phpVm->md5('foobar'),
			    'PhpVm MD5 output doesn\'t match PHP output');
    }

    function testFunctionExists() {
	$this->assertEquals(function_exists('testFunctionExists'),
			    $this->_phpVm->function_exists('testFunctionExists'),
			    'PhpVm function_exists output doesn\'t match PHP output');
    }

    function testIconv() {
	if (function_exists('iconv')) {
	    $this->assertEquals(
		iconv('ISO-8859-1', 'UTF-8', 'foo bar'),
		$this->_phpVm->iconv('ISO-8859-1', 'UTF-8', 'foo bar'));
	}
    }

    function testMbConvertEncoding() {
	if (function_exists('mb_convert_encoding')) {
	    $this->assertEquals(
		mb_convert_encoding('foo bar', 'ISO-8859-1', 'UTF8'),
		$this->_phpVm->mb_convert_encoding('foo bar', 'ISO-8859-1', 'UTF8'));
	}
    }

    function testRecodeString() {
	if (function_exists('recode_string')) {
	    $this->assertEquals(
		recode_string('ISO-8859-1..UTF8', 'foo bar'),
		$this->_phpVm->recode_string('ISO-8859-1..UTF8', 'foo bar'));
	}
    }

    /*
     * header() can only be tested with an actual HTTP requests, that's why we added it
     * to the mock VM
     */
    function testHeader() {
	global $gallery;

	/*
	 * This test also depends on the G2 Session code as we do an actual HTTP request and
	 * verify that we received a cookie header. GallerySession uses the $phpVm->header()
	 * function, thus this covers what we'd like to test (and a little more)
	 */
	$session =& $gallery->getSession();
	$urlGenerator =& $gallery->getUrlGenerator();
	$url = $urlGenerator->getCurrentUrl();
	/* Strip of the /lib/tools/test/ part to get a valid G2 request uri */
	$url = preg_replace('|^(.*/)lib/tools/.*$|', '$1', $url);
	list ($body, $response, $headers) = GalleryCoreApi::fetchWebPage($url);
	$this->assertEquals($response, 'HTTP/1.1 200 OK', 'Could not retrieve G2 page');
	$this->assertEquals(true, isset($headers['Set-Cookie']), 'Set-Cookie header not set');
	if (isset($headers['Set-Cookie'])) {
	    $this->assert(strpos($headers['Set-Cookie'], SESSION_ID_PARAMETER) !== false,
			  'no G2 SessionId found in the cookie header');
	} else {
	    $this->assert(false, 'no cookie header found in http response');
	}
    }

    /* Check is only rudimentary, omit the optional parameters */
    function testHeadersSent() {
	global $gallery;
	/* When this unit test is executed, we already sent some data to the user agent */
	$phpVm = $gallery->getPhpVm();
	$this->assert($phpVm->headers_sent(), 'headers are sent at this point, but the vm function ' .
		      'does not think so');

	/* The other case, $phpVm->headers_sent() == false, is covered by testHeader() */
    }

    /* This setting can't be changed during runtime */
    function testGetMagicQuotesGpc() {
	$this->assertEquals(get_magic_quotes_gpc(), $this->_phpVm->get_magic_quotes_gpc(),
			    'The Vm function does not return the correct value');
    }
}
?>
