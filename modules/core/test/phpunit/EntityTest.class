<?php
/*
 * $RCSfile: EntityTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.21 $ $Date: 2006/02/13 23:02:06 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Test Entity functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class EntityTest extends GalleryTestCase {

    function EntityTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();
	global $gallery;

	$this->_entity = new EntityTestEntity();
	$ret = $this->_entity->create();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = $this->_entity->save();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_entity);

	$ret = GalleryCoreApi::registerFactoryImplementation(
	    'GalleryOnLoadHandler', 'EntityTestOnLoadHandler', 'EntityTestOnLoadHandler',
	     'modules/core/test/phpunit/EntityTest.class', 'coreTest', null);
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markFactoryModuleForCleanup('coreTest');
	$this->_savedSession = $gallery->_session;
	$gallery->_session = null;
	$ret = $gallery->initSession();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$ret = $gallery->_session->start();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}
    }

    function tearDown() {
	global $gallery;
	$gallery->_session = $this->_savedSession;

	parent::tearDown();
    }

    function testOnLoad() {
	/*
	 * Ensure GalleryEntity::onLoad() is called whether entity is
	 * loaded from database or disk cache.. also called for refresh()
	 */

	/* Load the entity back and verify it */
	GalleryDataCache::setFileCachingEnabled(true);
	GalleryDataCache::reset();
	GalleryDataCache::removeFromDisk(
	    array('type' => 'entity', 'itemId' => $this->_entity->getId()));

	list ($ret, $newEntity) = GalleryCoreApi::loadEntitiesById($this->_entity->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('entitytestentity', strtolower(get_class($newEntity)), 'Entity class');
	$this->assertEquals($this->_entity, $newEntity, 'Entity check');
	$this->assert($newEntity->_wasOnLoadCalled(), 'onLoad for database load');

	if (GalleryDataCache::isFileCachingEnabled()) {
	    /* Load back from disk cache and verify it */
	    GalleryDataCache::reset();
	    $data = GalleryDataCache::getFromDisk(
		array('type' => 'entity', 'itemId' => $this->_entity->getId()));
	    $this->assert(!empty($data), 'Entity data should be in disk cache');

	    list ($ret, $newEntity) = GalleryCoreApi::loadEntitiesById($this->_entity->getId());
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->assertEquals('entitytestentity', strtolower(get_class($newEntity)),
				'Entity class 2');
	    $this->assertEquals($this->_entity, $newEntity, 'Entity check 2');
	    $this->assert($newEntity->_wasOnLoadCalled(), 'onLoad for disk cache load');
	}

	/* Load back from memory cache */
	list ($ret, $newEntity) = GalleryCoreApi::loadEntitiesById($this->_entity->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!$newEntity->_wasOnLoadCalled(), 'onLoad for memory cache load');

	/* Refresh from db */
	list ($ret, $newEntity) = $this->_entity->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($this->_entity, $newEntity, 'Entity check 3');
	$this->assert($newEntity->_wasOnLoadCalled(), 'onLoad for refresh');
    }

    function testOnLoadHandler() {
	global $gallery;
	$entity = new EntityTestEntity();
	$ret = $entity->create();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$entity->removeOnLoadHandler('NotThere');
	$this->assertEquals(null, $entity->getOnLoadHandlers(), 1);
	$this->assert(!$entity->hasOnLoadHandler('NotThere'), 2);
	$entity->addOnLoadHandler('EntityTestOnLoadHandler');
	$this->assertEquals('|EntityTestOnLoadHandler|', $entity->getOnLoadHandlers(), 3);
	$this->assert($entity->hasOnLoadHandler('EntityTestOnLoadHandler'), 4);
	$entity->removeOnLoadHandler('EntityTestOnLoadHandler');
	$this->assertEquals(null, $entity->getOnLoadHandlers(), 5);
	$this->assert(!$entity->hasOnLoadHandler('EntityTestOnLoadHandler'), 6);
	$entity->addOnLoadHandler('OneTest');
	$entity->addOnLoadHandler('EntityTestOnLoadHandler');
	$this->assertEquals('|OneTest|EntityTestOnLoadHandler|', $entity->getOnLoadHandlers(), 7);
	$this->assert($entity->hasOnLoadHandler('OneTest'), 8);
	$this->assert(!$entity->hasOnLoadHandler('OneTesto'), 9);
	$this->assert(!$entity->hasOnLoadHandler('aOneTest'), 10);
	$this->assert($entity->hasOnLoadHandler('EntityTestOnLoadHandler'), 11);
	$entity->removeOnLoadHandler('OneTest');
	$this->assertEquals('|EntityTestOnLoadHandler|', $entity->getOnLoadHandlers(), 12);

	$ret = $entity->save();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($entity);
	$this->assert(!$entity->_wasOnLoadCalled(), 'onLoad for new entity');

	list ($ret, $newEntity) = GalleryCoreApi::loadEntitiesById($entity->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$session =& $gallery->getSession();
	$this->assert(isset($session), 'session is not set');
	$this->assertEquals('entitytestentity', strtolower(get_class($newEntity)), 'Entity class');
	$this->assert($newEntity->_wasOnLoadCalled(), 'onLoad for database load');
	$this->assertEquals('onLoadHandler was called', $newEntity->getLinkedEntity(),
			    'handler not called');

	/* During upgrades the session has 'isUpgrade' key */
	GalleryDataCache::reset();
	unset($newEntity);
	$session->put('isUpgrade', true);
	list ($ret, $newEntity) = GalleryCoreApi::loadEntitiesById($entity->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('entitytestentity', strtolower(get_class($newEntity)), 'Entity class');
	$this->assert($newEntity->_wasOnLoadCalled(), 'onLoad for database load');
	$this->assertEquals('onLoadHandler was called during upgrade',
	    $newEntity->getLinkedEntity(), 'handler not called during upgrade');
    }

    function testSetSameValueDifferentType() {
	/*
	 * Ensure modified flag is not set if we assign a value that once casted
	 * to the right type is the same as the old value..
	 */

	$oldValue = $this->_entity->getModificationTimestamp();
	$newValue = (string)$oldValue;

	$this->_entity->setModificationTimestamp($newValue);
	$this->assert(!$this->_entity->isModified(), 'is not modified');
    }

    function testSetBackToOldValue() {
	/*
	 * Ensure modified flag is cleared if we change an attribute and then
	 * change it back to its original value..
	 */

	$oldValue = $this->_entity->getModificationTimestamp();
	$this->_entity->setModificationTimestamp(10);
	$this->assert($this->_entity->isModified(), 'is modified');

	$this->_entity->setModificationTimestamp($oldValue);
	$this->assert(!$this->_entity->isModified(), 'is not modified');
    }

    function testSetSetSet() {
	/*
	 * Ensure modified flag stays set if value goes null->A->B->A (ie first set of A
	 * doesn't become the "original value" when it should stay as null)
	 */

	$entity = new EntityTestEntity();
	$ret = $entity->create();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/*
	 * clear the modified flags, else the create() call will cause the id to be
	 * different
	 */
	$entity->resetOriginalValues();
	$this->assert(!$entity->isModified(), 'not yet modified');
	$entity->setIsLinkable(true);
	$entity->setIsLinkable(false);
	$entity->setIsLinkable(true);

	$this->assert($entity->isModified(), 'is modified');
    }

    function testIsModifiedMember() {
	$entity = new EntityTestEntity();
	$ret = $entity->create();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!$entity->isModified('onLoadHandlers'));
	$entity->setOnLoadHandlers('foo');
	$this->assert($entity->isModified('onLoadHandlers'));
    }

    function testEmptyVsNull() {
	/* Ensure we can save and reset empty string without triggering modified flag */
	GalleryCoreApi::requireOnce('modules/core/classes/GalleryEntity.class');
	$entity = new GalleryEntity();
	$ret = $entity->create();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$entity->setOnLoadHandlers('');
	$ret = $entity->save();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($entity);

	list ($ret, $entity) = $entity->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!$entity->isModified('onLoadHandlers'), 'after refresh');
	$entity->setOnLoadHandlers('');
	$this->assert(!$entity->isModified('onLoadHandlers'), 'should not be modified');
    }

    function testSaveWithoutEvent() {
	$listener = new EntityTestEventListener($this);
	GalleryCoreApi::registerEventListener('GalleryEntity::save', $listener);

	GalleryCoreApi::requireOnce('modules/core/classes/GalleryEntity.class');
	$entity = new GalleryEntity();
	$ret = $entity->create();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = $entity->save(false);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($entity);
	$this->assertEquals(null, $listener->getEvent());

	/*
	 * The GalleryTestCase event counter listener is going to be confused because it will see
	 * the GalleryEntity::delete when we clean up our entity, but not the GalleryEntity::save
	 * when we create it.  It will detect the mismatch and think that we deleted one entity
	 * too many and fail the test.  So generate our own event to keep the books straight.
	 */
	$event = GalleryCoreApi::newEvent('GalleryEntity::save');
	$entity->setPersistentFlag(STORAGE_FLAG_NEWLY_CREATED);
	$event->setEntity($entity);
	list ($ret, $result) = GalleryCoreApi::postEvent($event);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$event = $listener->getEvent();
	$newEntity = $event->getEntity();
	$this->assertEquals($entity->getId(), $newEntity->getId());
    }

    function _createLinkedPhotos() {
	list ($ret, $photo1) = $this->_createRandomDataItem(
	    $this->_getRootId(), 'application/unknown', array('width' => 100, 'height' => 200),
	    __FILE__, 'GalleryPhotoItem');
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}
	$this->_markForCleanup($photo1);
	$this->assertEquals(100, $photo1->getWidth());

	list ($ret, $photo2) = $this->_createLinkedItem($this->_rootAlbumId, $photo1);
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}
	$this->_markForCleanup($photo2);

	return array(null, $photo1, $photo2);
    }

    function testLinkedMembers() {
	list ($ret, $photo1, $photo2) = $this->_createLinkedPhotos();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/*
	 * width is null, because photo2 hasn't yet been loaded from the database (or refreshed)
	 * so its onLoad hasn't been called yet, which means that it still has its original
	 * value.
	 */
	$this->assertEquals(null, $photo2->getWidth());

	list ($ret, $photo2) = GalleryCoreApi::loadEntitiesById($photo2->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Now that we've reloaded photo2, it has linked values */
	$this->assertEquals(100, $photo2->getWidth());
	$this->assertEquals('application/unknown', $photo2->getMimeType());
    }

    function testDetachLink() {
	list ($ret, $photo1, $photo2) = $this->_createLinkedPhotos();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $photo2) = GalleryCoreApi::loadEntitiesById($photo2->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$photo2->setWidth(900);
	$this->assertEquals(900, $photo2->getWidth(), 'width was changed after loading entity');

	$ret = $photo2->detachLink();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(null, $photo2->getLinkId(), 'link id should be empty');
	$this->assertEquals(null, $photo2->getLinkedEntity(), 'linked entity should be empty');
	$this->assertEquals(100, $photo2->getWidth(), 'width was copied over from linked entity');

	/*
	 * Our cached $photo2 is detached but unsaved.  We can either save it, or just clear the
	 * cache.  Clearing the cache is easier.
	 */
	GalleryDataCache::reset();
    }
}

/**
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class EntityTestEntity extends GalleryEntity {

    function create() {
	$ret = parent::create();
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$this->setEntityType('EntityTestEntity');
	return null;
    }

    function onLoad() {
	$this->_wasOnLoadCalled(true);
	$ret = parent::onLoad();
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return null;
    }

    function _wasOnLoadCalled($set=null) {
	static $wasCalled;
	if (!isset($wasCalled)) {
	    $wasCalled = false;
	}
	if (isset($set)) {
	    $value = $wasCalled = $set;
	} else {
	    $value = $wasCalled;
	    $wasCalled = false;
	}
	return $value;
    }

    /**
     * @see GalleryEntity::getClassName()
     */
    function getClassName() {
	return 'EntityTestEntity';
    }

    function getClassFile() {
	return array(null, 'modules/core/test/phpunit/EntityTest.class');
    }
}

/**
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class EntityTestOnLoadHandler {
    function onLoad(&$entity, $duringUpgrade) {
	if (!$duringUpgrade) {
	    $entity->setLinkedEntity('onLoadHandler was called');
	} else {
	    $entity->setLinkedEntity('onLoadHandler was called during upgrade');
	}
	return null;
    }
}


GalleryCoreApi::requireOnce('modules/core/classes/GalleryEventListener.class');

/**
 * Dummy event listener
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class EntityTestEventListener extends GalleryEventListener {
    var $_event = null;

    function handleEvent($event) {
	$this->_event = $event;
	$data = $event->getData();
	return array(null, 'dummy');
    }

    function getEvent() {
	return $this->_event;
    }
}
?>
