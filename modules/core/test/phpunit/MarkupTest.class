<?php
/*
 * $RCSfile: MarkupTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.14 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Required classes
 */
GalleryCoreApi::relativeRequireOnce('lib/smarty_plugins/modifier.markup.php');

/**
 * Test Markup functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class MarkupTest extends GalleryTestCase {

    function MarkupTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	$this->_bbcode = new GalleryBbcodeMarkupParser();
	$this->_html = new GalleryHtmlMarkupParser();
	$this->_none = new GalleryNoMarkupParser();

	list ($ret, $this->_markup) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'misc.markup');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'misc.markup', $this->_markup);
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::tearDown();
    }

    function testBold() {
	$results = $this->_bbcode->parse('[b]one[/b]&lt;b&gt;two&lt;/b&gt;');
	$this->assertEquals('<b>one</b>&lt;b&gt;two&lt;/b&gt;', $results);
    }

    function testBold2() {
	$results = $this->_none->parse('[b]one[/b]&lt;b&gt;two&lt;/b&gt;');
	$this->assertEquals('[b]one[/b]&lt;b&gt;two&lt;/b&gt;', $results);
    }

    function testBold3() {
	$results = $this->_html->parse('[b]one[/b]&lt;b&gt;two&lt;/b&gt;');
	$this->assertEquals('[b]one[/b]<b>two</b>', $results);
    }

    function testItalic() {
	$results = $this->_bbcode->parse('[i]italic[/i]');
	$this->assertEquals('<i>italic</i>', $results);
    }

    function testMalformedCode() {
	$results = $this->_bbcode->parse('[b][i]foo[/b][/i]');
	$this->assertEquals('<b><i>foo</i></b>[/i]', $results);
    }

    function testList() {
	$results = $this->_bbcode->parse('[list][*]one[*]two[*]three[/list]');
	$this->assertEquals("<ul><li>one</li>\n<li>two</li>\n<li>three</li>\n</ul>", $results);
    }

    function testLineBreaks() {
	$results = $this->_bbcode->parse("foo\r\nbar\rbaz\n");
	$this->assertEquals("foo<br />\nbar<br />\nbaz<br />\n", $results);
    }

    function testHtmlSpecialChars() {
	$results = $this->_bbcode->parse('&lt;script language=&quot;javascript&quot;' .
					 '&gt;evil!&lt;/script&gt;');
	$this->assertEquals('&lt;script language=&quot;javascript&quot;&gt;evil!&lt;/script&gt;',
			    $results);
    }

    function testLineEndings() {
	$results = $this->_bbcode->parse("foo\nbar\nbaz\n");
	$this->assertEquals("foo<br />\nbar<br />\nbaz<br />\n", $results);
    }

    function testStripLastLineBreak() {
	$results = $this->_bbcode->parse("[list][*]one\ntwo\n[*]three[*]four\n[/list]");
	$this->assertEquals("<ul><li>one<br />\ntwo<br /></li>\n<li>three</li>" .
			    "\n<li>four<br /></li>\n</ul>", $results);
    }

    function testImage() {
	$results = $this->_bbcode->parse('[img]http://example.com/foo.gif[/img]');
	$this->assertEquals('<img src="http://example.com/foo.gif" alt="">', $results);
    }

    function testJavascriptInImage() {
	$results = $this->_bbcode->parse('[img]javascript:alert()[/img]');
	$this->assertEquals('[img]javascript:alert()[/img]', $results);
    }

    function testUrl1() {
	$results = $this->_bbcode->parse('[url]http://example.com/a.html[/url]');
	$this->assertEquals('<a href="http://example.com/a.html">http://example.com/a.html</a>',
			    $results);
    }

    function testUrl2() {
	$results = $this->_bbcode->parse('[url=http://example.com/a.html]content[/url]');
	$this->assertEquals('<a href="http://example.com/a.html">content</a>', $results);
    }

    function testUrl3() {
	$results = $this->_bbcode->parse('[url=mailto:monkey@fruit.com]content[/url]');
	$this->assertEquals('<a href="mailto:monkey@fruit.com">content</a>', $results);
    }

    function testUrl4() {
	$results = $this->_bbcode->parse('[url=https://example.com/secure.html]content[/url]');
	$this->assertEquals('<a href="https://example.com/secure.html">content</a>', $results);
    }

    function testUrl5() {
	$results = $this->_bbcode->parse('[url=ftp://example.com/]content[/url]');
	$this->assertEquals('<a href="ftp://example.com/">content</a>', $results);
    }

    function testUrl6() {
	$results = $this->_bbcode->parse('[url=bogus://example.com]content[/url]');
	$this->assertEquals('[url=bogus://example.com]content[/url]', $results);
    }

    function testJavascript() {
	$results = $this->_bbcode->parse('[url=javascript:alert(\'hi\')]content[/url]');
	$this->assertEquals('[url=javascript:alert(\'hi\')]content[/url]', $results);
    }

    function testUnicodeCharacters() {
	$results = $this->_bbcode->parse('[url=https://example.com/secure.html]' .
					 'Elemente hinzufügen[/url] Seitenverhältnis');
	$this->assertEquals('<a href="https://example.com/secure.html">Elemente hinzufügen</a>' .
			    ' Seitenverhältnis', $results);
    }

    function testNonBbcodeMarkers() {
	$results = $this->_bbcode->parse('[url=http://foo] [go] [/url]');
	$this->assertEquals('<a href="http://foo"> [go] </a>', $results);
    }

    function testMarkupNone() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'misc.markup', 'none');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('&lt;b&gt; [i] &amp;oacute;',
			    smarty_modifier_markup('&lt;b&gt; [i] &amp;oacute;'));
	$this->assertEquals('&lt;b&gt; [i] &amp;oacute;',
			    smarty_modifier_markup('&lt;b&gt; [i] &amp;oacute;', 'strip'), 'strip');
    }

    function testMarkupBbcode() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'misc.markup', 'bbcode');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Bbcode processor adds closing </i> tag too */
	$this->assertEquals('&lt;b&gt; <i> &amp;oacute;</i>',
			    smarty_modifier_markup('&lt;b&gt; [i] &amp;oacute;'));
	$this->assertEquals('&lt;b&gt;  &amp;oacute;',
			    smarty_modifier_markup('&lt;b&gt; [i] &amp;oacute;', 'strip'), 'strip');
    }

    function testMarkupHtml() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'misc.markup', 'html');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('<b> [i] &oacute;',
			    smarty_modifier_markup('&lt;b&gt; [i] &amp;oacute;'));
	$this->assertEquals(' [i] &oacute;',
			    smarty_modifier_markup('&lt;b&gt; [i] &amp;oacute;', 'strip'), 'strip');
	$this->assertEquals('&lt;b&gt; [i] &amp;oacute;',
			    smarty_modifier_markup('&lt;b&gt; [i] &amp;oacute;', 'none'),
			    'override');
	$this->assertEquals('&lt;b&gt;  &amp;oacute;',
			    smarty_modifier_markup('&lt;b&gt; [i] &amp;oacute;', 'bbcode', 'strip'),
			    'override+strip');
	$this->assertEquals('&lt;b&gt;  &amp;oacute;',
			    smarty_modifier_markup('&lt;b&gt; [i] &amp;oacute;', 'strip', 'bbcode'),
			    'strip+override');
    }
}
?>
