<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/core/ItemDeleteSingle.inc');

/**
 * ItemDeleteSingle Callback tests
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Felix Rabinovich <felix@rabinovich.org>
 * @version $Revision:$
 */
class ItemDeleteSingleCallbackTest extends GalleryTestCase {

    function ItemDeleteSingleCallbackTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	$ret = parent::setUp();
	if ($ret) {
	    return $ret;
	}
	$this->_callback = new ItemDeleteSingleView();

	/* Create an album to hold all of the test items */
	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    return $ret;
	}

	$this->_markForCleanup($this->_album);
    }

    /**
     * Create a random item and verify that we can delete it and stay on the same page
     */
    function testDeleteItem() {
	global $gallery;

	/* Create a random item */
	list ($ret, $item) = $this->_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	/* Use valid inputs - we are deleting a photo in an album view */
	GalleryUtilities::putRequestVariable('itemId', $item->getId());
	GalleryUtilities::putRequestVariable('pageId', $this->_album->getId());

	/* Perform the request and verify that we succeeded */
	list ($ret, $result) = $this->_callback->handleCallback();
	if ($ret) {
	    return $ret;
	}
	$urlGenerator =& $gallery->getUrlGenerator();
	$redirectUrl =
	    $urlGenerator->generateUrl(array('view' => 'core.ShowItem',
                                             'itemId' => $this->_album->getId(),
					      'return' => 1),
				       array('forceServerRelativeUrl' => true));
	$this->assertEquals(array('redirect' => $redirectUrl,
				  'status' => 'success'),
			    $result);

	/* Make sure the album is actually gone */
	$this->_verifyMissing($item->getId());
	if ($ret) {
	    return $ret;
	}
    }

    /**
     * Create a random item and verify that we can delete it and move to the parent page
     */
    function testDeletePageItem() {
	global $gallery;

	/* Create a random item */
	list ($ret, $item) = $this->_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	/* Use valid inputs - we are deleting an item that owns the page */
	GalleryUtilities::putRequestVariable('itemId', $item->getId());
	GalleryUtilities::putRequestVariable('pageId', $item->getId());

	/* Perform the request and verify that we succeeded */
	list ($ret, $result) = $this->_callback->handleCallback();
	if ($ret) {
	    return $ret;
	}
	$urlGenerator =& $gallery->getUrlGenerator();
	$redirectUrl =
	    $urlGenerator->generateUrl(array('view' => 'core.ShowItem',
                                             'itemId' => $this->_album->getId(),
					      'return' => 1),
				       array('forceServerRelativeUrl' => true));
	$this->assertEquals(array('redirect' => $redirectUrl,
				  'status' => 'success'),
			    $result);

	/* Make sure the album is actually gone */
	$this->_verifyMissing($item->getId());
	if ($ret) {
	    return $ret;
	}
    }

    /**
     * Create a random album and verify that we can delete it.
     */
    function testDeleteAlbum() {
	global $gallery;

	/* Create a random sub album */
	list ($ret, $album) = $this->_createRandomAlbum($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	/* Use valid inputs - we are deleting an album that owns the page */
	GalleryUtilities::putRequestVariable('itemId', $album->getId());
	GalleryUtilities::putRequestVariable('pageId', $album->getId());

	/* Perform the request and verify that we succeeded */
	list ($ret, $result) = $this->_callback->handleCallback();
	if ($ret) {
	    return $ret;
	}
	$urlGenerator =& $gallery->getUrlGenerator();
	$redirectUrl =
	    $urlGenerator->generateUrl(array('view' => 'core.ShowItem',
                                             'itemId' => $this->_album->getId(),
					      'return' => 1),
				       array('forceServerRelativeUrl' => true));
	$this->assertEquals(array('redirect' => $redirectUrl,
				  'status' => 'success'),
			    $result);

	/* Make sure the album is actually gone */
	$this->_verifyMissing($album->getId());
	if ($ret) {
	    return $ret;
	}
    }

    /**
     * Verify that we can't delete items without the right permissions
     */
    function testDeleteItemWithoutPermission() {
	global $gallery;

	list ($ret, $item) = $this->_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	$ret = GalleryCoreApi::removeItemPermissions($item->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('itemId', $item->getId());

	/* Perform the request and verify that we failed */
	list ($ret, $result) = $this->_callback->handleCallback();
	$this->assertEquals($ret->getErrorCode(), ERROR_PERMISSION_DENIED | GALLERY_ERROR, 
	    'Permissions denied');

	/* make sure it's still there */
	list ($ret, $item) = $item->refresh();
	if ($ret) {
	    return $ret;
	}
    }

    /**
     * Test deleting the root album. We should get a bad parameter error
     */
    function testDeleteRootAlbum() {
	global $gallery;

	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_getRootId());

	/* Perform the request and verify that we failed */
	list ($ret, $result) = $this->_callback->handleCallback();
	$this->assertEquals($ret->getErrorCode(), ERROR_BAD_PARAMETER | GALLERY_ERROR, 'Root album');
    }

    /**
     * Test deleting a random item that doesn't exist.  We should get a
     * permission denied (since the permission check happens before we even
     * verify that it's a valid item to prevent information leakage)
     */
    function testDeleteBogusItem() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', 1234567890);

	/* Perform the request and verify that we failed */
	list ($ret, $result) = $this->_callback->handleCallback();
	$this->assertEquals($ret->getErrorCode(), ERROR_PERMISSION_DENIED | GALLERY_ERROR, 'Bogus');
    }
}
?>
