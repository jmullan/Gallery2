<?php
/*
 * $RCSfile: PermissionTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.23 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Permission functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class PermissionTest extends GalleryTestCase {
    /**
     * Our internal albums
     *
     * @var array
     * @access private
     */
    var $_albums;

    function PermissionTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    /**
     * Create some nested albums that only have core.canChangePermissions that
     * we can use for testing.
     */
    function setUp() {
	global $gallery;

	parent::setUp();

	/* Create some items that we can assign permissions to */
	$parentId = $this->_getRootId();
	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $this->_albums[$i]) = $this->_createRandomAlbum($parentId);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    if ($i == 0) {
		$this->_markForCleanup($this->_albums[$i]);
	    }

	    /* Remove all permissions from it */
	    $ret = GalleryCoreApi::removeItemPermissions($this->_albums[$i]->getId());
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    /*
	     * Add core.changePermissions to all the items so that we can
	     * propagate changes.
	     */
	    $ret = GalleryCoreApi::addUserPermission(
		$this->_albums[$i]->getId(), $gallery->getActiveUserId(),
		'core.changePermissions', false);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $parentId = $this->_albums[$i]->getId();
	}

	list ($ret, $this->_user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_user);
    }

    /**
     * Add and remove some user and group permissions and test retrieving them.
     * This covers:
     *       GalleryCoreApi::addUserPermission
     *       GalleryCoreApi::addGroupPermission
     *       GalleryCoreApi::removeUserPermission
     *       GalleryCoreApi::removeGroupPermission
     *       GalleryCoreApi::fetchAllPermissionsForItem
     * And that the correct events are posted (ViewableTreeChange, RemovePermission)
     */
    function testAddAndRemoveUserAndGroupPermission() {
	global $gallery;
	$userId = $gallery->getActiveUserId();

	list ($ret, $groupIds) = GalleryCoreApi::fetchGroupsForUser($userId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Add extra data items to test cascading permissions */
	list ($ret, $item[0]) = $this->_createRandomDataItem($this->_albums[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $item[1]) = $this->_createRandomDataItem($this->_albums[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$groupIds = array_keys($groupIds);
	$groupId = $groupIds[0];

	/*
	 * Register a pseudo event listener to check if the functions under test create the right
	 * events
	 */
	$listener = new PermissionTestEventListener($this);
	GalleryCoreApi::registerEventListener('Gallery::ViewableTreeChange', $listener);
	GalleryCoreApi::registerEventListener('Gallery::RemovePermission', $listener);

	/*
	 * Get the userId for the group events (this is some code from
	 * GalleryPermissionHelper_advanced::_postGroupEvent()
	 */
	$groupEventUserId = null;
	list ($ret, $group) = GalleryCoreApi::loadEntitiesById($groupId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	if ($group->getGroupType() != GROUP_ALL_USERS
	        && $group->getGroupType() != GROUP_EVERYBODY) {
	    list ($ret, $userData) = GalleryCoreApi::fetchUsersForGroup($groupId);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $groupEventUserId = array_keys($userData);
	}
	
	/* Add user permission to just this item */
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_albums[0]->getId(), $userId, 'core.edit', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify the event */
	$event = GalleryCoreApi::newEvent('Gallery::ViewableTreeChange');
	$event->setData(array('userId' => $userId, 'itemId' => $this->_albums[0]->getId()));
	$this->assertEquals($event, $listener->getEvent());
	$listener->reset();
	
	/* Add group permission to just this item */
	$ret = GalleryCoreApi::addGroupPermission(
	    $this->_albums[0]->getId(), $groupId, 'core.edit', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Verify the event */
	$event = GalleryCoreApi::newEvent('Gallery::ViewableTreeChange');
	$event->setData(array('userId' => $groupEventUserId,
			      'itemId' => $this->_albums[0]->getId()));
	$this->assertEquals($event, $listener->getEvent());
	$listener->reset();

	/* Add user permission to this item and its children */
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_albums[0]->getId(), $userId, 'core.viewAll', true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify the event */
	$event = GalleryCoreApi::newEvent('Gallery::ViewableTreeChange');
	$event->setData(array('userId' => $userId, 'itemId' => $this->_albums[0]->getId()));
	$this->assertEquals($event, $listener->getEvent());
	$listener->reset();
	
	/* Add group permission to this item and its children */
	$ret = GalleryCoreApi::addGroupPermission(
	    $this->_albums[0]->getId(), $groupId, 'core.delete', true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify the event */
	$event = GalleryCoreApi::newEvent('Gallery::ViewableTreeChange');
	$event->setData(array('userId' => $groupEventUserId,
			      'itemId' => $this->_albums[0]->getId()));
	$this->assertEquals($event, $listener->getEvent());
	$listener->reset();

	/* Add another group permission to this item and its children */
	/* Add group permission to this item and its children */
	$ret = GalleryCoreApi::addGroupPermission(
	    $this->_albums[0]->getId(), $groupId, 'core.viewResizes', true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify the event */
	$event = GalleryCoreApi::newEvent('Gallery::ViewableTreeChange');
	$event->setData(array('userId' => $groupEventUserId,
			      'itemId' => $this->_albums[0]->getId()));
	$this->assertEquals($event, $listener->getEvent());
	$listener->reset();
	
	/* Retrieve permissions and compare */
	for ($i = 0; $i < sizeof($this->_albums)+2; $i++) {
	    if ($i < sizeof($this->_albums)) {
		$id = $this->_albums[$i]->getId();
	    } else {
		/* One of the two additional items */
		$id = $item[$i - sizeof($this->_albums)]->getId();
	    }
	    list ($ret, $uncompressedPerms) =
		GalleryCoreApi::fetchAllPermissionsForItem($id, false);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    list ($ret, $compressedPerms) = GalleryCoreApi::fetchAllPermissionsForItem($id, true);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    if ($i == 0) {
		/* The top album has more permissions than the children */
		$expectedUncompressed = array();
		$expectedUncompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.changePermissions');
		$expectedUncompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.edit');
		$expectedUncompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.view');
		$expectedUncompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.viewAll');
		$expectedUncompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.viewResizes');
		$expectedUncompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.viewSource');
		$expectedUncompressed[] = array(
		    'userId' => 0, 'groupId' => $groupId, 'permission' => 'core.delete');
		$expectedUncompressed[] = array(
		    'userId' => 0, 'groupId' => $groupId, 'permission' => 'core.edit');
		$expectedUncompressed[] = array(
		    'userId' => 0, 'groupId' => $groupId, 'permission' => 'core.viewResizes');
		
		$expectedCompressed = array();
		$expectedCompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.changePermissions');
		$expectedCompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.edit');
		$expectedCompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.viewAll');
		$expectedCompressed[] = array(
		    'userId' => 0, 'groupId' => $groupId, 'permission' => 'core.delete');
		$expectedCompressed[] = array(
		    'userId' => 0, 'groupId' => $groupId, 'permission' => 'core.edit');
		$expectedCompressed[] = array(
		    'userId' => 0, 'groupId' => $groupId, 'permission' => 'core.viewResizes');
	    } else {
		/* The sub albums and items have less permissions since some weren't passed down */
		$expectedUncompressed = array();
		$expectedUncompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.changePermissions');
		$expectedUncompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.view');
		$expectedUncompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.viewAll');
		$expectedUncompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.viewResizes');
		$expectedUncompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.viewSource');
		$expectedUncompressed[] = array(
		    'userId' => 0, 'groupId' => $groupId, 'permission' => 'core.delete');
		$expectedUncompressed[] = array(
		    'userId' => 0, 'groupId' => $groupId, 'permission' => 'core.viewResizes');

		$expectedCompressed = array();
		$expectedCompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.changePermissions');
		$expectedCompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.viewAll');
		$expectedCompressed[] = array(
		    'userId' => 0, 'groupId' => $groupId, 'permission' => 'core.delete');
		$expectedCompressed[] = array(
		    'userId' => 0, 'groupId' => $groupId, 'permission' => 'core.viewResizes');
	    }

	    usort($compressedPerms, array('PermissionTest', '_sortPermissions'));
	    usort($uncompressedPerms, array('PermissionTest', '_sortPermissions'));

	    $this->assertEquals(
		$expectedCompressed, $compressedPerms, "Album $i [$id] (compressed)");
	    $this->assertEquals(
		$expectedUncompressed, $uncompressedPerms, "Album $i [$id] (uncompressed)");
	}

	
	/*
	 * Now test removing permissions
	 */

	/* Remove user permission from just this item */
	$ret = GalleryCoreApi::removeUserPermission(
	    $this->_albums[0]->getId(), $userId, 'core.view', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify the events */
	list ($ret, $viewBits) = GalleryCoreApi::convertPermissionIdsToBits(array('core.view'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$event = GalleryCoreApi::newEvent('Gallery::RemovePermission');
	$event->setData(array('userId' => $userId, 'groupId' => null,
			      'itemIdsAndBits' => array($this->_albums[0]->getId() => $viewBits)));
	$this->assertEquals($event, $listener->getEvent(), 'removeUserPermission, not recursive');
	$event = GalleryCoreApi::newEvent('Gallery::ViewableTreeChange');
	$event->setData(array('userId' => $userId, 'itemId' => $this->_albums[0]->getId()));
	$this->assertEquals($event, $listener->getEvent(), 'removeUserPermission, not recursive');
	$listener->reset();
	
	/* Remove group permission from just this item */
	$ret = GalleryCoreApi::removeGroupPermission(
	    $this->_albums[0]->getId(), $groupId, 'core.edit', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Verify the event */
	list ($ret, $editBits) =
	    GalleryCoreApi::convertPermissionIdsToBits(array('core.edit'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$event = GalleryCoreApi::newEvent('Gallery::RemovePermission');
	$event->setData(array('userId' => null, 'groupId' => $groupId,
			      'itemIdsAndBits' =>
			      array($this->_albums[0]->getId() => $editBits)));
	$this->assertEquals($event, $listener->getEvent(), 'removeGroupPermission, not recursive');
	$event = GalleryCoreApi::newEvent('Gallery::ViewableTreeChange');
	$event->setData(array('userId' => $groupEventUserId,
			      'itemId' => $this->_albums[0]->getId()));
	$this->assertEquals($event, $listener->getEvent(), 'removeGroupPermission, not recursive');
	$listener->reset();

	/* Remove user permission from this item and its children */	    
	$ret = GalleryCoreApi::removeUserPermission(
	    $this->_albums[0]->getId(), $userId, 'core.viewAll', true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify the event */
	list ($ret, $viewAllBits) =
	    GalleryCoreApi::convertPermissionIdsToBits(array('core.viewAll'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $viewDeltaBits) =
	    GalleryCoreApi::convertPermissionIdsToBits(array('core.viewResizes',
							     'core.viewSource'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$event = GalleryCoreApi::newEvent('Gallery::RemovePermission');
	$itemIdsAndBits = array();
	$itemIdsAndBits[$this->_albums[0]->getId()] = $viewDeltaBits;
	for ($i = 1; $i < count($this->_albums); $i++) {
	    $itemIdsAndBits[$this->_albums[$i]->getId()] = $viewAllBits;
	}
	$itemIdsAndBits[$item[0]->getId()] = $viewAllBits;
	$itemIdsAndBits[$item[1]->getId()] = $viewAllBits;
	$event->setData(array('userId' => $userId, 'groupId' => null,
			      'itemIdsAndBits' => $itemIdsAndBits));
	$this->assertEquals($event, $listener->getEvent(), 'removeUserPermission, recursive');
	$event = GalleryCoreApi::newEvent('Gallery::ViewableTreeChange');
	$event->setData(array('userId' => $userId, 'itemId' => $this->_albums[0]->getId()));
	$this->assertEquals($event, $listener->getEvent(), 'removeUserPermission, recursive');
	$listener->reset();
	
	/* Remove group permission from this item and its children */
	$ret = GalleryCoreApi::removeGroupPermission(
	    $this->_albums[0]->getId(), $groupId, 'core.delete', true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify the event */
	list ($ret, $deleteBits) =
	    GalleryCoreApi::convertPermissionIdsToBits(array('core.delete'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$event = GalleryCoreApi::newEvent('Gallery::RemovePermission');
	$itemIdsAndBits = array();
	for ($i = 0; $i < count($this->_albums); $i++) {
	    $itemIdsAndBits[$this->_albums[$i]->getId()] = $deleteBits;
	}
	$itemIdsAndBits[$item[0]->getId()] = $deleteBits;
	$itemIdsAndBits[$item[1]->getId()] = $deleteBits;
	$event->setData(array('userId' => null, 'groupId' => $groupId,
			      'itemIdsAndBits' => $itemIdsAndBits));
	$this->assertEquals($event, $listener->getEvent(), 'removeGroupPermission, recursive');
	$event = GalleryCoreApi::newEvent('Gallery::ViewableTreeChange');
	$event->setData(array('userId' => $groupEventUserId,
			      'itemId' => $this->_albums[0]->getId()));
	$this->assertEquals($event, $listener->getEvent(), 'removeGroupPermission, recursive');

	/* Finally retrieve permissions after the remove calls and compare */
	for ($i = 0; $i < sizeof($this->_albums)+2; $i++) {
	    if ($i < sizeof($this->_albums)) {
		$id = $this->_albums[$i]->getId();
	    } else {
		/* One of the two additional items */
		$id = $item[$i - sizeof($this->_albums)]->getId();
	    }
	    list ($ret, $uncompressedPerms) =
		GalleryCoreApi::fetchAllPermissionsForItem($id, false);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    list ($ret, $compressedPerms) = GalleryCoreApi::fetchAllPermissionsForItem($id, true);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    
	    $expectedUncompressed = array();
	    $expectedUncompressed[] = array(
		'userId' => $userId, 'groupId' => 0, 'permission' => 'core.changePermissions');
	    if ($i == 0) {
		$expectedUncompressed[] = array(
		    'userId' => $userId, 'groupId' => 0, 'permission' => 'core.edit');
	    }
	    $expectedUncompressed[] = array(
		    'userId' => 0, 'groupId' => $groupId, 'permission' => 'core.viewResizes');
	    
	    $expectedCompressed = $expectedUncompressed;

	    usort($compressedPerms, array('PermissionTest', '_sortPermissions'));
	    usort($uncompressedPerms, array('PermissionTest', '_sortPermissions'));

	    $type = $i < count($this->_albums) ? 'Album ' . $i :
		'Item ' . $i - count($this->_albums);
	    $this->assertEquals(
		$expectedCompressed, $compressedPerms, "$type [$id] (compressed) (after removing)");
	    $this->assertEquals(
		$expectedUncompressed, $uncompressedPerms,
		"$type [$id] (uncompressed) (after removing)");
	}
    }

    /* Test if removeItemPermission actually removes permissions and creates the correct event */
    function testRemoveItemPermissions() {
	global $gallery;
	
	/* First verify that the item has some permissions */
	list ($ret, $uncompressedPerms) =
	    GalleryCoreApi::fetchAllPermissionsForItem($this->_albums[0]->getId(), false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$expectedUncompressed = array();
	$expectedUncompressed[] = array(
	    'userId' => $gallery->getActiveUserId(), 'groupId' => 0,
	    'permission' => 'core.changePermissions');

	$this->assertEquals($expectedUncompressed, $uncompressedPerms,
		'Cannot test removeItemPermissions because the initial state is not as expected');

	/*
	 * Register a pseudo event listener to check if the function under test creates the right
	 * events
	 */
	$listener = new PermissionTestEventListener($this);
	GalleryCoreApi::registerEventListener('Gallery::ViewableTreeChange', $listener);
	GalleryCoreApi::registerEventListener('Gallery::RemovePermission', $listener);
	
	/* Then remove the permissions */
	$ret = GalleryCoreApi::removeItemPermissions($this->_albums[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Check that the correct events have been created */
	/* Verify the event */
	
	$event = GalleryCoreApi::newEvent('Gallery::ViewableTreeChange');
	$event->setData(array('userId' => null,
			      'itemId' => $this->_albums[0]->getId()));
	$this->assertEquals($event, $listener->getEvent(),
			    'ViewableTreeChange event is not as expected');
	list ($ret, $zeroBits) =
	    GalleryCoreApi::convertPermissionIdsToBits(array());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$event = GalleryCoreApi::newEvent('Gallery::RemovePermission');
	$event->setData(array('userId' => 0, 'groupId' => 0,
			      'itemIdsAndBits' => array($this->_albums[0]->getId() => $zeroBits),
			      'format' => 'newBits'));
	$this->assertEquals($event, $listener->getEvent(), 'RemovePermission is not as expected');
	
	/* And check that the item has no permissions after the removal */
	list ($ret, $permissions) =
	    GalleryCoreApi::fetchAllPermissionsForItem($this->_albums[0]->getId(), true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array(), $permissions,
		'test failed. removeItemPermissions() did not remove all permissions!');
    }
    
    /**
     * Sort permissions by group, user then permission name
     * @access private
     */
    function _sortPermissions($a, $b) {
	foreach (array('groupId', 'userId', 'permission') as $key) {
	    if ($a[$key] < $b[$key]) {
		return -1;
	    } else if ($a[$key] > $b[$key]) {
		return 1;
	    }
	}
	return 0;
    }

    /**
     * Test copying permissions from one item to another
     * This covers:
     *
     *     GalleryCoreApi::addUserPermission
     *     GalleryCoreApi::fetchPermissionsForItems
     */
    function testCopyPermissions() {
	global $gallery;
	$userId = $gallery->getActiveUserId();

	/* Add user permission to the 2nd item */
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_albums[1]->getId(), $userId, 'core.viewAll', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Copy permissions to the root item */
	$ret = GalleryCoreApi::copyPermissions(
	    $this->_albums[0]->getId(), $this->_albums[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Fetch and compare */
	list ($ret, $perms) = GalleryCoreApi::fetchPermissionsForItems(
	    array($this->_albums[0]->getId(), $this->_albums[1]->getId()), $userId);
	$this->assertEquals($perms[$this->_albums[0]->getId()],
			    $perms[$this->_albums[1]->getId()]);
    }

    /**
     * Test getting permissions for a non activeUser
     * This covers:
     *
     *     GalleryCoreApi::addUserPermission
     *     GalleryCoreApi::fetchPermissionsForItems
     */
    function testFetchPermissionsForItems() {
	global $gallery;

	$ret = GalleryCoreApi::removeItemPermissions($this->_albums[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Add user permission to the 2nd item */
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_albums[1]->getId(), $this->_user->getId(), 'core.edit', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Fetch and compare */
	list ($ret, $perms) = GalleryCoreApi::fetchPermissionsForItems(
	    array($this->_albums[1]->getId()), $this->_user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($perms[$this->_albums[1]->getId()]['core.edit']),
		      'Permission not fetched');
	$this->assert(count($perms[$this->_albums[1]->getId()]) == 1,
		'returned too many permissions');
	$this->assert(count($perms) == 1, 'returned too many items and permissions');
    }

    /**
     * Test copying permissions from one item to another
     * This covers:
     *
     *     GalleryCoreApi::addUserPermission
     *     GalleryCoreApi::addGroupPermission
     *     GalleryCoreApi::hasPermission
     */
    function testHasPermission() {
	global $gallery;
	$userId = $gallery->getActiveUserId();

	list ($ret, $groupIds) =
	    GalleryCoreApi::fetchGroupsForUser($userId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$groupIds = array_keys($groupIds);
	$groupId = $groupIds[0];

	/* Add user permission to the 2nd item */
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_albums[0]->getId(), $userId, 'core.viewAll', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::addGroupPermission(
	    $this->_albums[0]->getId(), $groupId, 'core.delete', false);

	list ($ret, $bits) = GalleryPermissionHelper_advanced::_fetchPermissionBitsForItem(
	    $this->_albums[0]->getId(), 5, 0);

	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* User has component of composite permission */
	list ($ret, $hasPermission) = GalleryCoreApi::hasPermission(
	    $this->_albums[0]->getId(), array($userId), array(), 'core.view');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($hasPermission, true, 'user has component of composite');

	/* User has composite permission */
	list ($ret, $hasPermission) = GalleryCoreApi::hasPermission(
	    $this->_albums[0]->getId(), array($userId), array(), 'core.viewAll');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($hasPermission, true, 'user has composite');

	/* User does not have permission */
	list ($ret, $hasPermission) = GalleryCoreApi::hasPermission(
	    $this->_albums[0]->getId(), array($userId), array(), 'core.edit');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($hasPermission, false, 'user does not have perm');

	/* Group has composite permission */
	list ($ret, $hasPermission) = GalleryCoreApi::hasPermission(
	    $this->_albums[0]->getId(), array(), array($groupId), 'core.delete');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($hasPermission, true, 'group has perm');

	/* Group has composite permission */
	list ($ret, $hasPermission) = GalleryCoreApi::hasPermission(
	    $this->_albums[0]->getId(), array(), array($groupId), 'core.edit');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($hasPermission, false, 'group does not have perm');
    }

    /* Create new access lists and make sure that they are in our acl set */
    function testFetchAccessListIds() {
	global $gallery;
	$storage =& $gallery->getStorage();
	list ($ret, $newAclId[0]) = $storage->getUniqueId();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $bits) = GalleryCoreApi::convertPermissionIdsToBits('core.view');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryAccessMap::addMapEntry(
	    array('accessListId' => $newAclId[0],
		  'userId' => $gallery->getActiveUserId(),
		  'groupId' => 0,
		  'permission' => $bits));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $myGroupId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.adminGroup');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $newAclId[1]) = $storage->getUniqueId();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryAccessMap::addMapEntry(
	    array('accessListId' => $newAclId[1],
		  'userId' => 0,
		  'groupId' => $myGroupId,
		  'permission' => $bits));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $newAclId[2]) = $storage->getUniqueId();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryAccessMap::addMapEntry(
	    array('accessListId' => $newAclId[2],
		  'userId' => 0,
		  'groupId' => $newAclId[2],  /* reuse the acl id as a non-existent group id */
		  'permission' => $bits));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $aclIds) =
	    GalleryCoreApi::fetchAccessListIds('core.view', $gallery->getActiveUserId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(in_array($newAclId[0], $aclIds), 'missing user acl');
	$this->assert(in_array($newAclId[1], $aclIds), 'missing group acl');
	$this->assert(!in_array($newAclId[2], $aclIds), 'shouldn\'t see this acl');

	$ret = GalleryAccessMap::removeMapEntry(array('accessListId' => $newAclId));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testCompactAccessLists() {
	global $gallery;

	/*
	 * Compact the access lists before we start to get rid of any extra acls that might cause
	 * us issues.  This test works by duplicating an existing ACL and then verifying that the
	 * duplicate goes away.  But when we're running after a bunch of other tests, it's
	 * possible that we may wind up duping an ACL that is already extraneous and then *both*
	 * go away!  So compact the acls before we even start.  This puts us in the slightly
	 * unfortunate position of relying on the code that we're testing, but I think that if the
	 * initial compact doesn't work the test will still fail so we're safe.  If there's any
	 * doubt, then we can probably remedy this by finding an ACL that is actually in use and
	 * duping that one instead.
	 */
	$ret = GalleryCoreApi::compactAccessLists();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $bits) = GalleryCoreApi::convertPermissionIdsToBits('core.view');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/*
	 * Create a duplicate ACL by copying one of our existing permissions.  We don't know
	 * which one is going to get deleted though so track both of them.
	 */
	list ($ret, $aclIds) =
	    GalleryCoreApi::fetchAccessListIds('core.view', $gallery->getActiveUserId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $duplicateAclId[0]) =
	    GalleryPermissionHelper_advanced::_copyAccessList($aclIds[0]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$duplicateAclId[1] = $aclIds[0];

	/* Create an unused ACL */
	$storage =& $gallery->getStorage();
	list ($ret, $unusedAclId) = $storage->getUniqueId();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryAccessMap::addMapEntry(
	    array('accessListId' => $unusedAclId,
		  'userId' => $gallery->getActiveUserId(),
		  'groupId' => 0,
		  'permission' => $bits));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	/* Verify that both access list ids are available */
	list ($ret, $aclIds) =
	    GalleryCoreApi::fetchAccessListIds('core.view', $gallery->getActiveUserId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(in_array($unusedAclId, $aclIds),
	    "Missing unused acl id (pre compact): $unusedAclId");
	$this->assert(count(array_intersect($duplicateAclId, $aclIds)) == 2,
	    "Missing dupe acl id (pre compact): $duplicateAclId[0] or $duplicateAclId[1]");

	/* Compact the access lists */
	$ret = GalleryCoreApi::compactAccessLists();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	/* Verify that the dupe and unused acls are now gone */
	list ($ret, $aclIds) =
	    GalleryCoreApi::fetchAccessListIds('core.view', $gallery->getActiveUserId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!in_array($unusedAclId, $aclIds),
		      "Extra unused acl id (post compact): $unusedAclId");
	$this->assert(count(array_intersect($duplicateAclId, $aclIds)) == 1,
		      "Extra dupe acl id (post compact): $duplicateAclId[0] or $duplicateAclId[1]");
    }

    function testHasItemPermission() {
	list ($ret, $hasItemPermission) =
	    GalleryCoreApi::hasItemPermission($this->_albums[0]->getId(), 'core.changePermissions');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($hasItemPermission, 'active user should have core.changePermissions');

	list ($ret, $hasItemPermission) = GalleryCoreApi::hasItemPermission(
	    $this->_albums[0]->getId(), 'core.changePermissions', $this->_user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!$hasItemPermission, 'new user should not have core.changePermissions');
    }

    function testGetPermissions() {
	list ($ret, $permissions) = GalleryCoreApi::getPermissions($this->_albums[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('core.changePermissions' => 1), $permissions,
			    'active user should have core.changePermissions');

	list ($ret, $permissions) =
	    GalleryCoreApi::getPermissions($this->_albums[0]->getId(), $this->_user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), $permissions, 'new user should have no perms');
    }

    function testRecursiveAdd() {
	/* Recursive add of permissions only affects items with changePermissions permission */
	global $gallery;

	$ret = GalleryCoreApi::addUserPermission(
	    $this->_albums[0]->getId(), $this->_user->getId(), 'core.changePermissions', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_albums[2]->getId(), $this->_user->getId(), 'core.changePermissions', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$gallery->setActiveUser($this->_user);

	$ret = GalleryCoreApi::addUserPermission(
	    $this->_albums[0]->getId(), $this->_user->getId(), 'core.delete', true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $permissions) = GalleryCoreApi::getPermissions($this->_albums[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('core.changePermissions' => 1, 'core.delete' => 1),
			    $permissions, 'album 1');
	list ($ret, $permissions) = GalleryCoreApi::getPermissions($this->_albums[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), $permissions, 'album 2');
	list ($ret, $permissions) = GalleryCoreApi::getPermissions($this->_albums[2]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('core.changePermissions' => 1, 'core.delete' => 1),
			    $permissions, 'album 3');
    }

    function testRecursiveRemove() {
	/* Recursive remove of permissions only affects items with changePermissions permission */
	global $gallery;

	list ($ret, $everybodyGroupId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.everybodyGroup');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addGroupPermission(
	    $this->_albums[0]->getId(), $everybodyGroupId, 'core.view', true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_albums[0]->getId(), $this->_user->getId(), 'core.changePermissions', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_albums[2]->getId(), $this->_user->getId(), 'core.changePermissions', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$gallery->setActiveUser($this->_user);

	list ($ret, $permissions) =
	    GalleryCoreApi::fetchPermissionsForItems(array($this->_albums[0]->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($this->_albums[0]->getId() =>
	    array('core.changePermissions' => 1, 'core.view' => 1)), $permissions,
	    'permissions before remove');

	$ret = GalleryCoreApi::removeGroupPermission(
	    $this->_albums[0]->getId(), $everybodyGroupId, 'core.view', true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Ensure old permission has been removed and isn't still cached */
	list ($ret, $canView) =
	    GalleryCoreApi::hasItemPermission($this->_albums[0]->getId(), 'core.view');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!$canView, 'should not have view permission');
	list ($ret, $permissions) = GalleryCoreApi::getPermissions($this->_albums[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('core.changePermissions' => 1), $permissions, 'album 1');
	list ($ret, $permissions) = GalleryCoreApi::getPermissions($this->_albums[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('core.view' => 1), $permissions, 'album 2');
	list ($ret, $permissions) = GalleryCoreApi::getPermissions($this->_albums[2]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('core.changePermissions' => 1), $permissions, 'album 3');
    }
}

GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryEventListener.class');

/**
 * Dummy event listener
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class PermissionTestEventListener extends GalleryEventListener {
    var $_event = array();
    var $_nr = 0;

    function handleEvent($event) {
	$this->_event[] = $event;
	$data = $event->getData();
	return array(GalleryStatus::success(), 'dummy');
    }

    function getEvent() {
	if (isset($this->_event[$this->_nr])) {
	    return $this->_event[$this->_nr++];
	} else {
	    return 'missing event';
	}
    }

    function reset() {
	$this->_event = array();
	$this->_nr = 0;
    }
}
?>
