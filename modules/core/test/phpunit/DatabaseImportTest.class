<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/core/classes/GalleryStorage/GalleryDatabaseImport.class');
GalleryCoreApi::requireOnce('modules/core/classes/GalleryStorage.class');

/**
 * Test Database Import functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Tim Almdal <tnalmdal@shaw.ca>
 * @version $Revision$
 */
class DatabaseImportTest extends GalleryTestCase {

    function DatabaseImportTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

    	global $gallery;

	$this->_xmlParser =& GalleryDatabaseImport::_createParser();

    	$gallery->setPlatform(new UnitTestPlatform());
    	$gallery->_storage = new UnitTestStorage();
    	$storage =& $gallery->getStorage();
    	$storage->_tablePrefix = 'g2_';
    	$storage->_columnPrefix  = 'g_';
    }

    function tearDown() {
    	global $gallery;
    	$platform =& $gallery->getPlatform();
    	$storage =& $gallery->getStorage();

	xml_parser_free($this->_xmlParser);

	$this->assert($platform->isComplete(), $platform->getRemaining());
	$this->assert($storage->isComplete(), $storage->getRemaining());
	$extras =& $storage->_getExtras();
	$this->assert($extras->isComplete(), $extras->getRemaining());

	$ret = parent::tearDown();
	if ($ret) {
	   return $ret;
	}
    }

    function progressCallback($percentage) {
    }

    function testVerifyVersions() {
    	global $gallery;
    	$platform =& $gallery->getPlatform();

	GalleryDataCache::reset(true);

	$pluginStatus =
		array('DatabaseImportTest1' => array('active' => 1, 'available' => 1,
			'version' => '1.0.8', 'requiredCoreApi' => array(7, 27),
			'requiredModuleApi' => array(3, 6), 'callbacks' => ''),
		      'DatabaseImportTest2' => array('active' => 1, 'available' => 1,
			'version' => '1.1.5', 'requiredCoreApi' => array(7, 20),
			'requiredModuleApi' => array(3, 6), 'callbacks' => ''),
		      'DatabaseImportTest3' => array('active' => 1, 'available' => 1,
			'version' => '1.0.8', 'requiredCoreApi' => array(7, 27),
			'requiredModuleApi' => array(3, 6), 'callbacks' => ''));
	$cacheKey = 'GalleryPluginHelper::fetchPluginStatus(module)';
	GalleryDataCache::put($cacheKey, $pluginStatus);

	$installedModuleVersion = GalleryModule::getApiVersion();
	$installedCoreVersion = GalleryCoreApi::getApiVersion();
	$installedModuleApi = implode('.', $installedModuleVersion);
	$installedCoreApi = implode('.', $installedCoreVersion);

	$exportedCoreVersion = array(1, 2, 12);

	$exportedCoreVersion[1] += 1;
	$exportedCoreVersion = implode('.', $exportedCoreVersion);
	$installedModuleVersion[1] += 1;
	$exportedModuleApi = implode('.', $installedModuleVersion);
	$installedCoreVersion[1] += 1;
	$exportedCoreApi = implode('.', $installedCoreVersion);

	$expected = array('errors' =>
		array('The available version of plugin "DatabaseImportTest1" may not be '
				. 'compatible with the imported version.'));

	$expected['warnings'] = array(
	    'The installed module API version required by "DatabaseImportTest2"'
		. ' may not be compatible with the imported version.',
	    'The currently installed core API version required by '
		. '"DatabaseImportTest3" may not be compatible with the imported version.',
	    'Plugin DatabaseImportTest4 is not currently available.');

	$platform->setReply('file_exists', array('testExport.xml'), true);
	$platform->setReply('fopen', array('testExport.xml', 'r', 0), 'testHandle');
	$platform->setReply('feof', array('testHandle'), false);

	$line = '  <plugin-status id="DatabaseImportTest1" required-core-api="'
		. $installedCoreApi . '" required-api="' . $installedModuleApi . '" version="1.0.8"'
		. ' active="1" type="module"/>' . "\n";
	$platform->setReply('fgets', array('testHandle', 4096), $line);
	$platform->setReply('feof', array('testHandle'), false);

	$line = '  <plugin-status id="DatabaseImportTest2" required-core-api="'
		. $installedCoreApi . '" required-api="' . $exportedModuleApi . '" version="1.1.5"'
		. ' active="1" type="module"/>' . "\n";
	$platform->setReply('fgets', array('testHandle', 4096), $line);
	$platform->setReply('feof', array('testHandle'), false);

	$line = '  <plugin-status id="DatabaseImportTest3" required-core-api="'
		. $exportedCoreApi . '" required-api="' . $installedModuleApi . '" version="1.0.8"'
		. ' active="1" type="module"/>' . "\n";
	$platform->setReply('fgets', array('testHandle', 4096), $line);
	$platform->setReply('feof', array('testHandle'), false);

	$line = '  <plugin-status id="DatabaseImportTest4" required-core-api="'
		. $installedCoreApi . '" required-api="' . $installedModuleApi . '" version="1.0.6"'
		. ' active="1" type="module"/>'. "\n";

	$platform->setReply('fgets', array('testHandle', 4096), $line);
	$platform->setReply('feof', array('testHandle'), false);

	$platform->setReply('fgets', array('testHandle', 4096), '</plugin-status-list>');
	$platform->setReply('fclose', array('testHandle'), true);


    	$this->_testObj = new GalleryDatabaseImport();
    	$errors = $this->_testObj->verifyVersions('testExport.xml');

    	$this->assertEquals($expected, $errors, 'Verify Versions test failed.');
    }

    function testVersionsDat() {
    	global $gallery;
    	$platform =& $gallery->getPlatform();

	$versionFile = $gallery->getConfig('data.gallery.version');

	$writeString = implode("\n", array('C2.4', 'G2.2', 'maintenance-mode'));
	$platform->setReply('atomicWrite', array($versionFile, $writeString), true);

    	$this->_testObj = new GalleryDatabaseImport();
    	$this->_testObj->writeVersions('C2.4', 'G2.2');
    }

    function testImportConfig() {
    	global $gallery;
    	$platform =& $gallery->getPlatform();
    	$storage =& $gallery->getStorage();

    	$configContents = '<?php'
    			. "\n" . '@ini_set(\'display_errors\', 1);'
    			. "\n" . '$storeConfig[\'tablePrefix\'] = \'g2_\';'
    			. "\n" . '$storeConfig[\'columnPrefix\'] = \'g_\';'
    			. "\n" . '$storeConfig[\'usePersistentConnections\'] = false;'
    			. "\n" . '$gallery->setConfig(\'storage.config\', $storeConfig);'
    			. "\n" . '$gallery->setConfig(\'baseUri\', \'\');'
    			. "\n" . '?>';

    	$inputXml = '<config><![CDATA[' . $configContents . ']]></config>';

	$configFile = GALLERY_CONFIG_DIR . '/config.php';

	$platform->setReply('file_put_contents', array($configFile, $configContents), true);
	$storage->setReply('setDebug', array(false), null);

	$this->_testObj = new GalleryConfigImport($this, array());
	xml_set_object($this->_xmlParser, $this->_testObj);

	if (!xml_parse($this->_xmlParser, $inputXml, true)) {
	    return GalleryCoreApi::error(ERROR_BAD_PARAMETER, null, null,
				    sprintf("XML error: %s at line %d",
					    xml_error_string(xml_get_error_code($this->_xmlParser)),
					    xml_get_current_line_number($this->_xmlParser)));
	}
    }

    function testImportSequence() {
    	global $gallery;
     	$storage =& $gallery->getStorage();

	$storage->setExtrasReply('dropSequence', array('testSequence'), null);
	$storage->setExtrasReply('createSequence', array('testSequence', '46'), null);

    	$this->_testObj = new GalleryPluginImport($this, array('ID' => 'moduleId'));
    	$ret = $this->_testObj->importSequence('testSequence', '46');
	if ($ret) {
	    return $ret;
	}
    }

    function testCreateTableSql() {
    	global $gallery;
     	$storage =& $gallery->getStorage();

	$storage->setReply('_translateTableName', array('GalleryTestTable'),
			   array('g2_GalleryTestTable', null, null));
	$storage->setReply('execute', array('DROP TABLE g2_GalleryTestTable', array()), null);

	$buffer = 'CREATE TABLE DB_TABLE_PREFIXTestTable('
		  . ' DB_COLUMN_PREFIXuserName varchar(32) NOT NULL,'
		  . ' DB_COLUMN_PREFIXauthString varchar(32) NOT NULL,'
		  . ' DB_COLUMN_PREFIXrequestExpires int(11) NOT NULL,'
		  . ' PRIMARY KEY(DB_COLUMN_PREFIXuserName)'
		  . ') DB_TABLE_TYPE'
		  . '/*!40100 DEFAULT CHARACTER SET utf8 */;'
		  . ''
		  . 'INSERT INTO DB_TABLE_PREFIXSchema ('
		  . ' DB_COLUMN_PREFIXname,'
		  . ' DB_COLUMN_PREFIXmajor,'
		  . ' DB_COLUMN_PREFIXminor'
		  . ') VALUES(\'TestTable\', 1, 1);';
	$storage->setExtrasReply('_executeSql', array($buffer), null);

	$inputXml = '<table name="GalleryTestTable">'
		  . '<create-sql>CREATE TABLE DB_TABLE_PREFIXTestTable('
		  . ' DB_COLUMN_PREFIXuserName varchar(32) NOT NULL,'
		  . ' DB_COLUMN_PREFIXauthString varchar(32) NOT NULL,'
		  . ' DB_COLUMN_PREFIXrequestExpires int(11) NOT NULL,'
		  . ' PRIMARY KEY(DB_COLUMN_PREFIXuserName)'
		  . ') DB_TABLE_TYPE'
		  . '/*!40100 DEFAULT CHARACTER SET utf8 */;'
		  . ''
		  . 'INSERT INTO DB_TABLE_PREFIXSchema ('
		  . ' DB_COLUMN_PREFIXname,'
		  . ' DB_COLUMN_PREFIXmajor,'
		  . ' DB_COLUMN_PREFIXminor'
		  . ') VALUES(\'TestTable\', 1, 1);'
		  . '</create-sql>'
		  . '</table>';

	$storage->setReply('commitTransaction', array(), null);
    	$this->_testObj = new GalleryTableImport($this, array('NAME' => 'GalleryTestTable'));
	xml_set_object($this->_xmlParser, $this->_testObj);

	if (!xml_parse($this->_xmlParser, $inputXml, true)) {
	    return GalleryCoreApi::error(ERROR_BAD_PARAMETER, null, null,
				    sprintf("XML error: %s at line %d",
					    xml_error_string(xml_get_error_code($this->_xmlParser)),
					    xml_get_current_line_number($this->_xmlParser)));
	}
    }

    function updateStatus($progress=1, $total=0) {
    }

    function testDropTable() {
    	global $gallery;
     	$storage =& $gallery->getStorage();

	$storage->setReply('_translateTableName', array('testTable'),
								array('g2_testTable', null, null));
	$storage->setReply('execute', array('DROP TABLE g2_testTable', array()), null);

    	$this->_testObj = new GalleryTableImport($this, array('NAME' => 'testTable'));
    	$ret = $this->_testObj->_dropTable();
	if ($ret) {
	    return $ret;
	}
    }

    function testDataImport() {
    	global $gallery;
     	$storage =& $gallery->getStorage();

	$storage->setReply('_translateTableName', array('testTable'),
								array('g2_testTable', null, null));
	$storage->setReply('_translateColumnName', array('accessListId'), 'g_accessListId');
	$storage->setReply('_translateColumnName', array('userOrGroupId'), 'g_userOrGroupId');
	$storage->setReply('_translateColumnName', array('permission'), 'g_permission');

	$query = 'INSERT INTO g2_testTable (g_accessListId, g_userOrGroupId, g_permission) '
			. 'VALUES (?,?,?)';
	$storage->setReply('execute', array($query, array('19', '3', '&2147483647')), null);
	$storage->setReply('execute', array($query, array('19', '4', '<1040647>')), null);
	$storage->setReply('execute', array($query, array('24', '3', '4')), null);

    	$this->_testObj = new GalleryDataImport($this, 'testTable');

	$inputXml = '<data>
          <field name="accessListId" />
          <field name="userOrGroupId" />
          <field name="permission" />
          <row><f>19</f><f>3</f><f>&amp;2147483647</f></row>
          <row><f>19</f><f>4</f><f>&lt;1040647&gt;</f></row>
          <row><f>24</f><f>3</f><f>4</f></row>
        </data>';

	xml_set_object($this->_xmlParser, $this->_testObj);

	if (!xml_parse($this->_xmlParser, $inputXml, true)) {
	    return GalleryCoreApi::error(ERROR_BAD_PARAMETER, null, null,
				    sprintf("XML error: %s at line %d",
					    xml_error_string(xml_get_error_code($this->_xmlParser)),
					    xml_get_current_line_number($this->_xmlParser)));
	}
    }
}

class DatabaseImportTest1Module extends GalleryModule {
    function DatabaseImportTest1Module() {
	$this->setId('DatabaseImportTest1');
	$this->setName('Database Import Test Module1 Module');
	$this->setDescription('Unit test module');
	$this->setVersion('1.0.0');
	$this->setGroup('data', 'Gallery');
	$this->setCallbacks('');
	$this->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
	$this->setRequiredModuleApi(GalleryModule::getApiVersion());
    }
}

class DatabaseImportTest2Module extends GalleryModule {
    function DatabaseImportTest2Module() {
	$this->setId('DatabaseImportTest2');
	$this->setName('Database Import Test Module2 Module');
	$this->setDescription('Unit test module');
	$this->setVersion('1.1.5');
	$this->setGroup('data', 'Gallery');
	$this->setCallbacks('');
	$this->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
	$this->setRequiredModuleApi(GalleryModule::getApiVersion());
    }
}

class DatabaseImportTest3Module extends GalleryModule {
    function DatabaseImportTest3Module() {
	$this->setId('DatabaseImportTest3');
	$this->setName('Database Import Test Module3 Module');
	$this->setDescription('Unit test module');
	$this->setVersion('1.0.8');
	$this->setGroup('data', 'Gallery');
	$this->setCallbacks('');
	$this->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
	$this->setRequiredModuleApi(GalleryModule::getApiVersion());
    }
}

class DatabaseImportTest4Module extends GalleryModule {
    function DatabaseImportTest4Module() {
	$this->setId('DatabaseImportTest4');
	$this->setName('Database Import Test Module4 Module');
	$this->setDescription('Unit test module');
	$this->setVersion('1.0.6');
	$this->setGroup('data', 'Gallery');
	$this->setCallbacks('');
	$this->setRequiredCoreApi(GalleryCoreApi::getApiVersion());
	$this->setRequiredModuleApi(GalleryModule::getApiVersion());
    }
}
?>
