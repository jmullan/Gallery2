<?php
/*
 * $RCSfile: UserAndGroupTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.24 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test User and Group functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class UserAndGroupTest extends GalleryTestCase {

    function UserAndGroupTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_siteAdminGroupId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.adminGroup');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'core',
						  'id.adminGroup', $this->_siteAdminGroupId);
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::tearDown();
    }

    /**
     * Create user, delete user
     */
    function testCreateUser() {
	global $gallery;

	/* Create a new user */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	/* Verify it */
	$ret = $this->_verifyEntity($user);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Create group, create user, add user to group, assign
     * permission to user, add item to user, delete user. check if permission
     * and group maps are gone, check if item still exists with correct owner, delete group
     */
    function testDeleteUser() {
	global $gallery;

	/* Create a new group */
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($group);
	$groupId = $group->getId();

	/* Create a new user */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$userId = $user->getId();

	/* Put the user into the group */
	$ret = GalleryCoreApi::addUserToGroup($userId, $groupId);
	if ($ret->isError()) {
	    $this->_markForCleanup($user);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Verify */
	list ($ret, $inGroup) = GalleryCoreApi::isUserInGroup($userId, $groupId);
	if ($ret->isError()) {
	    $this->_markForCleanup($user);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($inGroup, 'failed to add the user to a group');

	/* Add a permission to the user */
	$ret = GalleryCoreApi::addUserPermission($this->_getRootId(), $userId,
						'core.addDataItem', false);
	if ($ret->isError()) {
	    GalleryUserGroupMap::removeMapEntry(array('userId' => $userId));
	    $this->_markForCleanup($user);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Verify the user has the permission  */
	list($ret, $hasPermission) =
	    GalleryCoreApi::hasItemPermission($this->_getRootId(), 'core.addDataItem');
	if ($ret->isError()) {
	    GalleryUserGroupMap::removeMapEntry(array('userId' => $userId));
	    $this->_markForCleanup($user);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($hasPermission, 'failed to add a permission to the user');

	$this->_activeUserBackup = $gallery->getActiveUser();
	$gallery->setActiveUser($user);

	/* Add an item to the user, this item should be remapped to a new owner automatically */
	list ($ret, $item) = $this->_createRandomDataItem($this->_getRootId());
	if ($ret->isError()) {
	    GalleryUserGroupMap::removeMapEntry(array('userId' => $user->getId));
	    GalleryAccessMap::removeMapEntry(array('userId' => $user->getId));
	    $this->_markForCleanup($user);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($item);

	/* Restore the activeUser, should be a Site Admin */
	$gallery->setActiveUser($this->_activeUserBackup);

	/* Delete the user */
	$ret = GalleryCoreApi::deleteEntityById($userId);
	if ($ret->isError()) {
	    $this->assert(false, 'The user could not be deleted.');
	    GalleryUserGroupMap::removeMapEntry(array('userId' => $userId));
	    GalleryAccessMap::removeMapEntry(array('userId' => $userId));
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	GalleryDataCache::reset();

	/* Verify the user is gone */
	$ret = $this->_verifyMissing($userId);
	if ($ret->isError()) {
	    $this->assert(false, 'The user was not actually deleted');
	}

	/* Verify the item still exists and new owner is a site admin */
	list ($ret, $item) = $item->refresh();
	if ($ret->isError()) {
	    if ($ret->isError() && $ret->getErrorCode() & ERROR_MISSING_OBJECT) {
		$this->assert(false, 'An item was deleted that still should exist.');
	    } else {
		GalleryUserGroupMap::removeMapEntry(array('userId' => $userId));
		GalleryAccessMap::removeMapEntry(array('userId' => $userId));
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	/* Verify the new owner of the item */
	list($ret, $groupIds) = GalleryCoreApi::fetchGroupsForUser($item->getOwnerId());
	if ($ret->isError()) {
	    GalleryUserGroupMap::removeMapEntry(array('userId' => $userId));
	    GalleryAccessMap::removeMapEntry(array('userId' => $userId));
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($groupIds[$this->_siteAdminGroupId]),
		      'The new ownerId of the item is wrong.');

	/* Verify there are no mappings left */
	list($ret, $groupIds) = GalleryCoreApi::fetchGroupsForUser($userId);
	if ($ret->isError()) {
	    GalleryUserGroupMap::removeMapEntry(array('userId' => $userId));
	    GalleryAccessMap::removeMapEntry(array('userId' => $userId));
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(0, count($groupIds), 'There are still some group maps.');
	/* Make sure there are no mappings left (garbage) */
	GalleryUserGroupMap::removeMapEntry(array('userId' => $userId));
	/* Verify all permission maps for this user are gone */
	/*
	 * FIXME: We don't want to use SQL/search in unit tests, but there's no function
	 * for this for now. i.e. fetchPermissionsForItems() doesn't work if the user
	 * is not the member of at least one group.
	 */
	$checkItemIds = array($item->getId(), $this->_getRootId());
	$itemIdMarkers = GalleryUtilities::makeMarkers(sizeof($checkItemIds));
	$query = '
	SELECT
	  [GalleryAccessSubscriberMap::itemId]
	FROM
	  [GalleryAccessMap],[GalleryAccessSubscriberMap]
	WHERE
	  [GalleryAccessSubscriberMap::itemId] IN (' . $itemIdMarkers . ')
	  AND
	  [GalleryAccessSubscriberMap::accessListId] = [GalleryAccessMap::accessListId]
	  AND
	  [GalleryAccessMap::userId] = ?
	';
	$data = $checkItemIds;
	$data[] = $userId;
	list($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    GalleryAccessMap::removeMapEntry(array('userId' => $userId));
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($searchResults->resultCount() == 0,
		      'Not all permissions of the deleted user were removed');
	GalleryAccessMap::removeMapEntry(array('userId' => $userId));
	/* Make sure there are no mappings left (garbage) */
    }

    /**
     * Verify we can't delete the active user.
     */
    function testDeleteSelf() {
	global $gallery;

	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user);
	$gallery->setActiveUser($user);

	$ret = GalleryCoreApi::deleteEntityById($user->getId());
	$this->assertEquals(ERROR_BAD_PARAMETER | GALLERY_ERROR, $ret->getErrorCode());
    }

    /**
     * Verify we can't delete the last site admin.
     */
    function testDeleteLastAdmin() {
	/* Create a new user in a new group, and make that the Site Admins group */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user);
	$userId = $user->getId();
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($group);
	$groupId = $group->getId();

	$ret = GalleryCoreApi::addUserToGroup($userId, $groupId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'id.adminGroup', $groupId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Attempt to delete user */
	$ret = GalleryCoreApi::deleteEntityById($userId);
	$this->assertEquals(ERROR_BAD_PARAMETER | GALLERY_ERROR, $ret->getErrorCode());
    }

    /**
     * Verify item owners are remapped ok if we delete a site admin.
     */
    function testDeleteAdmin() {
	/* Create 2 new users in a new group, and make that the Site Admins group */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$userId = $user->getId();
	list ($ret, $otherUser) = $this->_createRandomUser();
	if ($ret->isError()) {
	    $this->_markForCleanup($user);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($otherUser);
	$otherUserId = $otherUser->getId();
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    $this->_markForCleanup($user);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($group);
	$groupId = $group->getId();
	$ret = GalleryCoreApi::addUserToGroup($userId, $groupId);
	if ($ret->isError()) {
	    $this->_markForCleanup($user);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addUserToGroup($otherUserId, $groupId);
	if ($ret->isError()) {
	    $this->_markForCleanup($user);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'id.adminGroup', $groupId);
	if ($ret->isError()) {
	    $this->_markForCleanup($user);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create an album and item owned by this admin */
	list ($ret, $album) = $this->_createRandomAlbum($this->_getRootId(),
							array('ownerId' => $userId));
	if ($ret->isError()) {
	    $this->_markForCleanup($user);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($album);
	list ($ret, $item) = $this->_createRandomDataItem($album->getId(), 'test/file',
							  array('ownerId' => $userId));
	if ($ret->isError()) {
	    $this->_markForCleanup($user);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete this admin */
	$ret = GalleryCoreApi::deleteEntityById($userId);
	if ($ret->isError()) {
	    $this->assert(false, 'The user could not be deleted.');
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	GalleryDataCache::reset();
	$ret = $this->_verifyMissing($userId);
	if ($ret->isError()) {
	    $this->assert(false, 'The user was not actually deleted');
	}

	/* Verify owner was remapped to our other admin */
	list ($ret, $album) = $album->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($otherUserId, $album->getOwnerId(), 'album owner');
	list ($ret, $item) = $item->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($otherUserId, $item->getOwnerId(), 'item owner');
    }

    /**
     * Create user, modify user, delete user
     */
    function testCreateAndModifyUser() {
	global $gallery;

	/* Create a new user */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Lock and refresh it */
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $user) = $user->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Modify it */
	$user->setFullName('newname-' . rand());

	/* Save it */
	$ret = $user->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Unlock it */
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify it */
	$ret = $this->_verifyEntity($user);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Create user, fetch user names, make sure it's in there, delete user
     */
    function testFetchUserNames() {
	global $gallery;

	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	list ($ret, $names) = GalleryCoreApi::fetchUserNames();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(in_array($user->getUserName(), $names));

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
      * Create user1, add some items, some with delete permission,
      * create another user2, add an item of user2 in user1's item tree
      * delete user1, check if the right items were deleted, clean up
      */
     function testDeleteUserItems() {
	global $gallery;

	/*
	 * An array for all items that should be gone and an
	 * array for all items that should not be gone after the test
	 */
	$deletedItems = array();
	$remainingItems = array();
	/*
	 * These items get delete permission.
	 * Delete permission is assigned AFTER creating all items, just before
	 * user1 is deleted.
	 */
	$deletePermissionItems = array();

	/* Create test user 1, the owner of most items in the new item tree. */
	list ($ret, $user1) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user1);
	/* Create test user 2, the owner of a few subitems in the new item tree */
	list ($ret, $user2) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user2);

	/* Add a test container album. All test items/albums will be in this container. */
	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_album);
	$remainingItems[] = $this->_album;

	/* Give User1 enough permission such that he can add items. */
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_album->getId(), $user1->getId(),
	    array('core.addDataItem','core.addAlbumItem'), false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Change the active user to our test user1. */
	$this->_activeUserBackup = $gallery->getActiveUser();
	$gallery->setActiveUser($user1);

	/* Add a test album with user1 */
	list ($ret, $albumWithDeletePermission) = $this->_createRandomAlbum($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$remainingItems[] = $albumWithDeletePermission;
	$deletePermissionItems[] = $albumWithDeletePermission;

	/*
	 * Add a test subalbum with user1 as the owner and delete permissions (assigned later)
	 * subAlbumWithDeletePermission				| with delete permission -> deleted
	 *	|- subSubItemWithDeletePermission		| with delete permission -> deleted
	 *	|- subSubAlbumWithDeletePermission		| with delete permission -> deleted
	 *		|- subSubSubItemWithDeletePermission	| with delete permission -> deleted
	 * subItemWithDeletePermission				| with delete permission -> deleted
	 */
	list ($ret, $subAlbumWithDeletePermission) =
	    $this->_createRandomAlbum($albumWithDeletePermission->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$deletedItems[] = $subAlbumWithDeletePermission;
	$deletePermissionItems[] = $subAlbumWithDeletePermission;
	/* Add item to album and subalbum */
	list ($ret, $subItemWithDeletePermission) =
	    $this->_createRandomDataItem($albumWithDeletePermission->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$deletedItems[] = $subItemWithDeletePermission;
	$deletePermissionItems[] = $subItemWithDeletePermission;
	list ($ret, $subSubItemWithDeletePermission) =
	    $this->_createRandomDataItem($subAlbumWithDeletePermission->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$deletedItems[] = $subSubItemWithDeletePermission;
	$deletePermissionItems[] = $subSubItemWithDeletePermission;
	list ($ret, $subSubAlbumWithDeletePermission) =
	    $this->_createRandomAlbum($subAlbumWithDeletePermission->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$deletedItems[] = $subSubAlbumWithDeletePermission;
	$deletePermissionItems[] = $subSubAlbumWithDeletePermission;
	list ($ret, $subSubSubItemWithDeletePermission) =
	    $this->_createRandomDataItem($subSubAlbumWithDeletePermission->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$deletedItems[] = $subSubSubItemWithDeletePermission;
	$deletePermissionItems[] = $subSubSubItemWithDeletePermission;


	/*
	 * Now add another subalbum tree, this time with some items without delete permission
	 * subAlbumWithDeletePermission2			| with delete permission
	 *    |- subSubAlbumWithoutDeletePermission2		| no delete permission
	 *		|- subSubSubItemWithDeletePermission2	| with delete permission -> deleted
	 *	  |- subSubAlbumWithDeletePermission2		| with delete permission
	 *		|- subSubSubItemWithoutDeletePermission2| no delete permission
	 */
	list ($ret, $subAlbumWithDeletePermission2) =
	    $this->_createRandomAlbum($albumWithDeletePermission->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$remainingItems[] = $subAlbumWithDeletePermission2;
	$deletePermissionItems[] = $subAlbumWithDeletePermission2;
	/* A subSub album without delete permission */
	list ($ret, $subSubAlbumWithoutDeletePermission2) =
	    $this->_createRandomAlbum($subAlbumWithDeletePermission2->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$remainingItems[] = $subSubAlbumWithoutDeletePermission2;

	/* A subSub album with delete permission */
	list ($ret, $subSubAlbumWithDeletePermission2) =
	    $this->_createRandomAlbum($subAlbumWithDeletePermission2->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$remainingItems[] = $subSubAlbumWithDeletePermission2;
	$deletePermissionItems[] = $subSubAlbumWithDeletePermission2;
	/* A subSubSubItem with delete permission (but is in a subSubalbum without delete permission) */
	list ($ret, $subSubSubItemWithDeletePermission2) =
	    $this->_createRandomDataItem($subSubAlbumWithoutDeletePermission2->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$deletedItems[] = $subSubSubItemWithDeletePermission2;
	$deletePermissionItems[] = $subSubSubItemWithDeletePermission2;
	/* A subSubItem without delete permission */
	list ($ret, $subSubSubItemWithoutDeletePermission2) =
	    $this->_createRandomDataItem($subSubAlbumWithDeletePermission2->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$remainingItems[] = $subSubSubItemWithoutDeletePermission2;

	/*
	 * Add another subalbum tree, with some items of another user (user2) in it
	 * Also check for a new thumbnail here
	 * subAlbumWithDeletePermission3			  | with delete permission
	 *	|- subSubItemWithDeletePermission		  | with delete permission -> deleted
	 *	|- subSubItemWithDeletePermissionDifferentOwner3  | with delete permission
	 */
	list ($ret, $subAlbumWithDeletePermission3) =
	    $this->_createRandomAlbum($albumWithDeletePermission->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$remainingItems[] = $subAlbumWithDeletePermission3;
	$deletePermissionItems[] = $subAlbumWithDeletePermission3;
	list ($ret, $subSubItemWithDeletePermission3) =
	    $this->_createRandomDataItem($subAlbumWithDeletePermission3->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$deletedItems[] = $subSubItemWithDeletePermission3;
	$deletePermissionItems[] = $subSubItemWithDeletePermission3;

	/* Now change the activeUser to the other user (from user1 to user2) */
	$gallery->setActiveUser($user2);

	/* Add an item with user2 in user1's item tree */
	list ($ret, $subSubItemWithDeletePermissionDifferentOwner3) =
	    $this->_createRandomDataItem($subAlbumWithDeletePermission3->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$remainingItems[] = $subSubItemWithDeletePermissionDifferentOwner3;
	$deletePermissionItems[] = $subSubItemWithDeletePermissionDifferentOwner3;

	/* Restore the activeUser, should be a Site Admin(the user who runs the test) */
	$gallery->setActiveUser($this->_activeUserBackup);

	/* Add delete permissions to all items/albums that should have delete permission for user1 */
	foreach ($deletePermissionItems as $item) {
	    $ret = GalleryCoreApi::addUserPermission(
		$item->getId(), $user1->getId(), array('core.delete'), false);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/*
	 * Verify the owner id of the items, all test items/albums but the single subitem of user2
	 * should be owned by user1.
	 */
	$allItems = $deletedItems;
	array_splice($allItems, count($allItems), 0, $remainingItems);
	foreach ($allItems as $item) {
	    if ($item->getId() != $this->_album->getId() &&
		    $item->getId() != $subSubItemWithDeletePermissionDifferentOwner3->getId()) {
		$this->assert($item->getOwnerId() == $user1->getId(), 'owner Id is wrong');
	    }
	    /* Verify the site admin has the needed permissions */
	    $ret = GalleryCoreApi::assertHasItemPermission($item->getId(), 'core.viewResizes');
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* Execute the "delete user1" call */
	$ret = GalleryCoreApi::deleteUserItems($user1->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	GalleryDataCache::reset();

	/* Verify the correct items were deleted */
	foreach ($deletedItems as $item) {
	    $ret = $this->_verifyMissing($item->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/*
	 * Verify the correct items still exist. (sub)albums with delete permission for user1,
	 * that are not empty, i.e. that contain items without delete permission for user1 or
	 * that have another owner, should still exist after a "delete user1" call.
	 */
	foreach ($remainingItems as $item) {
	    $id = $item->getId();
	    list ($ret, $item) = $item->refresh();
	    if ($ret->isError()) {
		if ($ret->isError() && $ret->getErrorCode() & ERROR_MISSING_OBJECT) {
		    $this->assert(false, "Wrongly deleted item ($id)");
		}
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    /* Verify the owner is still user1 */
	    if ($item->getId() != $this->_album->getId()
		    && $item->getId() != $subSubItemWithDeletePermissionDifferentOwner3->getId()) {
		$this->assert($item->getOwnerId() == $user1->getId(),
			      'The ownerId for an item was changed');
	    }
	}
    }

    /**
     * Count users, Create user, count users again, delete user
     */
    function testFetchUserCount() {
	global $gallery;

	list ($ret, $countBefore) = GalleryCoreApi::fetchUserCount();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	list ($ret, $countAfter) = GalleryCoreApi::fetchUserCount();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($countBefore+1, $countAfter);

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Verify that we can fetch all users with a given substring in their username
     */
    function testFetchUserCountBySubstring() {
	global $gallery;

	$unique = rand(0, 65535);
	list ($ret, $count) = GalleryCoreApi::fetchUserCount($unique, null);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Nobody matches our unique tag */
	$this->assertEquals(0, $count);

	list ($ret, $user) = $this->_createRandomUser($unique);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	list ($ret, $count) = GalleryCoreApi::fetchUserCount($unique, null);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* We now have one user that matches the description */
	$this->assertEquals(1, $count);

	/* Clean up */
	$ret = $this->_deleteAndVerifyEntity($user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /*
     * Verify that we can fetch a count of the users from any particular group
     */
    function testFetchUserCountByGroupId() {
	global $gallery;

	/* Create a user */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create a group */
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* fetchUserCount should return 0 */
	list ($ret, $countBefore) = GalleryCoreApi::fetchUserCount(null, $group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(0, $countBefore);

	/* Put the user into the group */
	$ret = GalleryCoreApi::addUserToGroup($user->getId(), $group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* fetchUserCount should return 1 */
	list ($ret, $countAfter) = GalleryCoreApi::fetchUserCount(null, $group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, $countAfter);

	/* Delete user */
	$ret = $this->_deleteAndVerifyEntity($user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete group */
	$ret = $this->_deleteAndVerifyEntity($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Verify that we can fetch all users from a group with a given substring in their username
     */
    function testFetchUserCountBySubstringAndGroupId() {
	global $gallery;

	$strSearch = 'rand';
	$uniqueFirst = rand(0, 65535);
	$uniqueSecond = rand(0, 65535);

	/* Create a group */
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* fetchUserCount should return 0 */
	list ($ret, $countBefore) = GalleryCoreApi::fetchUserCount($strSearch, $group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(0, $countBefore);

	/* Create the first user */
	list ($ret, $userFirst) = $this->_createRandomUser($strSearch . $uniqueFirst);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create the second user */
	list ($ret, $userSecond) = $this->_createRandomUser($strSearch . $uniqueSecond);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Put the first user into the group */
	$ret = GalleryCoreApi::addUserToGroup($userFirst->getId(), $group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Put the second user into the group */
	$ret = GalleryCoreApi::addUserToGroup($userSecond->getId(), $group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* fetchUserCount should return 1 */
	list ($ret, $countAfter) = GalleryCoreApi::fetchUserCount($strSearch . $uniqueFirst,
								  $group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, $countAfter);

	/* Delete first user */
	$ret = $this->_deleteAndVerifyEntity($userFirst->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete second user */
	$ret = $this->_deleteAndVerifyEntity($userSecond->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete group */
	$ret = $this->_deleteAndVerifyEntity($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Verify that we can fetch all users from a group with a given substring in their username
     */
    function testFetchUsersFromGroupBySubstringAndGroupId() {
	global $gallery;

	$strSearch = 'rand';
	$uniqueFirst = rand(0, 65535);
	$uniqueSecond = rand(0, 65535);

	/* Create a group */
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* fetchUserCount should return 0 */
	list ($ret, $countBefore) = GalleryCoreApi::fetchUserCount($strSearch, $group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(0, $countBefore);

	/* Create the first user */
	list ($ret, $userFirst) = $this->_createRandomUser($strSearch . $uniqueFirst);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create the second user */
	list ($ret, $userSecond) = $this->_createRandomUser($strSearch . $uniqueSecond);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Put the first user into the group */
	$ret = GalleryCoreApi::addUserToGroup($userFirst->getId(), $group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Put the second user into the group */
	$ret = GalleryCoreApi::addUserToGroup($userSecond->getId(), $group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* fetchUsersForGroup should return one user */
	list ($ret, $users) = GalleryCoreApi::fetchUsersForGroup(
					$group->getId(),
					null,
					null,
					$strSearch . $uniqueFirst
			      );
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, count($users));

	/* Delete first user */
	$ret = $this->_deleteAndVerifyEntity($userFirst->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete second user */
	$ret = $this->_deleteAndVerifyEntity($userSecond->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete group */
	$ret = $this->_deleteAndVerifyEntity($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Create user, fetch it by name, delete user
     */
    function testFetchUserByName() {
	global $gallery;

	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	list ($ret, $newUser) = GalleryCoreApi::fetchUserByUserName($user->getUserName());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($user, $newUser);

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Create group, delete group
     */
    function testCreateGroup() {
	global $gallery;

	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	/* Verify it */
	$ret = $this->_verifyEntity($group);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Create duplicate group
     */
    function testCreateDuplicateGroup() {
	global $gallery;

	$groupTag = rand();

	list ($ret, $group) = $this->_createRandomGroup($groupTag);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	/* Verify it */
	$ret = $this->_verifyEntity($group);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	/* Create it again */
	list ($ret, $duplicateGroup) = $this->_createRandomGroup($groupTag);
	$this->assert($ret->getErrorCode() & ERROR_COLLISION, 'There should have been a collision');
	$this->assert(!isset($duplicateGroup));

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Create duplicate user
     */
    function testCreateDuplicateUser() {
	global $gallery;

	$userTag = rand();

	list ($ret, $user) = $this->_createRandomUser($userTag);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	/* Verify it */
	$ret = $this->_verifyEntity($user);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	/* Create it again */
	list ($ret, $duplicateUser) = $this->_createRandomUser($userTag);
	$this->assert($ret->getErrorCode() & ERROR_COLLISION, 'There should have been a collision');
	$this->assert(!isset($duplicateUser));

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Create group, modify group, delete group
     */
    function testCreateAndModifyGroup() {
	global $gallery;

	/* Create a new group */
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Lock and refresh it */
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $group) = $group->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Modify it */
	$group->setGroupName('newname-' . rand());

	/* Save it */
	$ret = $group->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Unlock it */
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify it */
	$ret = $this->_verifyEntity($group);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Create user, create group, add user to group, remove user from group,
     * delete user, delete group
     */
    function testAddAndRemoveUserFromGroup() {
	global $gallery;

	/* Create a user */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create a group */
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Put the user into the group */
	$ret = GalleryCoreApi::addUserToGroup($user->getId(), $group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify */
	list ($ret, $inGroup) = GalleryCoreApi::isUserInGroup($user->getId(), $group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($inGroup);

	/* Remove user from group */
	$ret = GalleryCoreApi::removeUserFromGroup($user->getId(), $group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify */
	list ($ret, $inGroup) = GalleryCoreApi::isUserInGroup($user->getId(), $group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!$inGroup);

	/* Delete user */
	$ret = $this->_deleteAndVerifyEntity($user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete group */
	$ret = $this->_deleteAndVerifyEntity($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Create group, fetch group names, make sure it's in there, delete group
     */
    function testFetchGroupNames() {
	global $gallery;

	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	list ($ret, $names) = GalleryCoreApi::fetchGroupNames();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(in_array($group->getGroupName(), $names));

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Count groups, Create group, count groups again, delete group
     */
    function testFetchGroupCount() {
	global $gallery;

	list ($ret, $countBefore) = GalleryCoreApi::fetchGroupCount();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	list ($ret, $countAfter) = GalleryCoreApi::fetchGroupCount();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($countBefore+1, $countAfter);

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Create group, fetch it by name, delete group
     */
    function testFetchGroupByName() {
	global $gallery;

	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	list ($ret, $newGroup) = GalleryCoreApi::fetchGroupByGroupName($group->getGroupName());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($group, $newGroup);

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testAssertSiteAdministrator() {
	$ret = GalleryCoreApi::assertUserIsSiteAdministrator();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testAssertHasItemPermission() {
	global $gallery;

	$ret = GalleryCoreApi::assertHasItemPermission($this->_getRootId(), 'core.view');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testHasItemPermission() {
	global $gallery;

	list ($ret, $hasPermission) =
	    GalleryCoreApi::hasItemPermission($this->_getRootId(), 'core.view');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testAddDuplicateUserToGroup() {
	global $gallery;

	/* Create a new group */
	list ($ret, $group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($group);
	$groupId = $group->getId();

	/* Create a new user */
	/* If the unit test aborts to some reason, this user will still be in the db */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user);
	$userId = $user->getId();

	/* Put the user into the group */
	$ret = GalleryCoreApi::addUserToGroup($userId, $groupId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Verify */
	list ($ret, $count) = GalleryCoreApi::fetchUserCount(null, $groupId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, $count, 'first');

	GalleryDataCache::reset();

	/* Put the same user into the group again */
	$ret = GalleryCoreApi::addUserToGroup($userId, $groupId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Verify */
	list ($ret, $count) = GalleryCoreApi::fetchUserCount(null, $groupId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, $count, 'second');
    }
}

?>
