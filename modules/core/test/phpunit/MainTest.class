<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test main.php
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision$ $Date$
 */
class MainTest extends GalleryTestCase {

    function MainTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;

	parent::setUp();

	$this->_saveGallery = $gallery;

	/*
	 * Copies of the Gallery object still have all the same reference to the one and only
	 * session object.  Thus we need to backup the session too.
	 */
	$this->_saveSession = $gallery->_session;

	/*
	 * Previously we defined G2_EMBED here to prevent main.php from displaying any content when
	 * it was included.  This caused problems with some tests that varied their behavior based
	 * on G2_EMBED.  Now we capture the output and send it to /dev/null via output buffering.
	 * G2_EMBED is not required for testEmbedOnly().
	 */
	ob_start();
	require_once(dirname(__FILE__) . '/../../../../main.php');
	ob_end_clean();

	GalleryUtilities::putRequestVariable('view', 'core.FooView');
	$_SERVER['REQUEST_URI'] = '/gallery2/phpunit_test.php';
	$_SERVER['HTTP_HOST'] = 'example.com';
	$_SERVER['SERVER_PORT'] = 80;
	$this->_urlGenerator = new GalleryUrlGenerator();
	$ret = $this->_urlGenerator->init('phpunit_test.php');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	$gallery->setUrlGenerator($this->_urlGenerator);
	$gallery->_session = new GallerySession();

	$_REQUEST['phpVmHeaders'] = array();
    }

    function tearDown() {
	global $gallery;

	$gallery = $this->_saveGallery;
	$gallery->_session = $this->_saveSession;

	list ($ret, $languageCode) = $gallery->getActiveLanguageCode();
	if ($ret) {
	    $this->failWithStatus($ret);
	} else {
	    /* Init a new translator so that we reset our locale */
	    $translator = new GalleryTranslator();
	    $translator->init($languageCode);
	}

	parent::tearDown();
    }

    function testEmbedOnly() {
	/* Test embed-only mode with simple permission denied error */
	global $gallery;
	$gallery->setConfig('mode.embed.only', true);

	list ($ret, $g2Data) = _GalleryMain(false);
	$this->assertEquals(GALLERY_ERROR | ERROR_PERMISSION_DENIED, $ret->getErrorCode());
    }

    function testEmbedOnlyUrl() {
	/* Test embed-only mode with configured redirect URL */
	global $gallery;

	/* Use the PHP VM to record the headers */
	$gallery->_phpVm = new MainTestPhpVm();

	$gallery->setConfig('mode.embed.only', $expectedUrl = '/embedApp/index.php');

	list ($ret, $g2Data) = _GalleryMain(false);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	/* Verify the result */
	$this->assertEquals("Location: $expectedUrl", $_REQUEST['phpVmHeaders']['location'],
	    'Wrong redirect URL');
    }

    function testMaintenanceMode() {
	/* Test maintenance mode controller redirect with standard redirect URL */
	global $gallery;

	/* Use the PHP VM to record the headers */
	$gallery->_phpVm = new MainTestPhpVm();

	$gallery->_session->_sessionId = 'fakeSID';
	$gallery->setConfig('mode.maintenance', true);
	GalleryUtilities::putRequestVariable('controller', 'core.FooController');

	list ($ret, $g2Data) = _GalleryMain(false);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	/* Verify the result */
	$urlGenerator =& $gallery->getUrlGenerator();
	$expectedUrl = $urlGenerator->generateUrl(array('view' => 'core.MaintenanceMode'),
	    array('htmlEntities' => false, 'forceFullUrl' => true));
	$this->assertEquals("Location: $expectedUrl", $_REQUEST['phpVmHeaders']['location'],
	    'Wrong redirect URL');
    }

    function testMaintenanceModeUrl() {
	/* Test maintenance mode view redirect with configured redirect URL */
	global $gallery;

	/* Use the PHP VM to record the headers */
	$gallery->_phpVm = new MainTestPhpVm();

	$gallery->setConfig('mode.maintenance', $expectedUrl = '/maintenance.html');

	list ($ret, $g2Data) = _GalleryMain(false);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	/* Verify the result */
	$this->assertEquals("Location: $expectedUrl", $_REQUEST['phpVmHeaders']['location'],
	    'Wrong redirect URL');
    }

    /* Test that we only append the GALLERYSID to Location URLs if really needed */
    function testDoRedirectIisBugFix() {
	global $gallery;

	/* Prepare test cases */

	/* IIS servers with a version < 6 are affected */
	$buggyWebServers = array('Microsoft-IIS/3.0', 'Microsoft-IIS/4.0', 'Microsoft-IIS/5.0',
				 'Microsoft-IIS/3.5', 'Microsoft-IIS/5.1', ' Microsoft-IIS/5.2 ');
	/* All other webservers should be ignored */
	$goodWebServers = array('', 'Apache/2.0.52 (Gentoo/Linux) PHP/4.4.0', 'Apache/1.3.33',
				'Apache/2.0.52 No Microsoft-IIS/5.0', null, 'Zeus' );

	/* Controllers that shouldn't trigger the fix, just a few samples */
	$okControllers = array('core.ItemAdd', 'migrate.Redirect', null, 'core.ItemMove');
	/* Controllers that should trigger the fix */
	$needFixControllers = array('core.Logout', 'core.UserLogin', 'publishxp.Login');

	$base = 'http://www.example.com/';
	$session =& $gallery->getSession();
	$ret = $session->init();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$ret = $session->start();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$sessionId = $session->getId();
	$sessionKey = $session->getKey();
	$this->assert(!empty($sessionId) && !empty($sessionKey),
		      'Initial session assertion failed');
	$sessionParamString =
	    GalleryUtilities::prefixFormVariable(urlencode($session->getKey())) . '=' .
	    urlencode($session->getId());
	/* URLs that shouldn't be changed (because they already have the session param) */
	$okUrls = array("main.php?$sessionParamString", 'main.php?g2_view=core.ShowItem&amp;' .
			$sessionParamString . '&amp;g2_navId=x7865x', "?$sessionParamString");
	/* URL that should be changed if the fix is applied */
	$needFixUrls = array('main.php', 'main.php?g2_view=core.ShowItem&amp;g2_navId=x7865x',
			     '?g2_controller=core.ItemEdit&amp;g2_itemId=13&amp;g2_returnUrl=' .
			     urlencode("$base?$sessionParamString"));

	/* Run a quite exhaustive series of tests */
	foreach (array_merge($goodWebServers, $buggyWebServers) as $server) {
	    $_SERVER['SERVER_SOFTWARE'] = $server;
	    foreach (array_merge($okControllers, $needFixControllers) as $controller) {
		foreach (array_merge($okUrls, $needFixUrls) as $url) {
		    /* Use the PHP VM to record the headers */
		    $gallery->_phpVm = new MainTestPhpVm();

		    /* Execute the function under test */
		    $this->assertEquals(array('isDone' => true),
					_GalleryMain_doRedirect($base . $url, null, $controller),
					"Unexpected return value for $server, $url, $controller");

		    /* Assemble expected result */
		    $expectedUrl = str_replace('&amp;', '&', $base . $url);

		    /* Check if this case needs the bugfix */
		    if (in_array($server, $buggyWebServers)
			    && in_array($controller, $needFixControllers)
			    && in_array($url, $needFixUrls)) {
			$expectedUrl .= strpos($expectedUrl, '?') ? '&' : '?';
			$expectedUrl .= $sessionParamString;
		    }

		    /* Verify the result */
		    $this->assertEquals("Location: $expectedUrl",
			$_REQUEST['phpVmHeaders']['location'],
			"Wrong header: $server, $url, $controller");
		}
	    }
	}
    }

    function testDoRedirectRemoveTrailingQMark() {
	global $gallery;

	$backup = $gallery->_session;
	/* Make sure the redirect has no sessionId in it */
	GalleryUtilities::removeRequestVariable(SESSION_ID_PARAMETER);
	unset($_COOKIE[SESSION_ID_PARAMETER]);
	unset($_SERVER['HTTP_COOKIE']);
	$session = new GallerySession();
	$ret = $session->init();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals(false, $session->isUsingCookies(), 'isUsingCookies');
	$this->assertEquals(SESSION_TEMP_ID, $session->getId(), 'SESSION_TEMP_ID');

	/* Use the PHP VM to record the headers */
	$gallery->_phpVm = new MainTestPhpVm();

	/* Execute the function under test */
	$this->assertEquals(array('isDone' => true),
			    _GalleryMain_doRedirect('http://example.com/main.php?&amp; '),
			    'Unexpected return value');

	/* Verify the result */
	$this->assertEquals('Location: http://example.com/main.php',
	    $_REQUEST['phpVmHeaders']['location'], 'Wrong header');
    }
}

class MainTestPhpVm extends GalleryPhpVm {
    function header($header, $replace=null) {
	$key = 'status';
	if (strncasecmp($header, 'HTTP/', 5)) {
	    $key = strtolower(substr($header, 0, strpos($header, ':')));
	}

	$_REQUEST['phpVmHeaders'][$key] = $header;
    }
}

GalleryCoreApi::requireOnce('modules/core/classes/GalleryView.class');
class FooViewView extends GalleryView {
}

GalleryCoreApi::requireOnce('modules/core/classes/GalleryController.class');
class FooControllerController extends GalleryController {
}
?>
