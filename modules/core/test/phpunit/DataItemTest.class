<?php
/*
 * $RCSfile: DataItemTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.7 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test FileSystem functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class DataItemTest extends GalleryTestCase {

    function DataItemTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_album);
    }

    /**
     * Verify that creating a second dataitem entity with the same path as
     * an existing one throws a collision error.
     */
    function testCreateCollision() {
	global $gallery;

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $basePath) = $this->_album->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$platform = $gallery->getPlatform();

	for ($i = 0; $i < 3; $i++) {
	    $entity[$i] = new GalleryDataItem();
	    $ret = $entity[$i]->create($this->_album->getId(),
				       __FILE__,
				       'text/plain',
				       'valid_path.txt');
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $ret = $entity[$i]->save();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    if ($i > 0) {
		$expectedPathComponent = sprintf('valid_path_%03d.txt', $i);
		$this->assertEquals($expectedPathComponent, $entity[$i]->getPathComponent(),
				    'path component mismatch');

		list ($ret, $entityPath) = $entity[$i]->fetchPath();
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}

		$this->assertEquals($basePath . $expectedPathComponent, $entityPath,
				    'full path mismatch');

		$this->assert($platform->file_exists($entityPath), "$entityPath does not exist");
		$this->assert($platform->is_file($entityPath), "$entityPath is not a directory");
	    }
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testMoveCollision() {
	global $gallery;

	list ($ret, $subAlbum) = $this->_createRandomAlbum($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $lockIds[]) =
	    GalleryCoreApi::acquireReadLock(array($this->_album->getId(), $subAlbum->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$orig = new GalleryDataItem();
	$ret = $orig->create($this->_album->getId(), __FILE__, 'text/plain', 'valid_path.txt');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $orig->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$new = new GalleryDataItem();
	$ret = $new->create($subAlbum->getId(), __FILE__, 'text/plain', 'valid_path.txt');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $new->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $lockIds[]) = GalleryCoreApi::acquireWriteLock(array($new->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $new->move($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $basePath) = $this->_album->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $newPath) = $new->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($basePath . 'valid_path_001.txt', $newPath, 'full path mismatch');

	$platform = $gallery->getPlatform();
	$this->assert($platform->file_exists($newPath), "$newPath does not exist");
	$this->assert($platform->is_file($newPath), "$newPath is not a file");

	$ret = GalleryCoreApi::releaseLocks($lockIds);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }


    /**
     * Create an data item being a symlink to an existing file
     */
    function testCreateSymlink() {
	global $gallery;

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $basePath) = $this->_album->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$platform = $gallery->getPlatform();
	$canSymlink = $platform->isSymlinkSupported();

	$entity = new GalleryDataItem();
	$ret = $entity->create($this->_album->getId(),
				   __FILE__,
				   'text/plain',
				   'valid_path.txt', true);
	if ($ret->isError()) {
	    /* On not supported platforms, this should return an ERROR_UNSUPPORTED_OPERATION */
	    if ($canSymlink || (!$canSymlink && !($ret->getErrorCode() & ERROR_UNSUPPORTED_OPERATION))) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $ret = GalleryCoreApi::releaseLocks($lockId);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    return;
	}

	$ret = $entity->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $entityPath) = $entity->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(is_link($entityPath));

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
}

?>
