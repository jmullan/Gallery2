<?php
/*
 * $RCSfile: LockTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.16 $ $Date: 2006/02/24 02:32:06 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

GalleryCoreApi::requireOnce('modules/core/classes/DatabaseLockSystem.class');
GalleryCoreApi::requireOnce('modules/core/classes/FlockLockSystem.class');

/**
 * Test Lock functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class LockTest extends GalleryTestCase {

    function LockTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	list ($ret, $this->_parentAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_parentAlbum);

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_parentAlbum->getId());
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$storage =& $gallery->getStorage();
	$ret = $storage->checkPoint();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function _tryAllLockSystems($testFunction) {
	global $gallery;
	$testFunction = '_' . $testFunction;

	$gallery->_lockSystem = new DatabaseLockSystem();
	$this->$testFunction('dblock');
	$gallery->_lockSystem->releaseAllLocks();
	$gallery->_lockSystem->releaseQueue();

	$gallery->_lockSystem = new FlockLockSystem();
	$this->$testFunction('flock');
	$gallery->_lockSystem->releaseAllLocks();
	$gallery->_lockSystem->releaseQueue();
    }

    function testOneWriteLock() {
	return $this->_tryAllLockSystems('testOneWriteLock');
    }

    function _testOneWriteLock($lockSystem) {
	$targetId = $this->_item->getId();

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($targetId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(GalleryCoreApi::isWriteLocked($targetId), $lockSystem);

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testManyWriteLocks() {
	return $this->_tryAllLockSystems('testManyWriteLocks');
    }

    function _testManyWriteLocks($lockSystem) {
	global $gallery;

	$ids = array($gallery->getActiveUserId(), $this->_getRootId(), $this->_item->getId());

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($ids);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	foreach ($ids as $id) {
	    $this->assert(GalleryCoreApi::isWriteLocked($id), "$lockSystem: $id");
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testOneReadLock() {
	return $this->_tryAllLockSystems('testOneReadLock');
    }

    function _testOneReadLock($lockSystem) {
	$targetId = $this->_parentAlbum->getId();

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($targetId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(GalleryCoreApi::isReadLocked($targetId), $lockSystem);

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testManyReadLocks() {
	return $this->_tryAllLockSystems('testManyReadLocks');
    }

    function _testManyReadLocks($lockSystem) {
	global $gallery;

	$ids = array($gallery->getActiveUserId(), $this->_getRootId(), $this->_item->getId());

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($ids);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	foreach ($ids as $id) {
	    $this->assert(GalleryCoreApi::isReadLocked($id), "$lockSystem: $id");
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testAcquireReadLockParents() {
	return $this->_tryAllLockSystems('testAcquireReadLockParents');
    }

    function _testAcquireReadLockParents($lockSystem) {
	global $gallery;

	/* Create a hierarchy */
	$parentId = $this->_parentAlbum->getId();
	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $this->_album[$i]) = $this->_createRandomAlbum($parentId);
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $parentId = $this->_album[$i]->getId();
	}

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLockParents($this->_album[2]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify that they're all locked except the item itself */
	$this->assert(!GalleryCoreApi::isReadLocked($this->_album[2]->getId()), "$lockSystem: a2");
	$this->assert(GalleryCoreApi::isReadLocked($this->_album[1]->getId()), "$lockSystem: a1");
	$this->assert(GalleryCoreApi::isReadLocked($this->_album[0]->getId()), "$lockSystem: a0");
	$this->assert(GalleryCoreApi::isReadLocked($this->_parentAlbum->getId()), "$lockSystem: p");
	$this->assert(GalleryCoreApi::isReadLocked($this->_getRootId()), "$lockSystem: r");

	/* Release locks */
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testAcquireReadLockParentsOnRoot() {
	return $this->_tryAllLockSystems('testAcquireReadLockParentsOnRoot');
    }

    function _testAcquireReadLockParentsOnRoot($lockSystem) {
	global $gallery;

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLockParents($this->_getRootId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify that the root is not read locked */
	$this->assert(!GalleryCoreApi::isReadLocked($this->_getRootId()),
		      "$lockSystem: Root should not be locked");

	/* Release locks */
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Test acquiring a write lock on an entity that has already been read locked.
     * We don't currently require this ability, but it could be useful if adding or
     * deleting an item from an album triggered an update to that album.
     * Uncomment this test if this type of locking is ever used..
     * (note that windows has problems doing this with flock based locks, so we may
     *  avoid any functionality that needs this..)
     */
    /*
    function testReadLockToWriteLock() {
	return $this->_tryAllLockSystems('testReadLockToWriteLock');
    }
    */

    function _testReadLockToWriteLock($lockSystem) {
	/* Read lock parents, then attempt to write lock direct parent */
	list ($ret, $lockId) = GalleryCoreApi::acquireReadLockParents($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	foreach (array($this->_getRootId(), $this->_parentAlbum->getId()) as $id) {
	    $this->assert(GalleryCoreApi::isReadLocked($id), "$lockSystem: read lock: $id");
	}

	list ($ret, $writeLockId) = GalleryCoreApi::acquireWriteLock($this->_parentAlbum->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(GalleryCoreApi::isWriteLocked($this->_parentAlbum->getId()),
		      "$lockSystem: write lock");
	$this->assert(GalleryCoreApi::isReadLocked($this->_getRootId()), "$lockSystem: read lock");

	/* Release locks */
	$ret = GalleryCoreApi::releaseLocks(array($lockId, $writeLockId));
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /*
     * Verify that releaseLocks accepts sloppy input (null entries or empty list)
     * so that error handling code can pass in whatever array it has and not worry
     * about cleaning it up to have only valid locks.
     */
    function testReleaseNull() {
	return $this->_tryAllLockSystems('testReleaseNull');
    }

    function _testReleaseNull($lockSystem) {
	$targetId = $this->_item->getId();
	$lockIds = array();

	list ($ret, $lockIds[]) = GalleryCoreApi::acquireWriteLock($targetId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(GalleryCoreApi::isWriteLocked($targetId), $lockSystem);

	$lockIds[] = null;
	$ret = GalleryCoreApi::releaseLocks($lockIds);
	if ($ret) {
	    $this->assert(false, $lockSystem);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!GalleryCoreApi::isWriteLocked($targetId), $lockSystem . ' unlock');
    }

    /* see comment above */
    function testReleaseEmpty() {
	return $this->_tryAllLockSystems('testReleaseEmpty');
    }

    function _testReleaseEmpty($lockSystem) {
	$ret = GalleryCoreApi::releaseLocks(array());
	if ($ret) {
	    $this->assert(false, $lockSystem);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Verify that locks are not being released before commit on transactional databases.
     * http://sourceforge.net/tracker/index.php?func=detail&aid=1345508&group_id=7130&atid=107130
     */
    function testReleaseLocksNotBeforeCommit() {
	global $gallery;
	$storage =& $gallery->getStorage();

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_item->setTitle($this->_item->getTitle() . 'changed');
	$ret = $this->_item->save();
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockId);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Temporarily clear the existing lock information to simulate another request */
	$queuedLocks = $gallery->_lockSystem->_releaseQueue;
	$locks = $gallery->_lockSystem->_locks;
	$gallery->_lockSystem->_releaseQueue = array();
	$gallery->_lockSystem->_locks = array();

	/* This should time out if the previous lock is queued */
	list ($ret, $secondLockId) = GalleryCoreApi::acquireWriteLock($this->_item->getId(), 5);
	if ($ret) {
	    $this->assertEquals($ret->getErrorCode(), GALLERY_ERROR | ERROR_LOCK_TIMEOUT,
		'The lock acquisition should have timed out.');
	    if ($ret->getErrorCode() != (GALLERY_ERROR | ERROR_LOCK_TIMEOUT)) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	} else {
	    /* Lock successfully acquired, this should only happen on nontransactional databases */
	    $this->assert(!$storage->isTransactional(), 'Lock acquired on transactional database.');

	    $ret = GalleryCoreApi::releaseLocks($secondLockId);
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* Restore lock information and force their release. */
	$gallery->_lockSystem->_releaseQueue = $queuedLocks;
	$gallery->_lockSystem->_locks = $locks;
	$ret = $gallery->_lockSystem->releaseQueue();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testRelockRead() {
	/* Read lock, release, relock before committing transaction */
	global $gallery;
	$storage =& $gallery->getStorage();

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(count($gallery->_lockSystem->_releaseQueue) == 1
		      || !$storage->isTransactional(), 'release first lock');

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Release queue unaffected */
	$this->assert(count($gallery->_lockSystem->_releaseQueue) == 1
		      || !$storage->isTransactional(), 'get second lock');

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Release queue unaffected, multiple read locks are ok */
	$this->assert(count($gallery->_lockSystem->_releaseQueue) == 2
		      || !$storage->isTransactional(), 'release second lock');
    }

    function testWriteThenRead() {
	/* Write lock, release, then acquire read lock before committing transaction */
	global $gallery;
	$storage =& $gallery->getStorage();

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(count($gallery->_lockSystem->_releaseQueue) == 1
		      || !$storage->isTransactional(), 'release write lock');

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Had to release that write lock in order to get new read lock */
	$this->assert(empty($gallery->_lockSystem->_releaseQueue), 'release queue should be empty');

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testWriteThenReadPartial() {
	/* Write lock, release, then acquire a read lock for one entity in that write lock */
	global $gallery;
	$storage =& $gallery->getStorage();

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock(array($this->_parentAlbum->getId(),
								      $this->_item->getId()));
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(
		(count($gallery->_lockSystem->_releaseQueue) == 1
		 && count($gallery->_lockSystem->_releaseQueue[$lockId]['ids']) == 2)
		|| !$storage->isTransactional(), 'release write lock');

	list ($ret, $newLockId) = GalleryCoreApi::acquireReadLock($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Removed single entity from pending write lock in order to get new read lock */
	$this->assert(
		(count($gallery->_lockSystem->_releaseQueue) == 1
		 && count($gallery->_lockSystem->_releaseQueue[$lockId]['ids']) == 1)
		|| !$storage->isTransactional(), 'pending write lock should have one entity');

	$ret = GalleryCoreApi::releaseLocks($newLockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testRelockWrite() {
	/* Write lock, release, relock before committing transaction */
	global $gallery;
	$storage =& $gallery->getStorage();

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(count($gallery->_lockSystem->_releaseQueue) == 1
		      || !$storage->isTransactional(), 'release first lock');

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Real lock moved to new lockId which clears out queued lock */
	$this->assert(empty($gallery->_lockSystem->_releaseQueue), 'release queue should be empty');
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testRelockWritePartial() {
	/* Write lock, release, then acquire new write lock for one id in previous lock */
	global $gallery;
	$storage =& $gallery->getStorage();

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock(array($this->_parentAlbum->getId(),
								      $this->_item->getId()));
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(
	    (count($gallery->_lockSystem->_releaseQueue) == 1
	     && count($gallery->_lockSystem->_releaseQueue[$lockId]['ids']) == 2)
	    || !$storage->isTransactional(), 'release first lock');

	list ($ret, $newLockId) = GalleryCoreApi::acquireWriteLock($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* One id moved to new lockId */
	$this->assert(
	    (count($gallery->_lockSystem->_releaseQueue) == 1
	     && count($gallery->_lockSystem->_releaseQueue[$lockId]['ids']) == 1)
	    || !$storage->isTransactional(), 'acquire new lock');

	$ret = GalleryCoreApi::releaseLocks($newLockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
    function testRelockWriteMore() {
	/* Write lock, release, then acquire new write lock with more ids than previous lock */
	global $gallery;
	$storage =& $gallery->getStorage();

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(
	    (count($gallery->_lockSystem->_releaseQueue) == 1
	     && count($gallery->_lockSystem->_releaseQueue[$lockId]['ids']) == 1)
	    || !$storage->isTransactional(), 'release first lock');

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock(array($this->_parentAlbum->getId(),
								      $this->_item->getId()));
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Real lock moved to new lockId which clears out queued lock */
	$this->assert(empty($gallery->_lockSystem->_releaseQueue), 'release queue should be empty');

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testReadThenWrite() {
	/* Read lock, release, then acquire write lock before committing transaction */
	global $gallery;
	$storage =& $gallery->getStorage();

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(count($gallery->_lockSystem->_releaseQueue) == 1
		      || !$storage->isTransactional(), 'release read lock');

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Had to release that read lock in order to get new write lock */
	$this->assert(empty($gallery->_lockSystem->_releaseQueue), 'release queue should be empty');

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testReadThenWritePartial() {
	/* Read lock, release, then acquire a write lock for one entity in that read lock */
	global $gallery;
	$storage =& $gallery->getStorage();

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock(array($this->_item->getId(),
								     $this->_parentAlbum->getId()));
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(
		(count($gallery->_lockSystem->_releaseQueue) == 1
		 && count($gallery->_lockSystem->_releaseQueue[$lockId]['ids']) == 2)
		|| !$storage->isTransactional(), 'release read lock');

	list ($ret, $newLockId) = GalleryCoreApi::acquireWriteLock($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Removed single entity from pending read lock in order to get new write lock */
	$this->assert(
		(count($gallery->_lockSystem->_releaseQueue) == 1
		 && count($gallery->_lockSystem->_releaseQueue[$lockId]['ids']) == 1)
		|| !$storage->isTransactional(), 'pending read lock should have one entity');

	$ret = GalleryCoreApi::releaseLocks($newLockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
}
?>
