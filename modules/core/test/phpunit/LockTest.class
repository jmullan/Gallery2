<?php
/*
 * $RCSfile
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Lock functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class LockTest extends GalleryTestCase {

    function LockTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function testOneWriteLock() {
	global $gallery;

	$targetId = $gallery->getActiveUserId();
	
	list ($ret, $lockId) = $gallery->acquireWriteLock($targetId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert($gallery->isWriteLocked($targetId));

	$ret = $gallery->releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testManyWriteLocks() {
	global $gallery;

	$ids = array($gallery->getActiveUserId());

	list ($ret, $ids[]) =
	    $gallery->getModuleParameter('core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $lockId) = $gallery->acquireWriteLock($ids);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	foreach ($ids as $id) {
	    $this->assert($gallery->isWriteLocked($id));
	}

	$ret = $gallery->releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testOneReadLock() {
	global $gallery;

	$targetId = $gallery->getActiveUserId();
	
	list ($ret, $lockId) = $gallery->acquireReadLock($targetId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert($gallery->isReadLocked($targetId));

	$ret = $gallery->releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testManyReadLocks() {
	global $gallery;

	$ids = array($gallery->getActiveUserId());

	list ($ret, $ids[]) =
	    $gallery->getModuleParameter('core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $lockId) = $gallery->acquireReadLock($ids);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	foreach ($ids as $id) {
	    $this->assert($gallery->isReadLocked($id));
	}

	$ret = $gallery->releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
}

?>
