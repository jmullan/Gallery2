<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Lock functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class LockTest extends GalleryTestCase {

    function LockTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_parentAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	global $gallery;

	$ret = GalleryCoreApi::deleteEntityById($this->_parentAlbum->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::tearDown();
    }

    function testOneWriteLock() {
	global $gallery;

	$targetId = $gallery->getActiveUserId();
	
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($targetId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(GalleryCoreApi::isWriteLocked($targetId));

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testManyWriteLocks() {
	global $gallery;

	$ids = array($gallery->getActiveUserId(), $this->_getRootId());

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($ids);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	foreach ($ids as $id) {
	    $this->assert(GalleryCoreApi::isWriteLocked($id));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testOneReadLock() {
	global $gallery;

	$targetId = $gallery->getActiveUserId();
	
	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($targetId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(GalleryCoreApi::isReadLocked($targetId));

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testManyReadLocks() {
	global $gallery;

	$ids = array($gallery->getActiveUserId(), $this->_getRootId());

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($ids);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	foreach ($ids as $id) {
	    $this->assert(GalleryCoreApi::isReadLocked($id));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testAcquireReadLockParents() {
	global $gallery;
	
	// Create a hierarchy
	$parentId = $this->_parentAlbum->getId();
	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $this->_album[$i]) = $this->_createRandomAlbum($parentId);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $parentId = $this->_album[$i]->getId();
	}

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLockParents($this->_album[2]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	// Verify that they're all locked except the item itself
	$this->assert(!GalleryCoreApi::isReadLocked($this->_album[2]->getId()));
	$this->assert(GalleryCoreApi::isReadLocked($this->_album[1]->getId()));
	$this->assert(GalleryCoreApi::isReadLocked($this->_album[0]->getId()));
	$this->assert(GalleryCoreApi::isReadLocked($this->_parentAlbum->getId()));
	$this->assert(GalleryCoreApi::isReadLocked($this->_getRootId()));

	// Release locks
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testAcquireReadLockParentsOnRoot() {
	global $gallery;

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLockParents($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	// Verify that the root is not read locked
	$this->assert(!GalleryCoreApi::isReadLocked($this->_getRootId()), 'Root should not be locked');

	// Release locks
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }    
}
?>
