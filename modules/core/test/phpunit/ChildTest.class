<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Child functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ChildTest extends GalleryTestCase {

    function ChildTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	/* Create a little tree of mixed items/entities */
	list ($ret, $this->_root) =
	    $this->_createRandomAlbum($this->_getRootId(), array('orderBy' => 'orderWeight'));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$this->_markForCleanup($this->_root);

	$rootId = $this->_root->getId();
	list ($ret, $this->_rootHighlight) = $this->_createDerivative(
		$this->_root, $rootId, DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	for ($i = 0; $i < 3; $i++) {
	    if ($i % 2) {
		list ($ret, $this->_child[$i]) = $this->_createRandomDataItem($rootId);
		if ($ret) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret);
		}
		list ($ret, $this->_derivative[$i][1]) =
		    $this->_createDerivative($this->_child[$i], $this->_child[$i]->getId(),
					     DERIVATIVE_TYPE_IMAGE_RESIZE);
		if ($ret) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret);
		}
	    } else {
		list ($ret, $this->_child[$i]) = $this->_createRandomAlbum($rootId);
		if ($ret) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret);
		}
	    }
	    list ($ret, $this->_derivative[$i][0]) =
		$this->_createDerivative($this->_child[$i], $this->_child[$i]->getId(),
					 DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
	    if ($ret) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret);
	    }
	}
    }

    function testFetchChildItemIds() {
	list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($this->_root);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	sort($childIds);
	$this->assertEquals(array($this->_child[0]->getId(), $this->_child[1]->getId(),
				  $this->_child[2]->getId()),
			    $childIds, 'root children');

	/* Make sure only items appear from fetchChildItemIds */
	list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($this->_child[0]);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals(array(), $childIds, "child 0's children");
    }

    function testFetchChildItemIdsDifferentUser() {
	/* Create a new user and give him limited view permissions on our tree */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->_markForCleanup($user);

	/* Create a new user and give him limited view permissions on our tree */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->_markForCleanup($user);

	for ($i = 0; $i < 3; $i++) {
	    $ret = GalleryCoreApi::removeItemPermissions($this->_child[$i]->getId());
	    if ($ret) {
		return $this->failWithStatus($ret);
	    }
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_child[0]->getId(), $user->getId(), 'core.view', false);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $childIds) =
	    GalleryCoreApi::fetchChildItemIds($this->_root, null, null, $user->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(array($this->_child[0]->getId()), $childIds, 'root children');
    }

    function testFetchChildDataItemIds() {
	list ($ret, $childIds) = GalleryCoreApi::fetchChildDataItemIds($this->_root);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(array($this->_child[1]->getId()), $childIds, 'root children');
    }

    function testFetchChildAlbumItemIds() {
	list ($ret, $childIds) = GalleryCoreApi::fetchChildAlbumItemIds($this->_root);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(array($this->_child[0]->getId(), $this->_child[2]->getId()),
			    $childIds, 'root sub-albums');
    }

    function testChildItemIdsWithPermission() {
	global $gallery;

	for ($i = 0; $i < 3; $i++) {
	    $ret = GalleryCoreApi::removeItemPermissions($this->_child[$i]->getId());
	    if ($ret) {
		return $this->failWithStatus($ret);
	    }
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_child[1]->getId(), $gallery->getActiveUserId(), 'core.edit', false);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_child[2]->getId(), $gallery->getActiveUserId(), 'core.view', false);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $childIds) =
	    GalleryCoreApi::fetchChildItemIdsWithPermission($this->_root->getId(), 'core.edit');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(array($this->_child[1]->getId()), $childIds, 'root children');
    }

    function testChildItemIdsIgnorePermission() {
	for ($i = 0; $i < 3; $i++) {
	    $ret = GalleryCoreApi::removeItemPermissions($this->_child[$i]->getId());
	    if ($ret) {
		return $this->failWithStatus($ret);
	    }
	}

	list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIdsIgnorePermissions($this->_root);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	sort($childIds);
	$this->assertEquals(array($this->_child[0]->getId(), $this->_child[1]->getId(),
				  $this->_child[2]->getId()),
			    $childIds, 'root children');
    }

    function testFetchChildIds2() {
	/* Order them in reverse */
	$count = sizeof($this->_child);
	for ($i = 0; $i < $count; $i++) {
	    $ret = GalleryCoreApi::setItemOrderWeight($this->_child[$i]->getId(), $count-$i);
	    if ($ret) {
		return $this->failWithStatus($ret);
	    }
	}

	list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($this->_root);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$expectedIds = array();
	for ($i = $count - 1; $i >= 0; $i--) {
	    $expectedIds[] = $this->_child[$i]->getId();
	}

	$this->assertEquals($expectedIds, $childIds);
    }

    function testAlbumsFirstOrder() {
	list ($ret, $album) = $this->_createRandomAlbum($this->_root->getId(),
				      array('orderBy' => 'albumsFirst|creationTimestamp',
					    'orderDirection' => ORDER_DESCENDING));
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$timestamp = time() - 1000;
	for ($i = 0; $i < 6; $i++) {
	    if ($i % 2) {
		list ($ret, $child[$i]) = $this->_createRandomAlbum($album->getId(),
						  array('creationTimestamp' => $timestamp));
		if ($ret) {
		    return $this->failWithStatus($ret);
		}
	    } else {
		list ($ret, $child[$i]) = $this->_createRandomDataItem($album->getId(),
					  'test/file', array('creationTimestamp' => $timestamp));
		if ($ret) {
		    return $this->failWithStatus($ret);
		}
	    }
	    $timestamp += 100;
	}

	list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($album);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(
	    array($child[5]->getId(),
		  $child[3]->getId(),
		  $child[1]->getId(),
		  $child[4]->getId(),
		  $child[2]->getId(),
		  $child[0]->getId()),
	    $childIds);
    }

    function testMultisortConflict() {
	/* Previously a sort and presort both with a left join could create bad SQL */
	$ret = GalleryCoreApi::registerFactoryImplementation('GallerySortInterface_1_1',
		'ChildTestSortOrder', 'ChildTestSortOrder',
		'modules/core/test/phpunit/ChildTest.class', 'coreTest', null);
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$this->_markFactoryModuleForCleanup('coreTest');

	list ($ret, $album) = $this->_createRandomAlbum($this->_root->getId(),
				      array('orderBy' => 'albumsFirst|ChildTestSortOrder',
					    'orderDirection' => ORDER_DESCENDING));
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	/* Don't need any results.. just validating that SQL query is ok, no error returned */
	list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($album);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals(array(), $childIds, 'child ids');
    }

    function testDescendentItemIds() {
	list ($ret, $items[]) = $this->_createRandomDataItem($this->_child[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	list ($ret, $items[]) = $this->_createRandomDataItem($this->_child[2]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$itemIds = array($this->_child[0]->getId(), $this->_child[1]->getId(),
			 $this->_child[2]->getId());
	foreach ($items as $item) {
	    $itemIds[] = $item->getId();
	}

	list ($ret, $childIds) = GalleryCoreApi::fetchDescendentItemIds($this->_root);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	sort($childIds);
	$this->assertEquals($itemIds, $childIds, 'descendents');
    }

    function testDescendentRoot() {
	list ($ret, $items[]) = $this->_createRandomDataItem($this->_child[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	list ($ret, $items[]) = $this->_createRandomDataItem($this->_child[2]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$itemIds = array($this->_child[0]->getId(), $this->_child[1]->getId(),
			 $this->_child[2]->getId());
	foreach ($items as $item) {
	    $itemIds[] = $item->getId();
	}
	list ($ret, $albumRoot) = GalleryCoreApi::loadEntitiesById($this->_getRootID());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $childIds) = GalleryCoreApi::fetchDescendentItemIds($albumRoot);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	/*
	 * childIds has all descendents in the Gallery;
	 * we just need to make sure that all *our* items are indeed in the list
	 */
	foreach ($itemIds as $itemId) {
	    $this->assert(in_array($itemId, $childIds), 'descendent ' . $itemId);
	}
    }

    function testDescendentItemIdsNoItem() {
	list ($ret, $childIds) = GalleryCoreApi::fetchDescendentItemIds($this->_child[0]);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals(array(), $childIds, 'empty descendents');
    }

    function testDescendentItemIdsInadequatePermissions() {
	global $gallery;

	list ($ret, $items[]) = $this->_createRandomDataItem($this->_child[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	list ($ret, $items[]) = $this->_createRandomDataItem($this->_child[2]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	/* Create a user that we can delete */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->_markForCleanup($user);
	$gallery->setActiveUser($user);

	list ($ret, $childIds) =
	    GalleryCoreApi::fetchDescendentItemIds($this->_root, null, null, 'core.edit');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals(array(), $childIds, 'inadequate permissions');
     }

    function testDescendentItemIdsNoPermissions() {
	global $gallery;

	list ($ret, $items[]) = $this->_createRandomDataItem($this->_child[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	list ($ret, $items[]) = $this->_createRandomDataItem($this->_child[2]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	/* Create a user that we can delete */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->_markForCleanup($user);
	$gallery->setActiveUser($user);

	/* the goal here is to test for the permissions that "everyone" doesn't have */
	list ($ret, $childIds) =
	    GalleryCoreApi::fetchDescendentItemIds($this->_root, null, null, 'core.all');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals(array(), $childIds, 'no permissions');
    }

    function testDescendentAlbumItemIds() {
	list ($ret, $items['ignore']) = $this->_createRandomDataItem($this->_child[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	list ($ret, $items['album']) = $this->_createRandomAlbum($this->_child[2]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$itemIds = array($this->_child[0]->getId(), $this->_child[2]->getId(),
			 $items['album']->getId());

	/* this should bring back all sub albums and ignore non-albums */
	list ($ret, $childIds) = GalleryCoreApi::fetchDescendentAlbumItemIds($this->_root);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	sort($childIds);
	$this->assertEquals($itemIds, $childIds, 'descendents');
    }
}

GalleryCoreApi::requireOnce('modules/core/classes/GallerySortInterface_1_1.class');

/**
 * Test sort order
 */
class ChildTestSortOrder extends GallerySortInterface_1_1 {
    function getSortInfo() {
	return array(null, 'ChildTestSort', false);
    }

    function getSortOrder($direction) {
	/* Won't match anything.. just used to ensure valid SQL is constructed */
	return array(null, '[GalleryUser::userName]' . $direction,
		'[GalleryUser::userName]', null,
		'[GalleryChildEntity] LEFT JOIN [GalleryUser] ON '
		. '[GalleryChildEntity::id] = [GalleryUser::id]');
    }
}
?>
