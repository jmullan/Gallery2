<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Item functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemTest extends GalleryTestCase {

    function ItemTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	
	parent::setUp();

	$userId = $gallery->getActiveUserId();
	list ($ret, $groupIds) =
	    GalleryCoreApi::fetchGroupsForUser($userId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$groupIds = array_keys($groupIds);
	$groupId = $groupIds[0];

	list ($ret, $this->_parentItem) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Remove all permissions */
	$ret = GalleryCoreApi::removeItemPermissions($this->_parentItem->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $this->_childItems[$i]) = $this->_createRandomAlbum($this->_parentItem->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    /* Remove all permissions */
	    $ret = GalleryCoreApi::removeItemPermissions($this->_childItems[$i]->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    
	    switch ($i) {
	    case 0:
		// Can't view this one
		
		// Has an extra perm that we care about
		$ret = GalleryCoreApi::addUserPermission($this->_childItems[$i]->getId(),
							       $userId,
							       'core.delete',
							       false);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		break;

	    case 1:
		// Can view via user perm
		$ret = GalleryCoreApi::addUserPermission($this->_childItems[$i]->getId(),
							       $userId,
							       'core.view',
							       false);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}

		// Can add data item via group perm
		$ret = GalleryCoreApi::addGroupPermission($this->_childItems[$i]->getId(),
								$groupId,
								'core.addDataItem',
								false);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}

		// Can add data item via group perm
		$ret = GalleryCoreApi::addGroupPermission($this->_childItems[$i]->getId(),
								$groupId,
								'core.edit',
								false);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}

		break;

	    case 2:
		// Can view via group perm
		$ret = GalleryCoreApi::addGroupPermission($this->_childItems[$i]->getId(),
								$groupId,
								'core.view',
								false);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}

		// Has an extra perm that we care about
		$ret = GalleryCoreApi::addGroupPermission($this->_childItems[$i]->getId(),
								$groupId,
								'core.delete',
								false);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		
		break;
	    }
	}

	/* Register a dummy toolkit */
	GalleryCoreApi::registerFactoryImplementation('GalleryToolkit',
						      'ItemTestToolkit',
						      'ItemTestToolkit',
						      __FILE__);
	
	/* Register an operation that we can perform on our mock data items */
	$ret = GalleryCoreApi::registerToolkitOperation('ItemTestToolkit',
						       array('test/image'),
						       'thumbnail',
						       array(array('type' => 'int', 'description' => 'foo')),
						       'itemtest-description');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Register a conversion operation that we can perform on our mock data items */
	$ret = GalleryCoreApi::registerToolkitOperation('ItemTestToolkit',
						       array('test/movie'),
						       'convert-to-image/jpeg',
						       array(),
						       'itemtest-description',
						       'image/jpeg');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Register a jpeg thumbnail in case there are no other toolkits active */
	$ret = GalleryCoreApi::registerToolkitOperation('ItemTestToolkit',
						       array('image/jpeg'),
						       'thumbnail',
						       array(array('type' => 'int', 'description' => 'foo')),
						       'itemtest-description');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
    }

    function tearDown() {
	global $gallery;

	$ret = GalleryCoreApi::deleteEntityById($this->_parentItem->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Unregister dummy toolkit */
	$ret = GalleryCoreApi::unregisterToolkit('ItemTestToolkit');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	parent::tearDown();
    }

    function testFetchChildIdsByTitle() {
	global $gallery;

	/* Lock and refresh it */
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_parentItem->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_parentItem) = $this->_parentItem->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_parentItem->setOrderBy('title');
	$this->_parentItem->setOrderDirection(ORDER_ASCENDING);

	/* Save it */
	$ret = $this->_parentItem->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Unlock it */
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $ids) = GalleryCoreApi::fetchChildItemIds($this->_parentItem);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	sort($ids);
	$this->assertEquals(array($this->_childItems[1]->getId(),
				  $this->_childItems[2]->getId()),
			    $ids);
    }

    function testNewItemByMimeType() {
	list ($ret, $instance) = GalleryCoreApi::newItemByMimeType('image/jpeg');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('galleryphotoitem', strtolower(get_class($instance)));

	list ($ret, $instance) = GalleryCoreApi::newItemByMimeType('image/randomimagetype');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('galleryphotoitem', strtolower(get_class($instance)));

	list ($ret, $instance) = GalleryCoreApi::newItemByMimeType('video/x-msvideo');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('gallerymovieitem', strtolower(get_class($instance)));

	list ($ret, $instance) = GalleryCoreApi::newItemByMimeType('randomtype/randomtype');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('galleryunknownitem', strtolower(get_class($instance)));
    }

    function testGetChildCounts() {
	global $gallery;

	list ($ret, $counts) = GalleryCoreApi::fetchChildCounts(array($this->_parentItem->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/*
	 * Can't view child 1
	 * Can view child 2 via group perm
	 * Can view child 3 via user perm
	 */
	$this->assertEquals(array($this->_parentItem->getId() => 2),
			    $counts);
    }

    function testFetchChildItemIdsWithPermission() {
	global $gallery;

	list ($ret, $itemIds) =
	    GalleryCoreApi::fetchChildItemIdsWithPermission($this->_parentItem->getId(),
							       'core.delete');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/*
	 * Child 1 has it
	 * Child 2 doesn't
	 * Child 3 has it
	 */
	$this->assertEquals(array($this->_childItems[0]->getId(),
				  $this->_childItems[2]->getId()),
			    $itemIds);
    }

    function testGetPermissions() {
	list ($ret, $perms) = GalleryCoreApi::getPermissions($this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('core.delete' => 1), $perms);

	list ($ret, $perms) = GalleryCoreApi::getPermissions($this->_childItems[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('core.view' => 1,
				  'core.addDataItem' => 1,
				  'core.edit' => 1), $perms);

	list ($ret, $perms) = GalleryCoreApi::getPermissions($this->_childItems[2]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('core.view' => 1,
				  'core.delete' => 1), $perms);
    }

    function testFetchAllItemIds() {
	list ($ret, $ids) = GalleryCoreApi::fetchAllItemIds('GalleryAlbumItem');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* We should see childs 1 & 2, but not child 0 or the parent. */
	$this->assert(!in_array($this->_parentItem->getId(), $ids), 'parent');
	$this->assert(!in_array($this->_childItems[0]->getId(), $ids), 'child 0');
	$this->assert(in_array($this->_childItems[1]->getId(), $ids), 'child 1');
	$this->assert(in_array($this->_childItems[2]->getId(), $ids), 'child 2');

	list ($ret, $ids) = GalleryCoreApi::fetchAllItemIds('GalleryAlbumItem', 'core.addDataItem');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* We should only see child 1 */
	$this->assert(!in_array($this->_parentItem->getId(), $ids), 'parent');
	$this->assert(!in_array($this->_childItems[0]->getId(), $ids), 'child 0');
	$this->assert(in_array($this->_childItems[1]->getId(), $ids), 'child 1');
	$this->assert(!in_array($this->_childItems[2]->getId(), $ids), 'child 2');
    }

    function testSetThumbnailFromItem() {
	// Attach a derivative to one item, then associated it with another
	list ($ret, $derivative) =
	    $this->_createDerivative($this->_childItems[0]->getId(),
				     DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
				     'itemtest-operation',
				     'test/image');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $success) = GalleryCoreApi::setThumbnailFromItem($this->_childItems[1]->getId(),
									$this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($success, 'should be able to set thumbnail');

	list ($ret, $thumbTable) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_childItems[1]->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(isset($thumbTable[$this->_childItems[1]->getId()]));
	$newDerivative = $thumbTable[$this->_childItems[1]->getId()];
	$this->assert(GalleryUtilities::isA($newDerivative, 'GalleryDerivative'));

	if (!isset($newDerivative)) {
	    return $this->fail("new derivative missing!");
	}
	$this->assertEquals($newDerivative->getDerivativeSourceId(), $derivative->getId());
    }

    /*
     * Exercise a bug: if you add an unknown item to a new album, it tries to make
     * that item the thumbnail, but we can't thumbnail-ify it so we wind up throwing
     * an ERROR_UNSUPPORTED_OPERATION.  Don't let that happen!
     */
    function testSetThumbnailFromUnknownItem() {
	global $gallery;
	
	/* Lock and refresh parent */
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_parentItem->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_parentItem) = $this->_parentItem->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$unknownItem = new GalleryUnknownItem();
	$ret = $unknownItem->create($this->_parentItem->getId(), __FILE__, 'application/unknown');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = $unknownItem->save();

	/* Unlock parent */
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	list ($ret, $success) =
	    GalleryCoreApi::setThumbnailFromItem($this->_childItems[1]->getId(), $unknownItem->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!$success, 'should not be able to set thumbnail');

	list ($ret, $thumbTable) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_childItems[1]->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!isset($thumbTable[$this->_childItems[1]->getId()]));

	$ret = GalleryCoreApi::deleteEntityById($unknownItem->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
    
    function testAddItemToAlbum() {
	global $gallery;

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $maxWeight) =
	    GalleryCoreApi::fetchExtremeChildWeight($this->_childItems[0]->getId(), HIGHER_WEIGHT);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	list ($ret, $newItem) = GalleryCoreApi::addItemToAlbum(__FILE__,
								  'itemName',
								  'title',
								  'caption',
								  'description',
								  'application/unknown',
								  $this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(GalleryUtilities::isA($newItem, 'GalleryDataItem'), 'newItem is not a GalleryDataItem');
	$this->assertEquals('itemName', $newItem->getPathComponent());
	$this->assertEquals('title', $newItem->getTitle());
	$this->assertEquals('caption', $newItem->getSummary());
	$this->assertEquals('description', $newItem->getDescription());
	$this->assertEquals('application/unknown', $newItem->getMimeType());
	$this->assertEquals($this->_childItems[0]->getId(), $newItem->getParentId());
	
	/* Test the order weight */
	list ($ret, $weights) = GalleryCoreApi::fetchItemOrderWeights(array($newItem->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(isset($weights[$newItem->getId()]));
	$this->assert($weights[$newItem->getId()] > $maxWeight);
    }

    function testAddMovieToAlbum() {
	global $gallery;

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete existing derivative preferences */
	$ret = GalleryCoreApi::removeDerivativePreferencesForItem($this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Add a thumbnail preference */
	$ret = GalleryCoreApi::addDerivativePreference(0, $this->_childItems[0]->getId(),
						       DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
						       'thumbnail|100');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Add our item to the album */
	list ($ret, $newItem) = GalleryCoreApi::addItemToAlbum(__FILE__,
							       'itemName',
							       'title',
							       'caption',
							       'description',
							       'test/movie',
							       $this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/*
	 * Verify that the new item:
	 *  - has one derivative
	 *  - its a thumbnail derivative
	 *  - it has operations of convert-to-image/jpeg;thumbnail|100
	 */
	list ($ret, $derivativeTable) =
	    GalleryCoreApi::fetchDerivativesBySourceIds(array($newItem->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	if (!isset($derivativeTable[$newItem->getId()])) {
	    $this->assert(false, 'Missing item derivative');
	    return;
	}

	$this->assert(1, sizeof($derivativeTable[$newItem->getId()]));

	$derivative = $derivativeTable[$newItem->getId()][0];
	$this->assertEquals(DERIVATIVE_TYPE_IMAGE_THUMBNAIL, $derivative->getDerivativeType());
	$this->assertEquals('convert-to-image/jpeg;thumbnail|100', $derivative->getDerivativeOperations());
    }

    function testFetchItemIdCount() {
	global $gallery;

	/* Switch to the anonymous user id so that this returns false */
        list ($ret, $anonymousUserId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.anonymousUser');
        if ($ret->isError()) {
            return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$gallery->setActiveUserId($anonymousUserId);
	
	list ($ret, $count) =
	    GalleryCoreApi::fetchItemIdCount('GalleryAlbumItem', 'core.changePermissions');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(0, $count, 'Should not have permission');
    }

    function testFetchItemIdCount2() {
	global $gallery;

	/* We're the admin user so this should return a positive value */
	list ($ret, $count) =
	    GalleryCoreApi::fetchItemIdCount('GalleryAlbumItem', 'core.changePermissions');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert($count > 0, 'Should have permission');
    }

    function testDeletingLinks() {
	global $gallery;
	$platform = $gallery->getPlatform();

	/* Create a target item */
	list ($ret, $item) = $this->_createRandomDataItem($this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Create a couple of linked items */
	for ($i = 0; $i < 2; $i++) {
	    list ($ret, $linkedItem[$i]) =
		$this->_createLinkedItem($this->_childItems[1]->getId(), $item);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* All links should point to the original */
	list ($ret, $truePath) = $item->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($platform->file_exists($truePath), "Path [$truePath] should exist");

	for ($i = 0; $i < 2; $i++) {
	    list ($ret, $linkPath) = $linkedItem[$i]->fetchPath();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    
	    $this->assertEquals($truePath, $linkPath, "Link $i doesn't point to the original");
	}

	/* Delete the original, now all links should point to the first link */
	$ret = GalleryCoreApi::deleteEntityById($item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Deleting changed our items out from under us -- adapt */
	list ($ret, $linkedItem[0]) = $linkedItem[0]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $linkedItem[1]) = $linkedItem[1]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
				   
	list ($ret, $truePath) = $linkedItem[0]->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($platform->file_exists($truePath), "Path [$truePath] should exist");

	list ($ret, $linkPath) = $linkedItem[1]->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	    
	$this->assertEquals($truePath, $linkPath, "Link doesn't point to the original (link)");
    }

    function testMove() {
	global $gallery;
	
	/* Create a target item */
	list ($ret, $item) = $this->_createRandomDataItem($this->_parentItem->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $parentSequence) =
	    GalleryCoreApi::fetchParentSequence($item->getId());

	$this->assertEquals($this->_parentItem->getId(), $item->getParentId(), 'Wrong original parent');
	$this->assertEquals(array($this->_getRootId(),
				  $this->_parentItem->getId()),
			    $parentSequence,
			    'Wrong original parent sequence');

	list ($ret, $locks[]) =
	    GalleryCoreApi::acquireReadLock(array($this->_parentItem->getId(),
					    $this->_childItems[1]->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $locks[]) = GalleryCoreApi::acquireWriteLock($item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $item) = $item->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $item->move($this->_childItems[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $item->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	list ($ret, $parentSequence) = GalleryCoreApi::fetchParentSequence($item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($this->_childItems[1]->getId(), $item->getParentId(), 'Wrong parent');
	$this->assertEquals(array($this->_getRootId(),
				  $this->_parentItem->getId(),
				  $this->_childItems[1]->getId()),
			    $parentSequence,
			    'Wrong parent sequence');

	$ret = GalleryCoreApi::releaseLocks($locks);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
}

/**
 * Test toolkit
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemTestToolkit extends GalleryToolkit { }
?>
