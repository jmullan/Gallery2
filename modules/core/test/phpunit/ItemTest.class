<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Item functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class ItemTest extends GalleryTestCase {

    function ItemTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	
	parent::setUp();

	$userId = $gallery->getActiveUserId();
	list ($ret, $groupIds) =
	    GalleryUserGroupMap::fetchGroupsForUser($userId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$groupIds = array_keys($groupIds);
	$groupId = $groupIds[0];

	list ($ret, $this->_parentItem) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Remove all permissions */
	$ret = GalleryPermissionMap::removeItemPermissions($this->_parentItem->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $this->_childItems[$i]) = $this->_createRandomAlbum($this->_parentItem->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    /* Remove all permissions */
	    $ret = GalleryPermissionMap::removeItemPermissions($this->_childItems[$i]->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    
	    switch ($i) {
	    case 0:
		// Can't view this one
		
		// Has an extra perm that we care about
		$ret = GalleryPermissionMap::addUserPermission($this->_childItems[$i]->getId(),
							       $userId,
							       'core.delete',
							       false);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		break;

	    case 1:
		// Can view via user perm
		$ret = GalleryPermissionMap::addUserPermission($this->_childItems[$i]->getId(),
							       $userId,
							       'core.view',
							       false);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}

		// Can add data item via group perm
		$ret = GalleryPermissionMap::addGroupPermission($this->_childItems[$i]->getId(),
								$groupId,
								'core.addDataItem',
								false);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}

		// Can add data item via group perm
		$ret = GalleryPermissionMap::addGroupPermission($this->_childItems[$i]->getId(),
								$groupId,
								'core.edit',
								false);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}

		break;

	    case 2:
		// Can view via group perm
		$ret = GalleryPermissionMap::addGroupPermission($this->_childItems[$i]->getId(),
								$groupId,
								'core.view',
								false);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}

		// Has an extra perm that we care about
		$ret = GalleryPermissionMap::addGroupPermission($this->_childItems[$i]->getId(),
								$groupId,
								'core.delete',
								false);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		
		break;
	    }
	}

	/* Register a dummy toolkit */
	GalleryFactory::registerImplementation('GalleryToolkit',
					       'ItemTestToolkit',
					       'ItemTestToolkit',
					       __FILE__);
	
	/* Register an operation that we can perform on our mock data items */
	$ret = GalleryToolkitHelper::registerOperation('ItemTestToolkit',
						       array('test/file'),
						       'thumbnail',
						       array(array('type' => 'int')),
						       'itemtest-description');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
    }

    function tearDown() {
	global $gallery;

	$ret = $gallery->deleteEntityById($this->_parentItem->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Unregister dummy toolkit */
	$ret = GalleryToolkitHelper::unregisterToolkit('ItemTestToolkit');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	parent::tearDown();
    }

    function testFetchChildIdsByTitle() {
	global $gallery;

	/* Lock and refresh it */
	list ($ret, $lockId) = $gallery->acquireWriteLock($this->_parentItem->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_parentItem) = $this->_parentItem->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_parentItem->setOrderBy('title');
	$this->_parentItem->setOrderDirection(ORDER_ASCENDING);

	/* Save it */
	$ret = $this->_parentItem->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Unlock it */
	$ret = $gallery->releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $ids) = $this->_parentItem->fetchChildIds();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	sort($ids);
	$this->assertEquals(array($this->_childItems[1]->getId(),
				  $this->_childItems[2]->getId()),
			    $ids);
    }

    function testNewItemByMimeType() {
	list ($ret, $instance) = GalleryItemHelper::newItemByMimeType('image/jpeg');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('galleryphotoitem', get_class($instance));

	list ($ret, $instance) = GalleryItemHelper::newItemByMimeType('image/randomimagetype');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('galleryphotoitem', get_class($instance));

	list ($ret, $instance) = GalleryItemHelper::newItemByMimeType('video/randomvideotype');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('gallerymovieitem', get_class($instance));

	list ($ret, $instance) = GalleryItemHelper::newItemByMimeType('randomtype/randomtype');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('galleryunknownitem', get_class($instance));
    }

    function testGetChildCounts() {
	global $gallery;

	list ($ret, $counts) = GalleryItemHelper::getChildCounts(array($this->_parentItem->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/*
	 * Can't view child 1
	 * Can view child 2 via group perm
	 * Can view child 3 via user perm
	 */
	$this->assertEquals(array($this->_parentItem->getId() => 2),
			    $counts);
    }

    function testFetchChildItemIdsWithPermission() {
	global $gallery;

	list ($ret, $itemIds) =
	    GalleryItemHelper::fetchChildItemIdsWithPermission($this->_parentItem->getId(),
							       'core.delete');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/*
	 * Child 1 has it
	 * Child 2 doesn't
	 * Child 3 has it
	 */
	$this->assertEquals(array($this->_childItems[0]->getId(),
				  $this->_childItems[2]->getId()),
			    $itemIds);
    }

    function testGetPermissions() {
	list ($ret, $perms) = GalleryItemHelper::getPermissions($this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('core.delete' => 1), $perms);

	list ($ret, $perms) = GalleryItemHelper::getPermissions($this->_childItems[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('core.view' => 1,
				  'core.addDataItem' => 1,
				  'core.edit' => 1), $perms);

	list ($ret, $perms) = GalleryItemHelper::getPermissions($this->_childItems[2]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('core.view' => 1,
				  'core.delete' => 1), $perms);
    }

    function testFetchAllItemIds() {
	list ($ret, $ids) = GalleryItemHelper::fetchAllItemIds('GalleryAlbumItem');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* We should see childs 1 & 2, but not child 0 or the parent. */
	$this->assert(!in_array($this->_parentItem->getId(), $ids), 'parent');
	$this->assert(!in_array($this->_childItems[0]->getId(), $ids), 'child 0');
	$this->assert(in_array($this->_childItems[1]->getId(), $ids), 'child 1');
	$this->assert(in_array($this->_childItems[2]->getId(), $ids), 'child 2');

	list ($ret, $ids) = GalleryItemHelper::fetchAllItemIds('GalleryAlbumItem', 'core.addDataItem');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* We should only see child 1 */
	$this->assert(!in_array($this->_parentItem->getId(), $ids), 'parent');
	$this->assert(!in_array($this->_childItems[0]->getId(), $ids), 'child 0');
	$this->assert(in_array($this->_childItems[1]->getId(), $ids), 'child 1');
	$this->assert(!in_array($this->_childItems[2]->getId(), $ids), 'child 2');
    }

    function testSetThumbnailFromItem() {
	// Attach a derivative to one item, then associated it with another
	list ($ret, $derivative) =
	    $this->_createDerivative($this->_childItems[0]->getId(),
				     DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
				     'itemtest-operation',
				     'test/file');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryItemHelper::setThumbnailFromItem($this->_childItems[1]->getId(),
						       $this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $thumbTable) =
	    GalleryDerivativeHelper::fetchThumbnailsByItemIds($this->_childItems[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(isset($thumbTable[$this->_childItems[1]->getId()]));
	$newDerivative = $thumbTable[$this->_childItems[1]->getId()];
	$this->assert(GalleryUtilities::isA($newDerivative, 'GalleryDerivative'));
	$this->assertEquals($newDerivative->getDerivativeSourceId(), $derivative->getId());
    }

    function testAddItemToAlbum() {
	global $gallery;

	list ($ret, $lockId) = $gallery->acquireReadLock($this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $maxWeight) =
	    GalleryItemAttributesMap::fetchExtremeChildWeight($this->_childItems[0]->getId(), HIGHER_WEIGHT);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	list ($ret, $newItem) = GalleryItemHelper::addItemToAlbum(__FILE__,
								  'itemName',
								  'title',
								  'caption',
								  'description',
								  'application/unknown',
								  $this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $gallery->releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(GalleryUtilities::isA($newItem, 'GalleryDataItem'), 'newItem is not a GalleryDataItem');
	$this->assertEquals('itemName', $newItem->getPathComponent());
	$this->assertEquals('title', $newItem->getTitle());
	$this->assertEquals('caption', $newItem->getSummary());
	$this->assertEquals('description', $newItem->getDescription());
	$this->assertEquals('application/unknown', $newItem->getMimeType());
	$this->assertEquals($this->_childItems[0]->getId(), $newItem->getParentId());
	
	/* Test the order weight */
	list ($ret, $weights) = GalleryItemAttributesMap::fetchOrderWeights(array($newItem->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(isset($weights[$newItem->getId()]));
	$this->assert($weights[$newItem->getId()] > $maxWeight);
    }
}

// Dummy test toolkit
class ItemTestToolkit extends GalleryToolkit { }

?>
