<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Item functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemTest extends GalleryTestCase {

    function ItemTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	
	parent::setUp();

	$this->_userId = $gallery->getActiveUserId();
	list ($ret, $groupIds) = GalleryCoreApi::fetchGroupsForUser($this->_userId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$groupIds = array_keys($groupIds);
	$this->_groupId = $groupIds[0];

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Register a dummy toolkit */
	GalleryCoreApi::registerFactoryImplementation('GalleryToolkit',
						      'ItemTestToolkit',
						      'ItemTestToolkit',
						      __FILE__);
	
	/* Register an operation that we can perform on our mock data items */
	$ret = GalleryCoreApi::registerToolkitOperation('ItemTestToolkit',
						       array('test/image'),
						       'thumbnail',
						       array(array('type' => 'int', 'description' => 'foo')),
						       'itemtest-description');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Register a conversion operation that we can perform on our mock data items */
	$ret = GalleryCoreApi::registerToolkitOperation('ItemTestToolkit',
						       array('test/movie'),
						       'convert-to-image/jpeg',
						       array(),
						       'itemtest-description',
						       'image/jpeg');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Register a jpeg thumbnail in case there are no other toolkits active */
	$ret = GalleryCoreApi::registerToolkitOperation('ItemTestToolkit',
						       array('image/jpeg'),
						       'thumbnail',
						       array(array('type' => 'int', 'description' => 'foo')),
						       'itemtest-description');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryCoreApi::registerFactoryImplementation('GalleryItem',
						      'ItemTestMovieItem',
						      'ItemTestMovieItem',
						      dirname(__FILE__),
						      array('test/movie'));
    }

    function tearDown() {
	global $gallery;

	$ret = GalleryCoreApi::deleteEntityById($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Unregister dummy toolkit */
	$ret = GalleryCoreApi::unregisterToolkit('ItemTestToolkit');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryCoreApi::unregisterFactoryImplementation('GalleryItem', 'ItemTestMovieItem');
	
	parent::tearDown();
    }

    function testFetchChildIdsByTitle() {
	global $gallery;

	list ($ret, $album) = $this->_createRandomAlbum($this->_album->getId(),
							array('orderBy' => 'title',
							      'orderDirection' => ORDER_ASCENDING));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $child1) = $this->_createRandomAlbum($album->getId(), array('title' => 'ZZZ'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $child2) = $this->_createRandomAlbum($album->getId(), array('title' => 'AAA'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $ids) = GalleryCoreApi::fetchChildItemIds($album);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array($child2->getId(), $child1->getId()), $ids);
    }

    function testNewItemByMimeType() {
	list ($ret, $instance) = GalleryCoreApi::newItemByMimeType('image/jpeg');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(GalleryUtilities::isExactlyA($instance, 'GalleryPhotoItem'));

	list ($ret, $instance) = GalleryCoreApi::newItemByMimeType('image/randomimagetype');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(GalleryUtilities::isExactlyA($instance, 'GalleryPhotoItem'));

	list ($ret, $instance) = GalleryCoreApi::newItemByMimeType('video/x-msvideo');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(GalleryUtilities::isExactlyA($instance, 'GalleryMovieItem'));

	list ($ret, $instance) = GalleryCoreApi::newItemByMimeType('randomtype/randomtype');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(GalleryUtilities::isExactlyA($instance, 'GalleryUnknownItem'));
    }

    function testGetChildCounts() {
	global $gallery;

	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $child[$i]) = $this->_createRandomAlbum($this->_album->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    /* Remove all permissions */
	    $ret = GalleryCoreApi::removeItemPermissions($child[$i]->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	// Set permissions 
	$ret = GalleryCoreApi::addUserPermission($child[0]->getId(), $this->_userId, 'core.view', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::addGroupPermission($child[1]->getId(), $this->_groupId, 'core.view', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $counts) = GalleryCoreApi::fetchChildCounts(array($this->_album->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	// We can view child[0] and child[1]
	$this->assertEquals(array($this->_album->getId() => 2), $counts);
    }

    function testFetchChildItemIdsWithPermission() {
	global $gallery;

	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $child[$i]) = $this->_createRandomAlbum($this->_album->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    /* Remove all permissions */
	    $ret = GalleryCoreApi::removeItemPermissions($child[$i]->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    // Give delete permissions
	    if ($i != 1) {
		$ret = GalleryCoreApi::addUserPermission($child[$i]->getId(), $this->_userId, 'core.delete', false);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
	    }
	}

	list ($ret, $itemIds) =
	    GalleryCoreApi::fetchChildItemIdsWithPermission($this->_album->getId(),
							    'core.delete');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array($child[0]->getId(), $child[2]->getId()), $itemIds);
    }

    function testFetchLinkableChildItemIdsWithPermission() {
	global $gallery;

	list ($ret, $dataItem) = $this->_createRandomDataItem($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $albumItem) = $this->_createRandomAlbum($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	list ($ret, $itemIds) =
	    GalleryCoreApi::fetchLinkableChildItemIdsWithPermission($this->_album->getId(),
								    'core.view');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array($dataItem->getId()), $itemIds);
    }
    
    function testGetPermissions() {

	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $child[$i]) = $this->_createRandomAlbum($this->_album->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    /* Remove all permissions */
	    $ret = GalleryCoreApi::removeItemPermissions($child[$i]->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $ret = array();
	    switch ($i) {
	    case 0:
		$ret[0] = GalleryCoreApi::addUserPermission($child[$i]->getId(), $this->_userId, 'core.delete', false);
		break;
		
	    case 1:
		$ret[0] = GalleryCoreApi::addUserPermission($child[$i]->getId(), $this->_userId, 'core.view', false);
		$ret[1] = GalleryCoreApi::addUserPermission($child[$i]->getId(), $this->_userId, 'core.addDataItem', false);
		$ret[2] = GalleryCoreApi::addUserPermission($child[$i]->getId(), $this->_userId, 'core.edit', false);
		break;

	    case 2:
		$ret[0] = GalleryCoreApi::addGroupPermission($child[$i]->getId(), $this->_groupId, 'core.view', false);
		$ret[1] = GalleryCoreApi::addGroupPermission($child[$i]->getId(), $this->_groupId, 'core.addDataItem', false);
		break;
		
	    }
	    for ($j = 0; $j < 3; $j++) {
		if (isset($ret[$j]) && $ret[$j]->isError()) {
		    return $this->failWithStatus($ret[$j]->wrap(__FILE__, __LINE__));
		}
	    }
	}
	
	list ($ret, $perms) = GalleryCoreApi::getPermissions($child[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('core.delete' => 1), $perms);

	list ($ret, $perms) = GalleryCoreApi::getPermissions($child[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('core.view' => 1,
				  'core.addDataItem' => 1,
				  'core.edit' => 1), $perms);

	list ($ret, $perms) = GalleryCoreApi::getPermissions($child[2]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('core.view' => 1,
				  'core.addDataItem' => 1), $perms);
    }

    function testFetchAllItemIds() {
	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $child[$i]) = $this->_createRandomAlbum($this->_album->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    if ($i == 1) {
		$ret = GalleryCoreApi::removeItemPermissions($child[$i]->getId());
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}

		$ret = GalleryCoreApi::addUserPermission($child[$i]->getId(), $this->_userId, 'core.addDataItem', false);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
	    }
	}
	
	list ($ret, $ids) = GalleryCoreApi::fetchAllItemIds('GalleryAlbumItem');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* We should see children 0 & 2 and the parent */
	$this->assert(in_array($this->_album->getId(), $ids), 'parent');
	$this->assert(in_array($child[0]->getId(), $ids), 'child 0');
	$this->assert(!in_array($child[1]->getId(), $ids), 'child 1');
	$this->assert(in_array($child[2]->getId(), $ids), 'child 2');

	/* Make sure there's no duplication */
	$this->assertEquals(sizeof($ids), sizeof(array_flip(array_flip($ids))));

	list ($ret, $ids) = GalleryCoreApi::fetchAllItemIds('GalleryAlbumItem', 'core.addDataItem');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* We should see them all */
	$this->assert(in_array($child[0]->getId(), $ids), 'child 0');
	$this->assert(in_array($child[1]->getId(), $ids), 'child 1');
	$this->assert(in_array($child[2]->getId(), $ids), 'child 2');

	/* Make sure there's no duplication */
	$this->assertEquals(sizeof($ids), sizeof(array_flip(array_flip($ids))));
    }

    function testSetThumbnailFromItem() {
	/* Create album tree */
	$parentId = $this->_album->getId();
	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $album[$i]) = $this->_createRandomAlbum($parentId);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $parentId = $album[$i]->getId();
	}
	
	/* Set the preference for one album to something unusual */
	$ret = GalleryCoreApi::removeDerivativePreferencesForItem($album[0]->getId());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Add a thumbnail preference */
	$ret = GalleryCoreApi::addDerivativePreference(0, $album[0]->getId(),
						       DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
						       'thumbnail|123');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Then attach a derivative to one item and associate it with another */
	list ($ret, $derivative) =
	    $this->_createDerivative($album[2], $album[2]->getId(), 
				     DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
				     'itemtest-operation',
				     'test/image');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $success) = GalleryCoreApi::setThumbnailFromItem($album[1]->getId(), $album[2]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($success, 'should be able to set thumbnail');

	/*
	 * At this point, $album[1]'s thumbnail should match $album[0]'s preference,
	 * and $album[0]'s thumbnail should match $this->_album's preference
	 */
	list ($ret, $thumbTable) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($album[0]->getId(),
							   $album[1]->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	// Make sure that child(1) has a thumbnail matching child(0)'s preference
	list ($ret, $preferences) = GalleryCoreApi::fetchDerivativePreferencesForItem($album[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$thumbnailPreference = null;
	for ($i = 0; $i < sizeof($preferences); $i++) {
	    if (preg_match('/thumbnail/', $preferences[$i]['derivativeOperations'])) {
		$thumbnailPreference = $preferences[$i];
		break;
	    }
	}
	$this->assert(isset($thumbnailPreference), 'missing thumbnail preference');
	$this->assert(isset($thumbTable[$album[1]->getId()]), 'child(1) should have a thumbnail');
	$this->assertEquals($thumbTable[$album[1]->getId()]->getDerivativeOperations(),
			    $thumbnailPreference['derivativeOperations']);

	// Make sure that child(0) has a thumbnail matching parentItem's preference
	list ($ret, $preferences) = GalleryCoreApi::fetchDerivativePreferencesForItem($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$thumbnailPreference = null;
	for ($i = 0; $i < sizeof($preferences); $i++) {
	    if (preg_match('/thumbnail/', $preferences[$i]['derivativeOperations'])) {
		$thumbnailPreference = $preferences[$i];
		break;
	    }
	}
	$this->assert(isset($thumbnailPreference), 'missing thumbnail preference');
	$this->assert(isset($thumbTable[$album[0]->getId()]), 'child(0) should have a thumbnail');
	$this->assertEquals($thumbTable[$album[0]->getId()]->getDerivativeOperations(),
			    $thumbnailPreference['derivativeOperations']);

	// Make sure that the derivatives are linked together properly
	$thumb0 = $thumbTable[$album[0]->getId()];
	$thumb1 = $thumbTable[$album[1]->getId()];
	$this->assertEquals($thumb0->getDerivativeSourceId(), $thumb1->getId());
    }

    /*
     * Exercise a bug: if you add an unknown item to a new album, it tries to make
     * that item the thumbnail, but we can't thumbnail-ify it so we wind up throwing
     * an ERROR_UNSUPPORTED_OPERATION.  Don't let that happen!
     */
    function testSetThumbnailFromUnknownItem() {
	global $gallery;

	list ($ret, $unknownItem) = $this->_createRandomDataItem($this->_album->getId(),
								 'application/unknown',
								 array(),
								 __FILE__,
								 'GalleryUnknownItem');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	list ($ret, $success) =
	    GalleryCoreApi::setThumbnailFromItem($this->_album->getId(), $unknownItem->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!$success, 'should not be able to set thumbnail');

	list ($ret, $thumbTable) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_album->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!isset($thumbTable[$this->_album->getId()]));
    }
    
    function testAddItemToAlbum() {
	global $gallery;

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $maxWeight) =
	    GalleryCoreApi::fetchExtremeChildWeight($this->_album->getId(), HIGHER_WEIGHT);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	list ($ret, $newItem) = GalleryCoreApi::addItemToAlbum(__FILE__,
							       'itemName',
							       'title',
							       'caption',
							       'description',
							       'application/unknown',
							       $this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(GalleryUtilities::isA($newItem, 'GalleryDataItem'), 'newItem is not a GalleryDataItem');
	$this->assertEquals('itemName', $newItem->getPathComponent());
	$this->assertEquals('title', $newItem->getTitle());
	$this->assertEquals('caption', $newItem->getSummary());
	$this->assertEquals('description', $newItem->getDescription());
	$this->assertEquals('application/unknown', $newItem->getMimeType());
	$this->assertEquals($this->_album->getId(), $newItem->getParentId());
	
	/* Test the order weight */
	list ($ret, $weights) = GalleryCoreApi::fetchItemOrderWeights(array($newItem->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(isset($weights[$newItem->getId()]));
	$this->assert($weights[$newItem->getId()] > $maxWeight);
    }

    function testAddMovieToAlbum() {
	global $gallery;

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete existing derivative preferences */
	$ret = GalleryCoreApi::removeDerivativePreferencesForItem($this->_album->getId());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Add a thumbnail preference */
	$ret = GalleryCoreApi::addDerivativePreference(0, $this->_album->getId(),
						       DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
						       'thumbnail|101');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Add our item to the album */
	list ($ret, $newItem) = GalleryCoreApi::addItemToAlbum(__FILE__,
							       'itemName',
							       'title',
							       'caption',
							       'description',
							       'test/movie',
							       $this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/*
	 * Verify that the new item:
	 *  - has one derivative
	 *  - its a thumbnail derivative
	 *  - it has operations of convert-to-image/jpeg;thumbnail|100
	 */
	list ($ret, $derivativeTable) =
	    GalleryCoreApi::fetchDerivativesBySourceIds(array($newItem->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	if (!isset($derivativeTable[$newItem->getId()])) {
	    $this->assert(false, 'Missing item derivative');
	    return;
	}

	$this->assert(1, sizeof($derivativeTable[$newItem->getId()]));

	$derivative = $derivativeTable[$newItem->getId()][0];
	$this->assertEquals(DERIVATIVE_TYPE_IMAGE_THUMBNAIL, $derivative->getDerivativeType());
	$this->assertEquals('convert-to-image/jpeg;thumbnail|101', $derivative->getDerivativeOperations());
    }

    function testFetchItemIdCount() {
	global $gallery;

	/* Switch to the anonymous user id so that this returns false */
        list ($ret, $anonymousUserId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.anonymousUser');
        if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $anonymousUser) = GalleryCoreApi::loadEntitiesById($anonymousUserId);
        if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$gallery->setActiveUser($anonymousUser);
	
	list ($ret, $count) =
	    GalleryCoreApi::fetchItemIdCount('GalleryAlbumItem', 'core.changePermissions');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(0, $count, 'Should not have permission');
    }

    function testFetchItemIdCount2() {
	global $gallery;

	/* We're the admin user so this should return a positive value */
	list ($ret, $count) =
	    GalleryCoreApi::fetchItemIdCount('GalleryAlbumItem', 'core.changePermissions');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert($count > 0, 'Should have permission');
    }

    function testDeletingLinks() {
	global $gallery;
	$platform = $gallery->getPlatform();

	/* Create a target item */
	list ($ret, $item) = $this->_createRandomDataItem($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Create a couple of linked items */
	for ($i = 0; $i < 2; $i++) {
	    list ($ret, $linkedItem[$i]) = $this->_createLinkedItem($this->_album->getId(), $item);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* All links should point to the original */
	list ($ret, $truePath) = $item->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($platform->file_exists($truePath), "Path [$truePath] should exist");

	for ($i = 0; $i < 2; $i++) {
	    list ($ret, $linkPath) = $linkedItem[$i]->fetchPath();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    
	    $this->assertEquals($truePath, $linkPath, "Link $i doesn't point to the original");
	}

	/* Delete the original, now all links should point to the first link */
	$ret = GalleryCoreApi::deleteEntityById($item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Deleting changed our items out from under us -- adapt */
	list ($ret, $linkedItem[0]) = $linkedItem[0]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $linkedItem[1]) = $linkedItem[1]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
				   
	list ($ret, $truePath) = $linkedItem[0]->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($platform->file_exists($truePath), "Path [$truePath] should exist");

	list ($ret, $linkPath) = $linkedItem[1]->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	    
	$this->assertEquals($truePath, $linkPath, "Link doesn't point to the original (link)");
    }

    function testMove() {
	global $gallery;

	/* Create a destination album */
	list ($ret, $album) = $this->_createRandomAlbum($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create a target item */
	list ($ret, $item) = $this->_createRandomDataItem($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $parentSequence) = GalleryCoreApi::fetchParentSequence($item->getId());

	$this->assertEquals($this->_album->getId(), $item->getParentId(), 'Wrong original parent');
	$this->assertEquals(array($this->_getRootId(),
				  $this->_album->getId()),
			    $parentSequence,
			    'Wrong original parent sequence');

	list ($ret, $locks[]) =
	    GalleryCoreApi::acquireReadLock(array($this->_album->getId(),
						  $album->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $locks[]) = GalleryCoreApi::acquireWriteLock($item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $item) = $item->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $item->move($album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $item->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	list ($ret, $parentSequence) = GalleryCoreApi::fetchParentSequence($item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($album->getId(), $item->getParentId(), 'Wrong parent');
	$this->assertEquals(array($this->_getRootId(),
				  $this->_album->getId(),
				  $album->getId()),
			    $parentSequence,
			    'Wrong parent sequence');

	$ret = GalleryCoreApi::releaseLocks($locks);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Add a small (dimension wise) photo to an album and make sure that we don't create resizes that are 
     * larger (dimension wise) than the original.
     */
    function testAddSmallPhotoToAlbum() {
	global $gallery;

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/*
	 * Set the album preferences such that we have one resize that's smaller than the original, and one
	 * that's larger.  We know that the image we're using is 62x75
	 */
	$ret = GalleryCoreApi::removeDerivativePreferencesForItem($this->_album->getId());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$ret = GalleryCoreApi::addDerivativePreference(1, $this->_album->getId(),
						       DERIVATIVE_TYPE_IMAGE_RESIZE,
						       'scale|50');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	$ret = GalleryCoreApi::addDerivativePreference(2, $this->_album->getId(),
						       DERIVATIVE_TYPE_IMAGE_RESIZE,
						       'scale|100');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $photo) = GalleryCoreApi::newItemByMimeType('image/jpeg');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $photo->create($this->_album->getId(),
			      dirname(__FILE__) . '/../data/test1.jpg',
			      'image/jpeg',
			      'test image');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::addExistingItemToAlbum($photo, $this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $photo->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	// Now verify that we didn't upsample our resizes
	list ($ret, $resizes) = GalleryCoreApi::fetchResizesByItemIds(array($photo->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(isset($resizes[$photo->getId()]), 'Missing resizes for new photo');
	if (isset($resizes[$photo->getId()])) {
	    $resizes = $resizes[$photo->getId()];
	    $this->assertEquals(1, sizeof($resizes), 'There should only be one resize');
	    $this->assertEquals('scale|50', $resizes[0]->getDerivativeOperations(), 'The resize operation should be scale|50');
	}
    }
}

/**
 * Test toolkit
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemTestToolkit extends GalleryToolkit { }


/**
 * Required classes
 */
require_once(dirname(__FILE__) . '/../../classes/GalleryMovieItem.class');

/**
 * Test movie item
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemTestMovieItem extends GalleryMovieItem { }
?>
