<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Login controller tests
 */
class LoginControllerTest extends GalleryControllerTestCase {

    function LoginControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core:Login');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	/* Create a new user */
	list ($ret, $this->_user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$session =& $gallery->getsession();
	list ($ret, $this->_saveUserId) = $session->get('core.id.activeUser');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	global $gallery;
	
	$ret = $gallery->deleteEntityById($this->_user->getId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$session =& $gallery->getsession();
	$session->put('core.id.activeUser', $this->_saveUserId);
	
	parent::tearDown();
    }

    function testLogin() {
	GalleryUtilities::putRequestVariable('form.action.login', 1);
	GalleryUtilities::putRequestVariable('form.username', $this->_user->getUserName());
	GalleryUtilities::putRequestVariable('form.password', 'password'); // from _createRandomUser
	GalleryUtilities::putRequestVariable('return.x', 'y');
	
	$results = $this->handleRequest();
	$this->assertRedirect(array('x' => 'y'), $results);
    }

    function testLoginInvalidUser() {
	GalleryUtilities::putRequestVariable('form.action.login', 1);
	GalleryUtilities::putRequestVariable('form.username', 'some-bogus-user');
	GalleryUtilities::putRequestVariable('form.password', 'password'); // from _createRandomUser
	GalleryUtilities::putRequestVariable('return.x', 'y');
	
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:Login'), $results);
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.invalidPassword'));
    }

    function testLoginValidUserInvalidPassword() {
	GalleryUtilities::putRequestVariable('form.action.login', 1);
	GalleryUtilities::putRequestVariable('form.username', $this->_user->getUserName());
	GalleryUtilities::putRequestVariable('form.password', 'wrong password');
	GalleryUtilities::putRequestVariable('return.x', 'y');
	
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:Login'), $results);
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.invalidPassword'));
    }

    function testCancel() {
	GalleryUtilities::putRequestVariable('form.action.cancel', 1);
	GalleryUtilities::putRequestVariable('return.x', 'y');
	
	$results = $this->handleRequest();
	$this->assertRedirect(array('x' => 'y'), $results);
    }
}
?>
