<?php
/*
 * $RCSfile: ItemMakeHighlightControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.23 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * ItemMakeHighlight controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemMakeHighlightControllerTest extends GalleryControllerTestCase {

    function ItemMakeHighlightControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.ItemMakeHighlight');
    }

    function setUp() {
	parent::setUp();

	/* Register a dummy toolkit */
	$ret = GalleryCoreApi::registerFactoryImplementation('GalleryToolkit',
	    'ItemMakeHighlightTestToolkit', 'ItemMakeHighlightTestToolkit',
	    'modules/core/test/phpunit/ItemMakeHighlightControllerTest.class',
	    'coreTest', null);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markToolkitForCleanup('ItemMakeHighlightTestToolkit');

	/* Register operations that we can perform on our mock data items */
	$ret = GalleryCoreApi::registerToolkitOperation(
	    'ItemMakeHighlightTestToolkit', array('test/file'), 'thumbnail',
	    array(array('type' => 'int', 'description' => 'foo'),
		  array('type' => 'int', 'description' => 'foo')),
	    'test-description');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);

	list ($ret, $this->_subalbum) = $this->_createRandomAlbum($this->_album->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_item) =
	    $this->_createRandomDataItem($this->_subalbum->getId(), 'test/file');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_derivative) =
	    $this->_createDerivative($this->_item, $this->_item->getId(),
				     DERIVATIVE_TYPE_IMAGE_THUMBNAIL, 'thumbnail|200');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testCancel() {
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('return' => true, 'status' => array(), 'error' => array()),
			    $results);
    }

    function testMakeHighlightParent() {
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[parentId]', $this->_subalbum->getId());
	GalleryUtilities::putRequestVariable('form[action][makeHighlight]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('return' => true, 'status' => array(), 'error' => array()),
			    $results);

	/* Verify highlight was set */
	list ($ret, $thumbnail) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_subalbum->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	if (!empty($thumbnail)) {
	    $thumbnail = array_shift($thumbnail);
	}

	$this->assertEquals($this->_derivative->getId(), $thumbnail->getDerivativeSourceId());
    }

    function testMakeHighlightGrandparent() {
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[parentId]', $this->_album->getId());
	GalleryUtilities::putRequestVariable('form[action][makeHighlight]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('return' => true, 'status' => array(), 'error' => array()),
			    $results);

	/* Verify highlight was set */
	list ($ret, $thumbnail) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_album->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	if (!empty($thumbnail)) {
	    $thumbnail = array_shift($thumbnail);
	}

	$this->assertEquals($this->_derivative->getId(), $thumbnail->getDerivativeSourceId());
    }
}

/**
 * Dummy test toolkit
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemMakeHighlightTestToolkit extends GalleryToolkit { }
?>
