<?php
/*
 * $RCSfile: UserRecoverPasswordConfirmControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.4 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * require necessary classes
 */
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryRecoverPasswordMap.class');

/**
 * UserRecoverPassword controller tests
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class UserRecoverPasswordConfirmControllerTest extends GalleryControllerTestCase {

    function UserRecoverPasswordConfirmControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.UserRecoverPasswordConfirm');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	/* Create a new user */
	list ($ret, $this->_user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_user);

	$this->_hashedPassword = $this->_user->getHashedPassword();
    }

    function testRecoverPassword() {
	global $gallery;

	$ret = GalleryRecoverPasswordMap::addMapEntry(
		array('userName' => $this->_user->getUserName(),
		      'authString' => md5('12345'),
		      'requestExpires' => time() + 60));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('form[action][submit]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());
	GalleryUtilities::putRequestVariable('form[authString]', md5('12345'));
	GalleryUtilities::putRequestVariable('form[password1]', 'recoverConfirmPass');
	GalleryUtilities::putRequestVariable('form[password2]', 'recoverConfirmPass');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserLogin'),
				  'return' => 0,
				  'status' => array('passwordRecovered' => 1),
				  'error' => array()),
			    $results);

	list ($ret, $this->_user) = $this->_user->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(true, $this->_user->isCorrectPassword('recoverConfirmPass'), 
		      'Password not changed');

	$ret = $this->_verifyMapEntryRemoved();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testRequestTooOld() {
	global $gallery;

	$ret = GalleryRecoverPasswordMap::addMapEntry(
	    array('userName' => $this->_user->getUserName(),
		  'authString' => md5('12345'),
		  'requestExpires' => mktime(0,0,0,1,4,2005)));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('form[action][submit]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());
	GalleryUtilities::putRequestVariable('form[authString]', md5('12345'));
	GalleryUtilities::putRequestVariable('form[password1]', 'password');
	GalleryUtilities::putRequestVariable('form[password2]', 'password');

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin',
				      'subView' => 'core.UserRecoverPasswordConfirm'),
		  'status' => array(),
		  'error' => array('form[error][request][tooOld]')),
	    $results);

	$ret = $this->_verifyMapEntryRemoved();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_verifyNoPasswordChange();
    }

    function testRequestMissing() {
	GalleryUtilities::putRequestVariable('form[action][submit]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', 'recoverTest12345');
	GalleryUtilities::putRequestVariable('form[authString]', 1);
	GalleryUtilities::putRequestVariable('form[password1]', 'password');
	GalleryUtilities::putRequestVariable('form[password2]', 'password');

	$results = $this->handleRequest();

	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin',
				      'subView' => 'core.UserRecoverPasswordConfirm'),
		  'status' => array(),
		  'error' => array('form[error][request][missing]')),
	    $results);

	$this->_verifyNoPasswordChange();
    }

    function testPasswordMismatch() {
	GalleryUtilities::putRequestVariable('form[action][submit]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', 'recoverTest12345');
	GalleryUtilities::putRequestVariable('form[authString]', 1);
	GalleryUtilities::putRequestVariable('form[password1]', 'password');
	GalleryUtilities::putRequestVariable('form[password2]', 'mismatch');

	$results = $this->handleRequest();
	
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin',
				      'subView' => 'core.UserRecoverPasswordConfirm'),
		  'status' => array(),
		  'error' => array('form[error][password][mismatch]')),
	    $results);

	$this->_verifyNoPasswordChange();
    }

    function testMissingInputs() {
	GalleryUtilities::putRequestVariable('form[action][submit]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin',
				      'subView' => 'core.UserRecoverPasswordConfirm'),
		  'status' => array(),
		  'error' => array('form[error][userName][missing]',
				   'form[error][authString][missing]',
				   'form[error][password][missing]')),
	    $results);

	$this->_verifyNoPasswordChange();
    }

    function testCancel() {
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('return' => 1,
				  'delegate' => array('view' => 'core.UserAdmin',
						    'subView' => 'core.UserRecoverPasswordConfirm'),
				  'status' => array(),
				  'error' => array()),
			    $results);

	$this->_verifyNoPasswordChange();
    }

    function _verifyNoPasswordChange() {
	$this->assertEquals($this->_hashedPassword, $this->_user->getHashedPassword(), 
			    'Passwords changed');
    }

    function _verifyMapEntryRemoved() {
	global $gallery;

	$query = '
	    SELECT
		[GalleryRecoverPasswordMap::userName] 
	    FROM
		[GalleryRecoverPasswordMap] 
	    WHERE
		[GalleryRecoverPasswordMap::userName] = ?
        ';

	$data = array($this->_user->getUserName());

	list($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	if ($results = $searchResults->nextResult()) {
	    $this->assert($results[0], 'RecoverMap entry was not purged during password reset');
	}

	return GalleryStatus::success();
    }
}
?>
