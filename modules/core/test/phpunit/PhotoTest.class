<?php
/*
 * $RCSfile: PhotoTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.10 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Photo functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class PhotoTest extends GalleryTestCase {

    function PhotoTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	/* Register a dummy toolkit */
	$path = 'modules/core/test/phpunit/PhotoTest.class';
	$ret = GalleryCoreApi::registerFactoryImplementation(
	    'GalleryToolkit', 'PhotoTestToolkit', 'PhotoTestToolkit',
	    $path, 'coreTest', null);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markToolkitForCleanup('PhotoTestToolkit');

	$ret = GalleryCoreApi::registerToolkitProperty(
	    'PhotoTestToolkit', array('image/test'), 'colorspace', 'string', 'phototest property');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testCreateAndDeletePhoto() {
	global $gallery;

	/*
	 * Create the photo
	 */
	list ($ret, $photo) = GalleryCoreApi::newItemByMimeType('image/jpeg');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $photo->create($this->_getRootId(),
			      dirname(__FILE__) . '/../data/test1.jpg',
			      'image/jpeg');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $photo->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/*
	 * Load the photo back and verify it
	 */
	GalleryDataCache::reset();

	list ($ret, $newPhoto) = GalleryCoreApi::loadEntitiesById($photo->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($photo, $newPhoto);

	/*
	 * Delete the photo
	 */
	$ret = GalleryCoreApi::deleteEntityById($photo->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testCMYKPhoto() {
	/* Test that mime type gets -cmyk appended if toolkit says it uses CMYK colorspace */
	list ($ret, $photo) = GalleryCoreApi::newItemByMimeType('image/test');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $photo->create($this->_getRootId(), __FILE__, 'image/test');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $photo->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($photo);

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('image/test-cmyk', $photo->getMimeType(), 'cmyk mime type');
    }

    function testRGBPhoto() {
	/* Test that mime type is not affected if toolkit says it uses RGB colorspace */
	list ($ret, $photo) = GalleryCoreApi::newItemByMimeType('image/test');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $photo->create($this->_getRootId(),
			      dirname(__FILE__) . '/../data/test1.gif', 'image/test');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $photo->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($photo);

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('image/test', $photo->getMimeType(), 'mime type');
    }
}

/**
 * Test toolkit
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class PhotoTestToolkit extends GalleryToolkit {
    function getProperty($mimeType, $propertyName, $sourceFilename) {
	/* This will be called by GalleryPhotoItem::create */
	if ($propertyName == 'colorspace' && $mimeType == 'image/test') {
	    $colorspace = (basename($sourceFilename) == basename(__FILE__)) ? 'CMYK' : 'RGB';
	    return array(GalleryStatus::success(), array($colorspace));
	}
	return array(GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__), null);
    }
}
?>
