<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemEditItem controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemEditItemPluginTest extends ItemEditPluginTestCase {

    function ItemEditItemPluginTest($methodName) {
	$this->ItemEditPluginTestCase($methodName, 'core', 'ItemEditItem');
    }

    function setUp() {
	global $gallery;

	parent::setUp();

	for ($i = 0; $i < 2; $i++) {
	    list ($ret, $this->_item[$i]) = $this->_createRandomDataItem($this->_getRootId());
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	for ($i = 0; $i < 2; $i++) {
	    list ($ret, $this->_album[$i]) = $this->_createRandomAlbum($this->_getRootId());
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	$this->_preferred = null;
    }

    function tearDown() {
	global $gallery;

	foreach ($this->_item as $item) {
	    $ret = GalleryCoreApi::deleteEntityById($item->getId());
	    if ($ret->isError()) {
		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	foreach ($this->_album as $album) {
	    $ret = GalleryCoreApi::deleteEntityById($album->getId());
	    if ($ret->isError()) {
		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	
	parent::tearDown();
    }

    function testUndo() {
	global $gallery;

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][undo]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest($this->_item[0], $this->_preferred);
	$this->assertEquals(array(array(), null), $results);
    }

    function testEditItem() {
	global $gallery;

	/* Use valid inputs */
  	$newPathComponent = $this->_item[0]->getPathComponent() . rand();
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[pathComponent]', $newPathComponent);
	GalleryUtilities::putRequestVariable('form[title]', 'new title');
	GalleryUtilities::putRequestVariable('form[summary]', 'new summary');
	GalleryUtilities::putRequestVariable('form[keywords]', 'new keywords');
	GalleryUtilities::putRequestVariable('form[description]', 'new description');
	GalleryUtilities::putRequestVariable('form[serialNumber]', $this->_item[0]->getSerialNumber());

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest($this->_item[0], $this->_preferred);
	$this->assertEquals(array(array(), $this->_translate('Changes saved successfully')),
				  $results);
    }

    function testInvalidPathComponent() {
	global $gallery;

	/* Use valid inputs */
	$newPathComponent = $this->_item[0]->getPathComponent() . rand();
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[pathComponent]', '#$%W$%W?$%W%/');

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest($this->_item[0], $this->_preferred);
	$this->assertEquals(array(array('form[error][pathComponent][invalid]'), null),
			    $results);
    }

    function testMissingPathComponent() {
	global $gallery;

	/* Use valid inputs */
	$newPathComponent = $this->_item[0]->getPathComponent() . rand();
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::removeRequestVariable('form[pathComponent]');

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest($this->_item[0], $this->_preferred);
	$this->assertEquals(array(array('form[error][pathComponent][missing]'), null),
			    $results);
    }

    function testPathCollisionItem() {
	global $gallery;
	
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[pathComponent]', $this->_item[1]->getPathComponent());
	GalleryUtilities::putRequestVariable('form[title]', 'new title');
	GalleryUtilities::putRequestVariable('form[summary]', 'new summary');
	GalleryUtilities::putRequestVariable('form[keywords]', 'new keywords');
	GalleryUtilities::putRequestVariable('form[description]', 'new description');
	GalleryUtilities::putRequestVariable('form[serialNumber]', $this->_item[0]->getSerialNumber());

	/* Perform the request and verify that we succeeded (the controller works around the collision) */
	$results = $this->handleRequest($this->_item[0], $this->_preferred);
	$this->assertEquals(array(array(), $this->_translate('Changes saved successfully')),
				  $results);

	/* Make sure the object has been renamed to something similar to the new path */
	list ($ret, $this->_item[0]) = $this->_item[0]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	list ($ret, $newPath) = $this->_item[0]->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $comparePath) =  $this->_item[1]->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$this->assertEquals($comparePath . '_001', $newPath);

	/* Make sure that the file was moved */
	$platform = $gallery->getPlatform();
	$this->assert($platform->file_exists($newPath));
    }

    function testRenameRoot() {
	global $gallery;
	
	list ($ret, $rootAlbum) = GalleryCoreApi::loadEntitiesById($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[pathComponent]', 'floort');
	GalleryUtilities::putRequestVariable('form[title]', $rootAlbum->getTitle());
	GalleryUtilities::putRequestVariable('form[summary]', $rootAlbum->getSummary());
	GalleryUtilities::putRequestVariable('form[keywords]', $rootAlbum->getKeywords());
	GalleryUtilities::putRequestVariable('form[description]', $rootAlbum->getDescription());
	GalleryUtilities::putRequestVariable('form[serialNumber]', $rootAlbum->getSerialNumber());

	/* There's no UI for renaming the root album so this returns a bad parameter. */
	$results = $this->handleRequest($rootAlbum, $this->_preferred, ERROR_BAD_PARAMETER);

	/* Verify that the path component is still the same */
	list ($ret, $rootAlbum) = $rootAlbum->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(null, $rootAlbum->getPathComponent());
    }

    function testPathCollisionAlbum() {
	global $gallery;
	
	/* Get some stats on the file before we try moving */
	$platform = $gallery->getPlatform();
	list ($ret, $originalPath) = $this->_album[0]->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[pathComponent]', $this->_album[1]->getPathComponent());
	GalleryUtilities::putRequestVariable('form[title]', 'new title');
	GalleryUtilities::putRequestVariable('form[summary]', 'new summary');
	GalleryUtilities::putRequestVariable('form[keywords]', 'new keywords');
	GalleryUtilities::putRequestVariable('form[description]', 'new description');

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest($this->_album[0], $this->_preferred);
	$this->assertEquals(array(array('form[error][pathComponent][collision]'), null),
			    $results);

	/* Make sure the object is still in the original path */
	list ($ret, $this->_album[0]) = $this->_album[0]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	list ($ret, $newPath) = $this->_album[0]->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($originalPath, $newPath);

	/* Make sure that the file wasn't moved */
	$this->assert($platform->file_exists($originalPath));
    }

    function testInvalidSerialNumber() {
	global $gallery;
	
	/* Use an invalid Serial */
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[pathComponent]', $this->_item[0]->getPathComponent());
	GalleryUtilities::putRequestVariable('form[title]', 'new title');
	GalleryUtilities::putRequestVariable('form[summary]', 'new summary');
	GalleryUtilities::putRequestVariable('form[keywords]', 'new keywords');
	GalleryUtilities::putRequestVariable('form[description]', 'new description');
	GalleryUtilities::putRequestVariable('form[serialNumber]', -1);

	$results = $this->handleRequest($this->_item[0], $this->_preferred, ERROR_OBSOLETE_DATA);
    }

    function testMoveItemWithInvalidSerialNumber() {
	global $gallery;
	
	/* Get some stats on the file before we try moving */
	$platform = $gallery->getPlatform();
	list ($ret, $originalPath) = $this->_item[0]->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Use an invalid Serial */
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[pathComponent]', 'new' . rand(0,1000));
	GalleryUtilities::putRequestVariable('form[title]', 'new title');
	GalleryUtilities::putRequestVariable('form[summary]', 'new summary');
	GalleryUtilities::putRequestVariable('form[keywords]', 'new keywords');
	GalleryUtilities::putRequestVariable('form[description]', 'new description');
	GalleryUtilities::putRequestVariable('form[serialNumber]', -1);

	$results = $this->handleRequest($this->_item[0], $this->_preferred, ERROR_OBSOLETE_DATA);

	/* Make sure the object is still in the original path */
	list ($ret, $this->_item[0]) = $this->_item[0]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	list ($ret, $newPath) = $this->_item[0]->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($originalPath, $newPath);

	/* Make sure that the file wasn't moved */
	$this->assert($platform->file_exists($originalPath), 'File should not have been moved');
    }

    function testMoveAlbumWithInvalidSerialNumber() {
	global $gallery;
	
	/* Get some stats on the file before we try moving */
	$platform = $gallery->getPlatform();
	list ($ret, $originalPath) = $this->_album[0]->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Use an invalid Serial */
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[pathComponent]', 'new' . rand(0,1000));
	GalleryUtilities::putRequestVariable('form[title]', 'new title');
	GalleryUtilities::putRequestVariable('form[summary]', 'new summary');
	GalleryUtilities::putRequestVariable('form[keywords]', 'new keywords');
	GalleryUtilities::putRequestVariable('form[description]', 'new description');
	GalleryUtilities::putRequestVariable('form[serialNumber]', -1);

	$results = $this->handleRequest($this->_album[0], $this->_preferred, ERROR_OBSOLETE_DATA);

	/* Make sure the object is still in the original path */
	list ($ret, $this->_album[0]) = $this->_album[0]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	list ($ret, $newPath) = $this->_album[0]->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($originalPath, $newPath);

	/* Make sure that the file wasn't moved */
	$this->assert($platform->file_exists($originalPath), 'Album should not have been moved');
    }
}
?>
