<?php
/*
 * $RCSfile: FastDownloadTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.5 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test our fast download code.
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class FastDownloadTest extends GalleryTestCase {

    function FastDownloadTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;

	parent::setUp();

	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $this->_item[$i]) = $this->_createRandomDataItem($this->_getRootId());
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->_markForCleanup($this->_item[$i]);
	    
	    foreach (array(DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
			   DERIVATIVE_TYPE_IMAGE_RESIZE,
			   DERIVATIVE_TYPE_IMAGE_PREFERRED) as $derivativeType) {
		list ($ret, $this->_derivatives[$i][]) =
		    $this->_createDerivative($this->_item[$i], $this->_item[$i]->getId(),
					     $derivativeType);
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
	    }
	}

	/*
	 * RemovePermission events should not remove the thumbnails of other items, even if the
	 * source item of the thumbnail has no public permissions anymore, the parentId is what
	 * matters for permissions
	 */
	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);
	/* Set the thumbnail of the album */
	list ($ret, $this->_derivatives[3][]) =
	    $this->_createDerivative($this->_album, $this->_item[0]->getId(),
				     DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testCreateFastDownloadFile() {
	global $gallery;
	$bytesWritten = '';
	$platform = new FastDownloadTestCreateFastDownloadPlatform($bytesWritten);
	$platform->setStat(7, 50);	  /* content length */
	$platform->setStat(9, 1);	  /* last mod date */
	$gallery->setPlatform($platform);

	list ($ret, $anonymousUserId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.anonymousUser');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$ret = GalleryCoreApi::addUserPermission(
            $this->_item[0]->getId(), $anonymousUserId, 'core.view', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $this->_derivatives[0][0]->createFastDownloadFile(true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$cachePath = GalleryDataCache::getCachePath(
            array('type' => 'derivative-relative', 'itemId' => $this->_derivatives[0][0]->getId()));

	$this->assertEquals(
            sprintf('<?php function GalleryFastDownload() { ' .
		    'return $GLOBALS[\'gallery\']->fastDownload(\'%s\', \'%s\', ' .
		    '\'Thu, 01 Jan 1970 00:00:01 GMT\', \'%s\', 50);} ?>',
		    $cachePath,
		    $this->_item[0]->getPathComponent(),
		    $this->_derivatives[0][0]->getMimeType()),
            $bytesWritten);
    }

    /* Fake event that removes permissions that don't affect the guest user */
    function testRemoveIrrelevantPermission() {
	global $gallery;
	
	list ($ret, $bits) = GalleryCoreApi::convertPermissionIdsToBits(
            array('core.view', 'core.viewResizes', 'core.viewSource'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $adminGroupId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.adminGroup');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$event = GalleryCoreApi::newEvent('Gallery::RemovePermission');
	$event->setData(array('userId' => $gallery->getActiveUserId(),
			      'groupId' => $adminGroupId,
			      'itemIdsAndBits' => array($this->_item[0]->getId() => $bits)));

	$buf = array();
	$platform = new FastDownloadTestRemovePermissionPlatform($buf);
	$gallery->setPlatform($platform);
	
	list ($ret, $response) = GalleryItemHelper_medium::handleEvent($event);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(0, count($buf['unlink']), 'no files should be deleted');
	$this->assertEquals(array(), $buf['unlink'], 'wrongfully deleted files');
    }

    function testRemoveUserPermission() {
	global $gallery;

	list ($ret, $anonymousUserId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.anonymousUser');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$this->_testRemovePermission($anonymousUserId, null);
    }

    function testRemoveGroupPermission() {
	global $gallery;
	
	list ($ret, $everybodyGroupId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.everybodyGroup');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_testRemovePermission(null, $everybodyGroupId);
    }

    function testRemoveAllGroupsPermission() {
	$this->_testRemovePermission(null, 0);
    }

    function testRemoveAllUsersPermission() {
	$this->_testRemovePermission(0, null);
    }

    function testRemoveAllUsersAndGroupsPermission() {
	$this->_testRemovePermission(0, 0);
    }

     function testRemovePermissionWithNewBits() {
	$this->_testRemovePermission(0, 0, 'newBits');
    }

    function testRemoveUserPermissionWithNewBits() {
	global $gallery;

	list ($ret, $anonymousUserId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.anonymousUser');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$this->_testRemovePermission($anonymousUserId, null, 'newBits');
    }

    function _testRemovePermission($userId, $groupId, $format=null) {
	global $gallery;

	if (isset($format) && $format == 'newBits') {
	    $permissions = array();
	    $permissions2 = array('core.viewSource');
	} else {
	    $permissions  = array('core.view', 'core.viewResizes', 'core.viewSource');
	    $permissions2 = array('core.view', 'core.viewResizes');
	}
	
	list ($ret, $bits) = GalleryCoreApi::convertPermissionIdsToBits($permissions);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $bits2) = GalleryCoreApi::convertPermissionIdsToBits($permissions2);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
		
	$event = GalleryCoreApi::newEvent('Gallery::RemovePermission');
	$event->setData(array('userId' => $userId,
			      'groupId' => $groupId,
			      'itemIdsAndBits' => array($this->_item[0]->getId() => $bits,
							$this->_item[1]->getId() => $bits2),
			      'format' => $format));

	$buf = array();
	$platform = new FastDownloadTestRemovePermissionPlatform($buf);
	$gallery->setPlatform($platform);
	
	list ($ret, $response) = GalleryItemHelper_medium::handleEvent($event);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(5, count($buf['unlink']), '5 files should be deleted');

	for ($i = 0; $i < 2; $i++) {
	    for ($j = 0; $j < 2; $j++) {
		$expected[] = GalleryDataCache::getCachePath(
		    array('type' => 'fast-download',
			  'itemId' => $this->_derivatives[$j][$i]->getId()));
	    }
	}
	$expected[] = GalleryDataCache::getCachePath(
	    array('type' => 'fast-download', 'itemId' => $this->_derivatives[0][2]->getId()));

	$this->assertEquals($expected, $buf['unlink'], 'wrongfully deleted files');
    }
}

/**
 * Fake platform that simulates writing to a file and captures the output
 */
class FastDownloadTestCreateFastDownloadPlatform {
    var $_stat;

    function FastDownloadTestCreateFastDownloadPlatform(&$buf) {
	$this->_buf =& $buf;
    }
    
    function setStat($index, $value) {
	$this->_stat[$index] = $value;
    }

    function stat($file) {
	return $this->_stat;
    }

    function atomicWrite($file, $data) {
	$this->_buf .= $data;
    }

    function file_exists($path) {
	/* locking code calls this */
	return file_exists($path);
    }

    function fopen($file, $mode) {
	return "$file-$mode";
    }

    function fclose() {
    }

    function flock($handle, $operation, &$wouldblock) {
	$wouldblock = false;
	return true;
    }
}

/**
 * Test platform to verify that we're deleting cache files
 */
class FastDownloadTestRemovePermissionPlatform {
    var $_stat;

    function FastDownloadTestRemovePermissionPlatform(&$buf) {
	$this->_buf =& $buf;
	$this->_buf['unlink'] = array();
	$this->_buf['file_exists'] = array();
    }

    function file_exists($path) {
	$this->_buf['file_exists'][] = $path;
	return true;
    }

    function unlink($path) {
	$this->_buf['unlink'][] = $path;
	return true;
    }
}
?>
