<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Mime type functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryMimeTypeMap.class');

class MimeTest extends GalleryTestCase {

    function MimeTest($methodName) {
        $this->GalleryTestCase($methodName);
    }

    function setUp() {
        parent::setUp();
        $mimeTypeMap = array('extension' => 'xxx', 'mimeType' => 'test/test',
            'viewable' => 0);
        $ret = GalleryMimeTypeMap::addMapEntry($mimeTypeMap);
        if ($ret->isError()) {
            print $ret->getAsHtml();
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $mimeTypeMap = array('extension' => 'yyy', 'mimeType' => 'test/test',
            'viewable' => 0);
        $ret = GalleryMimeTypeMap::addMapEntry($mimeTypeMap);
        if ($ret->isError()) {
            print $ret->getAsHtml();
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
    }

    function tearDown() {
        $ret = GalleryMimeTypeMap::removeMapEntry(array('mimeType' => 'test/test'));
        if ($ret->isError()) {
            print $ret->getAsHtml();
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        parent::tearDown();
    }

    function testGetMimeType() {
        list ($ret, $mimeType) = GalleryCoreApi::getMimeType('file.xxx');
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $this->assertEquals('test/test', $mimeType);
    }

    function testConvertExtensionToMime() {
        list ($ret, $mimeType) = GalleryCoreApi::convertExtensionToMime('xxx');
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $this->assertEquals('test/test', $mimeType);
        list ($ret, $mimeType) = GalleryCoreApi::convertExtensionToMime('XXX');
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $this->assertEquals('test/test', $mimeType);
    }

    function testConvertMimeToExtensions() {
        list ($ret, $exts) = GalleryCoreApi::convertMimeToExtensions('test/test');
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
	sort($exts);
        $this->assertEquals(array('xxx', 'yyy'), $exts);
    }

    function testIsViewableMimeType() {
        list ($ret, $isViewable) = GalleryCoreApi::isViewableMimeType('image/jpeg');
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $this->assert($isViewable, 'jpeg');

        list ($ret, $isViewable) = GalleryCoreApi::isViewableMimeType('test/test');
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $this->assert(!$isViewable, 'test');
    }

    function testAddMimeType() {
	$ret = GalleryCoreApi::addMimeType('xxx', 'test/test', 1);
	$this->assert($ret->isError() && $ret->getErrorCode() & ERROR_COLLISION);

	$ret = GalleryCoreApi::addMimeType('zzz', 'test/test', 1);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

	list ($ret, $mime) = GalleryCoreApi::convertExtensionToMime('zzz');
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

	$this->assertEquals('test/test', $mime);
    }
}
?>
