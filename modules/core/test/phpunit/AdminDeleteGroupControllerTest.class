<?php
/*
 * $RCSfile: AdminDeleteGroupControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.18 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * AdminDeleteGroup controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class AdminDeleteGroupControllerTest extends GalleryControllerTestCase {

    function AdminDeleteGroupControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.AdminDeleteGroup');
    }

    function testCancel() {
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminGroups'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    /**
     * Create and delete a group
     */
    function testDeleteGroup() {

	/* Create a group that we can delete */
	list ($ret, $group) = $this->_createGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$groupId = $group->getId();

	/* Assign a permission using this group */
	list ($ret, $album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($album);
	$ret = GalleryCoreApi::addGroupPermission($album->getId(), $groupId, 'core.view');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('groupId', $groupId);
	GalleryUtilities::putRequestVariable('form[action][delete]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminGroups'),
				  'status' => array('deletedGroup' => $group->getGroupName()),
				  'error' => array()),
			    $results,
			    'Failed to delete group');

	/* Verify the group is gone */
	list ($ret, $group) = $group->refresh();
	if ($ret->isError() && $ret->getErrorCode() & ERROR_MISSING_OBJECT) {
	    // This is correct -- we expect it to be gone
	} else {
	    $this->assert(false, 'The group was not actually deleted');

	    /* Clean up */
	    $this->_deleteGroup($group);
	}

	/* Verify the permissions are cleaned up */
	list ($ret, $perms) = GalleryCoreApi::fetchAllPermissionsForItem($album->getId(), true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	foreach ($perms as $perm) {
	    if ($perm['groupId'] == $groupId) {
		$this->assert(false, 'Album still has permission for deleted group');
	    }
	}
    }

    /**
     * Try to delete the all users group (this will fail but with no error message since the
     * view should never allow this)
     */
    function testDeleteAllUsersGroup() {
	global $gallery;

	list ($ret, $groupId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.allUserGroup');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('groupId', $groupId);
	GalleryUtilities::putRequestVariable('form[action][delete]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminDeleteGroup'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    /**
     * Try to delete the everybody group (this will fail but with no error message since the
     * view should never allow this)
     */
    function testDeleteEverybodyGroup() {
	global $gallery;

	list ($ret, $groupId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.everybodyGroup');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('groupId', $groupId);
	GalleryUtilities::putRequestVariable('form[action][delete]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminDeleteGroup'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    /**
     * Try to delete the site admin group (this will fail but with no error message since the
     * view should never allow this)
     */
    function testDeleteSiteAdminsGroup() {
	global $gallery;

	list ($ret, $groupId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.adminGroup');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('groupId', $groupId);
	GalleryUtilities::putRequestVariable('form[action][delete]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminDeleteGroup'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function _createGroup() {
	global $gallery;

	list ($ret, $group) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryGroup');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!isset($group)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__),
			 null);
	}

	$ret = $group->create('testgroup-'.rand());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$ret = $group->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $group);
    }

    function _deleteGroup($group) {
	global $gallery;
	$ret = GalleryCoreApi::deleteEntityById($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
}
?>
