<?php
/*
 * $RCSfile: ItemPermissionsControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.11 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemPermissions controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemPermissionsControllerTest extends GalleryControllerTestCase {

    function ItemPermissionsControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.ItemPermissions');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_albumParent) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_albumParent);

	list ($ret, $this->_albumChild) = $this->_createRandomAlbum($this->_albumParent->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_group);

	list ($ret, $this->_user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_user);
    }

    function testChangeOwner() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][changeOwner]', 1);
	GalleryUtilities::putRequestVariable('form[owner][ownerName]', $this->_user->getUserName());
	GalleryUtilities::putRequestVariable(
	    'form[serialNumber]', $this->_albumParent->getSerialNumber());

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemPermissions',
						      'itemId' => $this->_albumParent->getId()),
				  'status' => array('changedOwner' => 1),
				  'error' => array()),
			    $results);

	GalleryDataCache::reset();

	list ($ret, $this->_albumParent) = $this->_albumParent->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($this->_user->getId(), $this->_albumParent->getOwnerId());
    }

    function testChangeOwnerCascade() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][changeOwner]', 'on');
	GalleryUtilities::putRequestVariable('form[owner][ownerName]', $this->_user->getUserName());
	GalleryUtilities::putRequestVariable('form[applyOwnerToSubItems]', 1);
	GalleryUtilities::putRequestVariable(
	    'form[serialNumber]', $this->_albumParent->getSerialNumber());

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemPermissions',
						      'itemId' => $this->_albumParent->getId()),
				  'status' => array('changedOwner' => 1),
				  'error' => array()),
			    $results);

	GalleryDataCache::reset();

	list ($ret, $this->_albumParent) = $this->_albumParent->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($this->_user->getId(), $this->_albumParent->getOwnerId());
	list ($ret, $this->_albumChild) = $this->_albumChild->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($this->_user->getId(), $this->_albumChild->getOwnerId());
    }

    function testChangeOwnerMissingUser() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][changeOwner]', 1);

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemPermissions'),
				  'status' => array(),
				  'error' => array('form[error][owner][missingUser]')),
			    $results);
    }

    function testChangeOwnerInvalidUser() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][changeOwner]', 1);
	GalleryUtilities::putRequestVariable('form[owner][ownerName]',
					     'bogus-user-' . rand(1,5000));

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemPermissions'),
				  'status' => array(),
				  'error' => array('form[error][owner][invalidUser]')),
			    $results);
    }

    function testAddGroupPermission() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][addGroupPermission]', 1);
	GalleryUtilities::putRequestVariable('form[group][permission]', 'core.edit');
	GalleryUtilities::putRequestVariable(
	    'form[group][groupName]', $this->_group->getGroupName());

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ItemAdmin',
				      'subView' => 'core.ItemPermissions',
				      'itemId' => $this->_albumParent->getId(),
				      'form[group][groupName]' => $this->_group->getGroupName()),
		  'status' => array('addedGroupPermission' => 1),
		  'error' => array()),
		  $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	$count = 0;
	list ($ret, $permissions) =
	    GalleryCoreApi::fetchAllPermissionsForItem($this->_albumParent->getId(), false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	foreach ($permissions as $permission) {
	    if ($permission['groupId'] == $this->_group->getId()) {
		$this->assertEquals(array('userId' => 0,
					  'groupId' => $this->_group->getId(),
					  'permission' => 'core.edit'),
				    $permission);
		$count++;
	    }
	}
	$this->assertEquals(1, $count);
    }

    function testAddGroupPermissionCascade() {
	global $gallery;
	/*
	 * Create a 3rd album with a different permission on it so that we can
	 * test cascading in a heterogeneous environment.
	 */
	list ($ret, $differentPermissionChildAlbum) =
	    $this->_createRandomAlbum($this->_albumParent->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::removeItemPermissions($differentPermissionChildAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::addUserPermission(
	    $differentPermissionChildAlbum->getId(), $gallery->getActiveUserId(),
	    'core.changePermissions', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][addGroupPermission]', 1);
	GalleryUtilities::putRequestVariable('form[group][permission]', 'core.edit');
	GalleryUtilities::putRequestVariable(
	    'form[group][groupName]', $this->_group->getGroupName());
	GalleryUtilities::putRequestVariable('form[applyToSubItems]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ItemAdmin',
				      'subView' => 'core.ItemPermissions',
				      'itemId' => $this->_albumParent->getId(),
				      'form[group][groupName]' => $this->_group->getGroupName()),
		  'status' => array('addedGroupPermission' => 1),
		  'error' => array()),
		  $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	$count = 0;
	foreach (array($this->_albumParent, $this->_albumChild, $differentPermissionChildAlbum)
		as $album) {
	    list ($ret, $permissions) =
		GalleryCoreApi::fetchAllPermissionsForItem($album->getId(), false);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    foreach ($permissions as $permission) {
		if ($permission['groupId'] == $this->_group->getId()) {
		    $this->assertEquals(array('userId' => 0,
					      'groupId' => $this->_group->getId(),
					      'permission' => 'core.edit'),
					$permission);
		    $count++;
		}
	    }
	}
	$this->assertEquals(3, $count);
    }

    function testAddGroupPermissionInvalidGroup() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][addGroupPermission]', 1);
	GalleryUtilities::putRequestVariable('form[group][permission]', 'core.edit');

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemPermissions'),
				  'status' => array(),
				  'error' => array('form[error][group][missingGroup]')),
			    $results);
    }

    function testAddGroupPermissionMissingGroup() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][addGroupPermission]', 1);
	GalleryUtilities::putRequestVariable('form[group][permission]', 'core.edit');
	GalleryUtilities::putRequestVariable('form[group][groupName]',
					     'bogus-name-' . rand(1,5000));

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemPermissions'),
				  'status' => array(),
				  'error' => array('form[error][group][invalidGroup]')),
			    $results);
    }

    function testAddGroupPermissionInvalidPermission() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][addGroupPermission]', 1);
	GalleryUtilities::putRequestVariable('form[group][permission]', 'bogus-permission');
	GalleryUtilities::putRequestVariable(
	    'form[group][groupName]', $this->_group->getGroupName());

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemPermissions'),
				  'status' => array(),
				  'error' => array('form[error][group][invalidPermission]')),
			    $results);
    }

    function testAddGroupPermissionRedundant() {
	global $gallery;

	/* Add a group permission */
	$ret = GalleryCoreApi::addGroupPermission($this->_albumParent->getId(),
							$this->_group->getId(),
							'core.edit',
							false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][addGroupPermission]', 1);
	GalleryUtilities::putRequestVariable('form[group][permission]', 'core.edit');
	GalleryUtilities::putRequestVariable('form[group][groupName]',
					     $this->_group->getGroupName());

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemPermissions'),
				  'status' => array(),
				  'error' => array('form[error][group][alreadyHadPermission]')),
			    $results);
    }

    function testDeleteGroupPermission() {

	/* Add a group permission */
	$ret = GalleryCoreApi::addGroupPermission($this->_albumParent->getId(),
							$this->_group->getId(),
							'core.edit',
							false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][deleteGroupPermission]', array(0 => 1));
	GalleryUtilities::putRequestVariable(
	    'form[group][delete][0]', $this->_group->getId() . ',core.edit');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ItemAdmin',
				      'subView' => 'core.ItemPermissions',
				      'itemId' => $this->_albumParent->getId(),
				      'form[group][permission]' => 'core.edit',
				      'form[group][groupName]' => $this->_group->getGroupName()),
		  'status' => array('deletedGroupPermission' => 1),
		  'error' => array()),
	    $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	list ($ret, $permissions) =
	    GalleryCoreApi::fetchAllPermissionsForItem($this->_albumParent->getId(), false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	foreach ($permissions as $permission) {
	    if ($permission['groupId'] == $this->_group->getId()) {
		$this->assert(false, 'invalid group permission found');
	    }
	}
    }

    function testDeleteGroupPermissionCascade() {
	/* Add a group permission */
	$ret = GalleryCoreApi::addGroupPermission(
	    $this->_albumParent->getId(), $this->_group->getId(), 'core.edit', true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][deleteGroupPermission]', array(0 => 1));
	GalleryUtilities::putRequestVariable(
	    'form[group][delete][0]', $this->_group->getId() . ',core.edit');
	GalleryUtilities::putRequestVariable('form[applyToSubItems]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ItemAdmin',
				      'subView' => 'core.ItemPermissions',
				      'itemId' => $this->_albumParent->getId(),
				      'form[group][permission]' => 'core.edit',
				      'form[group][groupName]' => $this->_group->getGroupName()),
		  'status' => array('deletedGroupPermission' => 1),
		  'error' => array()),
	    $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	foreach (array($this->_albumParent, $this->_albumChild) as $album) {
	    list ($ret, $permissions) =
		GalleryCoreApi::fetchAllPermissionsForItem($album->getId(), false);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    foreach ($permissions as $permission) {
		if ($permission['groupId'] == $this->_group->getId()) {
		    $this->assert(false, 'invalid group permission found: ' .
				  serialize($permission));
		}
	    }
	}
    }

    function testAddUserPermission() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][addUserPermission]', 1);
	GalleryUtilities::putRequestVariable('form[user][permission]', 'core.edit');
	GalleryUtilities::putRequestVariable('form[user][userName]', $this->_user->getUserName());

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ItemAdmin',
				      'subView' => 'core.ItemPermissions',
				      'itemId' => $this->_albumParent->getId(),
				      'form[user][userName]' => $this->_user->getUserName()),
		  'status' => array('addedUserPermission' => 1),
		  'error' => array()),
	    $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	$count = 0;
	list ($ret, $permissions) =
	    GalleryCoreApi::fetchAllPermissionsForItem($this->_albumParent->getId(), false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	foreach ($permissions as $permission) {
	    if ($permission['userId'] == $this->_user->getId()) {
		$this->assertEquals(array('userId' => $this->_user->getId(),
					  'groupId' => 0,
					  'permission' => 'core.edit'),
				    $permission);
		$count++;
	    }
	}
	$this->assertEquals(1, $count);
    }

    function testAddUserPermissionCascade() {
	global $gallery;
	/*
	 * Create a 3rd album with a different permission on it so that we can
	 * test cascading in a heterogeneous environment.
	 */
	list ($ret, $differentPermissionChildAlbum) =
	    $this->_createRandomAlbum($this->_albumParent->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::removeItemPermissions($differentPermissionChildAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::addUserPermission(
	    $differentPermissionChildAlbum->getId(), $gallery->getActiveUserId(),
	    'core.changePermissions', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][addUserPermission]', 1);
	GalleryUtilities::putRequestVariable('form[user][permission]', 'core.edit');
	GalleryUtilities::putRequestVariable('form[user][userName]', $this->_user->getUserName());
	GalleryUtilities::putRequestVariable('form[applyToSubItems]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ItemAdmin',
				      'subView' => 'core.ItemPermissions',
				      'itemId' => $this->_albumParent->getId(),
				      'form[user][userName]' => $this->_user->getUserName()),
		  'status' => array('addedUserPermission' => 1),
		  'error' => array()),
	    $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	$count = 0;
	foreach (array($this->_albumParent, $this->_albumChild, $differentPermissionChildAlbum)
		as $album) {
	    list ($ret, $permissions) =
		GalleryCoreApi::fetchAllPermissionsForItem($album->getId(), false);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    foreach ($permissions as $permission) {
		if ($permission['userId'] == $this->_user->getId()) {
		    $this->assertEquals(array('userId' => $this->_user->getId(),
					      'groupId' => 0,
					      'permission' => 'core.edit'),
					$permission);
		    $count++;
		}
	    }
	}
	$this->assertEquals(3, $count);
    }

    function testAddUserPermissionInvalidUser() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][addUserPermission]', 1);
	GalleryUtilities::putRequestVariable('form[user][permission]', 'core.edit');

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemPermissions'),
				  'status' => array(),
				  'error' => array('form[error][user][missingUser]')),
			    $results);
    }

    function testAddUserPermissionMissingUser() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][addUserPermission]', 1);
	GalleryUtilities::putRequestVariable('form[user][permission]', 'core.edit');
	GalleryUtilities::putRequestVariable('form[user][userName]', 'bogus-name-' . rand(1,5000));

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemPermissions'),
				  'status' => array(),
				  'error' => array('form[error][user][invalidUser]')),
			    $results);
    }

    function testAddUserPermissionInvalidPermission() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][addUserPermission]', 1);
	GalleryUtilities::putRequestVariable('form[user][permission]', 'bogus-permission');
	GalleryUtilities::putRequestVariable('form[user][userName]', $this->_user->getUserName());

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemPermissions'),
				  'status' => array(),
				  'error' => array('form[error][user][invalidPermission]')),
			    $results);
    }

    function testAddUserPermissionRedundant() {
	global $gallery;

	/* Add a user permission */
	$ret = GalleryCoreApi::addUserPermission($this->_albumParent->getId(),
							$this->_user->getId(),
							'core.edit',
							false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][addUserPermission]', 1);
	GalleryUtilities::putRequestVariable('form[user][permission]', 'core.edit');
	GalleryUtilities::putRequestVariable('form[user][userName]', $this->_user->getUserName());

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemPermissions'),
				  'status' => array(),
				  'error' => array('form[error][user][alreadyHadPermission]')),
			    $results);
    }

    function testDeleteUserPermission() {

	/* Add a user permission */
	$ret = GalleryCoreApi::addUserPermission($this->_albumParent->getId(),
							$this->_user->getId(),
							'core.edit',
							false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][deleteUserPermission]', array(0 => 1));
	GalleryUtilities::putRequestVariable(
	    'form[user][delete][0]', $this->_user->getId() . ',core.edit');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ItemAdmin',
				      'subView' => 'core.ItemPermissions',
				      'itemId' => $this->_albumParent->getId(),
				      'form[user][permission]' => 'core.edit',
				      'form[user][userName]' => $this->_user->getUserName()),
		  'status' => array('deletedUserPermission' => 1),
		  'error' => array()),
	    $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	list ($ret, $permissions) =
	    GalleryCoreApi::fetchAllPermissionsForItem($this->_albumParent->getId(), false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	foreach ($permissions as $permission) {
	    if ($permission['userId'] == $this->_user->getId()) {
		$this->assert(false, 'invalid user permission found');
	    }
	}
    }

    function testDeleteUserPermissionCascade() {
	/* Add a user permission */
	$ret = GalleryCoreApi::addUserPermission($this->_albumParent->getId(),
							$this->_user->getId(),
							'core.edit',
							true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][deleteUserPermission]', array(0 => 1));
	GalleryUtilities::putRequestVariable(
	    'form[user][delete][0]', $this->_user->getId() . ',core.edit');
	GalleryUtilities::putRequestVariable('form[applyToSubItems]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ItemAdmin',
				      'subView' => 'core.ItemPermissions',
				      'itemId' => $this->_albumParent->getId(),
				      'form[user][permission]' => 'core.edit',
				      'form[user][userName]' => $this->_user->getUserName()),
		  'status' => array('deletedUserPermission' => 1),
		  'error' => array()),
	    $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	foreach (array($this->_albumParent, $this->_albumChild) as $album) {
	    list ($ret, $permissions) =
		GalleryCoreApi::fetchAllPermissionsForItem($album->getId(), false);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    foreach ($permissions as $permission) {
		if ($permission['userId'] == $this->_user->getId()) {
		    $this->assert(false,
				  'invalid user permission found: ' . serialize($permission));
		}
	    }
	}
    }

    function testUnauthorizedPermissionChange() {
	global $gallery;
	$gallery->setActiveUser($this->_user);

	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][addUserPermission]', 1);
	GalleryUtilities::putRequestVariable('form[user][permission]', 'core.edit');
	GalleryUtilities::putRequestVariable('form[user][userName]', $this->_user->getUserName());

	/* Perform the request and verify that we failed */
	$this->handleRequest(ERROR_PERMISSION_DENIED);
    }

    function testUnauthorizedOwnerChange() {
	global $gallery;
	$gallery->setActiveUser($this->_user);

	$ret = GalleryCoreApi::addUserPermission(
	    $this->_albumParent->getId(), $this->_user->getId(), 'core.all', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][changeOwner]', 1);
	GalleryUtilities::putRequestVariable('form[owner][ownerName]', $this->_user->getUserName());

	/* Perform the request and verify that we got pwn3d */
	$this->handleRequest(ERROR_PERMISSION_DENIED);
    }

    function testRemoveEditPermissionFromSelf() {
	/* Verify that we can't remove our own ability to change permissions */
	global $gallery;
	$gallery->setActiveUser($this->_user);

	$ret = GalleryCoreApi::addUserPermission(
	    $this->_albumParent->getId(), $this->_user->getId(), 'core.all', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][deleteUserPermission]', array(0 => 1));
	GalleryUtilities::putRequestVariable(
	    'form[user][delete][0]', $this->_user->getId() . ',core.all');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ItemAdmin',
				      'subView' => 'core.ItemPermissions',
				      'itemId' => $this->_albumParent->getId(),
				      'form[user][permission]' => 'core.all',
				      'form[user][userName]' => $this->_user->getUserName()),
		  'status' => array('deletedUserPermission' => 1, 'addedBackSelfPermission' => 1),
		  'error' => array()),
	    $results);

	list ($ret, $canEdit) = GalleryCoreApi::hasItemPermission($this->_albumParent->getId(),
								  'core.edit');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($canEdit, 'user should have core.edit permission');
	list ($ret, $canChange) = GalleryCoreApi::hasItemPermission($this->_albumParent->getId(),
								    'core.changePermissions');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($canChange, 'user should have core.changePermissios permission');
    }

    function testRemoveSelfEditPermissionViaGroup() {
	/* Verify we get user-assigned edit permissions if we remove our access via group perm */
	global $gallery;
	$gallery->setActiveUser($this->_user);

	$ret = GalleryCoreApi::addUserToGroup($this->_user->getId(), $this->_group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addGroupPermission(
	    $this->_albumParent->getId(), $this->_group->getId(), 'core.all', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form[action][deleteGroupPermission]', array(0 => 1));
	GalleryUtilities::putRequestVariable(
	    'form[group][delete][0]', $this->_group->getId() . ',core.all');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ItemAdmin',
				      'subView' => 'core.ItemPermissions',
				      'itemId' => $this->_albumParent->getId(),
				      'form[group][permission]' => 'core.all',
				      'form[group][groupName]' => $this->_group->getGroupName()),
		  'status' => array('deletedGroupPermission' => 1, 'addedBackSelfPermission' => 1),
		  'error' => array()),
	    $results);

	list ($ret, $permissions) =
	    GalleryCoreApi::fetchAllPermissionsForItem($this->_albumParent->getId(), true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$foundEdit = $foundChange = false;
	foreach ($permissions as $permission) {
	    if ($permission['userId'] == $this->_user->getId() &&
		    $permission['permission'] == 'core.edit') {
		$foundEdit = true;
	    } else if ($permission['userId'] == $this->_user->getId() &&
		    $permission['permission'] == 'core.changePermissions') {
		$foundChange = true;
	    }
	}
	$this->assert($foundEdit, 'user should have core.edit permission');
	$this->assert($foundChange, 'user should have core.changePermissions permission');
    }
}
?>
