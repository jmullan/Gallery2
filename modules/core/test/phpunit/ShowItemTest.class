<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test ShowItem view
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision$
 */
class ShowItemTest extends GalleryTestCase {

    function ShowItemTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_album);

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	list ($ret, $this->_view) = GalleryView::loadView('core.ShowItem');
	if ($ret) {
	    return $ret;
	}

	GalleryCoreApi::requireOnce('modules/core/classes/GalleryTemplate.class');
	$this->_template =
	    new GalleryTemplate(dirname(dirname(dirname(dirname(dirname(__FILE__))))));
    }

    function _testViewCount($itemId) {
	list ($ret, $count) = GalleryCoreApi::fetchItemViewCount($itemId);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(0, $count, 'count before');

	GalleryUtilities::putRequestVariable('itemId', $itemId);
	list ($ret, $result, $theme) = $this->_view->doLoadTemplate($this->_template);
	if ($ret) {
	    return $ret;
	}

	$match = 'themes/' . $theme->getId() . '/templates';
	$this->assertEquals(substr($result['body'], 0, strlen($match)), $match,
			    'template should be inside a theme');

	list ($ret, $count) = GalleryCoreApi::fetchItemViewCount($itemId);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(1, $count, 'count after');
    }

    function testViewCountAlbum() {
	$this->_testViewCount($this->_album->getId());
    }

    function testViewCountItem() {
	/*
	 * If we change view-count back to counting data items on core.DownloadItem
	 * instead of ShowItem then this test will need to be updated.
	 */
	$this->_testViewCount($this->_item->getId());
    }

    function testGuestNoPermission() {
	/* Verify guest is redirected to login page if no core.view permission */
	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret) {
	    return $ret;
	}
	$this->_becomeGuestUser();

	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	list ($ret, $result, $theme) = $this->_view->doLoadTemplate($this->_template);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(
	    array('redirect' => array('view' => 'core.UserAdmin', 'subView' => 'core.UserLogin',
				      'return' => true)), $result);
    }

    function testAlternateGuestNoPermission() {
	global $gallery;
	$gallery->setConfig('anonymousUserId', $gallery->getActiveUserId());

	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	list ($ret, $result, $theme) = $this->_view->doLoadTemplate($this->_template);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(
	    array('redirect' => array('view' => 'core.UserAdmin', 'subView' => 'core.UserLogin',
				      'return' => true)), $result);
    }

    function testUserNoPermission() {
	/* Verify registered user is redirected to root album if no core.view permission */
	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	list ($ret, $result, $theme) = $this->_view->doLoadTemplate($this->_template);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ShowItem', 'itemId' => $this->_getRootId())),
	    $result);
    }

    function testNoPermissionAlternateRoot() {
	global $gallery;
	$gallery->setConfig('defaultAlbumId', 123);

	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	list ($ret, $result, $theme) = $this->_view->doLoadTemplate($this->_template);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ShowItem', 'itemId' => 123)),
	    $result);
    }

    function testUserNoRootPermission() {
	global $gallery;
	$gallery->setConfig('defaultAlbumId', $this->_item->getId());

	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	list ($ret, $result, $theme) = $this->_view->doLoadTemplate($this->_template);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(
	    array('redirect' => array('view' => 'core.UserAdmin', 'subView' => 'core.UserLogin',
				      'return' => true)), $result);
    }

    function testAlbumSourcePermission() {
	/* Verify viewing album contents requires ?? permission */
	/*
	 * We briefly put code in place to require core.viewSource to view album contents..
	 * This allows setting permissions such that guests can see an album thumbnail but
	 * must login to view the album itself.  However, albums with core.viewSource would
	 * then pass on that permission to newly added items and many people only allow
	 * resizes to be viewed.. so we rolled back this code in ShowItem.inc rev 1.70.
	 * TODO: update this unit test when this functionality is restored, perhaps with
	 * a new core.viewAlbum permission?
	 */
	global $gallery;
	$ret = GalleryCoreApi::removeItemPermissions($this->_album->getId());
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_album->getId(), $gallery->getActiveUserId(), 'core.view', false);
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	list ($ret, $result, $theme) = $this->_view->doLoadTemplate($this->_template);
	if ($ret) {
	    return $ret;
	}

	/* Desired result:
	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ShowItem', 'itemId' => $this->_getRootId())),
	    $result);
	*/
	/* Current result: */
	$this->assert(isset($result['body']));
    }

    function testItemSourcePermission() {
	/* Verify data item does not require core.viewSource permission */
	global $gallery;
	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_item->getId(), $gallery->getActiveUserId(), 'core.view', false);
	if ($ret) {
	    return $ret;
	}

	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	list ($ret, $result, $theme) = $this->_view->doLoadTemplate($this->_template);
	if ($ret) {
	    return $ret;
	}

	$match = 'themes/' . $theme->getId() . '/templates';
	$this->assertEquals(substr($result['body'], 0, strlen($match)), $match,
			    'template should be inside a theme');
    }
    
    function testUseAlbumThemeForDefaultAlbum() {
	global $gallery;
	
	list ($ret, $album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($album);
	
	$gallery->setConfig('defaultAlbumId', $album->getId());
	GalleryUtilities::removeRequestVariable('itemId');
	
	/* Assign our test theme */
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($album->getId());
	if ($ret) {
	    return $ret;
	}

	/* Use a dummy theme. */
	$album->setTheme('showItemTest');
	$ret = $album->save();
	if ($ret) {
	    return $ret;
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $ret;
	}
	
	/* Execute the test. */
	list ($ret, $view) = GalleryView::loadView('core.ShowItem');
	if ($ret) {
	    return $ret;
	}
	list ($ret, $theme, $params, $item) = $view->loadThemeAndParameters();
	if ($ret) {
	    return $ret;
	}

	/* Verify */
	$this->assertEquals($album->getId(), $item->getId(), 'itemId');
	$this->assertEquals('showItemTest', $theme->getId(), 'theme');
    }
}

GalleryCoreApi::requireOnce('modules/core/classes/GalleryTheme.class');

/**
 * Test theme
 */
class ShowItemTestTheme extends GalleryTheme {
    function ShowItemTestTheme() {
	$this->setId('showItemTest');
    }
    
    function isActive() {
	return array(null, true);
    }
}
?>
