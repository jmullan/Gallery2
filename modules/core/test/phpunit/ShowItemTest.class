<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Test ShowItem view
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ShowItemTest extends GalleryTestCase {

    function ShowItemTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_album->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_view) = GalleryView::loadView('core:ShowItem');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryTemplate.class');
	$this->_template =
	    new GalleryTemplate(dirname(dirname(dirname(dirname(dirname(__FILE__))))));
    }

    function _testViewCount($itemId) {
	list ($ret, $count) = GalleryCoreApi::fetchItemViewCount($itemId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(0, $count, 'count before');

	GalleryUtilities::putRequestVariable('itemId', $itemId);
	list ($ret, $result) = $this->_view->doLoadTemplate($this->_template);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('body' => 'modules/core/templates/ShowItem.tpl'), $result);

	list ($ret, $count) = GalleryCoreApi::fetchItemViewCount($itemId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, $count, 'count after');
    }

    function testViewCountAlbum() {
	$this->_testViewCount($this->_album->getId());
    }

    function testViewCountItem() {
	/*
	 * If we change view-count back to counting data items on core:DownloadItem
	 * instead of ShowItem then this test will need to be updated.
	 */
	$this->_testViewCount($this->_item->getId());
    }
}
?>
