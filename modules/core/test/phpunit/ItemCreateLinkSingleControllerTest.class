<?php
/*
 * $RCSfile: ItemCreateLinkSingleControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.8 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemCreateLinkSingle controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemCreateLinkSingleControllerTest extends GalleryControllerTestCase {

    function ItemCreateLinkSingleControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.ItemCreateLinkSingle');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_rootAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_rootAlbum);

	list ($ret, $this->_destinationAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_destinationAlbum);

	/* Create a data item */
	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_rootAlbum->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Test linking an album
     */
    function testLinkItem() {
	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[action][link]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_destinationAlbum->getId());

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemCreateLinkSingle',
						      'itemId' => $this->_item->getId()),
				  'status' => array('linked' => 1),
				  'error' => array()),
			    $results);
    }

    /**
     * Test linking an album (shouldn't succeeed)
     */
    function testLinkAlbum() {
	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_rootAlbum->getId());
	GalleryUtilities::putRequestVariable('form[action][link]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_destinationAlbum->getId());

	$results = $this->handleRequest(ERROR_PERMISSION_DENIED);
    }

    /**
     * Test linking an item with no read perms
     */
    function testLinkItemWithNoViewPermissions() {
	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[action][link]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_destinationAlbum->getId());

	$results = $this->handleRequest(ERROR_PERMISSION_DENIED);
    }

    /**
     * Test moving an item to a bogus destination
     */
    function testLinkItemIntoEmptyDestination() {
	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[action][link]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemCreateLinkSingle'),
				  'status' => array(),
				  'error' => array('form[error][destination][empty]')),
			    $results);
    }

    /**
     * Test linking an item into a container where we have no add permissions
     */
    function testLinkItemIntoAlbumWithNoPermissions() {
	global $gallery;
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[action][link]', 1);
	GalleryUtilities::putRequestVariable('form[destination]', $this->_destinationAlbum->getId());

	$ret = GalleryCoreApi::removeItemPermissions($this->_destinationAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	// The UI never displays targets that we can't add to
	$results = $this->handleRequest(ERROR_PERMISSION_DENIED);
    }
}
?>
