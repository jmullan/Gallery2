<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryTheme.class');

/**
 * Test GalleryTheme functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ThemeTest extends GalleryTestCase {

    function ThemeTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();
	$this->_theme = new GalleryTheme();
    }

    function testPackSettingBlockList1() {
	$this->assertEquals(
	    array(true, serialize(array(array('module.BlockName', array('param1' => 'value1'))))),
	    $this->_theme->packSetting('block-list', '[module.BlockName param1=value1]'));
    }

    function testPackSettingBlockList2() {
	$this->assertEquals(
	    array(true,
		  serialize(
		      array(
			  array('module.BlockName',
				array('param1' => 'value1')),
			  array('module2.Block2',
				array()),
			  array('module.BlockName',
				array('param1' => 'value1',
				      'param2' => 'value2'))))),
	    $this->_theme->packSetting('block-list',
				'[module.BlockName param1=value1] ' .
				'[module2.Block2] ' .
				'[module.BlockName param1=value1 param2=value2]'));
    }

    function testPackSettingBlockListTrueFalse() {
	$this->assertEquals(
	    array(true,
		  serialize(
		      array(
			  array('module.BlockName',
				array('param1' => false,
				      'param2' => true))))),
	    $this->_theme->packSetting('block-list',
				       '[module.BlockName param1=false param2=true]'));
    }

    function testPackSettingBlockListWhitespace1() {
	$this->assertEquals(
	    array(true, serialize(array(array('a.B', array('x' => 'y')), array('b.c', array())))),
	    $this->_theme->packSetting('block-list', '[a.B x=y][b.c]'));
    }

    function testPackSettingBlockListWhitespace2() {
	$this->assertEquals(
	    array(true, serialize(array(array('a.B', array('x' => 'y')), array('b.c', array())))),
	    $this->_theme->packSetting('block-list', "[a.B\n\r\tx=y]\n\n\t\n[b.c]"));
    }

    function testPackSettingBlockListEmpty() {
	$this->assertEquals(array(true, serialize(array())),
			    $this->_theme->packSetting('block-list', ''));
    }

    function testPackSettingBlockListMissingBlockName() {
	$this->assertEquals(array(false, serialize(array())),
			    $this->_theme->packSetting('block-list', '[foo]'));
    }

    function testPackSettingBlockListMissingRightBracket() {
	$this->assertEquals(array(false, serialize(array())),
			    $this->_theme->packSetting('block-list', '[foo.Bar'));
    }

    function testPackSettingBlockListMissingRightBracket2() {
	$this->assertEquals(
	    array(false, serialize(array())),
	    $this->_theme->packSetting('block-list', '[foo.Bar a=b [foo.Baz b=c]'));
    }

    function testPackSettingBlockListMissingLeftBracket() {
	$this->assertEquals(
	    array(false, serialize(array())),
	    $this->_theme->packSetting('block-list', 'foo.Bar]'));
    }

    function testPackSettingBlockListMissingBothBrackets() {
	$this->assertEquals(array(false, serialize(array())),
			    $this->_theme->packSetting('block-list', 'foo.Bar'));
    }

    function testPackSettingBlockListVeryLongList() {
	$count = 100;
	$value = str_repeat('[a.b c=d]', $count);
	for ($i = 0; $i < $count; $i++) {
	    $expected[] = array('a.b', array('c' => 'd'));
	}
	$this->assertEquals(array(true, serialize($expected)),
			    $this->_theme->packSetting('block-list', $value));
    }

    function testUnpackSettingBlockList1() {
	$this->assertEquals(
	    array(true, '[a.B foo=bar]'),
	    $this->_theme->unpackSetting('block-list',
					 serialize(array(array('a.B', array('foo' => 'bar'))))));
    }

    function testUnpackSettingBlockList2() {
	$this->assertEquals(
	    array(true, '[a.B foo=bar] [c.D]'),
	    $this->_theme->unpackSetting('block-list',
					 serialize(array(array('a.B', array('foo' => 'bar')),
							 array('c.D')))));
    }

    function testUnpackSettingBlockListTrueFalse() {
	$this->assertEquals(
	    array(true, '[a.B foo=true bar=false]'),
	    $this->_theme->unpackSetting(
		'block-list',
		serialize(array(array('a.B', array('foo' => true, 'bar' => false))))));
    }

    function testUnpackSettingBlockListEmpty() {
	$this->assertEquals(array(true, ''),
			    $this->_theme->unpackSetting('block-list', serialize(array())));
    }

    function testUnpackSettingBlockListMalformed1() {
	$this->assertEquals(array(false, ''),
			    $this->_theme->unpackSetting('block-list', serialize(array('x'))));
    }

    function testUnpackSettingBlockListMalformed2() {
	$this->assertEquals(
	    array(false, ''),
	    $this->_theme->unpackSetting('block-list', serialize(array('x' => 'y'))));
    }
}

// Old LayoutTest
// class LayoutTest extends GalleryTestCase {
//     var $_unregistered;

//     function setUp() {
// 	global $gallery;

// 	parent::setUp();

// 	list ($ret, $this->_layout) = GalleryCoreApi::loadPlugin('layout', 'layouttest');
// 	if ($ret->isError()) {
// 	    print $ret->getAsHtml();
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}

// 	list ($ret, $this->_view) = GalleryView::loadView('core.ShowItem');
// 	if ($ret->isError()) {
// 	    print $ret->getAsHtml();
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}

// 	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId(),
// 	    array('layout' => 'layouttest'));
// 	if ($ret->isError()) {
// 	    print $ret->getAsHtml();
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}
// 	$this->_markForCleanup($this->_album);

// 	$ret = $this->_markPluginParametersForCleanup('module', 'core');
// 	if ($ret->isError()) {
// 	    print $ret->getAsHtml();
// 	    return $ret->wrap(__FILE__, __LINE__);
// 	}

// 	$gallery->_platform = new LayoutTestPlatform();
//     }

//     function tearDown() {
// 	if (isset($this->_installed)) {
// 	    $ret = GalleryCoreApi::removePlugin('layout', 'layouttest');
// 	    if ($ret->isError()) {
// 		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	    }
// 	}

// 	parent::tearDown();
//     }

//     /**
//      * Ensure core.ShowItem view won't use an inactive or uninstalled layout
//      * Also tests deactivate default layout (not allowed) and uninstall removes layout
//      * from albums (reset to default layout).
//      */
//     function testShowItem() {
// 	$template = $form = array();
// 	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
// 	GalleryDataCache::reset();

// 	/* ShowItem with not yet installed layout */
// 	list ($ret, $results) = $this->_view->loadTemplate($template, $form);
// 	if ($ret->isError()) {
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}
// 	$this->assertEquals(
// 	    array('redirect' => array('view' => 'core.ShowItemError',
// 				      'problem' => 'missingLayout',
// 				      'itemId' => $this->_album->getId())),
// 	    $results, 'not installed');

// 	/* Install it */
// 	$ret = $this->_layout->installOrUpgrade();
// 	if ($ret->isError()) {
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}
// 	$this->_installed = true;
// 	GalleryDataCache::reset();

// 	/* ShowItem with inactive layout */
// 	list ($ret, $results) = $this->_view->loadTemplate($template, $form);
// 	if ($ret->isError()) {
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}
// 	$this->assertEquals(
// 	    array('redirect' => array('view' => 'core.ShowItemError',
// 				      'problem' => 'missingLayout',
// 				      'itemId' => $this->_album->getId())),
// 	    $results, 'not activated');

// 	/* Activate the layout */
// 	list ($ret, $redirect) = $this->_layout->activate();
// 	if ($ret->isError()) {
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}
// 	$this->assertEquals(array(), $redirect, 'activate redirect');

// 	/* ShowItem with active layout */
// 	list ($ret, $results) = $this->_view->loadTemplate($template, $form);
// 	if ($ret->isError()) {
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}
// 	$this->assertEquals(array('html' => 'layouttest.tpl'), $results, 'active layout');

// 	/* Set as default layout */
// 	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'default.layout', 'layouttest');
// 	if ($ret->isError()) {
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}

// 	/* Attempt to deactivate the layout */
// 	list ($ret, $redirect) = $this->_layout->deactivate();
// 	if ($ret->isError()) {
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}
// 	$this->assertEquals(array('href' => 'upgrade/'), $redirect,
// 			    'cannot deactivate default layout');

// 	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'default.layout', 'foo');
// 	if ($ret->isError()) {
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}

// 	/* Deactivate the layout */
// 	list ($ret, $redirect) = $this->_layout->deactivate();
// 	if ($ret->isError()) {
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}
// 	$this->assertEquals(array(), $redirect, 'deactivate redirect');

// 	list ($ret, $album) = $this->_album->refresh();
// 	if ($ret->isError()) {
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}
// 	$this->assertEquals('layouttest', $album->getLayout(),
// 			    'album layout unchanged on deactivate');

// 	/* ShowItem with deactivated layout */
// 	list ($ret, $results) = $this->_view->loadTemplate($template, $form);
// 	if ($ret->isError()) {
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}
// 	$this->assertEquals(
// 	    array('redirect' => array('view' => 'core.ShowItemError',
// 				      'problem' => 'missingLayout',
// 				      'itemId' => $this->_album->getId())),
// 	    $results, 'deactivated');

// 	/* Uninstall the layout */
// 	$ret = $this->_layout->uninstall();
// 	if ($ret->isError()) {
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}

// 	list ($ret, $album) = $this->_album->refresh();
// 	if ($ret->isError()) {
// 	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
// 	}
// 	$this->assertEquals('foo', $album->getLayout(), 'album reset to default layout');
//     }
// }

// /**
//  * @package GalleryCore
//  * @subpackage PHPUnit
//  */
// class LayoutTestLayout extends GalleryLayout {
//     function LayoutTestLayout() {
// 	$this->setId('layouttest');
// 	$this->setName('Matrix');
// 	$this->setDescription('Unit test layout');
// 	$this->setVersion('0.8');
// 	$this->setL10Domain('layouts_layouttest');
// 	$this->setRequiredLayoutApi(array(1, 0));
// 	$this->setRequiredCoreApi(array(6, 0));
//     }

//     function loadTemplate(&$template, $item) {
// 	return array(GalleryStatus::success(), array('html' => 'layouttest.tpl'));
//     }
// }

// /**
//  * @package GalleryCore
//  * @subpackage PHPUnit
//  */
// class LayoutTestPlatform extends GalleryPlatform {
//     function opendir($path) {
// 	$this->_dir = 1;
// 	return 'fake';
//     }

//     function readdir($resource) {
// 	if ($this->_dir == 1) {
// 	    $this->_dir = 0;
// 	    return 'layouttest';
// 	}
// 	return null;
//     }

//     function closedir($resource) {
// 	return true;
//     }

//     function is_dir($path) {
// 	return (basename($path) == 'layouttest') || is_dir($path);
//     }

//     function file_exists($path) {
// 	return (basename($path) == 'layout.inc') || file_exists($path);
//     }
// }

?>
