<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemCreateResizes controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemCreateResizesControllerTest extends GalleryControllerTestCase {

    function ItemCreateResizesControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core:ItemCreateResizes');
    }

    function setUp() {
	global $gallery;

	parent::setUp();
	
	/* Register a mock data item type */
	GalleryCoreApi::registerFactoryImplementation('GalleryItem',
						      'ItemCreateResizesTestItem',
						      'ItemCreateResizesTestItem',
						      __FILE__,
						      array('test/*'));

	/* Register a dummy toolkit */
	GalleryCoreApi::registerFactoryImplementation('GalleryToolkit',
						      'ItemCreateResizesTestToolkit',
						      'ItemCreateResizesTestToolkit',
						      __FILE__);

	/* Register operations that we can perform on our mock data items */
	$ret = GalleryCoreApi::registerToolkitOperation('ItemCreateResizesTestToolkit',
							array('test/file'),
							'thumbnail',
							array(array('type' => 'int',
								    'description' => 'test')),
							'test-description',
							'');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::registerToolkitOperation('ItemCreateResizesTestToolkit',
							array('test/file'),
							'resize',
							array(array('type' => 'int',
								    'description' => 'test'),
							      array('type' => 'int',
								    'description' => 'test')),
							'test-description',
							'');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create a mock data item */
	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Create a new item */
	list ($ret, $this->_item) = GalleryCoreApi::newItemByMimeType('test/foo');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $this->_item->create($this->_getRootId(),
				    dirname(__FILE__) . '/../data/test1.jpg',
				    'image/jpeg');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $this->_item->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	global $gallery;

	$ret = GalleryCoreApi::deleteEntityById($this->_item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Unregister dummy toolkit */
	$ret = GalleryCoreApi::unregisterToolkit('ItemCreateResizesTestToolkit');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	parent::tearDown();
    }

    function testCreateResizes() {
	global $gallery;

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[thumbnail][size]', 400);

	for ($i = 0; $i < 3; $i++) {
	    GalleryUtilities::putRequestVariable('form[resizes][' . $i . '][active]', 1);
	    GalleryUtilities::putRequestVariable('form[resizes][' . $i . '][size]', 100 * ($i+1));
	}
	    
	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemCreateResizes',
						      'itemId' => $this->_item->getId()),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	/* Examine the thumbnail and make sure it lines up */
	list ($ret, $thumbTable) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_item->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	if (isset($thumbTable[$this->_item->getId()])) {
	    $this->assertEquals('thumbnail|400', $thumbTable[$this->_item->getId()]->getDerivativeOperations());
	}

	/* Examine the resizes and make sure they line up */
	list ($ret, $resizeTable) =
	    GalleryCoreApi::fetchResizesByItemIds(array($this->_item->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	if (!empty($resizeTable[$this->_item->getId()])) {
	    $this->assertEquals(3, sizeof($resizeTable[$this->_item->getId()]));
	    for ($i = 0; $i < 3; $i++) {
		$this->assertEquals('scale|' . 100 * ($i+1),
				    $resizeTable[$this->_item->getId()][$i]->getDerivativeOperations());
	    }
	}
    }
}

/**
 * Dummy test toolkit
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemCreateResizesTestToolkit extends GalleryToolkit {
    /**
     * @see GalleryToolkit::performOperation()
     * Dummy operation
     */
    function performOperation($mimeType, $operationName, $sourceFilename,
			      $destFilename, $parameters) {
	global $gallery;
	$platform = $gallery->getPlatform();
	$platform->copy($sourceFilename, $destFilename);
	return array(GalleryStatus::success(), $mimeType);
    }
}

/**
 * Required class
 */
require_once(dirname(__FILE__) . '/../../classes/GalleryDataItem.class');

/**
 * Dummy test toolkit
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemCreateResizesTestItem extends GalleryDataItem { }
?>
