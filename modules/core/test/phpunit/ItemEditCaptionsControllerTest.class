<?php
/*
 * $RCSfile: ItemEditCaptionsControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.7 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemEditCaptions controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemEditCaptionsControllerTest extends GalleryControllerTestCase {

    function ItemEditCaptionsControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.ItemEditCaptions');
    }

    function setUp() {
	parent::setUp();

	/* create an album to hold all of the test items */
	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);

	/* create 3 random items */
	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $this->_items[$i]) = $this->_createRandomDataItem($this->_album->getId());
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
    }

    function testSaveAndDone() {
	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('page', 2);
	foreach ($this->_items as $item) {
	    $id = $item->getId();
	    GalleryUtilities::putRequestVariable("form[items][$id][title]", "title $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][summary]", "summary $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][keywords]", "keywords $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][description]", "description $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][serialNumber]",
						 $item->getSerialNumber());
	}
	GalleryUtilities::putRequestVariable('form[action][save][done]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(
	    array('return' => 1,
		  'redirect' => array('view' => 'core.ItemAdmin',
				      'subView' => 'core.ItemEditCaptions',
				      'itemId' => $this->_album->getId(),
				      'page' => 2),
		  'status' => array('successCount' => 3,
				    'errorCount' => 0,
				    $this->_items[0]->getId() => array('saved' => 1),
				    $this->_items[1]->getId() => array('saved' => 1),
				    $this->_items[2]->getId() => array('saved' => 1)),
		  'error' => array()),
	    $results);

	/* Verify that the changes happened */
	foreach ($this->_items as $item) {
	    $id = $item->getId();
	    list ($ret, $item) = $item->refresh();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->assertEquals("title $id", $item->getTitle());
	    $this->assertEquals("summary $id", $item->getSummary());
	    $this->assertEquals("keywords $id", $item->getKeywords());
	    $this->assertEquals("description $id", $item->getDescription());
	}
    }

    function testSaveAndNext() {
	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('page', 2);
	foreach ($this->_items as $item) {
	    $id = $item->getId();
	    GalleryUtilities::putRequestVariable("form[items][$id][title]", "title $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][summary]", "summary $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][keywords]", "keywords $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][description]", "description $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][serialNumber]", $item->getSerialNumber());
	}
	GalleryUtilities::putRequestVariable('form[action][save][next]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemEditCaptions',
						      'itemId' => $this->_album->getId(),
						      'page' => 3),
				  'status' => array('successCount' => 3,
						    'errorCount' => 0,
						    $this->_items[0]->getId() => array('saved' => 1),
						    $this->_items[1]->getId() => array('saved' => 1),
						    $this->_items[2]->getId() => array('saved' => 1)),
				  'error' => array()),
			    $results);

	/* Verify that the changes happened */
	foreach ($this->_items as $item) {
	    $id = $item->getId();
	    list ($ret, $item) = $item->refresh();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->assertEquals("title $id", $item->getTitle());
	    $this->assertEquals("summary $id", $item->getSummary());
	    $this->assertEquals("keywords $id", $item->getKeywords());
	    $this->assertEquals("description $id", $item->getDescription());
	}
    }

    function testSaveAndPrevious() {
	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('page', 2);
	foreach ($this->_items as $item) {
	    $id = $item->getId();
	    GalleryUtilities::putRequestVariable("form[items][$id][title]", "title $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][summary]", "summary $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][keywords]", "keywords $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][description]", "description $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][serialNumber]", $item->getSerialNumber());
	}
	GalleryUtilities::putRequestVariable('form[action][save][previous]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemEditCaptions',
						      'itemId' => $this->_album->getId(),
						      'page' => 1),
				  'status' => array('successCount' => 3,
						    'errorCount' => 0,
						    $this->_items[0]->getId() => array('saved' => 1),
						    $this->_items[1]->getId() => array('saved' => 1),
						    $this->_items[2]->getId() => array('saved' => 1)),
				  'error' => array()),
			    $results);

	/* Verify that the changes happened */
	foreach ($this->_items as $item) {
	    $id = $item->getId();
	    list ($ret, $item) = $item->refresh();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->assertEquals("title $id", $item->getTitle());
	    $this->assertEquals("summary $id", $item->getSummary());
	    $this->assertEquals("keywords $id", $item->getKeywords());
	    $this->assertEquals("description $id", $item->getDescription());
	}
    }

    function testCancel() {
	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('page', 2);
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemEditCaptions'),
				  'return' => 1,
				  'status' => array(),
				  'error' => array()),
			    $results);

	/* Verify that no changes happened */
	foreach ($this->_items as $item) {
	    list ($ret, $newItem) = $item->refresh();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->assertEquals($item->getTitle(), $newItem->getTitle());
	    $this->assertEquals($item->getSummary(), $newItem->getSummary());
	    $this->assertEquals($item->getKeywords(), $newItem->getKeywords());
	    $this->assertEquals($item->getDescription(), $newItem->getDescription());
	}
    }

    function testSaveWithErrors() {
	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryUtilities::putRequestVariable('page', 2);
	foreach ($this->_items as $item) {
	    $id = $item->getId();
	    GalleryUtilities::putRequestVariable("form[items][$id][title]", "title $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][summary]", "summary $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][keywords]", "keywords $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][description]", "description $id");
	    GalleryUtilities::putRequestVariable("form[items][$id][serialNumber]", $item->getSerialNumber());
	}
	GalleryUtilities::putRequestVariable('form[action][save][done]', 1);

	/* Remove permissions from one item */
	$ret = GalleryCoreApi::removeItemPermissions($this->_items[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Screw up one serial number */
	GalleryUtilities::putRequestVariable("form[items][" . $this->_items[2]->getId() . "][serialNumber]", 99);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.ItemAdmin',
						      'subView' => 'core.ItemEditCaptions',
						      'itemId' => $this->_album->getId(),
						      'page' => 2),
				  'status' => array('successCount' => 1,
						    'errorCount' => 2,
						    $this->_items[0]->getId() => array('permissionDenied' => 1),
						    $this->_items[1]->getId() => array('saved' => 1),
						    $this->_items[2]->getId() => array('obsolete' => 1)),
				  'error' => array()),
			    $results);

	/* Verify that the appropriate changes happened */
	for ($i = 0; $i < count($this->_items); $i++) {
	    $item = $this->_items[$i];
	    list ($ret, $newItem) = $item->refresh();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    if ($i == 1) {
		// Success
		$id = $item->getId();
		$this->assertEquals("title $id", $newItem->getTitle());
		$this->assertEquals("summary $id", $newItem->getSummary());
		$this->assertEquals("keywords $id", $newItem->getKeywords());
		$this->assertEquals("description $id", $newItem->getDescription());
	    } else {
		// Error, should be unchanged
		$this->assertEquals($item->getTitle(), $newItem->getTitle());
		$this->assertEquals($item->getSummary(), $newItem->getSummary());
		$this->assertEquals($item->getKeywords(), $newItem->getKeywords());
		$this->assertEquals($item->getDescription(), $newItem->getDescription());
	    }
	}
    }
}
?>
