<?php
/*
 * $RCSfile: UserRecoverPasswordControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.11 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * require necessary classes
 */
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryValidationPlugin.class');
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryRecoverPasswordMap.class');
GalleryCoreApi::relativeRequireOnce(
    'modules/core/classes/helpers/UserRecoverPasswordHelper_simple.class');

/**
 * UserRecoverPassword controller tests
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class UserRecoverPasswordControllerTest extends GalleryControllerTestCase {

    function UserRecoverPasswordControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.UserRecoverPassword');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	/* Create a new user */
	list ($ret, $this->_user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_user);

	/* Disable all plugins by default. */
	$this->_controller->setPluginInstances(array());

	/* We use this variable to let our mock platform signal to us what email was sent */
	GalleryUtilities::putRequestVariable('mail', array());
    }

    function tearDown() {
	global $gallery;

	/* Do cleanup */
	$ret = GalleryRecoverPasswordMap::removeMapEntry(
		array('userName' => $this->_user->getUserName()));
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));;
	}

	parent::tearDown();
    }

    function testRecoverPassword() {
	global $gallery;

	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());

	$platform = $gallery->getPlatform();
	$gallery->_platform = new RecoverDummyPlatform($platform);

	$controllerPhpVm = new RecoverPasswordControllerPhpVm();
	$controllerPhpVm->setMd5('abcdefghijklmnopqrstuvwxyz123456');
	$gallery->_phpVm = $controllerPhpVm;

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserRecoverPassword'),
				  'status' => array('requestSent' => 1),
				  'error' => array()),
			    $results);

	$gallery->_platform = $platform;

	list ($ret, $authString) =
	    UserRecoverPasswordHelper_simple::getAuthString($this->_user->getUserName());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));;
	}
	$this->assertEquals('abcdefghijklmnopqrstuvwxyz123456', $authString,
			    'md5 mismatch');

	/* Verify that we sent an email */
	$mail = GalleryUtilities::getRequestVariables('mail');
	$this->assertEquals($this->_user->getEmail(), $mail[0]);
    }

    function testRequestTooSoon() {
	global $gallery;

	$ret = GalleryRecoverPasswordMap::addMapEntry(
	    array('userName' => $this->_user->getUserName(),
		  'authString' => md5('12345'),
		  'requestExpires' => mktime()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));;
	}

	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());

	$platform = $gallery->getPlatform();
	$gallery->_platform = new RecoverDummyPlatform($platform);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserRecoverPassword'),
				  'status' => array('requestSent' => 1),
				  'error' => array()),
			    $results, 'Redirect incorrect');

	$gallery->_platform = $platform;

	/* Verify that the auth string hasn't changed */
	list ($ret, $newAuthString) =
	    UserRecoverPasswordHelper_simple::getAuthString($this->_user->getUserName());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));;
	}
	$this->assertEquals(md5('12345'), $newAuthString, 'Auth String Incorrect');

	/* Verify that we didn't send an email */
	$mail = GalleryUtilities::getRequestVariables('mail');
	$this->assert(empty($mail), 'Mail not empty');
    }


    /**
     * Invalid usernames are treated just like regular usernames to avoid automated phishing
     * attempts to get usernames.
     */
    function testInvalidUser() {
	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', 'recoverTest12345');

	$results = $this->handleRequest();

	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserRecoverPassword'),
				  'status' => array('requestSent' => 1),
				  'error' => array()),
			    $results);

	/* Verify that there's no auth string */
	list ($ret, $authString) =
	    UserRecoverPasswordHelper_simple::getAuthString($this->_user->getUserName());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));;
	}
	$this->assertEquals(null, $authString);

	/* Verify that we didn't send an email */
	$mail = GalleryUtilities::getRequestVariables('mail');
	$this->assert(empty($mail));
    }

    /**
     * Usernames with missing email are treated just like regular usernames to avoid automated
     * phishing attempts to get usernames.
     */
    function testEmailMissing() {
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));;
	}
	$this->_user->setEmail('');
	$ret = $this->_user->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));;
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));;
	}

	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserRecoverPassword'),
				  'status' => array('requestSent' => 1),
				  'error' => array()),
			    $results);

	/* Verify that there's no auth string */
	list ($ret, $authString) =
	    UserRecoverPasswordHelper_simple::getAuthString($this->_user->getUserName());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));;
	}
	$this->assertEquals(null, $authString);

	/* Verify that we didn't send an email */
	$mail = GalleryUtilities::getRequestVariables('mail');
	$this->assert(empty($mail));
    }

    function testMissingInputs() {
	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', '');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserRecoverPassword'),
				  'status' => array(),
				  'error' => array('form[error][userName][missing]')),
			    $results);
    }

    function testCancel() {
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('return' => 1,
				  'redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserRecoverPassword'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    /**
     * Bogus user/password, and an error from the plugin.  Plugin set to halt on failure
     * so we shouldn't even try to recover which means we won't see the invalid user error.
     */
    function testPlugins1() {
	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', 'bogus-user');

	$plugin = new UserRecoverPasswordControllerTestPlugin();
	$plugin->setErrors(array('form[error][UserRecoverPasswordControllerTestPlugin][anError]'));
	$plugin->setContinue(false);
	$this->_controller->setPluginInstances(array($plugin));

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin',
				      'subView' => 'core.UserRecoverPassword'),
		  'status' => array(),
		  'error' =>
			array('form[error][UserRecoverPasswordControllerTestPlugin][anError]')),
	    $results);
    }

    /**
     * Valid user, 2 plugins with errors
     * the first plugin allows the flow to continue.  We should see the error from both plugins.
     */
    function testPlugins2() {
	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());

	$plugin1 = new UserRecoverPasswordControllerTestPlugin();
	$plugin1->setErrors(
		array('form[error][UserRecoverPasswordControllerTestPlugin1][anError]'));
	$plugin1->setContinue(true);

	$plugin2 = new UserRecoverPasswordControllerTestPlugin();
	$plugin2->setErrors(
		array('form[error][UserRecoverPasswordControllerTestPlugin2][anError]'));
	$plugin2->setContinue(false);
	$this->_controller->setPluginInstances(array($plugin1, $plugin2));

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin',
				      'subView' => 'core.UserRecoverPassword'),
		  'status' => array(),
		  'error' =>
			array('form[error][UserRecoverPasswordControllerTestPlugin1][anError]',
			      'form[error][UserRecoverPasswordControllerTestPlugin2][anError]')),
	    $results);
    }

    /**
     * Valid user, 2 plugins with an error from the first plugin, and
     * the first plugin stops the flow from continuing.  We should see the error from only the
     * first plugin, and not the invalid password error.
     */
    function testPlugins3() {
	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());

	$plugin1 = new UserRecoverPasswordControllerTestPlugin();
	$plugin1->setErrors(
		array('form[error][UserRecoverPasswordControllerTestPlugin1][anError]'));
	$plugin1->setContinue(false);

	$plugin2 = new UserRecoverPasswordControllerTestPlugin();
	$plugin2->setErrors(
		array('form[error][UserRecoverPasswordControllerTestPlugin2][anError]'));
	$plugin2->setContinue(false);
	$this->_controller->setPluginInstances(array($plugin1, $plugin2));

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin',
				      'subView' => 'core.UserRecoverPassword'),
		  'status' => array(),
		  'error' =>
			array('form[error][UserRecoverPasswordControllerTestPlugin1][anError]')),
	    $results);
    }

    /**
     * Correct password, but an error from the plugin
     */
    function testPlugins4() {
	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());

	$plugin = new UserRecoverPasswordControllerTestPlugin();
	$plugin->setErrors(array('form[error][UserRecoverPasswordControllerTestPlugin][anError]'));
	$plugin->setContinue(true);
	$this->_controller->setPluginInstances(array($plugin));

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin',
				      'subView' => 'core.UserRecoverPassword'),
		  'status' => array(),
		  'error' =>
			array('form[error][UserRecoverPasswordControllerTestPlugin][anError]')),
	    $results);
    }

    /*
     * Correct user, no plugin error
     */
    function testPlugins5() {
	global $gallery;

	GalleryUtilities::putRequestVariable('form[action][recover]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $this->_user->getUserName());

	$plugin = new UserRecoverPasswordControllerTestPlugin();
	$plugin->setErrors(array());
	$plugin->setContinue(true);
	$this->_controller->setPluginInstances(array($plugin));

	$platform = $gallery->getPlatform();
	$gallery->_platform = new RecoverDummyPlatform($platform);

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('redirect' => array('view' => 'core.UserAdmin',
				      'subView' => 'core.UserRecoverPassword'),
		  'status' => array('requestSent' => 1),
		  'error' => array()),
	    $results);

	$gallery->_platform = $platform;

    }

    /**
     * Set the email address for 'admin'
     *
     * @param string email address
     * @return array object GalleryStatus
     *               string previous email address
     */
    function _setAdminEmail($email) {
	list ($ret, $user) = GalleryCoreApi::fetchUserByUsername('admin');
	if ($ret->isError() && !($ret->getErrorCode() & ERROR_MISSING_OBJECT)) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($user->getId());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $user) = $user->refresh();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$oldEmail = $user->getEmail();

	$user->setEmail($email);

	$ret = $user->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $oldEmail);
    }
}


/**
 * Mock ValidationPlugin
 */
class UserRecoverPasswordControllerTestPlugin extends ValidationPlugin {
    function setContinue($continue) {
	$this->_continue = $continue;
    }

    function setErrors($errors) {
	$this->_errors = $errors;
    }

    function performValidation(&$form) {
	return array(GalleryStatus::success(), $this->_errors, $this->_continue);
    }
}

/**
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class RecoverDummyPlatform {
    function RecoverDummyPlatform($platform) {
	$this->_platform = $platform;
    }

    function mail($to, $subject, $body, $headers=null) {
	/* Don't actually send email.. */
	GalleryUtilities::putRequestVariable('mail', array($to, $subject, $body, $headers));
	return true;
    }

    function realpath($file) {
	return $this->_platform->realpath($file);
    }

    function getDirectorySeparator() {
	return $this->_platform->getDirectorySeparator();
    }

    function file_exists($filename) {
	return $this->_platform->file_exists($filename);
    }

    function is_dir($filename) {
	return $this->_platform->is_dir($filename);
    }

    function is_writeable($filename) {
	return $this->_platform->is_writeable($filename);
    }

    function stat($filename) {
	return $this->_platform->stat($filename);
    }

    function mkdir($path) {
	return $this->_platform->mkdir($path);
    }

    function fopen($filename, $mode, $use_include_path=0) {
	return $this->_platform->fopen($filename, $mode, $use_include_path);
    }

    function recursiveRmdir($dirname) {
	return $this->_platform->recursiveRmdir($dirname);
    }

    function fclose($handle) {
	return $this->_platform->fclose($handle);
    }

    function flock($handle, $operation, &$wouldblock) {
	return $this->_platform->flock($handle, $operation, $wouldblock);
    }
}

class RecoverPasswordControllerPhpVm {
    function setMd5($string) {
	$this->_md5 = $string;
    }

    function md5($string) {
	return $this->_md5;
    }

    function function_exists($functionName) {
	return true;
    }

    function nl_langinfo($item) {
	return 'UTF-8';
    }

    function iconv($inCharset, $outCharset, $string) {
	return $string;
    }
}
?>
