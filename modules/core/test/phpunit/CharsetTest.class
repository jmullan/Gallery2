<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test character set helper
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class CharsetTest extends GalleryTestCase {

    function testConvertIconv() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', false);
	$phpVm->setReturn('iconv', array('ISO-8859-1', 'UTF-8', 'foo'), 'success');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('success', GalleryCoreApi::convertToUtf8('foo', 'ISO-8859-1'));
    }

    function testConvertMbConvertEncoding() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', false);
	$phpVm->setFunctionExists('mb_convert_encoding', true);
	$phpVm->setFunctionExists('recode_string', false);
	$phpVm->setReturn('mb_convert_encoding', array('foo', 'UTF-8', 'ISO-8859-1'), 'success');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('success', GalleryCoreApi::convertToUtf8('foo', 'ISO-8859-1'));
    }

    function testConvertRecodeString() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', false);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', true);
	$phpVm->setReturn('recode_string', array('ISO-8859-1..UTF-8', 'foo'), 'success');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('success', GalleryCoreApi::convertToUtf8('foo', 'ISO-8859-1'));
    }

    function testConvertPurePhp() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', false);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', false);
	$gallery->_phpVm = $phpVm;

	$inputString = chr(245);
	$sourceEncoding = 'ISO-8859-1';
	$outputString = GalleryCoreApi::convertToUtf8($inputString, $sourceEncoding);
	$targetString = chr(195) . chr(181);
	$this->assertEquals($targetString, $outputString);
    }

    /* Iconv fails, so we use mb_convert_encoding instead */
    function testConvertIconvFallback1() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setFunctionExists('mb_convert_encoding', true);
	$phpVm->setFunctionExists('recode_string', false);
	$phpVm->setReturn('iconv', array('ISO-8859-1', 'UTF-8', 'foo'), false);
	$phpVm->setReturn('mb_convert_encoding', array('foo', 'UTF-8', 'ISO-8859-1'), 'success');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('success', GalleryCoreApi::convertToUtf8('foo', 'ISO-8859-1'));
    }

    /* Iconv fails, so we use recode_string instead */
    function testConvertIconvFallback2() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', true);
	$phpVm->setReturn('iconv', array('ISO-8859-1', 'UTF-8', 'foo'), false);
	$phpVm->setReturn('recode_string', array('ISO-8859-1..UTF-8', 'foo'), 'success');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('success', GalleryCoreApi::convertToUtf8('foo', 'ISO-8859-1'));
    }

    /* Iconv fails, so we use PHP instead */
    function testConvertIconvFallback3() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', false);
	$phpVm->setReturn('iconv', array('ISO-8859-1', 'UTF-8', 'foo'), false);
	$gallery->_phpVm = $phpVm;

	$inputString = chr(245);
	$sourceEncoding = 'ISO-8859-1';
	$outputString = GalleryCoreApi::convertToUtf8($inputString, $sourceEncoding);
	$targetString = chr(195) . chr(181);
	$this->assertEquals($targetString, $outputString);
    }

    /* Unknown source encoding; pure php punts and returns original string */
    function testConvertPurePhpUnknownSourceEncoding() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', false);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', false);
	$gallery->_phpVm = $phpVm;

	$inputString = chr(245);
	$sourceEncoding = 'ISO-BOGO-9000';
	$outputString = GalleryCoreApi::convertToUtf8($inputString, $sourceEncoding);
	$this->assertEquals($inputString, $outputString);
    }
}

class CharsetTestPhpVm {
    function setFunctionExists($functionName, $bool) {
	$this->_function_exists[$functionName] = $bool;
    }

    function function_exists($functionName) {
	return $this->_function_exists[$functionName];
    }

    function setReturn($function, $args, $return) {
	$this->_returns[$function] = array($args, $return);
    }

    function iconv($arg1, $arg2, $arg3) {
	if ($this->_returns['iconv'][0] == array($arg1, $arg2, $arg3)) {
	    return $this->_returns['iconv'][1];
	}
    }

    function mb_convert_encoding($arg1, $arg2, $arg3) {
	if ($this->_returns['mb_convert_encoding'][0] == array($arg1, $arg2, $arg3)) {
	    return $this->_returns['mb_convert_encoding'][1];
	}
    }

    function recode_string($arg1, $arg2) {
	if ($this->_returns['recode_string'][0] == array($arg1, $arg2)) {
	    return $this->_returns['recode_string'][1];
	}
    }
}
?>