<?php
/*
 * $RCSfile: CharsetTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.12 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */
GalleryCoreApi::relativeRequireOnce('modules/core/classes/helpers/GalleryCharsetHelper_simple.class');

/**
 * Test character set helper
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class CharsetTest extends GalleryTestCase {

    function setUp() {
	parent::setUp();

	GalleryDataCache::reset();
    }

    function testConvertToUtf8UsingIconv() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', false);
	$phpVm->setReturn('iconv', array('ISO-8859-1', 'UTF-8', 'foo'), 'success');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('success', GalleryCoreApi::convertToUtf8('foo', 'ISO-8859-1'));
    }

    function testConvertFromUtf8UsingIconv() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', false);
	$phpVm->setReturn('iconv', array('UTF-8', 'ISO-8859-1//IGNORE', 'foo'), 'success');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('success', GalleryCoreApi::convertFromUtf8('foo', 'ISO-8859-1'));
    }

    function testConvertToUtf8UsingMbConvertEncoding() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', false);
	$phpVm->setFunctionExists('mb_convert_encoding', true);
	$phpVm->setFunctionExists('recode_string', false);
	$phpVm->setReturn('mb_convert_encoding', array('foo', 'UTF-8', 'ISO-8859-1'), 'success');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('success', GalleryCoreApi::convertToUtf8('foo', 'ISO-8859-1'));
    }

    function testConvertFromUtf8UsingMbConvertEncoding() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', false);
	$phpVm->setFunctionExists('mb_convert_encoding', true);
	$phpVm->setFunctionExists('recode_string', false);
	$phpVm->setReturn('mb_convert_encoding', array('foo', 'ISO-8859-1', 'UTF-8'), 'success');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('success', GalleryCoreApi::convertFromUtf8('foo', 'ISO-8859-1'));
    }

    function testConvertToUtf8UsingRecodeString() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', false);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', true);
	$phpVm->setReturn('recode_string', array('ISO-8859-1..UTF-8', 'foo'), 'success');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('success', GalleryCoreApi::convertToUtf8('foo', 'ISO-8859-1'));
    }

    function testConvertFromUtf8UsingRecodeString() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', false);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', true);
	$phpVm->setReturn('recode_string', array('UTF-8..ISO-8859-1', 'foo'), 'success');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('success', GalleryCoreApi::convertFromUtf8('foo', 'ISO-8859-1'));
    }

    function testConvertToUtf8UsingPurePhp() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', false);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', false);
	$gallery->_phpVm = $phpVm;

	$this->assertEquals(chr(195) . chr(181),
			    GalleryCoreApi::convertToUtf8(chr(245), 'ISO-8859-1'));
    }

    function testConvertFromUtf8UsingPurePhp() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', false);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', false);
	$gallery->_phpVm = $phpVm;

	$this->assertEquals(chr(245),
			    GalleryCoreApi::convertFromUtf8(chr(195) . chr(181), 'ISO-8859-1'));
    }

    /* Iconv fails, so we use mb_convert_encoding instead */
    function testConvertToUtf8UsingIconvFallback1() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setFunctionExists('mb_convert_encoding', true);
	$phpVm->setFunctionExists('recode_string', false);
	$phpVm->setReturn('iconv', array('ISO-8859-1', 'UTF-8', 'foo'), false);
	$phpVm->setReturn('mb_convert_encoding', array('foo', 'UTF-8', 'ISO-8859-1'), 'success');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('success', GalleryCoreApi::convertToUtf8('foo', 'ISO-8859-1'));
    }

    /* Iconv fails, so we use mb_convert_encoding instead */
    function testConvertFromUtf8UsingIconvFallback1() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setFunctionExists('mb_convert_encoding', true);
	$phpVm->setFunctionExists('recode_string', false);
	$phpVm->setReturn('iconv', array('UTF-8', 'ISO-8859-1//IGNORE', 'foo'), false);
	$phpVm->setReturn('mb_convert_encoding', array('foo', 'ISO-8859-1', 'UTF-8'), 'success');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('success', GalleryCoreApi::convertFromUtf8('foo', 'ISO-8859-1'));
    }

    /* Iconv fails, so we use recode_string instead */
    function testConvertToUtf8UsingIconvFallback2() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', true);
	$phpVm->setReturn('iconv', array('ISO-8859-1', 'UTF-8', 'foo'), false);
	$phpVm->setReturn('recode_string', array('ISO-8859-1..UTF-8', 'foo'), 'success');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('success', GalleryCoreApi::convertToUtf8('foo', 'ISO-8859-1'));
    }

    /* Iconv fails, so we use recode_string instead */
    function testConvertFromUtf8UsingIconvFallback2() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', true);
	$phpVm->setReturn('iconv', array('UTF-8', 'ISO-8859-1//IGNORE', 'foo'), false);
	$phpVm->setReturn('recode_string', array('UTF-8..ISO-8859-1', 'foo'), 'success');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('success', GalleryCoreApi::convertFromUtf8('foo', 'ISO-8859-1'));
    }

    /* Iconv fails, so we use PHP instead */
    function testConvertToUtf8UsingIconvFallback3() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', false);
	$phpVm->setReturn('iconv', array('ISO-8859-1', 'UTF-8', 'foo'), false);
	$gallery->_phpVm = $phpVm;

	$this->assertEquals(chr(195) . chr(181),
			    GalleryCoreApi::convertToUtf8(chr(245), 'ISO-8859-1'));
    }

    /* Iconv fails, so we use PHP instead */
    function testConvertFromUtf8UsingIconvFallback3() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', false);
	$phpVm->setReturn('iconv', array('UTF-8', 'ISO-8859-1//IGNORE', 'foo'), false);
	$gallery->_phpVm = $phpVm;

	$this->assertEquals(chr(245),
			    GalleryCoreApi::convertFromUtf8(chr(195) . chr(181), 'ISO-8859-1'));
    }

    /* Unknown source encoding; pure php punts and returns original string */
    function testConvertToUtf8UsingPurePhpUnknownSourceEncoding() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', false);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', false);
	$gallery->_phpVm = $phpVm;

	$this->assertEquals(chr(245), GalleryCoreApi::convertToUtf8(chr(245), 'ISO-BOGO-9000'));
    }

    /* Unknown source encoding; pure php punts and returns original string */
    function testConvertFromUtf8UsingPurePhpUnknownSourceEncoding() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('iconv', false);
	$phpVm->setFunctionExists('mb_convert_encoding', false);
	$phpVm->setFunctionExists('recode_string', false);
	$gallery->_phpVm = $phpVm;

	$this->assertEquals(chr(245), GalleryCoreApi::convertFromUtf8(chr(245), 'ISO-BOGO-9000'));
    }

    function testDetectSourceEncodingWithNlLangInfo() {
	global $gallery;

	/* On windows boxes, we don't have the CODESET constant, so fake it */
	if (!defined('CODESET')) {
	    define('CODESET', 'CODESET');
	}

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('nl_langinfo', true);
	$phpVm->setReturn('nl_langinfo', array(CODESET), 'UTF-8');
	$gallery->_phpVm = $phpVm;
	$this->assertEquals('UTF-8', GalleryCharsetHelper_simple::detectSystemCharset());

	GalleryDataCache::reset();
	$phpVm->setReturn('nl_langinfo', array(CODESET), 'Windows-1252');
	$gallery->_phpVm = $phpVm;
	$this->assertEquals('Windows-1252', GalleryCharsetHelper_simple::detectSystemCharset());

	/* Verify value is cached */
	$phpVm->setReturn('nl_langinfo', array(CODESET), 'abc123');
	$gallery->_phpVm = $phpVm;
	$this->assertEquals('Windows-1252', GalleryCharsetHelper_simple::detectSystemCharset());

	/* FreeBSD may return charset with missing hyphen; verify we remap this */
	GalleryDataCache::reset();
	$phpVm->setReturn('nl_langinfo', array(CODESET), 'ISO8859-1');
	$gallery->_phpVm = $phpVm;
	$this->assertEquals('ISO-8859-1', GalleryCharsetHelper_simple::detectSystemCharset());

	/* Gentoo may return ANSI_X3.4-1968 which is just ASCII */
	GalleryDataCache::reset();
	$phpVm->setReturn('nl_langinfo', array(CODESET), 'ANSI_X3.4-1968');
	$gallery->_phpVm = $phpVm;
	$this->assertEquals('ASCII', GalleryCharsetHelper_simple::detectSystemCharset());

	/* We can override what the system tells us using GalleryCapabilities */
	GalleryCapabilities::set('systemCharset', 'xyz123');
	GalleryDataCache::reset();
	$this->assertEquals('xyz123', GalleryCharsetHelper_simple::detectSystemCharset());
	GalleryCapabilities::set('systemCharset', null);
    }

    function testDetectSourceEncodingWithoutNlLangInfo() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('nl_langinfo', false);
	$phpVm->setReturn('setlocale', array(LC_ALL, '0'),
			  'LC_CTYPE=en_US.UTF-8;LC_NUMERIC=C;LC_TIME=C');
	$gallery->_phpVm = $phpVm;
	$this->assertEquals('UTF-8', GalleryCharsetHelper_simple::detectSystemCharset());

	/* Verify we map 1252 from setlocale to full charset name */
	GalleryDataCache::reset();
	$phpVm->setReturn('setlocale', array(LC_ALL, '0'),
			  'LC_CTYPE=English_United States.1252;LC_NUMERIC=C;LC_TIME=C');
	$gallery->_phpVm = $phpVm;
	$this->assertEquals('Windows-1252', GalleryCharsetHelper_simple::detectSystemCharset());

	GalleryDataCache::reset();
	$phpVm->setReturn('setlocale', array(LC_ALL, '0'),
			  'LC_CTYPE=Russian_Russia.1251;LC_NUMERIC=C;LC_TIME=C');
	$gallery->_phpVm = $phpVm;
	$this->assertEquals('CP1251', GalleryCharsetHelper_simple::detectSystemCharset());

	/*
	 * Windows may return true for function_exists('nl_langinfo') and then print
	 * a warning message when the function is called:
	 * Warning: nl_langinfo() is not supported in this PHP build
	 */
	GalleryDataCache::reset();
	$phpVm->setFunctionExists('nl_langinfo', true);
	$phpVm->setReturn('nl_langinfo', array(CODESET), false);
	$gallery->_phpVm = $phpVm;
	$this->assertEquals('CP1251', GalleryCharsetHelper_simple::detectSystemCharset());

	/* We can override what the system tells us using GalleryCapabilities */
	GalleryCapabilities::set('systemCharset', 'xyz123');
	GalleryDataCache::reset();
	$this->assertEquals('xyz123', GalleryCharsetHelper_simple::detectSystemCharset());
	GalleryCapabilities::set('systemCharset', null);
    }

    function testConvertToUtf8SystemCharset() {
	global $gallery;

	/* On windows boxes, we don't have the CODESET constant, so fake it */
	if (!defined('CODESET')) {
	    define('CODESET', 'CODESET');
	}

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('nl_langinfo', true);
	$phpVm->setReturn('nl_langinfo', array(CODESET), 'ISO-8859-2');
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setReturn('iconv', array('ISO-8859-2', 'UTF-8', 'foo'), 'bar');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('bar', GalleryCoreApi::convertToUtf8('foo'));
    }

    function testConvertFromUtf8SystemCharset() {
	global $gallery;

	/* On windows boxes, we don't have the CODESET constant, so fake it */
	if (!defined('CODESET')) {
	    define('CODESET', 'CODESET');
	}

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('nl_langinfo', true);
	$phpVm->setReturn('nl_langinfo', array(CODESET), 'ISO-8859-2');
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setReturn('iconv', array('UTF-8', 'ISO-8859-2//IGNORE', 'foo'), 'bar');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('bar', GalleryCoreApi::convertFromUtf8('foo'));
    }

    function testConvertToUtf8UnknownSystemCharset() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('nl_langinfo', false);
	$phpVm->setReturn('setlocale', array(LC_ALL, '0'), 'no_CLUE');
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setReturn('iconv', array(null, 'UTF-8', 'foo'), 'iconv should not be called');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('foo', GalleryCoreApi::convertToUtf8('foo'));
    }

    function testConvertFromUtf8UnknownSystemCharset() {
	global $gallery;

	$phpVm = new CharsetTestPhpVm();
	$phpVm->setFunctionExists('nl_langinfo', false);
	$phpVm->setReturn('setlocale', array(LC_ALL, '0'), 'no_CLUE');
	$phpVm->setFunctionExists('iconv', true);
	$phpVm->setReturn('iconv', array('UTF-8', null, 'foo'), 'iconv should not be called');
	$gallery->_phpVm = $phpVm;

	$this->assertEquals('foo', GalleryCoreApi::convertFromUtf8('foo'));
    }
}

class CharsetTestPhpVm {
    function setFunctionExists($functionName, $bool) {
	$this->_function_exists[$functionName] = $bool;
    }

    function function_exists($functionName) {
	return $this->_function_exists[$functionName];
    }

    function setReturn($function, $args, $return) {
	$this->_returns[$function] = array($args, $return);
    }

    function iconv($arg1, $arg2, $arg3) {
	if ($this->_returns['iconv'][0] == array($arg1, $arg2, $arg3)) {
	    return $this->_returns['iconv'][1];
	}
	return false;
    }

    function mb_convert_encoding($arg1, $arg2, $arg3) {
	if ($this->_returns['mb_convert_encoding'][0] == array($arg1, $arg2, $arg3)) {
	    return $this->_returns['mb_convert_encoding'][1];
	}
    }

    function recode_string($arg1, $arg2) {
	if ($this->_returns['recode_string'][0] == array($arg1, $arg2)) {
	    return $this->_returns['recode_string'][1];
	}
    }

    function nl_langinfo($item) {
	if ($this->_returns['nl_langinfo'][0] == array($item)) {
	    return $this->_returns['nl_langinfo'][1];
	}
    }

    function setlocale($category, $locale) {
	if ($this->_returns['setlocale'][0] == array($category, $locale)) {
	    return $this->_returns['setlocale'][1];
	}
    }
}
?>
