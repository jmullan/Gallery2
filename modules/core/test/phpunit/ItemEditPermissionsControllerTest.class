<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemEditPermissions controller tests
 */
class ItemEditPermissionsControllerTest extends GalleryControllerTestCase {

    function ItemEditPermissionsControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core:ItemEditPermissions');
    }

    function setUp() {
	global $gallery;

	parent::setUp();

	list ($ret, $rootId) = $gallery->getModuleParameter('core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_albumParent) = $this->_createRandomAlbum($rootId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_albumChild) = $this->_createRandomAlbum($this->_albumParent->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

    	list ($ret, $this->_user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	global $gallery;

	$ret = $gallery->deleteEntityById($this->_albumParent->getId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $gallery->deleteEntityById($this->_group->getId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	    
	$ret = $gallery->deleteEntityById($this->_user->getId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	    
	parent::tearDown();
    }


    function testChangeOwner() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.changeOwner', 1);
	GalleryUtilities::putRequestVariable('form.owner.ownerName', $this->_user->getUserName());

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditPermissions',
						      'itemId' => $this->_albumParent->getId())),
			    $results);

	GalleryDataCache::reset();

	list ($ret, $this->_albumParent) = $this->_albumParent->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($this->_user->getId(), $this->_albumParent->getOwnerId());
    }

    function testChangeOwnerMissingUser() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.changeOwner', 1);

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:ItemAdmin'), $results);
	$this->assertEquals('core:ItemEditPermissions', GalleryUtilities::getRequestVariables('subView'));
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.owner.missingUser'), 'missingUser error missing');
    }

    function testChangeOwnerInvalidUser() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.changeOwner', 1);
	GalleryUtilities::putRequestVariable('form.owner.ownerName', 'bogus-user-' . rand(1,5000));

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:ItemAdmin'), $results);
	$this->assertEquals('core:ItemEditPermissions', GalleryUtilities::getRequestVariables('subView'));
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.owner.invalidUser'), 'invalidUser error missing');
    }
     
    function testAddGroupPermission() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.addGroupPermission', 1);
	GalleryUtilities::putRequestVariable('form.group.permission', 'core.edit');
	GalleryUtilities::putRequestVariable('form.group.groupName', $this->_group->getGroupName());

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditPermissions',
						      'itemId' => $this->_albumParent->getId(),
						      'form.group.groupName' => $this->_group->getGroupName())),
			    $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	$count = 0;
	list ($ret, $permissions) =
	    GalleryPermissionMap::fetchAllPermissionsForItem($this->_albumParent->getId(), false);
	foreach ($permissions as $permission) {
	    if ($permission['groupId'] == $this->_group->getId()) {
		$this->assertEquals(array('userId' => 0,
					  'groupId' => $this->_group->getId(),
					  'permission' => 'core.edit'),
				    $permission);
		$count++;
	    }
	}
	$this->assertEquals(1, $count);
    }

    function testAddGroupPermissionCascade() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.addGroupPermission', 1);
	GalleryUtilities::putRequestVariable('form.group.permission', 'core.edit');
	GalleryUtilities::putRequestVariable('form.group.groupName', $this->_group->getGroupName());
	GalleryUtilities::putRequestVariable('form.applyToSubItems', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditPermissions',
						      'itemId' => $this->_albumParent->getId(),
						      'form.group.groupName' => $this->_group->getGroupName())),
			    $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	$count = 0;
	foreach (array($this->_albumParent, $this->_albumChild) as $album) {
	    list ($ret, $permissions) = GalleryPermissionMap::fetchAllPermissionsForItem($album->getId(), false);
	    foreach ($permissions as $permission) {
		if ($permission['groupId'] == $this->_group->getId()) {
		    $this->assertEquals(array('userId' => 0,
					      'groupId' => $this->_group->getId(),
					      'permission' => 'core.edit'),
					$permission);
		    $count++;
		}
	    }
	}
	$this->assertEquals(2, $count);
    }

    function testAddGroupPermissionInvalidGroup() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.addGroupPermission', 1);
	GalleryUtilities::putRequestVariable('form.group.permission', 'core.edit');

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:ItemAdmin'), $results);
	$this->assertEquals('core:ItemEditPermissions', GalleryUtilities::getRequestVariables('subView'));
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.group.missingGroup'), 'missingGroup error missing');
    }

    function testAddGroupPermissionMissingGroup() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.addGroupPermission', 1);
	GalleryUtilities::putRequestVariable('form.group.permission', 'core.edit');
	GalleryUtilities::putRequestVariable('form.group.groupName', 'bogus-name-' . rand(1,5000));

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:ItemAdmin'), $results);
	$this->assertEquals('core:ItemEditPermissions', GalleryUtilities::getRequestVariables('subView'));
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.group.invalidGroup'), 'invalidGroup error missing');
    }

    function testAddGroupPermissionInvalidPermission() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.addGroupPermission', 1);
	GalleryUtilities::putRequestVariable('form.group.permission', 'bogus-permission');
	GalleryUtilities::putRequestVariable('form.group.groupName', $this->_group->getGroupName());

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:ItemAdmin'), $results);
	$this->assertEquals('core:ItemEditPermissions', GalleryUtilities::getRequestVariables('subView'));
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.group.invalidPermission'),
		      'invalidPermission error missing');
    }

    function testAddGroupPermissionRedundant() {
	global $gallery;
	
	/* Add a group permission */
	$ret = GalleryPermissionMap::addGroupPermission($this->_albumParent->getId(),
							$this->_group->getId(),
							'core.edit',
							false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.addGroupPermission', 1);
	GalleryUtilities::putRequestVariable('form.group.permission', 'core.edit');
	GalleryUtilities::putRequestVariable('form.group.groupName', $this->_group->getGroupName());

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:ItemAdmin'), $results);
	$this->assertEquals('core:ItemEditPermissions', GalleryUtilities::getRequestVariables('subView'));
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.group.alreadyHadPermission'),
		      'alreadyHadPermission error missing');
    }

    function testDeleteGroupPermission() {

	/* Add a group permission */
	$ret = GalleryPermissionMap::addGroupPermission($this->_albumParent->getId(),
							$this->_group->getId(),
							'core.edit',
							false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.deleteGroupPermission', array(0 => 1));
	GalleryUtilities::putRequestVariable('form.group.delete.0', $this->_group->getId() . ',core.edit');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditPermissions',
						      'itemId' => $this->_albumParent->getId(),
						      'form.group.permission' => 'core.edit',
						      'form.group.groupName' => $this->_group->getGroupName())),
			    $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	list ($ret, $permissions) = GalleryPermissionMap::fetchAllPermissionsForItem($this->_albumParent->getId(), false);
	foreach ($permissions as $permission) {
	    if ($permission['groupId'] == $this->_group->getId()) {
		$this->assert(false, 'invalid group permission found');
	    }
	}
    }

    function testDeleteGroupPermissionCascade() {
	/* Add a group permission */
	$ret = GalleryPermissionMap::addGroupPermission($this->_albumParent->getId(),
							$this->_group->getId(),
							'core.edit',
							true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.deleteGroupPermission', array(0 => 1));
	GalleryUtilities::putRequestVariable('form.group.delete.0', $this->_group->getId() . ',core.edit');
	GalleryUtilities::putRequestVariable('form.applyToSubItems', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditPermissions',
						      'itemId' => $this->_albumParent->getId(),
						      'form.group.permission' => 'core.edit',
						      'form.group.groupName' => $this->_group->getGroupName())),
			    $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	foreach (array($this->_albumParent, $this->_albumChild) as $album) {
	    list ($ret, $permissions) =
		GalleryPermissionMap::fetchAllPermissionsForItem($album->getId(), false);
	    foreach ($permissions as $permission) {
		if ($permission['groupId'] == $this->_group->getId()) {
		    $this->assert(false, 'invalid group permission found: ' . serialize($permission));
		}
	    }
	}
     }

    function testAddUserPermission() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.addUserPermission', 1);
	GalleryUtilities::putRequestVariable('form.user.permission', 'core.edit');
	GalleryUtilities::putRequestVariable('form.user.userName', $this->_user->getUserName());

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditPermissions',
						      'itemId' => $this->_albumParent->getId(),
						      'form.user.userName' => $this->_user->getUserName())),
			    $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	$count = 0;
	list ($ret, $permissions) =
	    GalleryPermissionMap::fetchAllPermissionsForItem($this->_albumParent->getId(), false);
	foreach ($permissions as $permission) {
	    if ($permission['userId'] == $this->_user->getId()) {
		$this->assertEquals(array('userId' => $this->_user->getId(),
					  'groupId' => 0, 
					  'permission' => 'core.edit'),
				    $permission);
		$count++;
	    }
	}
	$this->assertEquals(1, $count);
    }

    function testAddUserPermissionCascade() {
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.addUserPermission', 1);
	GalleryUtilities::putRequestVariable('form.user.permission', 'core.edit');
	GalleryUtilities::putRequestVariable('form.user.userName', $this->_user->getUserName());
	GalleryUtilities::putRequestVariable('form.applyToSubItems', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditPermissions',
						      'itemId' => $this->_albumParent->getId(),
						      'form.user.userName' => $this->_user->getUserName())),
			    $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	$count = 0;
	foreach (array($this->_albumParent, $this->_albumChild) as $album) {
	    list ($ret, $permissions) = GalleryPermissionMap::fetchAllPermissionsForItem($album->getId(), false);
	    foreach ($permissions as $permission) {
		if ($permission['userId'] == $this->_user->getId()) {
		    $this->assertEquals(array('userId' => $this->_user->getId(),
					      'groupId' => 0,
					      'permission' => 'core.edit'),
					$permission);
		    $count++;
		}
	    }
	}
	$this->assertEquals(2, $count);
    }

    function testAddUserPermissionInvalidUser() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.addUserPermission', 1);
	GalleryUtilities::putRequestVariable('form.user.permission', 'core.edit');

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:ItemAdmin'), $results);
	$this->assertEquals('core:ItemEditPermissions', GalleryUtilities::getRequestVariables('subView'));
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.user.missingUser'), 'missingUser error missing');
    }

    function testAddUserPermissionMissingUser() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.addUserPermission', 1);
	GalleryUtilities::putRequestVariable('form.user.permission', 'core.edit');
	GalleryUtilities::putRequestVariable('form.user.userName', 'bogus-name-' . rand(1,5000));

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:ItemAdmin'), $results);
	$this->assertEquals('core:ItemEditPermissions', GalleryUtilities::getRequestVariables('subView'));
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.user.invalidUser'), 'invalidUser error missing');
    }

    function testAddUserPermissionInvalidPermission() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.addUserPermission', 1);
	GalleryUtilities::putRequestVariable('form.user.permission', 'bogus-permission');
	GalleryUtilities::putRequestVariable('form.user.userName', $this->_user->getUserName());

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:ItemAdmin'), $results);
	$this->assertEquals('core:ItemEditPermissions', GalleryUtilities::getRequestVariables('subView'));
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.user.invalidPermission'),
		      'invalidPermission error missing');
    }

    function testAddUserPermissionRedundant() {
	global $gallery;
	
	/* Add a user permission */
	$ret = GalleryPermissionMap::addUserPermission($this->_albumParent->getId(),
							$this->_user->getId(),
							'core.edit',
							false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.addUserPermission', 1);
	GalleryUtilities::putRequestVariable('form.user.permission', 'core.edit');
	GalleryUtilities::putRequestVariable('form.user.userName', $this->_user->getUserName());

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:ItemAdmin'), $results);
	$this->assertEquals('core:ItemEditPermissions', GalleryUtilities::getRequestVariables('subView'));
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.user.alreadyHadPermission'),
		      'alreadyHadPermission error missing');
    }

    function testDeleteUserPermission() {

	/* Add a user permission */
	$ret = GalleryPermissionMap::addUserPermission($this->_albumParent->getId(),
							$this->_user->getId(),
							'core.edit',
							false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.deleteUserPermission', array(0 => 1));
	GalleryUtilities::putRequestVariable('form.user.delete.0', $this->_user->getId() . ',core.edit');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditPermissions',
						      'itemId' => $this->_albumParent->getId(),
						      'form.user.permission' => 'core.edit',
						      'form.user.userName' => $this->_user->getUserName())),
			    $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	list ($ret, $permissions) = GalleryPermissionMap::fetchAllPermissionsForItem($this->_albumParent->getId(), false);
	foreach ($permissions as $permission) {
	    if ($permission['userId'] == $this->_user->getId()) {
		$this->assert(false, 'invalid user permission found');
	    }
	}
    }

    function testDeleteUserPermissionCascade() {
	/* Add a user permission */
	$ret = GalleryPermissionMap::addUserPermission($this->_albumParent->getId(),
							$this->_user->getId(),
							'core.edit',
							true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_albumParent->getId());
	GalleryUtilities::putRequestVariable('form.action.deleteUserPermission', array(0 => 1));
	GalleryUtilities::putRequestVariable('form.user.delete.0', $this->_user->getId() . ',core.edit');
	GalleryUtilities::putRequestVariable('form.applyToSubItems', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditPermissions',
						      'itemId' => $this->_albumParent->getId(),
						      'form.user.permission' => 'core.edit',
						      'form.user.userName' => $this->_user->getUserName())),
			    $results);

	GalleryDataCache::reset();

	/* Fetch all permissions and compare the ones we care about */
	foreach (array($this->_albumParent, $this->_albumChild) as $album) {
	    list ($ret, $permissions) =
		GalleryPermissionMap::fetchAllPermissionsForItem($album->getId(), false);
	    foreach ($permissions as $permission) {
		if ($permission['userId'] == $this->_user->getId()) {
		    $this->assert(false, 'invalid user permission found: ' . serialize($permission));
		}
	    }
	}
     }
}
?>
