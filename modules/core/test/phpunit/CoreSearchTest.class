<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Comment
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test CoreSearch functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class CoreSearchTest extends GalleryTestCase {

    function CoreSearchTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    /**
     * 
     */
    function setUp() {
	global $gallery;
	
	parent::setUp();

	list ($ret, $moduleStatusList) = $gallery->getModuleStatus();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	if (empty($moduleStatusList['search']['active'])) {
	    return $this->assert(false, 'Search module not installed');
	}

	list ($ret, $rootId) = $gallery->getModuleParameter('core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $groupId) = $gallery->getModuleParameter('core', 'id.allUserGroup');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_randomKey = "a" . rand(1,100000) . "z";

	$this->_item = array();
	for ($i = 0; $i < 4; $i++) {
	    list ($ret, $this->_item[$i]) =
		$this->_createRandomDataItem($rootId,
					     'application/unknown',
					     array('title' => 'Title ' . $this->_randomKey,
						   'description' => 'Description ' . $this->_randomKey,
						   'summary' => 'Summary ' . $this->_randomKey,
						   'keywords' => 'Keywords ' . $this->_randomKey));
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    GalleryPermissionMap::removeItemPermissions($this->_item[$i]->getId());
	    switch($i) {
	    case 1:
	    case 2:
	    case 3:
		$ret = GalleryPermissionMap::addUserPermission($this->_item[$i]->getId(),
							       $gallery->getActiveUserId(),
							       'core.view');
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		break;
	    }
	}

	list ($ret, $this->_coreSearch) =
	    GalleryFactory::newInstance('GallerySearchInterface_1_0', 'GalleryCoreSearch');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(isset($this->_coreSearch), 'Missing GalleryCoreSearch instance');

	list ($ret, $this->_module) = $gallery->loadModule('core');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_user) = $gallery->getActiveUser();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     *
     */
    function tearDown() {
	global $gallery;
	
	parent::tearDown();

	if (!empty($this->_item)) {
	    foreach ($this->_item as $item) {
		$ret = $gallery->deleteEntityById($item->getId());
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
	    }
	}
    }

    function testFetchSearchModuleInfo() {
	list ($ret, $info) = $this->_coreSearch->getSearchModuleInfo();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(isset($info['name']), 'name missing');
	$this->assert(isset($info['description']), 'description missing');
	$this->assert(isset($info['options']), 'options missing');
	$this->assert(is_array($info['options']), 'options not an array');
	foreach (array('descriptions', 'keywords', 'summaries', 'titles') as $option) {
	    $this->assert(isset($info['options'][$option]['description']),
			  "options:$option description missing");
	    $this->assert(!empty($info['options'][$option]['enabled']),
			  "options:$option not enabled");
	}
    }

    /**
     * Search for all available fields
     */
    function testSearchAll() {
	list ($ret, $results) =
	    $this->_coreSearch->search(array('titles' => 1,
					     'summaries' => 1,
					     'descriptions' => 1,
					     'keywords' => 1),
				       $this->_randomKey);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$keywords = $this->_module->translate('Keywords');
	$summary = $this->_module->translate('Summary');
	$title = $this->_module->translate('Title');
	$description = $this->_module->translate('Description');
	$owner = $this->_module->translate('Owner');

	$userName = $this->_user->getFullName();
	if (empty($userName)) {
	    $userName = $this->_user->getUserName();
	}
	
	$this->assertEquals(array('start' => 1,
				  'end' => 3,
				  'count' => 3,
				  'results' =>
				  array(array('itemId' => $this->_item[3]->getId(),
					      'fields' => array(array('key' => $title,
								      'value' => $this->_item[3]->getTitle()),
								array('key' => $summary,
								      'value' => $this->_item[3]->getSummary()),
								array('key' => $keywords,
								      'value' => $this->_item[3]->getKeywords()),
								array('key' => $description,
								      'value' => $this->_item[3]->getDescription()),
								array('key' => $owner,
								      'value' => $userName))),
					array('itemId' => $this->_item[2]->getId(),
					      'fields' => array(array('key' => $title,
								      'value' => $this->_item[2]->getTitle()),
								array('key' => $summary,
								      'value' => $this->_item[2]->getSummary()),
								array('key' => $keywords,
								      'value' => $this->_item[2]->getKeywords()),
								array('key' => $description,
								      'value' => $this->_item[2]->getDescription()),
								array('key' => $owner,
								      'value' => $userName))),
					array('itemId' => $this->_item[1]->getId(),
					      'fields' => array(array('key' => $title,
								      'value' => $this->_item[1]->getTitle()),
								array('key' => $summary,
								      'value' => $this->_item[1]->getSummary()),
								array('key' => $keywords,
								      'value' => $this->_item[1]->getKeywords()),
								array('key' => $description,
								      'value' => $this->_item[1]->getDescription()),
								array('key' => $owner,
								      'value' => $userName))))),
			    $results);
    }

    /**
     * Search only in the title and keywords
     */
    function testSearchAllSomeFields() {
	list ($ret, $results) =
	    $this->_coreSearch->search(array('titles' => 1,
					     'keywords' => 1),
				       $this->_randomKey);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$title = $this->_module->translate('Title');
	$summary = $this->_module->translate('Summary');
	$keywords = $this->_module->translate('Keywords');
	$owner = $this->_module->translate('Owner');

	$userName = $this->_user->getFullName();
	if (empty($userName)) {
	    $userName = $this->_user->getUserName();
	}
	
	$this->assertEquals(array('start' => 1,
				  'end' => 3,
				  'count' => 3,
				  'results' =>
				  array(array('itemId' => $this->_item[3]->getId(),
					      'fields' => array(array('key' => $title,
								      'value' => $this->_item[3]->getTitle()),
								array('key' => $summary,
								      'value' => $this->_item[3]->getSummary()),
								array('key' => $keywords,
								      'value' => $this->_item[3]->getKeywords()),
								array('key' => $owner,
								      'value' => $userName))),
					array('itemId' => $this->_item[2]->getId(),
					      'fields' => array(array('key' => $title,
								      'value' => $this->_item[2]->getTitle()),
								array('key' => $summary,
								      'value' => $this->_item[2]->getSummary()),
								array('key' => $keywords,
								      'value' => $this->_item[2]->getKeywords()),
								array('key' => $owner,
								      'value' => $userName))),
					array('itemId' => $this->_item[1]->getId(),
					      'fields' => array(array('key' => $title,
								      'value' => $this->_item[1]->getTitle()),
								array('key' => $summary,
								      'value' => $this->_item[1]->getSummary()),
								array('key' => $keywords,
								      'value' => $this->_item[1]->getKeywords()),
								array('key' => $owner,
								      'value' => $userName))))),
			    $results);
    }
    
    /**
     * Search for all available fields, but only request a subset of the total results
     */
    function testSearchLimited() {
	list ($ret, $results) =
	    $this->_coreSearch->search(array('titles' => 1,
					     'summaries' => 1,
					     'descriptions' => 1,
					     'keywords' => 1),
				       $this->_randomKey,
				       1,
				       2);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$keywords = $this->_module->translate('Keywords');
	$summary = $this->_module->translate('Summary');
	$title = $this->_module->translate('Title');
	$description = $this->_module->translate('Description');
	$owner = $this->_module->translate('Owner');

	$userName = $this->_user->getFullName();
	if (empty($userName)) {
	    $userName = $this->_user->getUserName();
	}
	
	$this->assertEquals(array('start' => 2,
				  'end' => 3,
				  'count' => 3,
				  'results' =>
				  array(array('itemId' => $this->_item[2]->getId(),
					      'fields' => array(array('key' => $title,
								      'value' => $this->_item[2]->getTitle()),
								array('key' => $summary,
								      'value' => $this->_item[2]->getSummary()),
								array('key' => $keywords,
								      'value' => $this->_item[2]->getKeywords()),
								array('key' => $description,
								      'value' => $this->_item[2]->getDescription()),
								array('key' => $owner,
								      'value' => $userName))),
					array('itemId' => $this->_item[1]->getId(),
					      'fields' => array(array('key' => $title,
								      'value' => $this->_item[1]->getTitle()),
								array('key' => $summary,
								      'value' => $this->_item[1]->getSummary()),
								array('key' => $keywords,
								      'value' => $this->_item[1]->getKeywords()),
								array('key' => $description,
								      'value' => $this->_item[1]->getDescription()),
								array('key' => $owner,
								      'value' => $userName))))),
			    $results);
    }

    function testEmptySearch() {
	list ($ret, $results) =
	    $this->_coreSearch->search(array('titles' => 1),
				       'some string that will never show up');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array('start' => 0,
				  'end' => 0,
				  'count' => 0,
				  'results' => array()),
			    $results);
    }
}

?>
