<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Test Layout functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class LayoutTest extends GalleryTestCase {
    var $_unregistered;

    function setUp() {
	global $gallery;

	parent::setUp();

	list ($ret, $this->_layout) = GalleryCoreApi::loadPlugin('layout', 'layouttest');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_view) = GalleryView::loadView('core:ShowItem');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId(),
	    array('layout' => 'layouttest'));
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);

	list ($ret, $this->_saveDefault) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'default.layout');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_savePlatform = $gallery->_platform;
	$gallery->_platform = new LayoutTestPlatform();
    }

    function tearDown() {
	global $gallery;
	$gallery->_platform = $this->_savePlatform;

	if (isset($this->_installed)) {
	    $ret = GalleryCoreApi::removePlugin('layout', 'layouttest');
	    if ($ret->isError()) {
		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	if (isset($this->_saveDefault)) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'core',
						      'default.layout', $this->_saveDefault);
	    if ($ret->isError()) {
		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	parent::tearDown();
    }

    /**
     * Ensure core:ShowItem view won't use an inactive or uninstalled layout
     * Also tests deactivate default layout (not allowed) and uninstall removes layout
     * from albums (reset to default layout).
     */
    function testShowItem() {
	$template = $form = array();
	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());
	GalleryDataCache::reset();

	/* ShowItem with not yet installed layout */
	list ($ret, $results) = $this->_view->loadTemplate($template, $form);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(
	    array('redirect' => array('view' => 'core:ShowItemError',
				      'problem' => 'missingLayout',
				      'itemId' => $this->_album->getId())),
	    $results, 'not installed');

	/* Install it */
	$ret = $this->_layout->installOrUpgrade();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_installed = true;
	GalleryDataCache::reset();

	/* ShowItem with inactive layout */
	list ($ret, $results) = $this->_view->loadTemplate($template, $form);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(
	    array('redirect' => array('view' => 'core:ShowItemError',
				      'problem' => 'missingLayout',
				      'itemId' => $this->_album->getId())),
	    $results, 'not activated');

	/* Activate the layout */
	list ($ret, $redirect) = $this->_layout->activate();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), $redirect, 'activate redirect');

	/* ShowItem with active layout */
	list ($ret, $results) = $this->_view->loadTemplate($template, $form);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('html' => 'layouttest.tpl'), $results, 'active layout');

	/* Set as default layout */
	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'default.layout', 'layouttest');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Attempt to deactivate the layout */
	list ($ret, $redirect) = $this->_layout->deactivate();
	$this->assertEquals(GALLERY_ERROR | ERROR_BAD_PARAMETER, $ret->getErrorCode(),
			    'cannot deactivate default layout');

	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'default.layout', 'foo');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Deactivate the layout */
	list ($ret, $redirect) = $this->_layout->deactivate();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), $redirect, 'deactivate redirect');

	list ($ret, $album) = $this->_album->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('layouttest', $album->getLayout(),
			    'album layout unchanged on deactivate');

	/* ShowItem with deactivated layout */
	list ($ret, $results) = $this->_view->loadTemplate($template, $form);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(
	    array('redirect' => array('view' => 'core:ShowItemError',
				      'problem' => 'missingLayout',
				      'itemId' => $this->_album->getId())),
	    $results, 'deactivated');

	/* Uninstall the layout */
	$ret = $this->_layout->uninstall();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $album) = $this->_album->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('foo', $album->getLayout(), 'album reset to default layout');
    }
}

/**
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class LayoutTestLayout extends GalleryLayout {
    function LayoutTestLayout() {
	$this->setId('layouttest');
	$this->setName('Matrix');
	$this->setDescription('Unit test layout');
	$this->setVersion('0.8');
	$this->setL10Domain('layouts_layouttest');
	$this->setRequiredLayoutApi(array(0, 9));
	$this->setRequiredCoreApi(array(3, 4));
    }

    function loadTemplate(&$template, $item) {
	return array(GalleryStatus::success(), array('html' => 'layouttest.tpl'));
    }
}

/**
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class LayoutTestPlatform extends GalleryPlatform {
    function opendir($path) {
	$this->_dir = 1;
	return 'fake';
    }

    function readdir($resource) {
	if ($this->_dir == 1) {
	    $this->_dir = 0;
	    return 'layouttest';
	}
	return null;
    }

    function closedir($resource) {
	return true;
    }

    function is_dir($path) {
	return (basename($path) == 'layouttest') || is_dir($path);
    }

    function file_exists($path) {
	return (basename($path) == 'layout.inc') || file_exists($path);
    }
}
?>
