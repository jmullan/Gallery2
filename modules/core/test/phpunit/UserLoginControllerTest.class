<?php
/*
 * $RCSfile: UserLoginControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.29 $ $Date: 2006/02/09 05:02:27 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

GalleryCoreApi::requireOnce('modules/core/classes/GalleryValidationPlugin.class');

/**
 * UserLogin controller tests
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class UserLoginControllerTest extends GalleryControllerTestCase {

    function UserLoginControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.UserLogin');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	/* Create a new user */
	list ($ret, $this->_user) = $this->_createRandomUser(null, 'password');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_user);

	$this->_saveSession = $gallery->_session;
	$gallery->_session = new GallerySession();
	$ret = $gallery->_session->init();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = $gallery->_session->start();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_validationLevel) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'validation.level');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'validation.level', 'HIGH');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Disable all plugins by default. */
	$this->_controller->setPluginInstances(array());

	/* Set up a mock session so that we don't accidentally log out the PHPUnit session */
	$this->_mockSession = new UserLoginControllerTestSession();
	$gallery->_session =& $this->_mockSession;
    }

    function tearDown() {
	global $gallery;
	$gallery->_session = $this->_saveSession;

	$ret = GalleryCoreApi::setPluginParameter(
		'module', 'core', 'validation.level', $this->_validationLevel);
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::tearDown();
    }

    function testLogin() {
	global $gallery;

	GalleryUtilities::putRequestVariable('form[action][login]', 1);
	GalleryUtilities::putRequestVariable('form[username]', $this->_user->getUserName());
	GalleryUtilities::putRequestVariable('form[password]', 'password');

	$results = $this->handleRequest();
	/* May get a redirect url (like from useralbum module) or return */
	$this->assert(isset($results['return']) || isset($results['redirect']), 'result');
	$this->assertEquals(array(), $results['status'], 'status');
	$this->assertEquals(array(), $results['error'], 'error');

	$this->assertEquals($this->_user->getId(), $gallery->getActiveUserId());
	$this->assert($this->_mockSession->regenerateWasCalled(),
		      '$session->regenerate() was not called');
    }

    function testEntityPassword() {
	global $gallery;
	list ($ret, $user) = $this->_createRandomUser(null, 'pass&word');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user);

	GalleryUtilities::putRequestVariable('form[action][login]', 1);
	GalleryUtilities::putRequestVariable('form[username]', $user->getUserName());
	GalleryUtilities::putRequestVariable('form[password]', 'pass&word');

	$results = $this->handleRequest();
	/* May get a redirect url (like from useralbum module) or return */
	$this->assert(isset($results['return']) || isset($results['redirect']), 'result');
	$this->assertEquals(array(), $results['status'], 'status');
	$this->assertEquals(array(), $results['error'], 'error');

	$this->assertEquals($user->getId(), $gallery->getActiveUserId());
	$this->assert($this->_mockSession->regenerateWasCalled(),
		      '$session->regenerate() was not called');
    }

    function testLoginInvalidUser() {
	GalleryUtilities::putRequestVariable('form[action][login]', 1);
	GalleryUtilities::putRequestVariable('form[username]', 'some-bogus-user');
	/* from _createRandomUser: */
	GalleryUtilities::putRequestVariable('form[password]', 'password');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserLogin'),
				  'status' => array(),
				  'error' => array('form[error][invalidPassword]')),
			    $results);
    }

    function testLoginValidUserInvalidPassword() {
	GalleryUtilities::putRequestVariable('form[action][login]', 1);
	GalleryUtilities::putRequestVariable('form[username]', $this->_user->getUserName());
	GalleryUtilities::putRequestVariable('form[password]', 'wrong password');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserLogin'),
				  'status' => array(),
				  'error' => array('form[error][invalidPassword]')),
			    $results);
    }

    function testMissingInputs() {
	GalleryUtilities::putRequestVariable('form[action][login]', 1);
	GalleryUtilities::putRequestVariable('form[username]', '');
	GalleryUtilities::putRequestVariable('form[password]', '');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
						      'subView' => 'core.UserLogin'),
				  'status' => array(),
				  'error' => array('form[error][username][missing]',
						   'form[error][password][missing]')),
			    $results);
    }

    function testCancel() {
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('return' => 1,
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    /**
     * Bogus user/password, and an error from the plugin.  Plugin set to halt on failure
     * so we shouldn't even try to log in which means we won't see the incorrect password
     * error.
     */
    function testPlugins1() {
	GalleryUtilities::putRequestVariable('form[action][login]', 1);
	GalleryUtilities::putRequestVariable('form[username]', 'bogus-user');
	GalleryUtilities::putRequestVariable('form[password]', 'wrong-password');

	$plugin = new UserLoginControllerTestPlugin();
	$plugin->setErrors(array('form[error][UserLoginControllerTestPlugin][anError]'));
	$plugin->setContinue(false);
	$this->_controller->setPluginInstances(array($plugin));

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin', 'subView' => 'core.UserLogin'),
		  'status' => array(),
		  'error' => array('form[error][UserLoginControllerTestPlugin][anError]')),
	    $results);
    }

    /**
     * Valid user, invalid password, 2 plugins with an error from the first plugin, but
     * the first plugin allows the flow to continue.  We should see the error from both plugins,
     * but not the invalid password.
     */
    function testPlugins2() {
	GalleryUtilities::putRequestVariable('form[action][login]', 1);
	GalleryUtilities::putRequestVariable('form[username]', $this->_user->getUserName());
	GalleryUtilities::putRequestVariable('form[password]', 'totally-wrong-password');

	$plugin1 = new UserLoginControllerTestPlugin();
	$plugin1->setErrors(array('form[error][UserLoginControllerTestPlugin1][anError]'));
	$plugin1->setContinue(true);

	$plugin2 = new UserLoginControllerTestPlugin();
	$plugin2->setErrors(array('form[error][UserLoginControllerTestPlugin2][anError]'));
	$plugin2->setContinue(false);
	$this->_controller->setPluginInstances(array($plugin1, $plugin2));

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin', 'subView' => 'core.UserLogin'),
		  'status' => array(),
		  'error' => array('form[error][UserLoginControllerTestPlugin1][anError]',
				   'form[error][UserLoginControllerTestPlugin2][anError]')),
	    $results);
    }

    /**
     * Valid user, invalid password, 2 plugins with an error from the first plugin, and
     * the first plugin stops the flow from continuing.  We should see the error from only the
     * first plugin, and not the invalid password error.
     */
    function testPlugins3() {
	GalleryUtilities::putRequestVariable('form[action][login]', 1);
	GalleryUtilities::putRequestVariable('form[username]', $this->_user->getUserName());
	GalleryUtilities::putRequestVariable('form[password]', 'totally-wrong-password');

	$plugin1 = new UserLoginControllerTestPlugin();
	$plugin1->setErrors(array('form[error][UserLoginControllerTestPlugin1][anError]'));
	$plugin1->setContinue(false);

	$plugin2 = new UserLoginControllerTestPlugin();
	$plugin2->setErrors(array('form[error][UserLoginControllerTestPlugin2][anError]'));
	$plugin2->setContinue(false);
	$this->_controller->setPluginInstances(array($plugin1, $plugin2));

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin', 'subView' => 'core.UserLogin'),
		  'status' => array(),
		  'error' => array('form[error][UserLoginControllerTestPlugin1][anError]')),
	    $results);
    }

    /**
     * Correct password, but an error from the plugin
     */
    function testPlugins4() {
	GalleryUtilities::putRequestVariable('form[action][login]', 1);
	GalleryUtilities::putRequestVariable('form[username]', $this->_user->getUserName());
	/* from _createRandomUser: */
	GalleryUtilities::putRequestVariable('form[password]', 'password');

	$plugin = new UserLoginControllerTestPlugin();
	$plugin->setErrors(array('form[error][UserLoginControllerTestPlugin][anError]'));
	$plugin->setContinue(true);
	$this->_controller->setPluginInstances(array($plugin));

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin', 'subView' => 'core.UserLogin'),
		  'status' => array(),
		  'error' => array('form[error][UserLoginControllerTestPlugin][anError]')),
	    $results);
    }

    /**
     * Correct password, no error from the plugin
     */
    function testPlugins5() {
	global $gallery;

	GalleryUtilities::putRequestVariable('form[action][login]', 1);
	GalleryUtilities::putRequestVariable('form[username]', $this->_user->getUserName());
	/* from _createRandomUser: */
	GalleryUtilities::putRequestVariable('form[password]', 'password');

	$plugin = new UserLoginControllerTestPlugin();
	$plugin->setErrors(array());
	$plugin->setContinue(true);
	$this->_controller->setPluginInstances(array($plugin));

	$results = $this->handleRequest();
	/* May get a redirect url (like from useralbum module) or return */
	$this->assert(isset($results['return']) || isset($results['redirect']), 'result');
	$this->assertEquals(array(), $results['status'], 'status');
	$this->assertEquals(array(), $results['error'], 'error');

	$this->assertEquals($this->_user->getId(), $gallery->getActiveUserId());
	$this->assert($this->_mockSession->regenerateWasCalled(),
		      '$session->regenerate() was not called');
    }

    function testPluginsOff() {
	global $gallery;
	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'validation.level', 'OFF');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('form[action][login]', 1);
	GalleryUtilities::putRequestVariable('form[username]', $this->_user->getUserName());
	/* from _createRandomUser: */
	GalleryUtilities::putRequestVariable('form[password]', 'password');

	$plugin = new UserLoginControllerTestPlugin();
	$plugin->setErrors(array('form[error][UserLoginControllerTestPlugin][anError]'));
	$plugin->setContinue(false);
	$this->_controller->setPluginInstances(array($plugin));

	$results = $this->handleRequest();
	/* May get a redirect url (like from useralbum module) or return */
	$this->assert(isset($results['return']) || isset($results['redirect']), 'result');
	$this->assertEquals(array(), $results['status'], 'status');
	$this->assertEquals(array(), $results['error'], 'error');

	$this->assertEquals($this->_user->getId(), $gallery->getActiveUserId());
	$this->assert($this->_mockSession->regenerateWasCalled(),
		      '$session->regenerate() was not called');
    }
}

/**
 * Mock ValidationPlugin
 */
class UserLoginControllerTestPlugin extends GalleryValidationPlugin {
    function setContinue($continue) {
	$this->_continue = $continue;
    }

    function setErrors($errors) {
	$this->_errors = $errors;
    }

    function performValidation(&$form, $options=array()) {
	return array(null, $this->_errors, $this->_continue);
    }
}

/**
 * Mock session.
 */
class UserLoginControllerTestSession {

    function UserLoginControllerTestSession() {
	$this->_regenerateWasCalled = false;
	$this->_hash = array();
    }

    function get($key) {
	return isset($this->_hash[$key]) ? $this->_hash[$key] : null;
    }

    function put($key, $value) {
	$this->_hash[$key] = $value;
    }

    function regenerate() {
	$this->_regenerateWasCalled = true;
    }

    function regenerateWasCalled() {
	return $this->_regenerateWasCalled;
    }

    function getUserId() {
	if (isset($this->_sessionData['core.id.activeUser'])) {
	    return $this->_sessionData['core.id.activeUser'];
	}

	return null;
    }

    function setUserId($userId) {
	$this->_sessionData['core.id.activeUser'] = $userId;
    }
}
?>
