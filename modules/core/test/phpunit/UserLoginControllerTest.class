<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * UserLogin controller tests
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class UserLoginControllerTest extends GalleryControllerTestCase {

    function UserLoginControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core:UserLogin');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	/* Create a new user */
	list ($ret, $this->_user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_saveUser = $gallery->getActiveUser();
	$this->_saveSession = $gallery->_session;
    }

    function tearDown() {
	global $gallery;

	$ret = GalleryCoreApi::deleteEntityById($this->_user->getId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$gallery->setActiveUser($this->_saveUser);
	$gallery->_session = $this->_saveSession;

	parent::tearDown();
    }

    function testLogin() {
	global $gallery;

	GalleryUtilities::putRequestVariable('form[action][login]', 1);
	GalleryUtilities::putRequestVariable('form[username]', $this->_user->getUserName());
	/* from _createRandomUser: */
	GalleryUtilities::putRequestVariable('form[password]', 'password');

	$mockSession = new UserLoginControllerTestSession();
	$gallery->_session =& $mockSession;

	$results = $this->handleRequest();
	/* May get a redirect url (like from useralbum module) or return */
	$this->assert(isset($results['return']) || isset($results['redirect']), 'result');
	$this->assertEquals(array(), $results['status'], 'status');
	$this->assertEquals(array(), $results['error'], 'error');

	$this->assertEquals($this->_user->getId(), $gallery->getActiveUserId());
	$this->assert($mockSession->regenerateWasCalled(), '$session->regenerate() was not called');
    }

    function testLoginInvalidUser() {
	GalleryUtilities::putRequestVariable('form[action][login]', 1);
	GalleryUtilities::putRequestVariable('form[username]', 'some-bogus-user');
	/* from _createRandomUser: */
	GalleryUtilities::putRequestVariable('form[password]', 'password');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:UserAdmin',
						      'subView' => 'core:UserLogin'),
				  'status' => array(),
				  'error' => array('form[error][invalidPassword]')),
			    $results);
    }

    function testLoginValidUserInvalidPassword() {
	GalleryUtilities::putRequestVariable('form[action][login]', 1);
	GalleryUtilities::putRequestVariable('form[username]', $this->_user->getUserName());
	GalleryUtilities::putRequestVariable('form[password]', 'wrong password');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:UserAdmin',
						      'subView' => 'core:UserLogin'),
				  'status' => array(),
				  'error' => array('form[error][invalidPassword]')),
			    $results);
    }

    function testCancel() {
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('return' => 1,
				  'status' => array(),
				  'error' => array()),
			    $results);
    }
}

/**
 * Mock session.
 */
class UserLoginControllerTestSession {

    function UserLoginControllerTestSession() {
	$this->_regenerateWasCalled = false;
	$this->_hash = array();
    }

    function get($key) {
	return isset($this->_hash[$key]) ? $this->_hash[$key] : null;
    }

    function put($key, $value) {
	$this->_hash[$key] = $value;
    }

    function regenerate() {
	$this->_regenerateWasCalled = true;
    }

    function regenerateWasCalled() {
	return $this->_regenerateWasCalled;
    }
}
?>
