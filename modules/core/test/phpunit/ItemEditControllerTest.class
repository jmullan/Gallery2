<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemEdit controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemEditControllerTest extends GalleryControllerTestCase {

    function ItemEditControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core:ItemEdit');
    }

    function setUp() {
	global $gallery;

	parent::setUp();

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_album->getId(), 'test/file');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryCoreApi::registerFactoryImplementation('ItemEditPlugin',
						      'ItemEditControllerTestPluginSuccess',
						      'ItemEditControllerTestPluginSuccess',
						      __FILE__);

	GalleryCoreApi::registerFactoryImplementation('ItemEditPlugin',
						      'ItemEditControllerTestPluginFail',
						      'ItemEditControllerTestPluginFail',
						      __FILE__);
    }

    function tearDown() {
	global $gallery;

	$ret = GalleryCoreApi::deleteEntityById($this->_album->getId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryCoreApi::unregisterFactoryImplementation('ItemEditPlugin', 'ItemEditControllerTestPluginSuccess');
	GalleryCoreApi::unregisterFactoryImplementation('ItemEditPlugin', 'ItemEditControllerTestPluginFail');
	
	parent::tearDown();
    }

    function testHandleRequestWithPreferred() {
	list ($ret, $this->_preferred) =
	    $this->_createDerivative($this->_item, $this->_item->getId(),
				     DERIVATIVE_TYPE_IMAGE_PREFERRED, 'rotate|90');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[serialNumber]', $this->_item->getSerialNumber());
	GalleryUtilities::putRequestVariable('editPlugin', 'ItemEditControllerTestPluginSuccess');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEdit',
						      'editPlugin' => 'ItemEditControllerTestPluginSuccess',
						      'itemId' => $this->_item->getId()),
				  'status' => array('editMessage' => 'success'),
				  'error' => array()),
			    $results);
    }

    function testHandleRequestWithoutPreferred() {
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[serialNumber]', $this->_item->getSerialNumber());
	GalleryUtilities::putRequestVariable('editPlugin', 'ItemEditControllerTestPluginSuccess');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEdit',
						      'editPlugin' => 'ItemEditControllerTestPluginSuccess',
						      'itemId' => $this->_item->getId()),
				  'status' => array('editMessage' => 'success'),
				  'error' => array()),
			    $results);
    }

    function testHandleRequestDelegate() {
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('form[serialNumber]', $this->_item->getSerialNumber());
	GalleryUtilities::putRequestVariable('editPlugin', 'ItemEditControllerTestPluginFail');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEdit',
						      'editPlugin' => 'ItemEditControllerTestPluginFail'),
				  'status' => null,
				  'error' => array('failed')),
			    $results);
    }
}

/**
 * Test plugin that returns success
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemEditControllerTestPluginSuccess {
    function handleRequest($form, &$item, &$preferred) {
	/* TODO: We should verify the item is legit here */
	
	/* Check to see if we have a preferred source */
	list ($ret, $preferredTable) = GalleryCoreApi::fetchPreferredsByItemIds(array($item->getId()));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if ($preferred != null && (empty($preferredTable) ||
				   !is_object($preferredTable[$item->getId()]) ||
				   $preferredTable[$item->getId()]->getId() != $preferred->getId())) {
	    return array(GalleryStatus::error(ERROR_UNKNOWN, __FILE__, __LINE__), array('PREFERRED MISMATCH'), null);
	}

	return array(GalleryStatus::success(), array(), 'success');
    }
}

/**
 * Test plugin that fails
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemEditControllerTestPluginFail {
    function handleRequest($form, &$item, &$preferred) {
	return array(GalleryStatus::success(), array('failed'), null);
    }
}

?>
