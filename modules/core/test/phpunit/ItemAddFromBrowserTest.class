<?php
/*
 * $RCSfile: ItemAddFromBrowserTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.14 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemAddChildren controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemAddFromBrowserTest extends ItemAddPluginTestCase {

    function ItemAddFromBrowserTest($methodName) {
	$this->ItemAddPluginTestCase($methodName, 'core', 'ItemAddFromBrowser');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_rootAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_rootAlbum);

	list ($ret, $this->_lockIds) = GalleryCoreApi::acquireReadLock($this->_rootAlbum->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	$ret = GalleryCoreApi::releaseLocks($this->_lockIds);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::tearDown();
    }

    function testAddChildrenFromBrowser() {
	global $gallery;
	$platform = $gallery->getPlatform();

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][addFromBrowser]', 1);

	$baseDir = dirname(__FILE__) . '/../data/';
	$files = array('test1.gif', 'test1.jpg', 'test2.gif', 'test[3].gif');
	$i = 0;
	foreach ($files as $file) {
	    $i++;
	    $fullPath = $baseDir . $file;

	    if (get_magic_quotes_gpc()) {
		$fullPath = addslashes($fullPath);
	    }

	    GalleryUtilities::putRequestVariable('form[name][' . $i . ']', $file);
	    list ($ret, $mimeType) = GalleryCoreApi::getMimeType($fullPath);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    GalleryUtilities::putRequestVariable('form[type][' . $i . ']', $mimeType);
	    GalleryUtilities::putRequestVariable('form[tmp_name][' . $i . ']', $fullPath);
	    GalleryUtilities::putRequestVariable('form[size][' . $i . ']',
						 $platform->filesize($fullPath));
	    GalleryUtilities::putRequestVariable('form[error][' . $i . ']', 0);
	    GalleryUtilities::putRequestVariable('form[caption][' . $i . ']',
						 'this is a caption for ' . $file);
	}
	GalleryUtilities::putRequestVariable('form[uploadBoxCount]', $i);
	GalleryUtilities::putRequestVariable('form[set][title]', 'filename');
	GalleryUtilities::putRequestVariable('form[set][summary]', 1);
	GalleryUtilities::putRequestVariable('form[set][description]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest($this->_rootAlbum);
	$this->assertEquals(array(), $results[0]);

	/* We don't know the ids, but we can verify everything else */
	$i = 0;
	foreach ($files as $file) {
	    $this->assertEquals($file, $results[1]['addedFiles'][$i]['fileName']);
	    $this->assert(isset($results[1]['addedFiles'][$i]['id']));
	    $ids[] = $results[1]['addedFiles'][$i]['id'];
	    $i++;
	}

	/* Verify item attributes (like order weight) */
	list ($ret, $itemIds) = GalleryCoreApi::fetchChildItemIds($this->_rootAlbum);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(4, count($itemIds), 'child count');

	$seenWeights = array();
	foreach ($ids as $id) {
	    list ($ret, $viewCount) = GalleryCoreApi::fetchItemViewCount($id);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(0, $viewCount);

	    list ($ret, $orderWeight) = GalleryCoreApi::fetchItemOrderWeight($id);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assert(!isset($seenWeights[$orderWeight]), 'Seen this weight before');
	    $seenWeights[$orderWeight] = 1;
	}

	list ($ret, $items) = GalleryCoreApi::loadEntitiesById($ids);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$i = 0;
	foreach ($items as $item) {
	    $this->assertEquals($platform->legalizePathComponent($files[$i]),
				$item->getPathComponent(), 'path component');
	    list ($base, $extension) = GalleryUtilities::getFileNameComponents($files[$i]);
	    $this->assertEquals($base, $item->getTitle(), 'title');
	    $this->assertEquals('this is a caption for ' . $files[$i],
				$item->getSummary(), 'summary');
	    $this->assertEquals('this is a caption for ' . $files[$i++],
				$item->getDescription(), 'description');
	}
    }

    function testAddUnknownChildFromBrowser() {
	global $gallery;
	$platform = $gallery->getPlatform();

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][addFromBrowser]', 1);
	GalleryUtilities::putRequestVariable('form[name][1]', basename(__FILE__));
	GalleryUtilities::putRequestVariable('form[type][1]', 'test/unknown-type');
	GalleryUtilities::putRequestVariable('form[tmp_name][1]', __FILE__);
	GalleryUtilities::putRequestVariable('form[size][1]', $platform->filesize(__FILE__));
	GalleryUtilities::putRequestVariable('form[error][1]', 0);
	GalleryUtilities::putRequestVariable('form[caption][1]', 'a caption');
	GalleryUtilities::putRequestVariable('form[uploadBoxCount]', 1);
	GalleryUtilities::putRequestVariable('form[set][title]', 'caption');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest($this->_rootAlbum);
	$this->assertEquals(array(), $results[0]);

	/* We don't know the ids, but we can verify everything else */
	$this->assertEquals(basename(__FILE__), $results[1]['addedFiles'][0]['fileName']);
	$this->assert(isset($results[1]['addedFiles'][0]['id']), 'Id is not set');

	/* Verify item attributes */
	list ($ret, $ids) = GalleryCoreApi::fetchChildItemIds($this->_rootAlbum);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, count($ids), 'child count');

	list ($ret, $viewCount) = GalleryCoreApi::fetchItemViewCount($ids[0]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(0, $viewCount);

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($ids[0]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('a caption', $item->getTitle(), 'title');
	$this->assertEquals(null, $item->getSummary(), 'summary');
	$this->assertEquals(null, $item->getDescription(), 'description');
    }

    function testAddWithEmptyTitle() {
	global $gallery;
	$platform = $gallery->getPlatform();

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form[action][addFromBrowser]', 1);
	GalleryUtilities::putRequestVariable('form[name][1]', basename(__FILE__));
	GalleryUtilities::putRequestVariable('form[type][1]', 'test/unknown-type');
	GalleryUtilities::putRequestVariable('form[tmp_name][1]', __FILE__);
	GalleryUtilities::putRequestVariable('form[size][1]', $platform->filesize(__FILE__));
	GalleryUtilities::putRequestVariable('form[error][1]', 0);
	GalleryUtilities::putRequestVariable('form[caption][1]', 'a caption');
	GalleryUtilities::putRequestVariable('form[uploadBoxCount]', 1);
	GalleryUtilities::putRequestVariable('form[set][title]', '');
	GalleryUtilities::putRequestVariable('form[set][summary]', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest($this->_rootAlbum);
	$this->assertEquals(array(), $results[0]);

	/* We don't know the ids, but we can verify everything else */
	$this->assertEquals(basename(__FILE__), $results[1]['addedFiles'][0]['fileName']);
	$this->assert(isset($results[1]['addedFiles'][0]['id']), 'Id is not set');

	/* Verify item attributes */
	list ($ret, $ids) = GalleryCoreApi::fetchChildItemIds($this->_rootAlbum);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, count($ids), 'child count');

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($ids[0]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(null, $item->getTitle(), 'title');
	$this->assertEquals('a caption', $item->getSummary(), 'summary');
	$this->assertEquals(null, $item->getDescription(), 'description');
    }

    function testAddWithSpaces() {
	global $gallery;
	$platform = $gallery->getPlatform();

	$name = basename(__FILE__);
	GalleryUtilities::putRequestVariable('form[action][addFromBrowser]', 1);
	GalleryUtilities::putRequestVariable('form[name][1]', " $name ");
	GalleryUtilities::putRequestVariable('form[type][1]', 'test/unknown-type');
	GalleryUtilities::putRequestVariable('form[tmp_name][1]', __FILE__);
	GalleryUtilities::putRequestVariable('form[size][1]', $platform->filesize(__FILE__));
	GalleryUtilities::putRequestVariable('form[error][1]', 0);
	GalleryUtilities::putRequestVariable('form[caption][1]', 'a caption');
	GalleryUtilities::putRequestVariable('form[uploadBoxCount]', 1);
	GalleryUtilities::putRequestVariable('form[set][title]', 'caption');

	$results = $this->handleRequest($this->_rootAlbum);
	$this->assertEquals(array(), $results[0]);

	/* We don't know the ids, but we can verify everything else */
	$this->assertEquals(" $name ", $results[1]['addedFiles'][0]['fileName'], 'added file');
	$this->assert(isset($results[1]['addedFiles'][0]['id']), 'Id is not set');

	list ($ret, $ids) = GalleryCoreApi::fetchChildItemIds($this->_rootAlbum);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, count($ids), 'child count');

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($ids[0]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($name, $item->getPathComponent(), 'path component');

	list ($ret, $path) = $item->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($platform->is_file($path), "file '$path'");
	$this->assertEquals(trim($name), basename($path),
			    'file name: "' . basename($path) . '"');
    }
}
?>
