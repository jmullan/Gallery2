<?php
/*
 * $RCSfile
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Album functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class AlbumTest extends GalleryTestCase {

    function AlbumTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function _createRandomAlbum($parentId) {
	global $gallery;
	
	list ($ret, $album) = GalleryFactory::newInstance('GalleryEntity', 'GalleryAlbumItem');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if (!isset($album)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	}

	if (isset($parentId)) {
	    list ($ret, $lockIds[]) = $gallery->acquireReadLock($parentId);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    
	    $ret = $album->create($parentId, 'albumtest' . rand(), $gallery->getActiveUserId());
	} else {
	    $ret = $album->createRoot('albumtest' . rand(), $gallery->getActiveUserId());
	}
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Change some settings */
	$album->setTitle('This is my title');
	$album->setDescription('This is a description');

	/* Save it */
	$ret = $album->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Leggo of our locks */
	if (isset($lockIds)) {
	    $ret = $gallery->releaseLocks($lockIds);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	return array(GalleryStatus::success(), $album);
    }

    function testLoadRootAlbum() {
	global $gallery;

	list ($ret, $rootId) =
	    $gallery->getModuleParameter('core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $rootAlbum) = $gallery->loadEntitiesById($rootId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	if (!GalleryUtilities::isA($rootAlbum, 'GalleryAlbumItem')) {
	    return $this->failWithStatus(GalleryStatus::error(ERROR_DELETED_OBJECT, __FILE__, __LINE__));
	}
    }

    function testCreateAndDeleteAlbum() {
	global $gallery;

	list ($ret, $rootId) =
	    $gallery->getModuleParameter('core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $album) = $this->_createRandomAlbum($rootId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify it */
	$ret = $this->_verifyEntity($album);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	return GalleryStatus::success();
    }

    function testCreateRenameAndDeleteAlbum() {
	global $gallery;

	list ($ret, $rootId) =
	    $gallery->getModuleParameter('core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	list ($ret, $album) = $this->_createRandomAlbum($rootId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Verify it */
	$ret = $this->_verifyEntity($album);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Lock and refresh it */
	list ($ret, $lockId) = $gallery->acquireWriteLock($album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $album) = $album->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Rename it */
	$ret = $album->rename('newname-' . rand());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Save it */
	$ret = $album->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify it */
	$ret = $this->_verifyEntity($album);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	return GalleryStatus::success();
    }
    
    function testCreateAndDeleteNestedAlbums() {
	global $gallery;

	$lockIds = array();
	$time = time();
	$iterations = 5;
	$parentId = null;
	for ($i = 0; $i < $iterations; $i++) {
	    $gallery->guaranteeTimeLimit(5);

	    list ($ret, $nested[$i]) = $this->_createRandomAlbum($parentId);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $parentId = $nested[$i]->getId();
	}

	$ret = $this->_deleteAndVerifyEntity($nested[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	for ($i = 0; $i < $iterations; $i++) {
	    $ret = $this->_verifyMissing($nested[$i]->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	return GalleryStatus::success();
    }
}

?>
