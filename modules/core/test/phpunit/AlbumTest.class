<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Album functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class AlbumTest extends GalleryTestCase {

    function AlbumTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();
	
	list ($ret, $this->_parentAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	global $gallery;

	$ret = $gallery->deleteEntityById($this->_parentAlbum->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::tearDown();
    }

    function testLoadRootAlbum() {
	global $gallery;

	list ($ret, $rootAlbum) = $gallery->loadEntitiesById($this->_parentAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	if (!GalleryUtilities::isA($rootAlbum, 'GalleryAlbumItem')) {
	    return $this->failWithStatus(GalleryStatus::error(ERROR_DELETED_OBJECT, __FILE__, __LINE__));
	}
    }

    function testCreateAndDeleteAlbum() {
	global $gallery;

	list ($ret, $album) = $this->_createRandomAlbum($this->_parentAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify it */
	$ret = $this->_verifyEntity($album);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testCreateRenameAndDeleteAlbum() {
	global $gallery;

	list ($ret, $album) = $this->_createRandomAlbum($this->_parentAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Verify it */
	$ret = $this->_verifyEntity($album);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Lock and refresh it */
	list ($ret, $lockId) = $gallery->acquireWriteLock($album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $album) = $album->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Rename it */
	$ret = $album->rename('newname-' . rand());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Save it */
	$ret = $album->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Unlock it */
	$ret = $gallery->releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify it */
	$ret = $this->_verifyEntity($album);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testCreateAndDeleteNestedAlbums() {
	global $gallery;

	$lockIds = array();
	$iterations = 5;
	$parentId = $this->_parentAlbum->getId();
	for ($i = 0; $i < $iterations; $i++) {
	    $gallery->guaranteeTimeLimit(5);

	    list ($ret, $nested[$i]) = $this->_createRandomAlbum($parentId);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $parentId = $nested[$i]->getId();
	}

	$ret = $this->_deleteAndVerifyEntity($nested[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	for ($i = 0; $i < $iterations; $i++) {
	    $ret = $this->_verifyMissing($nested[$i]->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
    }
    
    /**
     * Create an album under the root, then create a nested album under that
     * one, then move the nested album to the root, then delete both.
     *
     */
    function testMoveAlbum() {
	global $gallery;

	$lockIds = array();

	$parentId = $this->_parentAlbum->getId();
	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $album[$i]) = $this->_createRandomAlbum($parentId);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $parentId = $album[$i]->getId();
	}

	/* Verify parents before moving */
	$this->assertEquals($this->_parentAlbum->getId(), $album[0]->getParentId(), '(before) album 0');
	$this->assertEquals($album[0]->getId(), $album[1]->getParentId(), '(before) album 1');
	$this->assertEquals($album[1]->getId(), $album[2]->getParentId(), '(before) album 2');

	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $parentSequence[$i]) =
		GalleryItemAttributesMap::fetchParentSequence($album[$i]->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	$this->assertEquals(array($this->_getRootId(),
				  $this->_parentAlbum->getId()),
			    $parentSequence[0],
			    '(before) sequence 0');
	$this->assertEquals(array($this->_getRootId(),
				  $this->_parentAlbum->getId(),
				  $album[0]->getId()),
			    $parentSequence[1],
			    '(before) sequence 1');
	$this->assertEquals(array($this->_getRootId(),
				  $this->_parentAlbum->getId(),
				  $album[0]->getId(),
				  $album[1]->getId()),
			    $parentSequence[2],
			    '(before) sequence 2');

	/* Read lock the root, write lock the two new albums */
	list ($ret, $lockIds[]) = $gallery->acquireReadLock(array($this->_parentAlbum->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $lockIds[]) = $gallery->acquireWriteLock(array($album[0]->getId(),
								   $album[1]->getId(),
								   ));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	for ($i = 0; $i < 2; $i++) {
	    list ($ret, $album[$i]) = $album[$i]->refresh();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* Move one of the target albums */
	$ret = $album[1]->move($this->_parentAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	/* Save it */
	$ret = $album[1]->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $gallery->releaseLocks($lockIds);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify parents */
	for ($i = 0; $i < 2; $i++) {
	    list ($ret, $album[$i]) = $album[$i]->refresh();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	$this->assertEquals($this->_parentAlbum->getId(), $album[0]->getParentId(), '(after) album 0');
	$this->assertEquals($this->_parentAlbum->getId(), $album[1]->getParentId(), '(after) album 1');
	$this->assertEquals($album[1]->getId(), $album[2]->getParentId(), '(after) album 2');

	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $parentSequence[$i]) =
		GalleryItemAttributesMap::fetchParentSequence($album[$i]->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	$this->assertEquals(array($this->_getRootId(),
				  $this->_parentAlbum->getId()), $parentSequence[0],
			    '(after) sequence 0');
	$this->assertEquals(array($this->_getRootId(),
				  $this->_parentAlbum->getId()), $parentSequence[1],
			    '(after) sequence 1');
	$this->assertEquals(array($this->_getRootId(),
				  $this->_parentAlbum->getId(),
				  $album[1]->getId()),
			    $parentSequence[2],
			    '(after) sequence 2');
    }

    /**
     * Create several levels of nested albums, then fetch the parents from the
     * bottom most one and compare it against the parents we know.
     */
    function testFetchParents() {
	global $gallery;

	$iterations = 5;
	$parentId = $this->_parentAlbum->getId();
	for ($i = 0; $i < $iterations; $i++) {
	    $gallery->guaranteeTimeLimit(5);

	    list ($ret, $nested[$i]) = $this->_createRandomAlbum($parentId);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $parentId = $nested[$i]->getId();
	}

	/* Now we've created our nested tree.  Fetch it all back again */
	list ($ret, $actual) = $nested[$iterations-1]->fetchParents();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $expected[0]) = $gallery->loadEntitiesById($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $expected[1]) = $gallery->loadEntitiesById($this->_parentAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	for ($i = 0; $i < sizeof($nested)-1; $i++) {
	    $expected[] = $nested[$i];
	}

	$this->assertEquals($expected, $actual);
    }

    /**
     * Create a parent, a child, verify that fetchChildren on the parent
     * returns the child, delete both.
     */
    function testFetchChildren() {
	global $gallery;

	list ($ret, $parent) = $this->_createRandomAlbum($this->_parentAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $child) = $this->_createRandomAlbum($parent->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	list ($ret, $actual) = $parent->fetchChildren();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array($child), $actual);
    }
}

?>
