<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * AdminEditGroupUsers controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class AdminEditGroupUsersControllerTest extends GalleryControllerTestCase {

    function AdminEditGroupUsersControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core:AdminEditGroupUsers');
    }

    function setUp() {
	parent::setUp();
	
	/* Create a test group */
	list ($ret, $this->_group) = $this->_createGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_group);

	/* Create a test user */
	list ($ret, $this->_user) = $this->_createUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_user);
    }

    function testDone() {
	list ($ret, $group) = $this->_createGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('groupId', $group->getId());
	GalleryUtilities::putRequestVariable('form[action][done]', 1);


	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'core:AdminGroups'),
				  'status' => array(),
				  'error' => array()),
			    $results);
	$this->_deleteGroup($group);
    }

    function testRemoveUser() {
	/* Add the user to the group */
	$ret = GalleryCoreApi::addUserToGroup($this->_user->getId(), $this->_group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('groupId', $this->_group->getId());
	GalleryUtilities::putRequestVariable('form[action][remove]', 1);
	GalleryUtilities::putRequestVariable('form[list][userId]', $this->_user->getId());

	$results = $this->handleRequest();

	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'core:AdminEditGroupUsers',
						      'groupId' => $this->_group->getId()),
				  'status' => array('removedUser' => $this->_user->getUserName()),
				  'error' => array()),
			    $results);
    }

    function testCantRemoveSelfFromSiteAdmins() {
	global $gallery;
	
	list ($ret, $adminGroupId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.adminGroup');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), false);
	}
	
	/* Add the user to the site admin group */
	$ret = GalleryCoreApi::addUserToGroup($this->_user->getId(), $adminGroupId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Become that user */
	$gallery->setActiveUser($this->_user);

	GalleryUtilities::putRequestVariable('groupId', $adminGroupId);
	GalleryUtilities::putRequestVariable('form[action][remove]', 1);
	GalleryUtilities::putRequestVariable('form[list][userId]', $this->_user->getId());

	$results = $this->handleRequest();

	$this->assertEquals(array('delegate' => array('view' => 'core:SiteAdmin',
						      'subView' => 'core:AdminEditGroupUsers'),
				  'status' => array(),
				  'error' => array('form[error][list][cantRemoveSelf]')),
			    $results);

	list ($ret, $inGroup) = GalleryCoreApi::isUserInGroup($this->_user->getId(), $adminGroupId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert($inGroup, 'User should still be in the group');
    }

    function testAddUser() {
	GalleryUtilities::putRequestVariable('groupId', $this->_group->getId());
	GalleryUtilities::putRequestVariable('form[action][add]', 1);
	GalleryUtilities::putRequestVariable('form[text][userName]', $this->_user->getUserName());

	$results = $this->handleRequest();

	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'core:AdminEditGroupUsers',
						      'groupId' => $this->_group->getId()),
				  'status' => array('addedUser' => $this->_user->getUserName()),
				  'error' => array()),
			    $results);
    }
    
    function testAddBogusUser() {
	GalleryUtilities::putRequestVariable('groupId', $this->_group->getId());
	GalleryUtilities::putRequestVariable('form[action][add]', 1);
	GalleryUtilities::putRequestVariable('form[text][userName]', 'bogus-user-'.rand());

	$results = $this->handleRequest();

	$this->assertEquals(array('delegate' => array('view' => 'core:SiteAdmin',
						      'subView' => 'core:AdminEditGroupUsers'),
				  'status' => array(),
				  'error' => array('form[error][text][userName][invalid]')),
			    $results);
    }

    function testAddMissingUser() {
	GalleryUtilities::putRequestVariable('groupId', $this->_group->getId());
	GalleryUtilities::putRequestVariable('form[action][add]', 1);
	GalleryUtilities::putRequestVariable('form[text][userName]', '');

	$results = $this->handleRequest();

	$this->assertEquals(array('delegate' => array('view' => 'core:SiteAdmin',
						      'subView' => 'core:AdminEditGroupUsers'),
				  'status' => array(),
				  'error' => array('form[error][text][userName][missing]')),
			    $results);
    }
    
    function _createGroup($groupType=GROUP_NORMAL) {
	global $gallery;
	
	list ($ret, $group) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryGroup');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	if (!isset($group)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__),
			 null);
	}
	
	$ret = $group->create('testgroup-'.rand(), $groupType);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$ret = $group->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $group);
    }

    function _deleteGroup($group) {
	global $gallery;
	$ret = GalleryCoreApi::deleteEntityById($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function _createUser() {
	global $gallery;
	
	list ($ret, $user) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryUser');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	if (!isset($user)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__),
			 null);
	}
	
	$ret = $user->create('testuser-'.rand());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$ret = $user->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $user);
    }

    function _deleteUser($user) {
	global $gallery;
	$ret = GalleryCoreApi::deleteEntityById($user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
}
?>
