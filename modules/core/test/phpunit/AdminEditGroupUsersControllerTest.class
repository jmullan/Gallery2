<?php
/*
 * $RCSfile: AdminEditGroupUsersControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.21 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * AdminEditGroupUsers controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class AdminEditGroupUsersControllerTest extends GalleryControllerTestCase {

    function AdminEditGroupUsersControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.AdminEditGroupUsers');
    }

    function setUp() {
	parent::setUp();

	/* Create a test group */
	list ($ret, $this->_group) = $this->_createRandomGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_group);

	/* Create a test user */
	list ($ret, $this->_user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_user);
    }

    function testDone() {
	GalleryUtilities::putRequestVariable('groupId', $this->_group->getId());
	GalleryUtilities::putRequestVariable('form[action][done]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminGroups'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testRemoveUser() {
	/* Add the user to the group */
	$ret = GalleryCoreApi::addUserToGroup($this->_user->getId(), $this->_group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('groupId', $this->_group->getId());
	GalleryUtilities::putRequestVariable('form[action][remove]', 1);
	GalleryUtilities::putRequestVariable(
	    sprintf('form[userIds][%s]', $this->_user->getId()), 1);

	$results = $this->handleRequest();

	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminEditGroupUsers',
						      'groupId' => $this->_group->getId()),
				  'status' => array('removedUsers' => 1,
						    'removedUser' => $this->_user->getUserName()),
				  'error' => array()),
			    $results);
    }

    function testRemoveMultipleUser() {
	/* Create a second user */
	list ($ret, $newUser) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Add the users to the group */
	$ret = GalleryCoreApi::addUserToGroup($this->_user->getId(), $this->_group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addUserToGroup($newUser->getId(), $this->_group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('groupId', $this->_group->getId());
	GalleryUtilities::putRequestVariable('form[action][remove]', 1);
	GalleryUtilities::putRequestVariable(
	    sprintf('form[userIds][%s]', $this->_user->getId()), 1);
	GalleryUtilities::putRequestVariable(sprintf('form[userIds][%s]', $newUser->getId()), 1);

	$results = $this->handleRequest();

	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminEditGroupUsers',
						      'groupId' => $this->_group->getId()),
				  'status' => array('removedUsers' => 2, 'removedUser' => 2),
				  'error' => array()),
			    $results);

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($newUser->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testCantRemoveSelfFromSiteAdmins() {
	global $gallery;
	list ($ret, $adminGroupId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.adminGroup');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Add the user to the site admin group */
	$ret = GalleryCoreApi::addUserToGroup($this->_user->getId(), $adminGroupId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Become that user */
	$gallery->setActiveUser($this->_user);

	GalleryUtilities::putRequestVariable('groupId', $adminGroupId);
	GalleryUtilities::putRequestVariable('form[action][remove]', 1);
	GalleryUtilities::putRequestVariable(
	    sprintf('form[userIds][%s]', $this->_user->getId()), 1);

	$results = $this->handleRequest();

	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminEditGroupUsers'),
				  'status' => array(),
				  'error' => array('form[error][list][cantRemoveSelf]')),
			    $results);

	list ($ret, $inGroup) =
	    GalleryCoreApi::isUserInGroup($this->_user->getId(), $adminGroupId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert($inGroup, 'User should still be in the group');
    }

    function testAddUser() {
	GalleryUtilities::putRequestVariable('groupId', $this->_group->getId());
	GalleryUtilities::putRequestVariable('form[action][add]', 1);
	GalleryUtilities::putRequestVariable('form[text][userName]', $this->_user->getUserName());

	$results = $this->handleRequest();

	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminEditGroupUsers',
						      'groupId' => $this->_group->getId()),
				  'status' => array('addedUser' => $this->_user->getUserName()),
				  'error' => array()),
			    $results);
    }

    function testAddBogusUser() {
	GalleryUtilities::putRequestVariable('groupId', $this->_group->getId());
	GalleryUtilities::putRequestVariable('form[action][add]', 1);
	GalleryUtilities::putRequestVariable('form[text][userName]', 'bogus-user-'.rand());

	$results = $this->handleRequest();

	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminEditGroupUsers'),
				  'status' => array(),
				  'error' => array('form[error][text][userName][invalid]')),
			    $results);
    }

    function testAddMissingUser() {
	GalleryUtilities::putRequestVariable('groupId', $this->_group->getId());
	GalleryUtilities::putRequestVariable('form[action][add]', 1);
	GalleryUtilities::putRequestVariable('form[text][userName]', '');

	$results = $this->handleRequest();

	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminEditGroupUsers'),
				  'status' => array(),
				  'error' => array('form[error][text][userName][missing]')),
			    $results);
    }

    function testAddDuplicateUser() {
	$ret = GalleryCoreApi::addUserToGroup($this->_user->getId(), $this->_group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	GalleryUtilities::putRequestVariable('groupId', $this->_group->getId());
	GalleryUtilities::putRequestVariable('form[action][add]', 1);
	GalleryUtilities::putRequestVariable('form[text][userName]', $this->_user->getUserName());

	$results = $this->handleRequest();

	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminEditGroupUsers'),
				  'status' => array(),
				  'error' => array('form[error][text][userName][alreadyInGroup]')),
			    $results);
    }
}
?>
