<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision: 1.5 $ $Date: 2006/03/20 21:12:55 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Jozef Selesi <selesi at gmail dot com>
 */

GalleryCoreApi::requireOnce('modules/core/test/phpunit/RepositoryTestStorage.class');

/**
 * Test repository index functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class RepositoryIndexTest extends GalleryTestCase {

    var $_index;
    var $_sampleIndex;
    var $_galleryStorage;

    function setUp() {
	parent::setUp();

	/* Set up mock storage. */
	global $gallery;
	$this->_galleryStorage =& $gallery->_storage;
	$this->_testStorage =& RepositoryTestStorage::getSingleton();
	$gallery->_storage =& $this->_testStorage;

	/* Prepare test index. */
	include(dirname(__FILE__) . '/../../../../lib/tools/repository/test/data/SampleIndex.inc');
	$this->_sampleIndex = $sampleIndex;

	$this->_index = new GalleryRepositoryIndex();
	$this->_index->_index = $this->_sampleIndex;
	$this->_index->_isLoaded = true;
    }

    function tearDown() {
	/* Return original storage. */
	global $gallery;
	$gallery->_storage =& $this->_galleryStorage;
	GalleryDataCache::reset();

	parent::tearDown();
    }

    function testGetDescriptorUrl() {
	$testcases = array(array(
	    'pluginType' => 'module',
	    'pluginId' => 'testModule',
	    'expectedUrl' => 'modules/testModule-1.0.0-19700412131300.descriptor'), array(

	    'pluginType' => 'theme',
	    'pluginId' => 'testTheme',
	    'expectedUrl' => 'themes/testTheme-1.0.0-19700411131300.descriptor'));

	foreach ($testcases as $case) {
	    list ($ret, $url) =
		$this->_index->getDescriptorUrl($case['pluginType'], $case['pluginId']);
	    if ($ret) {
		$this->failWithStatus($ret);
	    }

	    $this->assertEquals($case['expectedUrl'], $url, 'Unexpected URL returned.');
	}
    }

    function testGetPackageUrl() {
	$testcases = array(array(
	    'pluginType' => 'module',
	    'pluginId' => 'testModule',
	    'package' => 'base',
	    'expectedUrl' => 'modules/testModule-1.0.0-19700412131300-base.package'), array(

	    'pluginType' => 'module',
	    'pluginId' => 'testModule',
	    'package' => 'test',
	    'expectedUrl' => 'modules/testModule-1.0.0-19700412131300-test.package'), array(

	    'pluginType' => 'module',
	    'pluginId' => 'testModule',
	    'package' => 'lang-en_US',
	    'expectedUrl' => 'modules/testModule-lang-en_US-2.2-2.3.package'), array(

	    'pluginType' => 'module',
	    'pluginId' => 'testModule',
	    'package' => 'lang-pt_BR',
	    'expectedUrl' => 'modules/testModule-lang-pt_BR-2.2-2.3.package'), array(

	    'pluginType' => 'theme',
	    'pluginId' => 'testTheme',
	    'package' => 'base',
	    'expectedUrl' => 'themes/testTheme-1.0.0-19700411131300-base.package'), array(

	    'pluginType' => 'theme',
	    'pluginId' => 'testTheme',
	    'package' => 'lang-pt_BR',
	    'expectedUrl' => 'themes/testTheme-lang-pt_BR-2.2-2.2.package'));

	$this->_index->utilities = new RepositoryIndexTestUtilities();

	foreach ($testcases as $case) {
	    list ($ret, $url) = $this->_index->getPackageUrl(
		$case['pluginType'], $case['pluginId'], $case['package']);
	    if ($ret) {
		$this->failWithStatus($ret);
	    }

	    $this->assertEquals($case['expectedUrl'], $url, 'Unexpected URL returned.');
	}
    }

    function testGetPluginName() {
	global $gallery;
	list ($ret, $saveLanguage) = $gallery->getActiveLanguageCode();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$testcases = array(
		'en_US',
		array('pluginType' => 'module',
		      'pluginId' => 'testModule',
		      'expectedName' => 'Test Module'),
		array('pluginType' => 'theme',
		      'pluginId' => 'testTheme',
		      'expectedName' => 'Test Theme'),
		'en_GB',
		array('pluginType' => 'module',
		      'pluginId' => 'testModule',
		      'expectedName' => 'en_GB-modules_testModule-Test Module'),
		array('pluginType' => 'theme',
		      'pluginId' => 'testTheme',
		      'expectedName' => 'en_GB-themes_testTheme-Test Theme'),
		);

	$this->_index->utilities = new RepositoryIndexTestUtilities();

	foreach ($testcases as $case) {
	    if (!is_array($case)) {
		$ret = $gallery->setActiveLanguageCode($case);
		if ($ret) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		continue;
	    }
	    list ($ret, $name) =
		$this->_index->getPluginName($case['pluginType'], $case['pluginId']);
	    if ($ret) {
		$this->failWithStatus($ret);
	    }

	    $this->assertEquals($case['expectedName'], $name, 'Unexpected name returned.');
	}

	$ret = $gallery->setActiveLanguageCode($saveLanguage);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testGetRawData() {
	$this->assertEquals($this->_sampleIndex, $this->_index->getRawData());
    }

    function testUpdate() {
	global $gallery;

	/* Clear the sample data from our test index. */
	$this->_index->_index = '';
	$this->_index->_isLoaded = false;

	/* Prepare mock objects. */
	$serializedSampleIndex = serialize($this->_sampleIndex);
	$this->_index->_utilities = new RepositoryIndexTestUtilities(array(
	    $serializedSampleIndex, md5($serializedSampleIndex)));

	$platform = new UnitTestPlatform();
	$platform->setReply('file_put_contents',
			    array($this->_index->getLocalPath(), $serializedSampleIndex), true);
	$gallery->setPlatform($platform);

	/* Perform update and verify that the sample index has been loaded. */
	$ret = $this->_index->update();
	if ($ret) {
	    $this->failWithStatus($ret);
	}
	$this->assertEquals($this->_sampleIndex, $this->_index->_index);
	$this->assert($this->_index->_isLoaded, 'GalleryRepositoryIndex::isLoaded bit not set.');

	/* Verify that the timestamp has been put into the database. */
	$timestampWritten = false;
	if (isset($this->_testStorage->_updatedMapData['GalleryPluginParameterMap'])) {
	    $timestampWritten = true;

	    $updateTimestamp = $this->_testStorage->_updatedMapData
		['GalleryPluginParameterMap']['change']['parameterValue'];
	} else if (isset($this->_testStorage->_addedMapData['GalleryPluginParameterMap'])) {
	    $addedData = $this->_testStorage->_addedMapData['GalleryPluginParameterMap'];

	    if (isset($addedData['parameterName'])
		    && $addedData['parameterName'] == 'repository.updateTime') {
		$timestampWritten = true;
	    }

	    $updateTimestamp = $addedData['parameterValue'];
	}
	$this->assert($timestampWritten, 'Timestamp in database not updated.');
	$this->assert($updateTimestamp > time() - 60, 'Timestamp too old.');

	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testGetMetaData() {
	$this->_testStorage->setSearchResults(
	    array(array(0, 'repository.updateTime', 'updateTime')));

	/*
	 * Clear the database cache for fetchAllPluginParameters
	 * to force it to call our mock storage class.
	 */
	GalleryDataCache::remove('GalleryPluginHelper::fetchAllParameters(module, core, 0)');

	list ($ret, $metaData) = $this->_index->getMetaData();
	if ($ret) {
	    $this->failWithStatus($ret);
	}
	$this->assertEquals(array('timestamp' => 'updateTime',
				  'moduleCount' => 1,
				  'themeCount' => 1),
			    $metaData);
    }

    function testExistsInCache() {
	global $gallery;

	$platform = new UnitTestPlatform();
	$platform->setReply('file_exists', array($this->_index->getLocalPath()), false);
	$gallery->setPlatform($platform);

	$this->assert(false === $this->_index->existsInCache());
    }

    function testLoad() {
	global $gallery;

	$this->_index->_index = '';
	$this->_index->_isLoaded = false;

	$platform = new UnitTestPlatform();
	$platform->setReply('file_get_contents', array($this->_index->getLocalPath()),
	    serialize($this->_sampleIndex));
	$gallery->setPlatform($platform);

	$ret = $this->_index->load();
	if ($ret) {
	    $this->failWithStatus($ret);
	}
	$this->assertEquals($this->_sampleIndex, $this->_index->_index);
	$this->assert($this->_index->_isLoaded, 'GalleryRepositoryIndex::isLoaded bit not set.');
    }

    function testUnserializeIndex() {
	$this->_index->_index = '';
	$this->_index->_isLoaded = false;

	$ret = $this->_index->unserializeIndex($serializedIndex = serialize($this->_sampleIndex));
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	$this->assertEquals($this->_sampleIndex, $this->_index->_index);
	$this->assert($this->_index->_isLoaded, 'GalleryRepositoryIndex::isLoaded bit not set.');
    }

    function testGetPluginHeader() {
	$testCases = array(array('pluginType' => 'module', 'pluginId' => 'testModule'),
			   array('pluginType' => 'theme', 'pluginId' => 'testTheme'));

	foreach ($testCases as $case) {
	    $pluginType = $case['pluginType'];
	    $pluginId = $case['pluginId'];

	    list ($ret, $header) = $this->_index->getPluginHeader($pluginType, $pluginId);
	    if ($ret) {
		$this->failWithStatus($ret);
	    }
	    $this->assertEquals($this->_sampleIndex[$pluginType . 's'][$pluginId]['header'],
				$header);
	}
    }

    function testGetAvailableLanguagesInPlugin() {
	$testCases = array(
	     array('pluginType' => 'module',
		   'pluginId' => 'testModule',
		   'languages' => $this->_sampleIndex['modules']['testModule']['languages']['2.2']),

	     array('pluginType' => 'theme',
		   'pluginId' => 'testTheme',
		   'languages' => $this->_sampleIndex['themes']['testTheme']['languages']['2.2']));

	foreach ($testCases as $case) {
	    list ($ret, $languages) =
		$this->_index->getAvailableLanguagesInPlugin($case['pluginType'],
							     $case['pluginId']);
	    if ($ret) {
		$this->failWithStatus($ret);
	    }
	    $this->assertEquals($case['languages'], $languages);
	}
    }

    function testContainsPlugin() {
	$testCases = array(array('pluginType' => 'module', 'pluginId' => 'testModule'),
			   array('pluginType' => 'theme', 'pluginId' => 'testTheme'),
			   array('pluginType' => 'theme', 'pluginId' => 'anotherTheme'));

	foreach ($testCases as $case) {
	    $doesContain = $this->_index->containsPlugin($case['pluginType'], $case['pluginId']);

	    $this->assertEquals(
		isset($this->_sampleIndex[$case['pluginType'] . 's'][$case['pluginId']]),
		$doesContain);
	}
    }

    function testGetPackageVersionAndBuild() {
	$sampleStringsRevision =
	    $this->_sampleIndex['themes']['testTheme']['header']['stringsRevision'];

	$testCases = array(array(
	    'pluginType' => 'module',
	    'pluginId' => 'testModule',
	    'package' => 'package1',
	    'expectedVersion' => $this->_sampleIndex['modules']['testModule']['header']['version'],
	    'expectedBuild' =>
		$this->_sampleIndex['modules']['testModule']['header']['buildTimestamp']), array(

	    'pluginType' => 'theme',
	    'pluginId' => 'testTheme',
	    'package' => 'lang-en_US',
	    'expectedVersion' => $sampleStringsRevision,
	    'expectedBuild' => $this->_sampleIndex['themes']['testTheme']
		['languages'][$sampleStringsRevision]['en_US']));

	foreach ($testCases as $case) {
	    list ($ret, $version, $build) = $this->_index->getPackageVersionAndBuild(
		$case['pluginType'], $case['pluginId'], $case['package']);
	    if ($ret) {
		$this->failWithStatus($ret);
	    }
	    $this->assertEquals($version, $case['expectedVersion']);
	    $this->assertEquals($build, $case['expectedBuild']);
	}
    }

    function testGetPlugins() {
	$testCases = array(array(
	    'pluginType' => 'module',
	    'showAll' => true,
	    'isCompatible' => true,
	    'isAvailable' => true,
	    'expectedPlugins' => array('module' => array(
		'testModule' => $this->_sampleIndex['modules']['testModule'])),
	    'expectedVersion' => true), array(

	    'pluginType' => 'theme',
	    'showAll' => false,
	    'isCompatible' => false,
	    'isAvailable' => true,
	    'expectedPlugins' => array(),
	    'expectedVersion' => false), array(

	    'pluginType' => 'module',
	    'showAll' => false,
	    'isCompatible' => true,
	    'isAvailable' => false,
	    'expectedPlugins' => array('module' => array(
		'testModule' => $this->_sampleIndex['modules']['testModule'])),
	    'expectedVersion' => false), array(

	    'pluginType' => 'theme',
	    'showAll' => true,
	    'isCompatible' => false,
	    'isAvailable' => false,
	    'expectedPlugins' => array('theme' => array(
		'testTheme' => $this->_sampleIndex['themes']['testTheme'])),
	    'expectedVersion' => false));

	foreach ($testCases as $case) {
	    $this->_index->_utilities =	new RepositoryIndexTestUtilities(
		array(), $case['isAvailable'], $case['isCompatible']);

	    list ($ret, $plugins) =
		$this->_index->getPlugins($case['pluginType'], $case['showAll']);
	    if ($ret) {
		$this->failWithStatus($ret);
	    }

	    $pluginType = $case['pluginType'];
	    $pluginId = 'test' . ucfirst($pluginType);
	    if ($case['expectedVersion']) {
		$case['expectedPlugins'][$pluginType][$pluginId]['localVersion'] = 'someVersion';
	    }
	    if (!empty($case['expectedPlugins'])) {
		$case['expectedPlugins'][$pluginType][$pluginId]['isCompatible'] =
		    $case['isCompatible'];
	    }
	    $this->assertEquals($case['expectedPlugins'], $plugins);
	}
    }
}

class RepositoryIndexTestUtilities {

    var $_fileContents;
    var $_fileContentsIndex;
    var $_isPluginAvailable;
    var $_isPluginCompatible;

    function RepositoryIndexTestUtilities($contents = array(),
	    $isPluginAvailable = true, $isPluginCompatible = true) {
	$this->_fileContents = $contents;
	$this->_fileContentsIndex = 0;
	$this->_isPluginAvailable = $isPluginAvailable;
	$this->_isPluginCompatible = $isPluginCompatible;
    }

    function getLanguageBaseRevision() {
	return array(null, '2.2');
    }

    function isPluginAvailable($pluginType, $pluginId) {
	return array(null, $this->_isPluginAvailable);
    }

    function getPluginVersion($pluginType, $pluginId) {
	return array(null, 'someVersion');
    }

    function isPluginCompatible($pluginType, $requiredCoreApi, $requiredPluginApi, $apis = null) {
	return $this->_isPluginCompatible;
    }

    function downloadFile() {
	$contents = $this->_fileContents[$this->_fileContentsIndex];
	$this->_fileContentsIndex++;

	return array(true, $contents);
    }
}
?>
