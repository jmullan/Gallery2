<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Session functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class SessionTest extends GalleryTestCase {

    function SessionTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	global $gallery;
	$this->_savedSession = $gallery->_session;
	
	/*
	 * Backup things that we will overwrite during the test (original values also needed in the
	 * tests)
	 */
	$this->_originalServerVars = array();
	foreach (array('HTTP_X_FORWARDED_SERVER', 'HTTP_HOST', 'HTTP_X_FORWARDED_FOR',
		       'HTTP_COOKIE', 'HTTP_CLIENT_IP', 'HTTP_USER_AGENT', 'REMOTE_ADDR') as $key) {
	    $this->_originalServerVars[$key] = GalleryUtilities::getServerVar($key);
	}
    }

    function tearDown() {
	global $gallery;
	$gallery->_session = $this->_savedSession;
	
	foreach ($this->_originalServerVars as $key => $value) {
	    $_SERVER[$key] = $value;
	}

	parent::tearDown();
    }

    function testGetAndPut() {
	global $gallery;
	$key = 'test-key';
	$value = 'test-value';

	$session =& $gallery->getSession();
	$session->put($key, $value);

	$ret = $session->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	$this->assertEquals($value, $session->get($key));
    }

    function testRemove() {
	global $gallery;
	$key = 'test-key';
	$value = 'test-value';

	/* Store the key */
	$session =& $gallery->getSession();
	$session->put($key, $value);
	$ret = $session->save();

	/* Save and reset */
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	GalleryDataCache::reset();

	/* Make sure it's still there */
	$new = $session->get($key);
	$this->assertEquals($value, $new);

	/* Remove the key */
	$session->remove($key);

	/* Save and reset */
	$ret = $session->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	GalleryDataCache::reset();

	/* Make sure it's gone */
	$exists = $session->exists($key);
	$this->assert(!$exists, "key $key should not exist!");
    }

    function testStatus() {
	global $gallery;
	$session =& $gallery->getSession();

	/* Store a status and get its id */
	$status = array('x' => 'y', 'a' => 'b');
	$statusId = $session->putStatus($status);

	/* Save and reset */
	$ret = $session->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	GalleryDataCache::reset();

	/* Get the status back and compare */
	$this->assertEquals($status, $session->getStatus($statusId));

	/* Get the status back again and verify that its gone */
	$this->assertEquals(null, $session->getStatus($statusId));
    }

    /**
     * Try storing a lot of session messages and make sure that the old ones get expired.
     */
    function testExpiringStatusMessages() {
	global $gallery;
	$session =& $gallery->getSession();

	/* Store 10 status messages */
	$status = array('x' => 'y', 'a' => 'b');
	for ($i = 0; $i < 10; $i++) {
	    $statusId[$i] = $session->putStatus(array('i' => $i));
	}

	/* Save and reset */
	$ret = $session->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	GalleryDataCache::reset();

	/* Verify that only the last 5 are there */
	for ($i = 0; $i < sizeof($statusId); $i++) {
	    if ($i < sizeof($statusId) - 5) {
		$this->assertEquals(null, $session->getStatus($statusId[$i], false),
				    "Pass 1, status $i: $statusId[$i] should not be here");
	    } else {
		$this->assertEquals(array('i' => $i), $session->getStatus($statusId[$i], false),
				    "Pass 1, status $i: $statusId[$i] should be here");
	    }
	}

	/* Store 2 more */
	for ($i = 10; $i < 12; $i++) {
	    $statusId[$i] = $session->putStatus(array('i' => $i));
	}
	/* Save and reset */
	$ret = $session->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	GalleryDataCache::reset();

	/* Verify that only the last 5 are there */
	for ($i = 0; $i < sizeof($statusId); $i++) {
	    if ($i < sizeof($statusId) - 5) {
		$this->assertEquals(null, $session->getStatus($statusId[$i], false),
				    "Pass 2, status $i: $statusId[$i] should not be here");
	    } else {
		$this->assertEquals(array('i' => $i), $session->getStatus($statusId[$i], false),
				    "Pass 2, status $i: $statusId[$i] should be here");
	    }
	}

	/* Remove all our status messages by getting them one more time */
	for ($i = 0; $i < sizeof($statusId); $i++) {
	    $session->getStatus($statusId[$i]);
	}
    }

    function testExpireSessions() {
	/* Make sure the SQL runs */
	GallerySession::_expireSessions();
    }

    function testIllegalSessionId() {
	global $gallery;
	$session = $gallery->_session;
	$isUsingCookies = $session->isUsingCookies();

	/* Test an illegal sessionId */
	$_COOKIE[SESSION_ID_PARAMETER] = '../oops.txt';
	$delimiter = !empty($this->_originalServerHttpCookie) ? ' ; ' : '';
	$_SERVER['HTTP_COOKIE'] = SESSION_ID_PARAMETER . '=' . '../oops.txt' . $delimiter .
	    $_SERVER['HTTP_COOKIE'];
	if (!$isUsingCookies) {
	    GalleryUtilities::putRequestVariable(SESSION_ID_PARAMETER,
						 $_COOKIE[SESSION_ID_PARAMETER]);
	}

	$gallery->_session = null;
	$gallery->initSession();
	$session =& $gallery->getSession();

	$this->assert(!preg_match('#^\.\.#', $session->getSessionId()), 'Dangerous session-id!');

	/* Now test a legal sessionId */
	$sessionId = md5(rand());
	$_COOKIE[SESSION_ID_PARAMETER] = $sessionId;
	$_SERVER['HTTP_COOKIE'] = $this->_originalServerVars['HTTP_COOKIE'];
	$delimiter = !empty($_SERVER['HTTP_COOKIE']) ? ' ; ' : '';
	$_SERVER['HTTP_COOKIE'] = SESSION_ID_PARAMETER . '=' . $sessionId . $delimiter .
	    $_SERVER['HTTP_COOKIE'];
	if (!$isUsingCookies) {
	    GalleryUtilities::putRequestVariable(SESSION_ID_PARAMETER,
						 $_COOKIE[SESSION_ID_PARAMETER]);
	}

	$gallery->_session = null;
	$gallery->initSession();
	$session =& $gallery->getSession();

	$this->assertEquals($session->getSessionId(), $_COOKIE[SESSION_ID_PARAMETER]);

	/*
	 * Now test that the right SESSION_ID_PARAMETER cookie is used.
	 * (When multiple cookies exist with different paths, or in IE)
	 */
	GalleryUtilities::fixCookieVars(false, true);
	$rand = rand();
	$sessionId = md5($rand);
	$wrongSessionId = md5($rand + 3000);
	$_COOKIE[SESSION_ID_PARAMETER] = $wrongSessionId;
	$_SERVER['HTTP_COOKIE'] = $this->_originalServerVars['HTTP_COOKIE'];
	$delimiter = !empty($_SERVER['HTTP_COOKIE']) ? ' ; ' : '';
	$_SERVER['HTTP_COOKIE'] = SESSION_ID_PARAMETER . '=' . $sessionId . ' ; ' .
	    SESSION_ID_PARAMETER . '=' . $wrongSessionId . $delimiter . $_SERVER['HTTP_COOKIE'];
	/* Force the use of cookies */
	if (!$isUsingCookies) {
	    GalleryUtilities::removeRequestVariable(SESSION_ID_PARAMETER);
	}

	$gallery->_session = null;
	$gallery->initSession();
	$session =& $gallery->getSession();

	$this->assertEquals($sessionId, $session->getSessionId(),
			    'multiple cookies, not the right one was picked');
	$this->assertEquals($sessionId, $_COOKIE[SESSION_ID_PARAMETER],
			    'multiple cookies, not the right one was set/fixed');
    }

    function testNewSessionCollision() {
	/* Ensure we don't randomly pick a new sessionid for an existing session */
	global $gallery;
	GalleryUtilities::removeRequestVariable(SESSION_ID_PARAMETER);
	unset($_COOKIE[SESSION_ID_PARAMETER]);
	unset($_SERVER['HTTP_COOKIE']);

	/* Mock platform creates sessionid collision for first id picked */
	$platform = new UnitTestPlatform();
	$platform->setReply('file_exists', array('fuzzy' => '{.*}'), true);
	$platform->setReply('fopen', array('fuzzy' => '{.*}', 'rb', 0), 'fh');
	$platform->setReply('feof', array('fh'), false);
	$platform->setReply('fread', array('fh', 4096),
			    serialize(array(123, 'abc', array('session' => 'data'))));
	$platform->setReply('feof', array('fh'), true);
	$platform->setReply('fclose', array('fh'), true);
	$platform->setReply('file_exists', array('fuzzy' => '{.*}'), false);
	$gallery->setPlatform($platform);

	$session = new GallerySession();
	$ret = $session->init();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert($platform->isComplete(), $platform->getRemaining());
    }

    function testSessionSaveLoad() {
	global $gallery;
	$session = $gallery->_session;
	$isUsingCookies = $session->isUsingCookies();
	$sid = md5(rand());

	$_COOKIE[SESSION_ID_PARAMETER] = $sid;
	$delimiter = !empty($this->_originalServerHttpCookie) ? ' ; ' : '';
	$_SERVER['HTTP_COOKIE'] = SESSION_ID_PARAMETER . '=' . $sid . $delimiter .
	    $_SERVER['HTTP_COOKIE'];
	if (!$isUsingCookies) {
	    GalleryUtilities::putRequestVariable(SESSION_ID_PARAMETER, $sid);
	}

	/* Request #1, save some status information and remove it */
	$gallery->_session = null;
	$gallery->initSession();
	$session =& $gallery->getSession();
	$statusId = $session->putStatus(array('i' => 'a'));
	$this->assertEquals(array('i' => 'a'), $session->getStatus($statusId));

	$ret = $session->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Request #2, save some more status information */
	$gallery->_session = null;
	$gallery->initSession();
	$session =& $gallery->getSession();
	$otherStatusId = $session->putStatus(array('j' => 'b'));

	$ret = $session->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Request #3, get back the status saved in previous request */
	GalleryDataCache::reset();
	$gallery->_session = null;
	$gallery->initSession();
	$session =& $gallery->getSession();

	$this->assertEquals(array('j' => 'b'), $session->getStatus($otherStatusId));
    }

    function testBasicNavigation() {
	global $gallery;
	$session =& $gallery->getSession();

	/* Non-existant navigation */
	$this->assertEquals(array(), $session->getNavigation('bogus'));

	/* Create one level navigation, make sure the data can be retrieved */
	$navData1 = array('returnUrl' => 'url1', 'returnName' => 'name1');
	$navId1 = $session->addToNavigation($navData1);
	$this->assertEquals(array($navData1), $session->getNavigation($navId1));

	/* Add another navigation item, using navId1 as a predecessor */
	$navData2 = array('returnUrl' => 'url2', 'returnName' => 'name2', 'returnNavId' => $navId1);
	$navId2 = $session->addToNavigation($navData2);
	/* We should have all predecessors in our list */
	$this->assertEquals(array($navData2, $navData1), $session->getNavigation($navId2));

	/* Add yet another navigation item, using a bogus navId as predecessor */
	$navData3 = array('returnUrl' => 'url3', 'returnName' => 'name3', 'returnNavId' => 'bogus');
	$navId3 = $session->addToNavigation($navData3);
	$this->assertEquals(array($navData3), $session->getNavigation($navId3));
    }

    function _createNavigationBranch() {
	global $gallery;
	$session =& $gallery->getSession();
	$session->put('core.navigation', array());

	for ($i = 1; $i < 10; $i++) {
	    $navData[$i] = array('returnUrl' => 'url' . $i, 'returnName' => 'name' . $i);
	}

	/* Create a "complex" branched navigation:
	 *  1 --> 2 --> 3 --> 5 --> 6 --> 7
	 *        |           |
	 *        4           8
	 */
	$navId[1] = $session->addToNavigation($navData[1]);
	$navData[2] = array_merge($navData[2], array('returnNavId' => $navId[1]));
	$navId[2] = $session->addToNavigation($navData[2]);
	$navData[3] = array_merge($navData[2], array('returnNavId' => $navId[2]));
	$navId[3] = $session->addToNavigation($navData[3]);
	$navData[4] = array_merge($navData[2], array('returnNavId' => $navId[2]));
	$navId[4] = $session->addToNavigation($navData[4]);
	$navData[5] = array_merge($navData[2], array('returnNavId' => $navId[3]));
	$navId[5] = $session->addToNavigation($navData[5]);
	$navData[6] = array_merge($navData[2], array('returnNavId' => $navId[5]));
	$navId[6] = $session->addToNavigation($navData[6]);
	$navData[7] = array_merge($navData[2], array('returnNavId' => $navId[6]));
	$navId[7] = $session->addToNavigation($navData[7]);
	$navData[8] = array_merge($navData[2], array('returnNavId' => $navId[5]));
	$navId[8] = $session->addToNavigation($navData[8]);
	return array($navId, $navData);
    }

    function testBranchedNavigation() {
	global $gallery;
	$session =& $gallery->getSession();

	list ($navId, $navData) = $this->_createNavigationBranch();

	/* Check the branch 1, 2, 3, 4, 7 */
	$this->assertEquals(array(
				$navData[7],
				$navData[6],
				$navData[5],
				$navData[3],
				$navData[2],
				$navData[1]
			    ), $session->getNavigation($navId[7])
	);

	/* Now return from 7 to 2. Should delete 6, 7 only */
	$session->jumpNavigation($navId[7], $navId[2]);
	$this->assert(count($session->getNavigation($navId[3])) > 0, '#1 navId[3] deleted');
	$this->assert(count($session->getNavigation($navId[4])) > 0, '#1 navId[4] deleted');
	$this->assert(count($session->getNavigation($navId[5])) > 0, '#1 navId[5] deleted');
	$this->assert(count($session->getNavigation($navId[6])) == 0, '#1 navId[6] not deleted');
	$this->assert(count($session->getNavigation($navId[7])) == 0, '#1 navId[7] not deleted');
	$this->assert(count($session->getNavigation($navId[8])) > 0, '#1 navId[8] deleted');

	/* Now return from 8 to 3. Should delete 3, 5, 8 */
	$session->jumpNavigation($navId[8], $navId[3]);
	$this->assert(count($session->getNavigation($navId[3])) > 0, '#2 navId[2] deleted');
	$this->assert(count($session->getNavigation($navId[3])) > 0, '#2 navId[3] deleted');
	$this->assert(count($session->getNavigation($navId[4])) > 0, '#2 navId[4] deleted');
	$this->assert(count($session->getNavigation($navId[5])) == 0, '#2 navId[5] not deleted');
	$this->assert(count($session->getNavigation($navId[8])) == 0, '#2 navId[8] not deleted');
    }

    function testSameSessionDifferentRemoteIdentifier() {
	foreach (array('with-cookies', 'without-cookies') as $type) {
	    if ($type == 'with-cookies') {
		GalleryUtilities::removeRequestVariable(SESSION_ID_PARAMETER);
		$_COOKIE[SESSION_ID_PARAMETER] = 'TESTSID';
		$delimiter = !empty($this->_originalServerHttpCookie) ? ' ; ' : '';
		$_SERVER['HTTP_COOKIE'] = SESSION_ID_PARAMETER . '=TESTSID' . $delimiter .
		    $_SERVER['HTTP_COOKIE'];
	    } else {
		GalleryUtilities::putRequestVariable(SESSION_ID_PARAMETER, 'TESTSID');
		unset($_COOKIE[SESSION_ID_PARAMETER]);
		/* Remove cookies also from HTTP Header */
		$_SERVER['HTTP_COOKIE'] = '';
	    }
	    unset($_SERVER['HTTP_X_FORWARDED_FOR']);
	    unset($_SERVER['HTTP_CLIENT_IP']);

	    /* Create a test session with cookie support put well known data in it. */
	    $_SERVER['HTTP_USER_AGENT'] = 'TEST_USER_AGENT';
	    $_SERVER['REMOTE_ADDR'] = '1.2.3.4';
	    $session = new GallerySession();
	    $ret = $session->init();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $session->put('my-key', 'my-value');
	    $ret = $session->save();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    /* Verify that we can connect to the same session with the same identifying data */
	    $_SERVER['HTTP_USER_AGENT'] = 'TEST_USER_AGENT';
	    $_SERVER['REMOTE_ADDR'] = '1.2.3.4';
	    $session = new GallerySession();
	    $ret = $session->init();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assert($session->get('my-key'), 'verify ' . $type);
	    $ret = $session->save();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals($session->getSessionId(), 'TESTSID', 'session id changed!');

	    /* Vary only the IP, it should still work */
	    $_SERVER['HTTP_USER_AGENT'] = 'TEST_USER_AGENT';
	    $_SERVER['REMOTE_ADDR'] = '6.7.9.9';
	    $session = new GallerySession();
	    $ret = $session->init();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assert($session->get('my-key'), 'verify ' . $type);
	    $ret = $session->save();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals($session->getSessionId(), 'TESTSID', 'session id changed!');

	    /* Vary only the user agent, it should still work */
	    $_SERVER['HTTP_USER_AGENT'] = 'DIFFERENT_USER_AGENT';
	    $_SERVER['REMOTE_ADDR'] = '1.2.3.4';
	    $session = new GallerySession();
	    $ret = $session->init();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assert($session->get('my-key'), 'verify ' . $type);
	    $ret = $session->save();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals($session->getSessionId(), 'TESTSID', 'session id changed!');

	    /* Vary both.  Our data is gone, and we have a different cookie id */
	    $_SERVER['HTTP_USER_AGENT'] = 'DIFFERENT_USER_AGENT';
	    $_SERVER['REMOTE_ADDR'] = '3.5.7.9';
	    $session = new GallerySession();
	    $ret = $session->init();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(null, $session->get('my-key'), 'different ip ' . $type);
	    $ret = $session->save();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assert($session->getSessionId() != 'TESTSID');

	    /* Verify that our original session has not been nuked */
	    $_SERVER['HTTP_USER_AGENT'] = 'TEST_USER_AGENT';
	    $_SERVER['REMOTE_ADDR'] = '1.2.3.4';
	    $session = new GallerySession();
	    $ret = $session->init();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals('my-value', $session->get('my-key'), 'original ip ' . $type);
	    $ret = $session->save();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $ret = $session->reset();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
    }

    function testRegenerateSessionId() {
	    /* Verify that our original session has not been nuked */
	    $_SERVER['HTTP_USER_AGENT'] = 'TEST_USER_AGENT';
	    $_SERVER['REMOTE_ADDR'] = '1.1.1.1';
	    $session = new GallerySession();
	    $ret = $session->init();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $sessionUrl = 'http://example.com/gallery2/main.php?'
			. GalleryUtilities::prefixFormVariable($session->getKey()) . '=';
	    GalleryUtilities::putRequestVariable('return', $sessionUrl . $session->getId());
	    $navId = $session->addToNavigation(array(
		'returnName' => 'unittest',
		'returnUrl' => $sessionUrl . $session->getId()));

	    /* Set a value we can test after regeneration */
	    $key = 'test-key';
	    $value = md5(date('c') . $session->getSessionId());
	    $session->put($key, $value);
	    $ret = $session->save();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    /* Verify the value was set */
	    $this->assertEquals($value, $session->get($key));

	    /* Store the session id */
	    $sessionIdPreRegen = $session->getSessionId();

	    /* Regenerate the session */
	    $ret = $session->regenerate();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    /* Verify that the test value is still set, and that the session ID actually changed */
	    $this->assertEquals($value, $session->get($key));
	    $this->assert($sessionIdPreRegen != $session->getSessionId(),
			    'Session ID did not change on regenerate');

	    /* Verify we won't get redirected to any links with the old session id */
	    $this->assertEquals($sessionUrl . $session->getId(),
		GalleryUtilities::getRequestVariables('return'),
		'session id in return url not mapped to new session id');
	    $this->assertEquals(array(
		array('returnName' => 'unittest',
		      'returnUrl' => $sessionUrl . $session->getId())),
		$session->getNavigation($navId),
		'session id in navigation url not mapped to new session id');
    }


    function testSearchEngineCrawlerSessions() {
	unset($_COOKIE[SESSION_ID_PARAMETER]);
	$_SERVER['HTTP_COOKIE'] = '';
	$_SERVER['HTTP_USER_AGENT'] = 'Googlebot/2.1 (+http://www.google.com/bot.html)';
	$_SERVER['REMOTE_ADDR'] = '1.2.3.4';
	$session = new GallerySession();
	$ret = $session->init();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('google1234', $session->getSessionId());
    }

    function testCompareIdentifiers() {
	$this->assertEquals(1, GallerySession::_compareIdentifiers(array(0), array(0)));
	$this->assertEquals(1, GallerySession::_compareIdentifiers(array(0), array(0, 1)));
	$this->assertEquals(1, GallerySession::_compareIdentifiers(array(0, 1), array(0)));
	$this->assertEquals(2, GallerySession::_compareIdentifiers(array('x', 1, 'y'),
								   array('x', 0, 'y')));
	$this->assertEquals(0, GallerySession::_compareIdentifiers(array(1), 'x'));
	$this->assertEquals(0, GallerySession::_compareIdentifiers(array(1), null));
	$this->assertEquals(0, GallerySession::_compareIdentifiers(null, array(1)));
	$this->assertEquals(0, GallerySession::_compareIdentifiers(null, null));
	$this->assertEquals(0, GallerySession::_compareIdentifiers('x', 'x'));
    }

    /*
     * Test if G2 creates cookies with the correct domain / path and name
     * Doing an actual HTTP request because there is no reliable method to check what headers have
     * been sent.
     */
    function testSessionCookieHeader() {
	global $gallery;

	$urlGenerator =& $gallery->getUrlGenerator();

	/* Test cases */
	$tests = array();
	/* We don't expect a cookie header when requesting a DownloadItem */
	$tests[] = array('key' => 'view', 'value' => 'core.DownloadItem', 'er' => false);
	$tests[] = array('key' => 'view', 'value' => 'core:DownloadItem', 'er' => false);
	$tests[] = array('key' => 'view', 'value' => 'core.ShowItem', 'er' => true);
	$tests[] = array('key' => 'controller', 'value' => 'migrate.Redirect', 'er' => false);

	unset($_COOKIE[SESSION_ID_PARAMETER]);
	unset($_SERVER['HTTP_COOKIE']);
	
	foreach ($tests as $testCase) {
	    /* First replace the phpVm with a mock VM */
	    unset($_REQUEST['phpVmHeaders']);
	    $phpVm = new SessionTestPhpVm();
	    $gallery->_phpVm = $phpVm;
	    
	    /* Now set the request variables */
	    GalleryUtilities::removeRequestVariable('view');
	    GalleryUtilities::removeRequestVariable('controller');
	    GalleryUtilities::putRequestVariable($testCase['key'], $testCase['value']);
	    
	    $session = new GallerySession();
	    /* The init call should actually send or not send a cookie */
	    $ret = $session->init();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    
	    /*
	     * And now check the headers (that would have been sent if we didn't use our fantastic
	     * mock VM :)
	     */
	    $headers = $phpVm->headers_sent() ? $_REQUEST['phpVmHeaders'] : array();
	    ob_start();
	    var_dump($headers);
	    $debugHeaders = ob_get_clean();
	    $this->assertEquals($testCase['er'], isset($headers['Set-Cookie']),
				'Set-Cookie header not set. These are the headers: ' .
				$debugHeaders);
	    if ($testCase['er'] && isset($headers['Set-Cookie'])) {
		/* Also check if the cookie header is correct */
		unset($cookie);
		/* There can be multiple set-cookie headers, find the correct one */
		if (!is_array($headers['Set-Cookie'])) {
		    $cookie = $headers['Set-Cookie'];
		} else {
		    foreach ($headers['Set-Cookie'] as $setcookie) {
			if (strpos($setcookie, SESSION_ID_PARAMETER) !== false) {
			    $cookie = $setcookie;
			    break;
			}
		    }
		}
		if (isset($cookie)) {
		    /* Cookie path should be set */
		    list ($ret, $expected) = $urlGenerator->getCookiePath();
		    if ($ret->isError()) {
			return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		    }
		    $this->assertEquals(1, preg_match('{path=' . $expected . '(?:[,;].*)?$}i', $cookie),
					'Wrong cookie path in cookie: "' . $cookie . '"');
		    /* Cookie domain should be the configured cookie domain or not set */
		    $cookieDomain = $session->getCookieDomain();
		    if (!empty($cookieDomain)) {
			/* escape dots in cookieDomain */
			$cookieDomain = str_replace('.', '\\.', $cookieDomain);
			$this->assert(preg_match('/domain=' . $cookieDomain . '(?:[,;].*)?$/i', $cookie),
				      "Missing domain=$cookieDomain in cookie: '$cookie'");
		    }
		} else {
		    $this->assert(0, 'G2 session cookie does not exist!');
		}
	    }    
	}
    }
    
    /* Test configured cookie domain vs. not configured cookie domain */
    function testSessionCookieDomain() {
	/* First check if the configured value is taken if available */
	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'cookie.domain', 'bad');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Check if the correct value was stored */
	list ($ret, $realValue) = GalleryCoreApi::getPluginParameter('module', 'core',
								     'cookie.domain');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('bad', $realValue, 'could not set plugin parameter cookie.domain');
	/* Now do the actual check */
	$session = new GallerySession();
	$ret = $session->init();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('bad', $session->getCookieDomain(),
			    'configured cookie domain does not work');

	/* Now reset the cookie domain configuration parameter */
	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'cookie.domain', '');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Check if the correct value was stored */
	list ($ret, $realValue) = GalleryCoreApi::getPluginParameter('module', 'core',
								     'cookie.domain');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('', $realValue, 'could not reset plugin parameter cookie.domain');

	/* Now check if it returns an empty string if no cookie domain is configured */
	$session = new GallerySession();
	$ret = $session->init();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('', $session->getCookieDomain(), 'default cookie domain does not work');
    }

    /* Test configured cookie path vs. not configured cookie path */
    function testSessionGetCookiePath() {
	/*
	 * This is already tested in UrlGeneratorTest
	 * We have a getCookiePath function in GallerySession to not have to deal with db errors
	 * when we actually need the cookie path
	 */
    }
}

class SessionTestPhpVm extends GalleryPhpVm {
    function header($string, $replace=null) {
	if ($pos = strpos($string, ':')) {
	    $_REQUEST['phpVmHeaders'][substr($string, 0, $pos)] = substr($string, $pos+1);
	}
    }

    function headers_sent() {
	return (isset($_REQUEST['phpVmHeaders']) && !empty($_REQUEST['phpVmHeaders']));
    }
}
?>
