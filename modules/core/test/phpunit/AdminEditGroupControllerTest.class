<?php
/*
 * $RCSfile: AdminEditGroupControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.16 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * AdminEditGroup controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class AdminEditGroupControllerTest extends GalleryControllerTestCase {

    function AdminEditGroupControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core.AdminEditGroup');
    }

    function testCancel() {
	list ($ret, $group) = $this->_createGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('groupId', $group->getId());
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminGroups'),
				  'status' => array(),
				  'error' => array()),
			    $results);
	$this->_deleteGroup($group);
    }

    function testUndo() {
	list ($ret, $group) = $this->_createGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('groupId', $group->getId());
	GalleryUtilities::putRequestVariable('form[action][undo]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminEditGroup',
						      'groupId' => $group->getId()),
				  'status' => array(),
				  'error' => array()),
			    $results);

	$this->_deleteGroup($group);
    }

    function testEditGroup() {
	list ($ret, $group) = $this->_createGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$newGroupName = 'newname-'.rand();
	GalleryUtilities::putRequestVariable('groupId', $group->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[groupName]', $newGroupName);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminGroups'),
				  'status' => array('modifiedGroup' => $newGroupName),
				  'error' => array()),
			    $results);
	$this->_deleteGroup($group);
    }

    function testEditGroupMissingName() {
	list ($ret, $group) = $this->_createGroup();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('groupId', $group->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[groupName]', '');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'core.AdminEditGroup'),
				  'status' => array(),
				  'error' => array('form[error][groupName][missing]')),
			    $results);
	$this->_deleteGroup($group);
    }

    function _createGroup() {
	global $gallery;

	list ($ret, $group) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryGroup');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!isset($group)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__),
			 null);
	}

	$ret = $group->create('testgroup-'.rand());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$ret = $group->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $group);
    }

    function _deleteGroup($group) {
	global $gallery;
	$ret = GalleryCoreApi::deleteEntityById($group->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
}
?>
