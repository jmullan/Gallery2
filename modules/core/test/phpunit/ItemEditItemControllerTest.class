<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ItemEditItem controller tests
 */
class ItemEditItemControllerTest extends GalleryControllerTestCase {

    function ItemEditItemControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'core:ItemEditItem');
    }

    function setUp() {
	global $gallery;

	parent::setUp();

	for ($i = 0; $i < 2; $i++) {
	    list ($ret, $this->_item[$i]) = $this->_createRandomDataItem($this->_getRootId());
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	for ($i = 0; $i < 2; $i++) {
	    list ($ret, $this->_album[$i]) = $this->_createRandomAlbum($this->_getRootId());
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
    }

    function tearDown() {
	global $gallery;

	foreach ($this->_item as $item) {
	    $ret = $gallery->deleteEntityById($item->getId());
	    if ($ret->isError()) {
		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	foreach ($this->_album as $album) {
	    $ret = $gallery->deleteEntityById($album->getId());
	    if ($ret->isError()) {
		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	
	parent::tearDown();
    }

    function testUndo() {
	global $gallery;

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_item[0]->getId());
	GalleryUtilities::putRequestVariable('form.action.undo', 1);

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditItem',
						      'itemId' => $this->_item[0]->getId()),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testEditItem() {
	global $gallery;

	/* Use valid inputs */
	$newPathComponent = $this->_item[0]->getPathComponent() . rand();
	GalleryUtilities::putRequestVariable('itemId', $this->_item[0]->getId());
	GalleryUtilities::putRequestVariable('form.action.save', 1);
	GalleryUtilities::putRequestVariable('form.pathComponent', $newPathComponent);
	GalleryUtilities::putRequestVariable('form.title', 'new title');
	GalleryUtilities::putRequestVariable('form.summary', 'new summary');
	GalleryUtilities::putRequestVariable('form.keywords', 'new keywords');
	GalleryUtilities::putRequestVariable('form.description', 'new description');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditItem',
						      'itemId' => $this->_item[0]->getId()),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);
    }

    function testInvalidPathComponent() {
	global $gallery;

	/* Use valid inputs */
	$newPathComponent = $this->_item[0]->getPathComponent() . rand();
	GalleryUtilities::putRequestVariable('itemId', $this->_item[0]->getId());
	GalleryUtilities::putRequestVariable('form.action.save', 1);
	GalleryUtilities::putRequestVariable('form.pathComponent', '#$%W$%W?$%W%/');

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditItem'),
				  'status' => array(),
				  'error' => array('form.error.pathComponent.invalid')),
			    $results);
    }

    function testMissingPathComponent() {
	global $gallery;

	/* Use valid inputs */
	$newPathComponent = $this->_item[0]->getPathComponent() . rand();
	GalleryUtilities::putRequestVariable('itemId', $this->_item[0]->getId());
	GalleryUtilities::putRequestVariable('form.action.save', 1);
	GalleryUtilities::removeRequestVariable('form.pathComponent');

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditItem'),
				  'status' => array(),
				  'error' => array('form.error.pathComponent.missing')),
			    $results);
    }

    function testPathCollisionItem() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_item[0]->getId());
	GalleryUtilities::putRequestVariable('form.action.save', 1);
	GalleryUtilities::putRequestVariable('form.pathComponent', $this->_item[1]->getPathComponent());
	GalleryUtilities::putRequestVariable('form.title', 'new title');
	GalleryUtilities::putRequestVariable('form.summary', 'new summary');
	GalleryUtilities::putRequestVariable('form.keywords', 'new keywords');
	GalleryUtilities::putRequestVariable('form.description', 'new description');

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditItem'),
				  'status' => array(),
				  'error' => array('form.error.pathComponent.collision')),
			    $results);
    }

    function testPathCollisionAlbum() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', $this->_album[0]->getId());
	GalleryUtilities::putRequestVariable('form.action.save', 1);
	GalleryUtilities::putRequestVariable('form.pathComponent', $this->_album[1]->getPathComponent());
	GalleryUtilities::putRequestVariable('form.title', 'new title');
	GalleryUtilities::putRequestVariable('form.summary', 'new summary');
	GalleryUtilities::putRequestVariable('form.keywords', 'new keywords');
	GalleryUtilities::putRequestVariable('form.description', 'new description');

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:ItemAdmin',
						      'subView' => 'core:ItemEditItem'),
				  'status' => array(),
				  'error' => array('form.error.pathComponent.collision')),
			    $results);
    }

    function testInvalidItem() {
	/* Use invalid inputs */
	GalleryUtilities::putRequestVariable('itemId', '1234' . rand(1, 99999));
	GalleryUtilities::putRequestVariable('form.action.save', 1);

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest(ERROR_PERMISSION_DENIED);
    }

}
?>
