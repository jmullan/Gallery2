<?php
/*
 * $RCSfile: DerivativeTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.33 $ $Date: 2005/09/10 06:11:20 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Derivative functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class DerivativeTest extends GalleryTestCase {

    function DerivativeTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;

	parent::setUp();

	/* Create a root container to hold all our test items */
	list ($ret, $this->_root) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_root);

	/* Register a mock data item type */
	$path = 'modules/core/test/phpunit/DerivativeTest.class';
	$ret = GalleryCoreApi::registerFactoryImplementation(
	    'GalleryItem', 'DerivativeTestItem', 'DerivativeTestItem',
	    $path, 'coreTest', array('test/*'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Register a dummy toolkit */
	$ret = GalleryCoreApi::registerFactoryImplementation(
	    'GalleryToolkit', 'DerivativeTestToolkit', 'DerivativeTestToolkit',
	    $path, 'coreTest', null);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markToolkitForCleanup('DerivativeTestToolkit');

	/* Register an operation that we can perform on our mock data items */
	$ret = GalleryCoreApi::registerToolkitOperation(
	    'DerivativeTestToolkit', array('test/file'), 'test-operation',
	    array(), 'test-description', 'test/file');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	DerivativeTestToolkit::clearPerformedOperations();
	GalleryDataCache::reset();
    }

    function testRemapSourceIds() {
	list ($ret, $item1) = $this->_createRandomAlbum($this->_root->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $item2) = $this->_createRandomAlbum($this->_root->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $derivative) =
	    $this->_createDerivative($item1, $item1->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::remapSourceIds($item1->getId(), $item2->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $derivative) = $derivative->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($item2->getId(), $derivative->getDerivativeSourceId());
    }

    function testInvalidateDerivativeDimensionsBySourceIds() {
	list ($ret, $item1) = $this->_createRandomAlbum($this->_root->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $parentDerivative) = $this->_createDerivative(
	    $item1, $item1->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE,
	    'bogus-operation|123', 'image/jpeg', array('width' => 100, 'height' => 200));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create a sub-derivative and give it some dimensions*/
	list ($ret, $subDerivative) = $this->_createDerivative(
	    $item1, $parentDerivative->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE,
	    'bogus-operation|123', 'image/jpeg', array('width' => 100, 'height' => 200));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* sanity check */
	$this->assertEquals(100, $subDerivative->getWidth());
	$this->assertEquals(200, $subDerivative->getHeight());

	$ret = GalleryCoreApi::invalidateDerivativeDimensionsBySourceIds(
	    array($parentDerivative->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $subDerivative) = $subDerivative->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(0, $subDerivative->getWidth());
	$this->assertEquals(0, $subDerivative->getHeight());
    }

    function testExpireDerivatives() {
	list ($ret, $item) =
	    $this->_createRandomDataItem($this->_root->getId(), 'test/file');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create a derivative from our data item */
	list ($ret, $derivative) = $this->_createDerivative(
	    $item, $item->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $derivative, $rebuilt) =
	    GalleryCoreApi::rebuildDerivativeCacheIfNotCurrent($derivative->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($rebuilt, "cache was rebuilt");

	list ($ret, $current) = $derivative->isCacheCurrent();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($current, "cache is current");

	$ret = GalleryCoreApi::expireDerivativeTreeBySourceIds(
	    array($derivative->getDerivativeSourceId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $current) = $derivative->isCacheCurrent();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!$current, "cache is no longer current");
    }

    function testRebuildThumbnailOfSmallerThumbnail() {
	/*
	 * Make sure that derivatives derived from other derivatives are still based off of the
	 * original data item.
	 */
	list ($ret, $item) = $this->_createRandomDataItem($this->_root->getId(), 'test/file');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $firstThumb) = $this->_createDerivative(
	    $item, $item->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
	    'test-operation|testRebuildThumbnailOfSmallerThumbnail-1');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $secondThumb) = $this->_createDerivative(
	    $this->_root, $firstThumb->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
	    'test-operation|testRebuildThumbnailOfSmallerThumbnail-2');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $secondThumb, $rebuilt) =
	    GalleryCoreApi::rebuildDerivativeCacheIfNotCurrent($secondThumb->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($rebuilt, 'thumb was rebuilt');

	/*
	 * We're expecting that we performed testRebuildThumbnailOfSmallerThumbnail-1 on the first
	 * thumbnail (from the source) and testRebuildThumbnailOfSmallerThumbnail-2 on the second
	 * thumbnail (equally from the source -- NOT from the first thumbnail).
	 */
	list ($ret, $sourcePath) = $item->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $firstDestPath) = $firstThumb->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $secondDestPath) = $secondThumb->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ops =& DerivativeTestToolkit::getPerformedOperations();
	$this->assertEquals(array(array('test/file', 'test-operation', $sourcePath, $firstDestPath,
					array('testRebuildThumbnailOfSmallerThumbnail-1')),
				  array('test/file', 'test-operation', $sourcePath, $secondDestPath,
					array('testRebuildThumbnailOfSmallerThumbnail-2'))),
			    $ops);
    }

    /*
     * Make sure isBroken gets set and reset correctly
     * Adds some test coverage for
     *   GalleryCoreApi::rebuildDerivativeCacheIfNotCurrent()
     *   GalleryCoreApi::rebuildDerivativeCache()
     *   GalleryDerivative::rebuildCache() , ::_rebuildCache()
     *   GalleryDerivative::getBrokenDerivativePath()
     *   GalleryDerivative::get/setIsBroken(), ::isCacheCurrent()
     */
    function testRebuildBrokenDerivative() {
	list ($ret, $item) = $this->_createRandomDataItem($this->_root->getId(), 'test/file');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create derivative with unsupported toolkit operation */
	list ($ret, $derivative) = $this->_createDerivative(
	    $item, $item->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE,
	    'bogus-operation|123', 'image/jpeg', array('width' => 100, 'height' => 200));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* sanity check */
	$this->assertEquals(100, $derivative->getWidth());
	$this->assertEquals(200, $derivative->getHeight());
	$this->assertEquals(0, $derivative->getIsBroken());

	/*
	 * Rebuild the cached derivative, it should fail internally and replace the derivative by
	 * the broken derivative placeholder and set it to isBroken = true. It should then return
	 * GalleryStatus::success(), i.e. pretend it worked correctly
	 */
	list ($ret, $derivative, $rebuilt) =
	    GalleryCoreApi::rebuildDerivativeCacheIfNotCurrent($derivative->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($rebuilt, "cache was not rebuilt");

	/* Verify that it is considered as current (because it is broken */
	list ($ret, $current) = $derivative->isCacheCurrent();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($current, 'cache is not current');

	/* Check if the derivative is marked as broken */
	$this->assertEquals(1, $derivative->getIsBroken(), 'Cache is not marked as broken');

	/* Check if the derivative was replaced correctly */
	list ($ret, $mimeType) =
	    GalleryCoreApi::getMimeType($derivative->getBrokenDerivativePath());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($mimeType, $derivative->getMimeType(),
			    'Incorrect broken derivative mime type');
	/* Check file size of broken derivative placeholder */
	global $gallery;
	$platform = $gallery->getPlatform();
	if (!$platform->file_exists($derivative->getBrokenDerivativePath())) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$size = $platform->filesize($derivative->getBrokenDerivativePath());
	$this->assertEquals($size, $derivative->getDerivativeSize(),
			    'Incorrect broken derivative size');

	/* Change the toolkit operation */
	$derivative->setDerivativeOperations('test-operation');
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($derivative->getId(), 1);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = $derivative->save(false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Performance check, it should not rebuild the item on each request */
	list ($ret, $derivative, $rebuilt) =
	    GalleryCoreApi::rebuildDerivativeCacheIfNotCurrent($derivative->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!$rebuilt, 'cache was rebuilt but it was not forced to');

	/* And try to fix the derivative item */
	list ($ret, $derivative, $rebuilt) =
	    GalleryCoreApi::rebuildDerivativeCacheIfNotCurrent($derivative->getId(), true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($rebuilt, 'cache was not rebuilt (2)');

	/* Verify that it is  current */
	list ($ret, $current) = $derivative->isCacheCurrent();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($current, 'cache is not current after fix');

	/* Check if the derivative is not marked as broken */
	$this->assert(!$derivative->getIsBroken(), 'Derivative is still broken');

	/*
	 * Check if the derivative is marked as broken even if it failed to set the broken image
	 * Create derivative with unsupported toolkit operation such that it will fail
	 */
	/* Create derivative with unsupported toolkit operation */
	list ($ret, $derivative) = $this->_createDerivative(
	    $item, $item->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE,
	    'bogus-operation|123', 'image/jpeg', array('width' => 100, 'height' => 200));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* sanity check */
	$this->assertEquals(100, $derivative->getWidth());
	$this->assertEquals(200, $derivative->getHeight());
	$this->assertEquals(0, $derivative->getIsBroken());

	/* Use a degenerate platform to make it fail when it tries to copy the broken image */
	if (GalleryUtilities::isA($platform, 'WinNtPlatform')) {
	    $gallery->setPlatform(new DerivativeTestWinNtPlatform());
	} else {
	    $gallery->setPlatform(new DerivativeTestUnixPlatform());
	}
	/* Do the call */
	list ($ret, $derivativeRet, $rebuilt) =
	    GalleryCoreApi::rebuildDerivativeCacheIfNotCurrent($derivative->getId(), true);
	/* Ret should be ERROR_PLATFORM_FAILURE */
	$gallery->setPlatform($platform);
	$this->assert(ERROR_PLATFORM_FAILURE & $ret->getErrorCode(),
		      'we expect a platform failure');
	$this->assert(!isset($$derivativeRet),
		      'GalleryDerivativeHelper_advanced::rebuildCache() did not return null');
	$this->assert(!$rebuilt, 'it should have failed and not rebuilt the derivative cache');
	/* Refresh the derivative to get the state from the db */
	list ($ret, $derivative) = $derivative->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($derivative->getIsBroken(), 'derivative is not marked as broken');
    }

    function testFetchDerivativesByItemIds() {
	list ($ret, $derivative1) = $this->_createDerivative(
	    $this->_root, $this->_root->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $item) =
	    $this->_createRandomDataItem($this->_root->getId(), 'test/file');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $derivative2) = $this->_createDerivative(
	    $item, $item->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Get the thumbnails */
	list ($ret, $ids) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_root->getId(), $item->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	asort($ids);
	$this->assertEquals(array($this->_root->getId() => $derivative1), $ids, "thumbnails");
    }

    function testFetchDerivativesBySourceIds() {
	list ($ret, $derivative1) = $this->_createDerivative(
	    $this->_root, $this->_root->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $item) =
	    $this->_createRandomDataItem($this->_root->getId(), 'test/file');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $derivative2) = $this->_createDerivative(
	    $item, $item->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	// Fetch thumbnails
	list ($ret, $ids) = GalleryCoreApi::fetchDerivativesBySourceIds(
	    array($this->_root->getId(), $item->getId()), DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($this->_root->getId() => array($derivative1)),
			    $ids, 'thumbnails');

	// Fetch resizes
	list ($ret, $ids) = GalleryCoreApi::fetchDerivativesBySourceIds(
	    array($this->_root->getId(), $item->getId()), DERIVATIVE_TYPE_IMAGE_RESIZE);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($item->getId() => array($derivative2)), $ids, 'resizes');
    }

    function testAdjustDependentDerivatives() {
	global $gallery;

	/*
	 * Create a derivative with a operation that we want to adjust.  Parent it to an item that
	 * will get deleted so that tearDown will get rid of it for us.
	 */
	list ($ret, $derivative1) = $this->_createDerivative(
	    $this->_root, $this->_root->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE, 'filler|1');

	list ($ret, $derivative2) = $this->_createDerivative(
	    $this->_root, $derivative1->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE,
	    'filler|1,2,3;crop|20,30,41,16;filler|1', 'test/file',
	    array('derivativeSourceId' => $derivative1->getId()));

	$ret = GalleryCoreApi::adjustDependentDerivatives($derivative1->getId(), 'rotate|90');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $derivative2) = $derivative2->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('filler|1,2,3;crop|54,20,16,41;filler|1',
			    $derivative2->getDerivativeOperations());
    }

    function testMergeDerivativeOperations() {
	list ($ret, $result) = GalleryCoreApi::mergeDerivativeOperations('A|1,2;B|1,2', 'A|3,4');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('A|3,4;B|1,2', $result);

	list ($ret, $result) = GalleryCoreApi::mergeDerivativeOperations(
	    'A|1,2;B|1,2', 'B|3,4;A|5,6');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('A|5,6;B|3,4', $result);

	list ($ret, $result) = GalleryCoreApi::mergeDerivativeOperations('A|1,2;B|1,2', 'C|5,6');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('A|1,2;B|1,2;C|5,6', $result);

	list ($ret, $result) = GalleryCoreApi::mergeDerivativeOperations('A|1,2;B|1,2', 'A|-1,-2');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('B|1,2', $result);

	list ($ret, $result) = GalleryCoreApi::mergeDerivativeOperations(
	    'C|4,5;A|1,2;B|1,2', 'A|-1,-2');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('C|4,5;B|1,2', $result);

	/* Make sure operations with no args don't gain an unnecessary | */
	list ($ret, $result) = GalleryCoreApi::mergeDerivativeOperations(
	    'A|1,2;D;B|1,2', 'B|3,4;A|5,6');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('A|5,6;D;B|3,4', $result);
    }

    function testFetchPreferredSource() {
	/* No link or preferred --> return the item itself */
	list ($ret, $item) = $this->_createRandomDataItem($this->_root->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $source) = GalleryCoreApi::fetchPreferredSource($item);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($item, $source);

	/* Linked to another item that has no preferred --> the other item */
	list ($ret, $link) = $this->_createLinkedItem($this->_root->getId(), $item);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $source) = GalleryCoreApi::fetchPreferredSource($link);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($item, $source);

	/* Linked to another item that has a preferred --> the other item's preferred */
	list ($ret, $itemPreferred) =
	    $this->_createDerivative($item, $item->getId(), DERIVATIVE_TYPE_IMAGE_PREFERRED);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $source) = GalleryCoreApi::fetchPreferredSource($link);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($itemPreferred, $source);

	/* Item that has a preferred --> the preferred */
	list ($ret, $linkPreferred) =
	    $this->_createDerivative($link, $link->getId(), DERIVATIVE_TYPE_IMAGE_PREFERRED);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $source) = GalleryCoreApi::fetchPreferredSource($link);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($linkPreferred, $source);
    }

    /**
     * This test makes sure that we're generating the right set of operations for our derivatives
     * for a given derivative tree, including derivative operations and postfilters.
     */
    function testFetchFinalOperations() {
	/*
	 * If we've got the following scenario where derivative commands are marked with <> and
	 * postfilter operations are marked with []:
	 *
	 * Source Image A.jpg (640x480):
	 * --> Preferred A1: <rotate|90> [watermark|...]
	 *     --> Derivative A2: <crop|25,49,33,25;thumbnail|150> []
	 *         --> Derivative A3: <thumbnail|75> [test|...;watermark|...]
	 *             --> Derivative A4: <thumbnail|300> []
	 *     --> Derivative A5: <thumbnail|100>
	 *
	 * Source Image B.jpg (640x480):
	 * --> Preferred B1: <> [watermark|...]
	 *
	 * Then when we really do our calculations, the real operations we perform should be:
	 *
	 * TARGET         SOURCE  OPERATONS                                  POSTFILTER
	 * ---------------------------------------------------------------------------------------
	 * Preferred  A1: A.jpg   rotate|90                                  watermark|A1
	 * Derivative A2: A.jpg   rotate|90;crop|25,49,33,25;thumbnail|150
	 * Derivative A3: A.jpg   rotate|90;crop|25,49,33,25;thumbnail|75    test|A3;watermark|A3
	 * Derivative A4: A.jpg   rotate|90;crop|25,49,33,25;thumbnail|300
	 * Derivative A5: A.jpg   rotate|90;thumbnail|100
	 *
	 * Preferred  B1: B.jpg                                              watermark|B1
	 *
	 * Note how A3's thumbnail|75 overrides A2's thumbnail|150.
	 * Note how A2 is not watermarked, though it's source (A1) is.
	 */

	/* No link or preferred --> return the item itself */
	list ($ret, $itemA) = $this->_createRandomDataItem($this->_root->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $A1) = $this->_createDerivative(
	    $itemA, $itemA->getId(), DERIVATIVE_TYPE_IMAGE_PREFERRED,
	    'rotate|90', 'test/file', array('postFilterOperations' => 'watermark|A1'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $A2) = $this->_createDerivative(
	    $itemA, $A1->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE, 'crop|25,49,33,25;thumbnail|150');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $A3) = $this->_createDerivative(
	    $itemA, $A2->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE, 'thumbnail|75',
	    'test/file', array('postFilterOperations' => 'test|A3;watermark|A3'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $A4) = $this->_createDerivative(
	    $itemA, $A3->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE, 'thumbnail|300');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $A5) = $this->_createDerivative(
	    $itemA, $A1->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE, 'thumbnail|100');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $itemB) = $this->_createRandomDataItem($this->_root->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $B1) = $this->_createDerivative(
	    $itemB, $itemB->getId(), DERIVATIVE_TYPE_IMAGE_RESIZE, '',
	    'test/file', array('postFilterOperations' => 'watermark|B1'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $source, $operations) = $A1->fetchFinalOperations();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($source, $itemA);
	$this->assertEquals(array('rotate|90', 'watermark|A1'), $operations);

	list ($ret, $source, $operations) = $A2->fetchFinalOperations();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($source, $itemA);
	$this->assertEquals(array('rotate|90', 'crop|25,49,33,25', 'thumbnail|150'), $operations);

	list ($ret, $source, $operations) = $A3->fetchFinalOperations();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($source, $itemA);
	$this->assertEquals(array('rotate|90', 'crop|25,49,33,25', 'thumbnail|75',
				  'test|A3', 'watermark|A3'), $operations);

	list ($ret, $source, $operations) = $A4->fetchFinalOperations();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($source, $itemA);
	$this->assertEquals(array('rotate|90', 'crop|25,49,33,25', 'thumbnail|300'), $operations);

	list ($ret, $source, $operations) = $A5->fetchFinalOperations();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($source, $itemA);
	$this->assertEquals(array('rotate|90', 'thumbnail|100'), $operations);

	list ($ret, $source, $operations) = $B1->fetchFinalOperations();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($source, $itemB);
	$this->assertEquals(array('watermark|B1'), $operations);
    }

    function testFinalOperations2() {
	/*
	 * Verify that we are able to re-use the preferred's data file if the preferred has no
	 * postfilter operations.  Ie, if we have a thumb based on a preferred based on a source,
	 * and we want to build the thumb, we can start building from the preferred instead of
	 * going all the way back to the source, as long as the preferred doesn't have a
	 * postfilter that would render its output file unusable to us.
	 */
	list ($ret, $item) = $this->_createRandomDataItem($this->_root->getId(), 'test/file');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $preferred) = $this->_createDerivative(
	    $item, $item->getId(), DERIVATIVE_TYPE_IMAGE_PREFERRED,
	    'test-operation|source-to-preferred');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $thumb) = $this->_createDerivative(
	    $item, $preferred->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
	    'test-operation|preferred-to-thumb');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $thumb, $rebuilt) =
	    GalleryCoreApi::rebuildDerivativeCacheIfNotCurrent($thumb->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($rebuilt, 'thumb was rebuilt');

	/*
	 * We're expecting that we build the preferred (source-to-preferred), then we build the
	 * thumb (preferred-to-thumb).
	 */
	list ($ret, $sourcePath) = $item->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $preferredPath) = $preferred->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $thumbPath) = $thumb->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ops =& DerivativeTestToolkit::getPerformedOperations();
	$this->assertEquals(array(array('test/file', 'test-operation', $sourcePath, $preferredPath,
					array('source-to-preferred')),
				  array('test/file', 'test-operation', $preferredPath, $thumbPath,
					array('preferred-to-thumb'))),
			    $ops);
    }

    function testHasNoOperations() {
	list ($ret, $derivative) = $this->_createDerivative(
	    $this->_root, $this->_root->getId(), DERIVATIVE_TYPE_IMAGE_PREFERRED, '');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert($derivative->hasNoOperations());
    }

    function testRemoveDerivativeOperation() {
	$this->assertEquals('test|1,2,3,4;test|4,5,6',
            GalleryCoreApi::removeDerivativeOperation(
		'composite', 'test|1,2,3,4;composite|a,b;test|4,5,6'));
    }
}

/**
 * Load required classes
 */
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryToolkit.class');
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryDataItem.class');

/**
 * Test toolkit
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class DerivativeTestToolkit extends GalleryToolkit {

    function clearPerformedOperations() {
	$ops =& DerivativeTestToolkit::getPerformedOperations();
	array_splice($ops, 0, sizeof($ops));
    }

    function &getPerformedOperations() {
	static $operations;
	if (!isset($operations)) {
	    $operations = array();
	}
	return $operations;
    }

    /**
     * @see GalleryToolkit::performOperation()
     * Dummy operation
     */
    function performOperation($mimeType, $operationName, $sourceFilename,
			      $destFilename, $parameters, $context=array()) {
	global $gallery;

	$ops =& DerivativeTestToolkit::getPerformedOperations();
	$ops[] = array($mimeType, $operationName, $sourceFilename, $destFilename, $parameters);

	if ($sourceFilename != $destFilename) {
	    $platform = $gallery->getPlatform();
	    $platform->copy($sourceFilename, $destFilename);
	}
	return array(GalleryStatus::success(), $mimeType, $context);
    }

    /**
     * @see GalleryToolkit::performOperation()
     * Dummy operation
     */
    function mergeOperations($operation1, $args1, $operation2, $args2) {
	if ($operation1 == $operation2) {
	    if ($operation1 == 'A' &&
		$args1[0] + $args2[0] == 0 &&
		$args1[1] + $args2[1] == 0) {

		/* Simulate an operation that cancels itself out when merged */
		return array(true, null, null);
	    }

	    if ($operation1 == 'test-operation' &&
		$args1[0] == 'testRebuildThumbnailOfSmallerThumbnail-1' &&
		$args2[0] == 'testRebuildThumbnailOfSmallerThumbnail-2') {
		return array(true, $operation2, $args2);
	    }

	    return array(true, $operation2, $args2);
	}
	return array(false, null, null);
    }
}

/**
 * Test item
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class DerivativeTestItem extends GalleryDataItem { }

GalleryCoreApi::relativeRequireOnce('/modules/core/classes/GalleryPlatform/WinNtPlatform.class');
GalleryCoreApi::relativeRequireOnce('/modules/core/classes/GalleryPlatform/UnixPlatform.class');
/* Used for the rebuildCache test */
class DerivativeTestWinNtPlatform extends WinNtPlatform {
    /* Let the copy() call fail */
    function copy($source, $dest) {
	return false;
    }
}
class DerivativeTestUnixPlatform extends UnixPlatform {
    /* Let the copy() call fail */
    function copy($source, $dest) {
	return false;
    }
}
?>
