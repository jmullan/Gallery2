<?php
/*
 * $RCSfile: ItemAttributesTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.21 $ $Date: 2006/01/30 23:00:21 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test ItemAttribute functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemAttributesTest extends GalleryTestCase {

    function ItemAttributesTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	list ($ret, $this->_parentItem) = $this->_createRandomAlbum(
	    $this->_getRootId(), array('orderBy' => 'id', 'orderDirection' => ORDER_ASCENDING));
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_parentItem);

	/*
	 * The parentItem inherits the permissions from the root album. Thus, normalize the
	 * permissions for the tests here. Set it to core.view permission for everybody
	 */
	$ret = GalleryCoreApi::removeItemPermissions($this->_parentItem->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $everybodyGroupId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.everybodyGroup');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addGroupPermission(
	    $this->_parentItem->getId(), $everybodyGroupId, 'core.view', true);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Verify the permissions */
	list ($ret, $compressedPerms) =
	    GalleryCoreApi::fetchAllPermissionsForItem($this->_parentItem->getId(), true);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(array('groupId' => $everybodyGroupId,
					'permission' => 'core.view')), $compressedPerms,
			    'Failed to define initial permissions');

	/* Create additional test items */
	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $this->_childItems[$i]) =
		$this->_createRandomAlbum($this->_parentItem->getId());
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	$this->_saveSession = $gallery->_session;
    }

    function tearDown() {
	global $gallery;
	$gallery->_session = $this->_saveSession;

	parent::tearDown();
    }

    /**
     * Update the view count and verify it
     */
    function testSetItemViewCount() {
	$ret = GalleryCoreApi::setItemViewCount($this->_childItems[0]->getId(), 999);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $viewCount) =
	    GalleryCoreApi::fetchItemViewCount($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(999, $viewCount);
    }

    /**
     * Update the view count and verify it
     */
    function testIncrementItemViewCount() {
	global $gallery;
	$session = new ItemAttributesTestMockSession();
	$gallery->_session =& $session;
	$gallery->_phpVm = new ItemAttributesTestMockPhpVm();
	unset($_REQUEST['phpVmHeaders']);
	
	$ret = GalleryCoreApi::setItemViewCount($this->_childItems[0]->getId(), 0);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::incrementItemViewCount($this->_childItems[0]->getId(), 3);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $viewCount) =
	    GalleryCoreApi::fetchItemViewCount($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(3, $viewCount);
	$this->assert(empty($_REQUEST['phpVmHeaders']),
		      'no headers should be sent for logged in users');
    }

    /**
     * Verify that we don't increment the view count until a day after the last increment within
     * the same session.
     */
    function testDontIncrementItemViewCountTooOften() {
	global $gallery;
	$session = new ItemAttributesTestMockSession();
	$gallery->_session =& $session;
	$gallery->_phpVm = new ItemAttributesTestMockPhpVm();

	$ret = GalleryCoreApi::setItemViewCount($this->_childItems[0]->getId(), 0);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	for ($i = 0; $i < 8; $i++) {
	    $ret = GalleryCoreApi::incrementItemViewCount($this->_childItems[0]->getId(), 1);
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	list ($ret, $viewCount) =
	    GalleryCoreApi::fetchItemViewCount($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, $viewCount);
    }

    /**
     * Verify that we don't increment the view count until a day after the last increment within
     * the same session.
     */
    function testIncrementItemViewCountThreshold() {
	global $gallery;
	$session = new ItemAttributesTestMockSession();
	$gallery->_session =& $session;
	$gallery->_phpVm = new ItemAttributesTestMockPhpVm();

	$ret = GalleryCoreApi::setItemViewCount($this->_childItems[0]->getId(), 0);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::incrementItemViewCount($this->_childItems[0]->getId(), 1);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Backdate our last viewed time by *almost* one day. */
	$lastViewed =& $session->get('core.lastViewed');
	$lastViewed[$this->_childItems[0]->getId()] -= 86398;

	$ret = GalleryCoreApi::incrementItemViewCount($this->_childItems[0]->getId(), 1);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $viewCount) =
	    GalleryCoreApi::fetchItemViewCount($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* No change; a full day has not elapsed */
	$this->assertEquals(1, $viewCount);

	/* Backdate it further over the day line */
	$lastViewed =& $session->get('core.lastViewed');
	$lastViewed[$this->_childItems[0]->getId()] -= 4;

	$ret = GalleryCoreApi::incrementItemViewCount($this->_childItems[0]->getId(), 1);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $viewCount) =
	    GalleryCoreApi::fetchItemViewCount($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Now it changes */
	$this->assertEquals(2, $viewCount);
    }

    function testIncrementItemViewCountGuestNoSessionIfModifiedNotSetRand() {
	global $gallery;
	$session = new ItemAttributesTestMockSession(false);
	$gallery->_session = $session;
	$this->_becomeGuestUser();
	$gallery->_phpVm = new ItemAttributesTestMockPhpVm(false, array(), 0, time());
	unset($_SERVER['HTTP_IF_MODIFIED_SINCE']);
	$_REQUEST['phpVmHeaders'] = array();
	
	$ret = GalleryCoreApi::setItemViewCount($this->_childItems[0]->getId(), 0);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::incrementItemViewCount($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $viewCount) =
	    GalleryCoreApi::fetchItemViewCount($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(0, $viewCount, 'first attempt, rand = 0 -> do not increment');
	/* It only sets the header if it actually increments */
	$this->assertEquals(array(), $_REQUEST['phpVmHeaders']);
    }

    function testIncrementItemViewCountGuestNoSessionIfModifiedNotSetRand2() {
	global $gallery;
	$session = new ItemAttributesTestMockSession(false);
	$gallery->_session = $session;
	$this->_becomeGuestUser();
	$now = time();
	$gallery->_phpVm = new ItemAttributesTestMockPhpVm(false, array(), 1, $now);
	unset($_SERVER['HTTP_IF_MODIFIED_SINCE']);
	$_REQUEST['phpVmHeaders'] = array();
	
	$ret = GalleryCoreApi::setItemViewCount($this->_childItems[0]->getId(), 0);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::incrementItemViewCount($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $viewCount) =
	    GalleryCoreApi::fetchItemViewCount($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, $viewCount, 'first attempt, rand = 1 -> increment');	
	$this->assertEquals(array('Last-Modified' => ' ' . GalleryUtilities::getHttpDate($now)),
			    $_REQUEST['phpVmHeaders']);
    }

    function testIncrementItemViewCountGuestIfModifiedIsSet() {
	global $gallery;
	$session = new ItemAttributesTestMockSession(false);
	$gallery->_session =& $session;
	$this->_becomeGuestUser();
	$gallery->_phpVm =
	    new ItemAttributesTestMockPhpVm();
	$_SERVER['HTTP_IF_MODIFIED_SINCE'] = 'something';

	$ret = GalleryCoreApi::setItemViewCount($this->_childItems[0]->getId(), 0);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$ret = GalleryCoreApi::incrementItemViewCount($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $viewCount) =
	    GalleryCoreApi::fetchItemViewCount($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(0, $viewCount);
    }

    function testIncrementItemViewCountGuestIfModifiedIsSet2() {
	global $gallery;
	$session = new ItemAttributesTestMockSession(false);
	$this->_becomeGuestUser();
	$gallery->_session =& $session;
	$gallery->_phpVm =
	    new ItemAttributesTestMockPhpVm(true, array('If-modified-since' => 'something'));
	unset($_SERVER['HTTP_IF_MODIFIED_SINCE']);

	$ret = GalleryCoreApi::setItemViewCount($this->_childItems[0]->getId(), 0);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$ret = GalleryCoreApi::incrementItemViewCount($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $viewCount) =
	    GalleryCoreApi::fetchItemViewCount($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(0, $viewCount);
    }

    function testIncrementItemViewCountGuestIfModifiedIsSetNotGuest() {
	global $gallery;
	$asdminUserId = $gallery->getActiveUserId();
	$session = new ItemAttributesTestMockSession();
	$gallery->_session =& $session;
	$gallery->_phpVm =
	    new ItemAttributesTestMockPhpVm(true, array('If-modified-since' => 'something'));
	$_SERVER['HTTP_IF_MODIFIED_SINCE'] = 'foobar';

	$ret = GalleryCoreApi::setItemViewCount($this->_childItems[0]->getId(), 0);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($asdminUserId, $gallery->getActiveUserId(), 'admin user id');
	
	$ret = GalleryCoreApi::incrementItemViewCount($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $viewCount) =
	    GalleryCoreApi::fetchItemViewCount($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, $viewCount, 'view count');
    }

    /**
     * Update the view count and verify it
     */
    function testSetOrderWeight() {
	$ret = GalleryCoreApi::setItemOrderWeight($this->_childItems[0]->getId(), 123);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $orderWeight) =
	    GalleryCoreApi::fetchItemOrderWeight($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(123, $orderWeight);
    }

    /**
     * Set the weights to something sequential then verify that we can find the next
     * higher or lower weight.
     */
    function testFetchNextItemWeight() {
	for ($i = 0; $i < sizeof($this->_childItems); $i++) {
	    $ret = GalleryCoreApi::setItemOrderWeight($this->_childItems[$i]->getId(), $i);
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	list ($ret, $higher) =
	    GalleryCoreApi::fetchNextItemWeight($this->_childItems[1]->getId(), HIGHER_WEIGHT);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($higher, 2);

	list ($ret, $lower) =
	    GalleryCoreApi::fetchNextItemWeight($this->_childItems[1]->getId(), LOWER_WEIGHT);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($lower, 0);
    }

    /**
     * Fetch the min/max child weight
     */
    function textFetchExtremeChildWeight() {
	$this->assert(false);

	for ($i = 0; $i < sizeof($this->_childItems); $i++) {
	    $ret = GalleryCoreApi::setItemOrderWeight($this->_childItems[$i]->getId(), 100+$i);
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	list ($ret, $max) =
	    GalleryCoreApi::fetchMaxChildWeight($this->_parentItem->getId(), HIGHER_WEIGHT);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($max, 102);

	list ($ret, $min) =
	    GalleryCoreApi::fetchMaxChildWeight($this->_parentItem->getId(), LOWER_WEIGHT);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($max, 100);
    }

    /**
     * Update the view count and verify it
     */
    function testRebalanceOrderWeights() {
	for ($i = 0; $i < sizeof($this->_childItems); $i++) {
	    $ret = GalleryCoreApi::setItemOrderWeight($this->_childItems[$i]->getId(), $i);
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	$ret = GalleryCoreApi::rebalanceChildOrderWeights($this->_parentItem->getId(), 100);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$count = sizeof($this->_childItems);
	for ($i = 0; $i < $count; $i++) {
	    list ($ret, $weight) =
		GalleryCoreApi::fetchItemOrderWeight($this->_childItems[$i]->getId());
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(($i+1)*100, $weight,
				sprintf('item %d of %d (id: %d) is not balanced correctly',
					$i, $count, $this->_childItems[$i]->getId()));
	}
    }

    function testFetchParentSequence() {
	list($ret, $album) = $this->_createRandomAlbum($this->_childItems[1]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $parentSequence) = GalleryCoreApi::fetchParentSequence($album->getId());
	$this->assertEquals(array($this->_getRootId(),
				  $this->_parentItem->getId(),
				  $this->_childItems[1]->getId()),
			    $parentSequence,
			    'album parent sequence');

	list ($ret, $item) = $this->_createRandomDataItem($album->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $parentSequence) = GalleryCoreApi::fetchParentSequence($item->getId());
	$this->assertEquals(array($this->_getRootId(),
				  $this->_parentItem->getId(),
				  $this->_childItems[1]->getId(),
				  $album->getId()),
			    $parentSequence,
			    'item parent sequence');
    }

    function testFetchItemizedDescendentCounts() {
	list($ret, $album) = $this->_createRandomAlbum($this->_childItems[1]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	for ($i = 0; $i < 3; $i++) {
	    list($ret, $item[$i]) = $this->_createRandomDataItem($album->getId());
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* Drop perms for one item and one album */
	$ret = GalleryCoreApi::removeItemPermissions($item[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::removeItemPermissions($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify our counts */
	list ($ret, $counts) =
	    GalleryCoreApi::fetchItemizedDescendentCounts(array($this->_parentItem->getId(),
								  $album->getId()));
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array($this->_parentItem->getId() => array('GalleryAlbumItem' => 3,
								       'GalleryDataItem' => 2),
				  $album->getId() => array('GalleryAlbumItem' => 0,
							   'GalleryDataItem' => 2)),
			    $counts);
    }

    function testFetchDescendentCounts() {
	list($ret, $album) = $this->_createRandomAlbum($this->_childItems[1]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	for ($i = 0; $i < 3; $i++) {
	    list($ret, $item[$i]) = $this->_createRandomDataItem($album->getId());
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* Drop perms for one item and one album */
	$ret = GalleryCoreApi::removeItemPermissions($item[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::removeItemPermissions($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify our counts */
	list ($ret, $counts) = GalleryCoreApi::fetchDescendentCounts(
	    array($this->_parentItem->getId(), $album->getId()));
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array($this->_parentItem->getId() => 5,
				  $album->getId() => 2),
			    $counts);
    }

    function testFetchDescendentCountsSessionPermission() {
	/* Session based permissions should not apply when calculating cached descendent count */
	global $gallery;
	$session =& $gallery->getSession();
	$this->_saveSessionPerms = $session->get(GALLERY_PERMISSION_SESSION_KEY);

	$itemId = $this->_childItems[1]->getId();
	$ret = GalleryCoreApi::removeItemPermissions($itemId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addEntityPermission($itemId, $itemId, 'core.all');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$session->put(GALLERY_PERMISSION_SESSION_KEY, array($itemId));

	list ($ret, $counts) =
	    GalleryCoreApi::fetchDescendentCounts(array($this->_parentItem->getId()));
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array($this->_parentItem->getId() => 2), $counts);

	if (isset($this->_saveSessionPerms)) {
	    $session->put(GALLERY_PERMISSION_SESSION_KEY, $this->_saveSessionPerms);
	} else {
	    $session->remove(GALLERY_PERMISSION_SESSION_KEY);
	}

    }

    function testFetchDescendentCountsDifferentUser() {
	global $gallery;

	list($ret, $album) = $this->_createRandomAlbum($this->_childItems[1]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create a new target user */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user);

	for ($i = 0; $i < 3; $i++) {
	    list($ret, $item[$i]) = $this->_createRandomDataItem($album->getId());
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* Drop perms for one item and one album */
	$ret = GalleryCoreApi::removeItemPermissions($item[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::removeItemPermissions($this->_childItems[0]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Add perms back for the active user, but not our target user */
	$ret = GalleryCoreApi::addUserPermission(
	    $item[0]->getId(), $gallery->getActiveUserId(), 'core.view', false);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_childItems[0]->getId(), $gallery->getActiveUserId(), 'core.view', false);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify that the target user can't see the item (even though the active user can) */
	list ($ret, $counts) = GalleryCoreApi::fetchDescendentCounts(
	    array($this->_parentItem->getId(), $album->getId()),
	    $user->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array($this->_parentItem->getId() => 5,
				  $album->getId() => 2),
			    $counts);
    }
}

class ItemAttributesTestMockSession {

    var $_userId;
    var $_creationTime;
    
    function ItemAttributesTestMockSession($isPersistent=true) {
	$this->_creationTime = time();
	$this->_isPersistent = $isPersistent;
    }

    function put($key, $value) {
	$this->_data[$key] = $value;
    }

    function getCreationTime() {
	return $this->_creationTime;
    }

    function exists($key) {
	if (!$this->_isPersistent) {
	    return false;
	} else {
	    return isset($this->_data[$key]);
	}
    }

    function &get($key) {
	return $this->_data[$key];
    }

    function getUserId() {
	return $this->_userId;
    }

    function setUserId($userId) {
	$this->_userId = $userId;
    }

    function isPersistent() {
	return $this->_isPersistent;
    }
}

class ItemAttributesTestMockPhpVm extends GalleryPhpVm {
    function ItemAttributesTestMockPhpVm($getAllHeadersExists=false, $headers=array(),
					 $randValue=null, $time=null) {
	$this->_headers = $headers;
	$this->_getAllHeadersExists = $getAllHeadersExists;
	$this->_randValue = $randValue;
	$this->_time = $time;
    }
    
    function getAllHeaders() {
	return $this->_headers;
    }

    function function_exists($functionName) {
	if ($functionName == 'getallheaders') {
	    return $this->_getAllHeadersExists;
	} else {
	    parent::function_exists($functionName);
	}
    }
    
    function header($string, $replace=null) {
	if ($pos = strpos($string, ':')) {
	    $_REQUEST['phpVmHeaders'][substr($string, 0, $pos)] = substr($string, $pos+1);
	}
    }

    function headers_sent() {
	return !empty($_REQUEST['phpVmHeaders']);
    }

    function rand($min=null, $max=null) {
	if (isset($this->_randValue)) {
	    return $this->_randValue;
	} else {
	    parent::rand($min, $max);
	}
    }

    function time() {
	if (isset($this->_time)) {
	    return $this->_time;
	} else {
	    return time();
	}
    }
}
?>
