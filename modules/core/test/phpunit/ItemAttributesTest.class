<?php
/*
 * $RCSfile: ItemAttributesTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.18 $ $Date: 2005/08/23 03:49:33 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test ItemAttribute functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ItemAttributesTest extends GalleryTestCase {

    function ItemAttributesTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;

	parent::setUp();

	list ($ret, $this->_parentItem) = $this->_createRandomAlbum(
	    $this->_getRootId(), array('orderBy' => 'id', 'orderDirection' => ORDER_ASCENDING));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_parentItem);

	/*
	 * The parentItem inherits the permissions from the root album. Thus, normalize the
	 * permissions for the tests here. Set it to core.view permission for everybody
	 */
	$ret = GalleryCoreApi::removeItemPermissions($this->_parentItem->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $everybodyGroupId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.everybodyGroup');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addGroupPermission(
	    $this->_parentItem->getId(), $everybodyGroupId, 'core.view', true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Verify the permissions */
	list ($ret, $compressedPerms) =
	    GalleryCoreApi::fetchAllPermissionsForItem($this->_parentItem->getId(), true);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(array('userId' => 0, 'groupId' => $everybodyGroupId,
					'permission' => 'core.view')), $compressedPerms,
			    'Failed to define initial permissions');

	/* Create additional test items */
	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $this->_childItems[$i]) =
		$this->_createRandomAlbum($this->_parentItem->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
    }

    /**
     * Update the view count and verify it
     */
    function testSetItemViewCount() {
	$ret = GalleryCoreApi::setItemViewCount($this->_childItems[0]->getId(), 999);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $viewCount) = GalleryCoreApi::fetchItemViewCount($this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(999, $viewCount);
    }

    /**
     * Update the view count and verify it
     */
    function testIncrementItemViewCount() {
	$ret = GalleryCoreApi::setItemViewCount($this->_childItems[0]->getId(), 999);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::incrementItemViewCount($this->_childItems[0]->getId(), 3);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $viewCount) = GalleryCoreApi::fetchItemViewCount($this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(1002, $viewCount);
    }

    /**
     * Update the view count and verify it
     */
    function testSetOrderWeight() {
	$ret = GalleryCoreApi::setItemOrderWeight($this->_childItems[0]->getId(), 123);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $orderWeight) = GalleryCoreApi::fetchItemOrderWeight($this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(123, $orderWeight);
    }

    /**
     * Set the weights to something sequential then verify that we can find the next
     * higher or lower weight.
     */
    function testFetchNextItemWeight() {
	for ($i = 0; $i < sizeof($this->_childItems); $i++) {
	    $ret = GalleryCoreApi::setItemOrderWeight($this->_childItems[$i]->getId(), $i);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	list ($ret, $higher) =
	    GalleryCoreApi::fetchNextItemWeight($this->_childItems[1]->getId(), HIGHER_WEIGHT);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($higher, 2);

	list ($ret, $lower) =
	    GalleryCoreApi::fetchNextItemWeight($this->_childItems[1]->getId(), LOWER_WEIGHT);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($lower, 0);
    }

    /**
     * Fetch the min/max child weight
     */
    function textFetchExtremeChildWeight() {
	$this->assert(false);

	for ($i = 0; $i < sizeof($this->_childItems); $i++) {
	    $ret = GalleryCoreApi::setItemOrderWeight($this->_childItems[$i]->getId(), 100+$i);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	list ($ret, $max) =
	    GalleryCoreApi::fetchMaxChildWeight($this->_parentItem->getId(), HIGHER_WEIGHT);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($max, 102);

	list ($ret, $min) =
	    GalleryCoreApi::fetchMaxChildWeight($this->_parentItem->getId(), LOWER_WEIGHT);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($max, 100);
    }

    /**
     * Update the view count and verify it
     */
    function testRebalanceOrderWeights() {
	for ($i = 0; $i < sizeof($this->_childItems); $i++) {
	    $ret = GalleryCoreApi::setItemOrderWeight($this->_childItems[$i]->getId(), $i);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	$ret = GalleryCoreApi::rebalanceChildOrderWeights($this->_parentItem->getId(), 100);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$count = sizeof($this->_childItems);
	for ($i = 0; $i < $count; $i++) {
	    list ($ret, $weight) =
		GalleryCoreApi::fetchItemOrderWeight($this->_childItems[$i]->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(($i+1)*100, $weight,
				sprintf('item %d of %d (id: %d) is not balanced correctly',
					$i, $count, $this->_childItems[$i]->getId()));
	}
    }

    function testFetchParentSequence() {
	list($ret, $album) = $this->_createRandomAlbum($this->_childItems[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $parentSequence) = GalleryCoreApi::fetchParentSequence($album->getId());
	$this->assertEquals(array($this->_getRootId(),
				  $this->_parentItem->getId(),
				  $this->_childItems[1]->getId()),
			    $parentSequence,
			    'album parent sequence');

	list ($ret, $item) = $this->_createRandomDataItem($album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $parentSequence) = GalleryCoreApi::fetchParentSequence($item->getId());
	$this->assertEquals(array($this->_getRootId(),
				  $this->_parentItem->getId(),
				  $this->_childItems[1]->getId(),
				  $album->getId()),
			    $parentSequence,
			    'item parent sequence');
    }

    function testFetchItemizedDescendentCounts() {
	list($ret, $album) = $this->_createRandomAlbum($this->_childItems[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	for ($i = 0; $i < 3; $i++) {
	    list($ret, $item[$i]) = $this->_createRandomDataItem($album->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* Drop perms for one item and one album */
	$ret = GalleryCoreApi::removeItemPermissions($item[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::removeItemPermissions($this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify our counts */
	list ($ret, $counts) =
	    GalleryCoreApi::fetchItemizedDescendentCounts(array($this->_parentItem->getId(),
								  $album->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array($this->_parentItem->getId() => array('GalleryAlbumItem' => 3,
								       'GalleryDataItem' => 2),
				  $album->getId() => array('GalleryAlbumItem' => 0,
							   'GalleryDataItem' => 2)),
			    $counts);
    }

    function testFetchDescendentCounts() {
	list($ret, $album) = $this->_createRandomAlbum($this->_childItems[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	for ($i = 0; $i < 3; $i++) {
	    list($ret, $item[$i]) = $this->_createRandomDataItem($album->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* Drop perms for one item and one album */
	$ret = GalleryCoreApi::removeItemPermissions($item[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::removeItemPermissions($this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify our counts */
	list ($ret, $counts) = GalleryCoreApi::fetchDescendentCounts(
	    array($this->_parentItem->getId(), $album->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array($this->_parentItem->getId() => 5,
				  $album->getId() => 2),
			    $counts);
    }

    function testFetchDescendentCountsDifferentUser() {
	global $gallery;

	list($ret, $album) = $this->_createRandomAlbum($this->_childItems[1]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create a new target user */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user);

	for ($i = 0; $i < 3; $i++) {
	    list($ret, $item[$i]) = $this->_createRandomDataItem($album->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* Drop perms for one item and one album */
	$ret = GalleryCoreApi::removeItemPermissions($item[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::removeItemPermissions($this->_childItems[0]->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Add perms back for the active user, but not our target user */
	$ret = GalleryCoreApi::addUserPermission(
	    $item[0]->getId(), $gallery->getActiveUserId(), 'core.view', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_childItems[0]->getId(), $gallery->getActiveUserId(), 'core.view', false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify that the target user can't see the item (even though the active user can) */
	list ($ret, $counts) = GalleryCoreApi::fetchDescendentCounts(
	    array($this->_parentItem->getId(), $album->getId()),
	    $user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array($this->_parentItem->getId() => 5,
				  $album->getId() => 2),
			    $counts);
    }
}

?>
