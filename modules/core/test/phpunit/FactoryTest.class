<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Factory functionality
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class FactoryTest extends GalleryTestCase {

    function FactoryTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	$path = 'modules/core/test/phpunit/FactoryTest.class';
	$ret = GalleryCoreApi::registerFactoryImplementation('FactoryTest',
							     'FactoryTestDummy',
							     'FactoryTestDummyId',
							     $path,
							     'coreTest',
							     array('dummy', '*'));
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::registerFactoryImplementation('FactoryTest',
							     'FactoryTestDummy',
							     'FactoryTestDummyId2',
							     $path,
							     'coreTest',
							     array('dummy'));
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markFactoryModuleForCleanup('coreTest');
    }

    /**
     * Register an implementation, create new instance
     */
    function testNewInstance() {
	list ($ret, $instance) = GalleryCoreApi::newFactoryInstance('FactoryTest', 'FactoryTestDummy');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(is_object($instance));
    }

    /**
     * Register an implementation, try to create new instance but expect an
     * empty instance
     */
    function testMissingInstance() {
	list ($ret, $instance) = GalleryCoreApi::newFactoryInstance('FactoryTest', 'MISSING IMPLEMENTATION NAME');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!isset($instance));
    }

    /**
     * Register an implementation, create new instance given only class type
     */
    function testNewInstanceNoClass() {
	list ($ret, $instance) = GalleryCoreApi::newFactoryInstance('FactoryTest');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(is_object($instance));
    }

    /**
     * Register an implementation, try to create new instance but expect an
     * empty instance
     */
    function testMissingInstanceNoClass() {
	list ($ret, $instance) = GalleryCoreApi::newFactoryInstance('MISSING CLASS TYPE');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(!isset($instance));
    }

    /**
     * Register an implementation, create instance by hint
     */
    function testNewInstanceByHint() {
	list ($ret, $instance) = GalleryCoreApi::newFactoryInstanceByHint('FactoryTest', 'dummy');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(is_object($instance));
    }

    /**
     * Register an implementation, create instance by default hint
     */
    function testNewInstanceByHintDefault() {
	list ($ret, $instance) = GalleryCoreApi::newFactoryInstanceByHint('FactoryTest', 'nomatch');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(is_object($instance));
    }

    /**
     * Register an implementation, create instance by hint list
     */
    function testNewInstanceByHintList() {
	list ($ret, $instance) = GalleryCoreApi::newFactoryInstanceByHint('FactoryTest',
									  array('nomatch', 'dummy'));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(is_object($instance));
    }

    /**
     * Register an implementation, create instance by id
     */
    function testNewInstanceById() {
	list ($ret, $instance) = GalleryCoreApi::newFactoryInstanceById('FactoryTest', 'FactoryTestDummyId');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(is_object($instance));
    }

    /**
     * Register an implementation, get all implementation ids
     */
    function testGetAllImplementationIds() {
	list ($ret, $ids) = GalleryCoreApi::getAllFactoryImplementationIds('FactoryTest');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array('FactoryTestDummyId' => 'FactoryTestDummy',
				  'FactoryTestDummyId2' => 'FactoryTestDummy'),
			    $ids);
    }

    function testGetAllImplementationIdsWithHint() {
	list ($ret, $ids) = GalleryCoreApi::getAllFactoryImplementationIdsWithHint('FactoryTest', 'dummy');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array('FactoryTestDummyId' => 'FactoryTestDummy',
				  'FactoryTestDummyId2' => 'FactoryTestDummy'),
			    $ids);
    }
}

/**
 * Bogus class that we can feed to the factory
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class FactoryTestDummy {
}
?>
