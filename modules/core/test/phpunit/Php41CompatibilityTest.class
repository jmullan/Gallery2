<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Scan through all of our source code and verify that we're not
 * using anything that is not PHP 4.1 compatible
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class Php41CompatibilityTest extends CodeAuditTestCase {

    function Php41CompatibilityTest($methodName) {
	$this->CodeAuditTestCase($methodName);

	include(dirname(__FILE__) . '/Php41IllegalFunctions.inc');
	$this->_illegalRegexp = $illegalFunctionsRegexp;

	$this->_exceptions['is_a']['GalleryUtilities.class'] = 1;
	$this->_exceptions['html_entity_decode']['GalleryUtilities.class'] = 1;
	$this->_exceptions['dngettext']['GalleryTranslator.class'] = 1;
	$this->_exceptions['bind_textdomain_codeset']['GalleryTranslator.class'] = 1;
	$this->_exceptions['debug_backtrace']['GalleryStatus.class'] = 1;
	$this->_exceptions['gd_info']['GdFunctionality.class'] = 1;
	$this->_exceptions['gd_info']['GdToolkitHelper.class'] = 1;
	$this->_exceptions['gd_info']['TestGdFunctionality.class'] = 1;
    }

    /**
     * @see CodeAuditTestCase::shouldCheckFile()
     */
    function shouldCheckFile($fileName) {
	/* Skip files we don't care about */
	if ($fileName == 'Php41IllegalFunctions.inc' ||
	        substr($fileName, -10) == 'Test.class' ||
	        substr($fileName, -4) == '.tpl') {
	    return false;
	}

	return true;
    }

    /**
     * @see CodeAuditTestCase::checkFile()
     */
    function checkFile($fileName, $buffer) {
	/* Quick check */
	$longCheckRequired = false;
	if (preg_match_all($this->_illegalRegexp, $buffer, $matches)) {
	    foreach (array_unique($matches[0]) as $keyword) {
		/* Remove trailing open paren matched by the pattern, and any spaces */
		$keyword = trim(substr($keyword, 0, -1));
		if (!isset($this->_exceptions[$keyword][basename($fileName)])) {
		    $longCheckRequired = true;
		}
	    }
	}

	if (!$longCheckRequired) {
	    return;
	}

	/* Long check */
	$lines = explode("\n", $buffer);
	for ($i = 0; $i < sizeof($lines); $i++) {
	    if (preg_match_all($this->_illegalRegexp, $lines[$i], $matches)) {
		foreach (array_unique($matches[0]) as $keyword) {
		    // Remove trailing open paren matched by the pattern, and any spaces
		    $keyword = trim(substr($keyword, 0, -1));
		    if (!isset($this->_exceptions[$keyword]) ||
			!isset($this->_exceptions[$keyword][basename($fileName)])) {
			$this->assert(false,
				      sprintf('%s contains illegal keyword <b>%s</b> on line <b>%d</b>',
					      basename($fileName), $keyword, $i+1));
		    }
		}
	    }
	}
    }
}
?>
