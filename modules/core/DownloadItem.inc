<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage UserInterface
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Provides downloading of binary items
 *
 * @package GalleryCore
 * @subpackage UserInterface
 *
 */
class DownloadItemView extends GalleryView {

    /**
     * @see GalleryView::isImmediate
     */
    function isImmediate() {
	return true;
    }

    /**
     * @see GalleryView::renderImmediate
     */
    function renderImmediate() {
	global $gallery;

	/*
	 * If the browser passes us a request with an 'If-Modified-Since' header, then its already got a
	 * cached copy of this file.  And since our links always include a serial number, and any change
	 * triggers a serial number change, this means that its cache is always up to date.  We don't even
	 * need to check the modification date.  
	 */
	if (function_exists('getallheaders')) {
	    $headers = GetAllHeaders();
	    if (isset($headers['If-Modified-Since'])) {
		header('HTTP/1.x 304 Not Modified');
		return;
	    }
	}
	
	/* Figure out which item we're talking about */
	$itemId = GalleryUtilities::getRequestVariables('itemId');
	if (empty($itemId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/* Load the item */
	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($itemId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Figure out what permission we need to view this item */
	if (GalleryUtilities::isA($item, 'GalleryDerivative')) {
	    switch($item->getDerivativeType()) {
	    case DERIVATIVE_TYPE_IMAGE_THUMBNAIL:
		$requiredPermission = 'core.view';
		break;
		
	    case DERIVATIVE_TYPE_IMAGE_RESIZE:
		$requiredPermission = 'core.viewResizes';
		break;

	    case DERIVATIVE_TYPE_IMAGE_PREFERRED:
		$requiredPermission = 'core.viewSource';
		break;
	    }
	    $itemForPermission = $item->getParentId();
	} else {
	    $requiredPermission = 'core.viewSource';
	    $itemForPermission = $item->getId();
	}

	/* Make sure we have it */
	$ret = GalleryCoreApi::assertHasItemPermission($itemForPermission, $requiredPermission);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Get the path to the file */
	list ($ret, $path) = $item->fetchPath();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Rebuild derivative cache, if necessary */
	if (GalleryUtilities::isA($item, 'GalleryDerivative')) {
	    list ($ret, $item) = GalleryCoreApi::rebuildDerivativeCacheIfNotCurrent($item->getId());
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    $mimeType = $item->getDerivativeMimeType();
	    $size = $item->getDerivativeSize();
	} else {
	    $size = $item->getSize();
	    $mimeType = $item->getMimeType();
	}

	if (false) {
	    printf("<pre>%s</pre>", print_r($GLOBALS['GalleryCoreApi'], 1));
	    printf("<pre>\b(%s)\b\n\n&nbsp;</pre>", join("|", get_declared_classes()));
	    printf("<pre>%s</pre>", print_r(get_declared_classes(), 1));
	    return GalleryStatus::success();
	}

	if ($size > 0) {
	    header('Content-length: ' . $size);
	}
	header('Content-type: ' . $mimeType);

	$platform = $gallery->getPlatform();
	$stats = $platform->stat($path);
	header('Last-Modified: ' . strftime('%a, %e %b %G %R %Z', $stats[9]));
	
	$platform->readfile($path);

	return GalleryStatus::success();
    }

    /**
     * @see GalleryView::rewriteQueryString
     */
    function rewriteQueryString($params) {
	global $gallery;
	
	/* We know who we are */
	unset($params['view']);

	$itemId = $params['itemId'];
	unset($params['itemId']);
	
	$buf = '/' . $itemId;

	list ($ret, $entity) = GalleryCoreApi::loadEntitiesById($itemId);
	if ($ret->isSuccess()) {
	    $buf .= '-' . $entity->getSerialNumber();
	    unset($params['serialNumber']);

	    if (GalleryUtilities::isA($entity, 'GalleryDataItem')) {
		$mimeType = $entity->getMimeType();
		$pseudoFileName = $entity->getPathComponent();
	    } else {
		$mimeType = $entity->getDerivativeMimeType();

		list ($ret, $sourceEntity) = GalleryCoreApi::loadEntitiesById($entity->getDerivativeSourceId());
		if ($ret->isSuccess()) {
		    if (GalleryUtilities::isA($sourceEntity, 'GalleryDataItem')) {
			$pseudoFileName = $sourceEntity->getPathComponent();
		    }
		}
	    }

	    if (isset($pseudoFileName)) {
		$buf .= '/' . $pseudoFileName;
	    }

	    $extension = GalleryUtilities::convertMimeToExtension($mimeType);
	    if (!empty($extension)) {
		$buf .= '.' . $extension;
	    }
	}

	/* Add in anything else as a standard query element */
	if (!empty($params)) {
	    $urlGenerator = $gallery->getUrlGenerator();
	    $buf .= $urlGenerator->buildQueryString($params);
	}

	return $buf;
    }

    /**
     * @see GalleryView::parseQueryString()
     */
    function parseQueryString($queryString) {

	/*
	 * Expect the path to be in the format /<itemid>-<serial>.<extension>
	 * We only care about the item id
	 */
	$queryString = preg_match('|/(\d+)-|', $queryString, $regs);
	GalleryUtilities::putRequestVariable('itemId', $regs[1]);
	return array(GalleryStatus::success(), null);
    }
}
?>
