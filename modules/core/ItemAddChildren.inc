<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage UserInterface
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * This controller will handle the addition of an item as a children to
 * another item.
 *
 * @package GalleryCore
 * @subpackage UserInterface
 */
class ItemAddChildrenController extends GalleryController {

    /**
     * @see GalleryController::handleRequest
     */
    function handleRequest($form) {
	global $gallery;

	$itemId = GalleryUtilities::getRequestVariables('itemId');

	/* Make sure we have permission do edit this item */
	$ret = GalleryCoreApi::assertHasItemPermission($itemId, 'core.addDataItem');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($itemId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $lockIds[]) = GalleryCoreApi::acquireReadLock($item->getId());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$platform = $gallery->getPlatform();

	$status = array();
	$error = array();
	if (isset($form['action']['addFromBrowser'])) {
	    
	    /* Upload any new files */
	    for ($i = 1; $i <= $form['uploadBoxCount']; $i++) {
		$newItem = null;
		
		if (!empty($form['tmp_name'][$i]) && !empty($form['size'][$i])) {
		    $file = array('name' => $form['name'][$i],
				  'type' => $form['type'][$i],
				  'tmp_name' => $form['tmp_name'][$i],
				  'error' => $form['error'][$i],
				  'size' => $form['size'][$i],
				  'caption' => $form['caption'][$i]);
		    
		    /* Get the mime type from the upload info. */
		    $mimeType = $file['type'];

		    /*
		     * If we don't get useful data from that or its a type we don't
		     * recognize, take a swing at it using the file name.
		     */
		    if ($mimeType == 'application/octet-stream' ||
			    $mimeType == 'application/unknown' ||
			    GalleryUtilities::convertMimeToExtension($mimeType) == null) {
			$extension = GalleryUtilities::getFileExtension($file['name']);
			$mimeType = GalleryUtilities::convertExtensionToMime($extension);
		    }

		    list ($ret, $newItem) = GalleryCoreApi::addItemToAlbum($file['tmp_name'],
									   basename($file['name']),
									   basename($file['name']),
									   $file['caption'],
									   $file['caption'],
									   $mimeType,
									   $item->getId());
		    if ($ret->isError()) {
			return array($ret->wrap(__FILE__, __LINE__), null);
		    }

		    $status['addFromBrowser'][] = array('fileName' => $file['name'],
							'id' => $newItem->getId());
		}
	    }

	    /* Figure out where to redirect upon success */
	    $redirect['view'] = 'core:ItemAdmin';
	    $redirect['subView'] = 'core:ItemAddChildrenConfirmation';
	    $redirect['itemId'] = $itemId;

	} else if (isset($form['action']['findFilesFromLocalServer'])) {
	    /* Delegate back to the same view */
	} else if (isset($form['action']['addFromLocalServer'])) {
	    /* Delegate back to the same view */
	    $dir = $form['localServerPath'];

	    foreach ($form['localServerFiles'] as $fileKey => $unused) {
		$filename = $fileKey;

		// Build up the file path with the right style of directory separator
		$slash = $platform->getDirectorySeparator();
		$filepath = $dir;
		if ($filepath[strlen($filepath)-1] != $slash) {
		    $filepath .= $slash;
		}
		$filepath .= $filename;

		// Unescape any special chars in the file path
		$filepath = GalleryUtilities::htmlEntityDecode($filepath);
		
		list ($base, $extension) = GalleryUtilities::getFileNameComponents($filename);
		$mimeType = GalleryUtilities::convertExtensionToMime($extension);

		list ($ret, $newItem) = GalleryCoreApi::addItemToAlbum($filepath,
								       $filename,
								       $base,
								       $base,
								       $base,
								       $mimeType,
								       $item->getId());
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
		$status['addFromLocalServer'][] = array('fileName' => $filename,
							'id' => $newItem->getId());
	    }

	    /* Figure out where to redirect upon success */
	    $redirect['view'] = 'core:ItemAdmin';
	    $redirect['subView'] = 'core:ItemAddChildrenConfirmation';
	    $redirect['itemId'] = $itemId;
	} else if (isset($form['action']['findFilesFromWebPage'])) {
	    /* Delegate back to the same view */
	} else if (isset($form['action']['addFromWebPage'])) {
	    foreach (array_keys($form['webPageUrls']) as $url) {
		/* Copy the file locally */
		$tmpDir = $gallery->getConfig('data.gallery.tmp');
		$tmpFile = $platform->tempnam($tmpDir, 'add');

		$successfullyCopied = false;
		$url = GalleryUtilities::htmlEntityDecode($url);
		$fin = $platform->fopen($url, 'rb');
		if ($fin) {
		    $fout = $platform->fopen($tmpFile, 'wb');
		    if ($fout) {
			while (!$platform->feof($fin)) {
			    $buf = $platform->fread($fin, 4096);
			    $platform->fwrite($fout, $buf);
			}
			$platform->fclose($fout);
			$successfullyCopied = true;
		    }
		    $platform->fclose($fin);
		}

		/* Add it */
		if ($successfullyCopied) {
		    list ($base, $extension) = GalleryUtilities::getFileNameComponents(basename($url));
		    $mimeType = GalleryUtilities::convertExtensionToMime($extension);

		    list ($ret, $newItem) = GalleryCoreApi::addItemToAlbum($tmpFile,
									   basename($url),
									   $base,
									   $base,
									   $base,
									   $mimeType,
									   $item->getId());
		    $platform->unlink($tmpFile);
		    if ($ret->isError()) {
			return array($ret->wrap(__FILE__, __LINE__), null);
		    }

		    $status['addFromWebPage'][] = array('fileName' => $url,
							'id' => $newItem->getId());
		}
	    }

	    /* Figure out where to redirect upon success */
	    $redirect['view'] = 'core:ItemAdmin';
	    $redirect['subView'] = 'core:ItemAddChildrenConfirmation';
	    $redirect['itemId'] = $itemId;
	}

	$ret = GalleryCoreApi::releaseLocks($lockIds);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!empty($redirect)) {
	    $results['redirect'] = $redirect;
	} else {
	    $results['delegate']['view'] = 'core:ItemAdmin';
	    $results['delegate']['subView'] = 'core:ItemAddChildren';
	}
	$results['status'] = $status;
	$results['error'] = $error;

	return array(GalleryStatus::success(), $results);
    }
}

/**
 * This view will prompt for files to add as children to an album.
 *
 * @package GalleryCore
 * @subpackage UserInterface
 */
class ItemAddChildrenView extends GalleryView {

    /**
     * @see GalleryView::loadTemplate
     */
    function loadTemplate(&$template, &$form) {
	global $gallery;

	$itemId = GalleryUtilities::getRequestVariables('itemId');
	$mode = GalleryUtilities::getRequestVariables('mode');

	/* Make sure we have permission do edit this item */
	$ret = GalleryCoreApi::assertHasItemPermission($itemId, 'core.addDataItem');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $isAdmin) = GalleryCoreApi::isUserInSiteAdminGroup();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($itemId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if ($form['formName'] == 'ItemAddChildren') {

	    /* Complain if we have any invalid data */

	} else {
	    /* First time around, load the form with item data */
	    $form['uploadBoxCount'] = 4;
	    $form['localServerPath'] = '';
	    $form['webPage'] = '';
	    $form['formName'] = 'ItemAddChildren';
	}

	list ($ret, $localServerDirs) = GalleryCoreApi::getPluginParameter('module', 'core', 'uploadLocalServer.dirs');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	if (empty($localServerDirs)) {
	    $localServerDirList = array();
	} else {
	    $localServerDirList = split(',', $localServerDirs);
	}

	/*
	 * If the mode is empty get it from the session.  If it's empty there,
	 * default to uploading from the browser.  Either way, save the user's
	 * preference in the session.
	 */
	$session =& $gallery->getSession();
	if (empty($mode)) {
	    $mode = $session->get('core.view.ItemAddChildren.mode');
	    if (empty($mode)) {
		$mode = 'fromBrowser';
	    }
	}
	$session->put('core.view.ItemAddChildren.mode', $mode);

	/* Look up the platform type */
	$platform = $gallery->getPlatform();

	/* If we're uploading from the local server, get a file list now */
	if (isset($form['action']['findFilesFromLocalServer'])) {

	    /* Validate the path */
	    $form['localServerFiles'] = array();
	    if (empty($form['localServerPath'])) {
		$form['error']['localServerPath']['missing'] = 1;
	    } else if (!$platform->file_exists($form['localServerPath']) ||
		       !$platform->is_readable($form['localServerPath'])) {
		$form['error']['localServerPath']['invalid'] = 1;
	    } else if (!GalleryUtilities::isPathInList($form['localServerPath'], $localServerDirList)) {
		$form['error']['localServerPath']['illegal'] = 1;
	    } else {
		$mimeTypeItemMap = array();
		$path = $form['localServerPath'];
		if ($platform->is_dir($path)) {
		    $handle = $platform->opendir($path);

		    /* Add path to the recent path list */
		    $session =& $gallery->getSession();
		    $recentPaths = $session->get('core.view.ItemAddChildren.recentPaths');
		    $recentPaths[$mode][$form['localServerPath']] = 1;
		    $session->put('core.view.ItemAddChildren.recentPaths', $recentPaths);

		    while (false !== ($fileName = $platform->readdir($handle))) {
			$gallery->guaranteeTimeLimit(5);
			if ($fileName == '.' || $fileName == '..') {
			    continue;
			}

			$filePath = $path . '/' . $fileName;
			if (!$platform->is_dir($filePath) && $platform->is_readable($filePath)){
			    $mimeType = GalleryUtilities::getMimeType($fileName);
			    if (!isset($mimeTypeItemMap[$mimeType])) {
				list ($ret, $mimeTypeItemMap[$mimeType]) =
				    GalleryCoreApi::newItemByMimeType($mimeType);
				if ($ret->isError()) {
				    return array($ret->wrap(__FILE__, __LINE__), null);
				}
			    }
			    
			    $form['localServerFiles'][] =
				array('dirName' => $path,
				      'fileName' => $fileName,
				      'stat' => $platform->stat($filePath),
				      'itemType' => $mimeTypeItemMap[$mimeType]->itemTypeName(),
				      'fileKey' => $fileName);
			}
		    }
		    $platform->closedir($handle);
			  
		} else if ($platform->is_file($path) && !$platform->is_link($path)) {
		    $mimeType = GalleryUtilities::getMimeType($path);
		    if (!isset($mimeTypeItemMap[$mimeType])) {
			list ($ret, $mimeTypeItemMap[$mimeType]) = GalleryCoreApi::newItemByMimeType($mimeType);
			if ($ret->isError()) {
			    return array($ret->wrap(__FILE__, __LINE__), null);
			}
		    }

		    $dirName = dirname($path);
		    $fileName = basename($path);
		    $form['localServerFiles'][] =
			array('dirName' => $dirName,
			      'fileName' => $fileName,
			      'stat' => $platform->stat($path),
			      'itemType' => $mimeTypeItemMap[$mimeType]->itemTypeName(),
			      'fileKey' => htmlentities($fileName));
		}
		$localServerFileCount = sizeof($form['localServerFiles']);
	    }
	} else if (isset($form['action']['findFilesFromWebPage'])) {
	    /*
	     * If we're uploading from a web page, get a file list now.
	     * Download the web page into a temporary file and then parse it
	     */
	    if (empty($form['webPage'])) {
		$form['error']['webPage']['missing'] = 1;
	    } else {
		$baseUrlComponents = parse_url($form['webPage']);
		if (empty($baseUrlComponents['scheme']) || $baseUrlComponents['scheme'] != 'http') {
		    $form['error']['webPage']['invalid'] = 1;
		} else {
		    list ($buffer, $headers, $actualUrl) =
			GalleryUtilities::fetchWebPage($form['webPage']);
		    if (!isset($buffer) || strpos($headers, '404 Not Found') !== false) {
			$form['error']['webPage']['unavailable'] = 1;
		    } else {
			if (isset($actualUrl) && $actualUrl != $form['webPage']) {
			    $form['webPage'] = $actualUrl;
			    $baseUrlComponents = parse_url($form['webPage']);
			}

			/* Add path to the recent path list */
			$session =& $gallery->getSession();
			$recentPaths = $session->get('core.view.ItemAddChildren.recentPaths');
			$recentPaths[$mode][$form['webPage']] = 1;
			$session->put('core.view.ItemAddChildren.recentPaths', $recentPaths);

			/*
			 * Parse the buffer.  We match:
			 *  href="foo bar"    href='foo bar'   href=foo
			 *  src="foo bar"     src='foo bar'    src=foo
			 */
			/* Parse the buffer */
			preg_match_all('/(?:src|href)=(?:\'(.*?)\'|\"(.*?)\"|([^\'\"\> ]*))/i',
				       $buffer, $matches);

			/* Validate the URLs as best we can */
			$webPageUrlList = array();
			$isSupported = array();
			$seenBefore = array();
			$form['webPageUrls'] = array();
			foreach (array_merge($matches[1], $matches[2], $matches[3]) as $url) {
			    if (empty($url)) {
				continue;
			    } else if (isset($seenBefore[$url])) {
				continue;
			    } else {
				$seenBefore[$url] = 1;
			    }

			    /*
			     * Some sites (slashdot) have images that start with //
			     * and this confuses Gallery.  Prepend the base scheme.
			     */
			    if (!strncmp($url, '//', 2)) {
				$url = $baseUrlComponents['scheme'] . ':' . $url;
			    }

			    /*
			     * parse_url() isn't guaranteed to be reliable on relative urls, so try to make them
			     * absolute if possible.
			     */
			    if ($url[0] == '/') {
				$tmp = $baseUrlComponents['scheme'] . '://' . $baseUrlComponents['host'];
				if (!empty($baseUrlComponents['port'])) {
				    $tmp .= $baseUrlComponents['port'];
				}
				$url = $tmp . $url;
			    } else if (!preg_match('/^\w+:/', $url)) {
				$tmp = $baseUrlComponents['scheme'] . '://' . $baseUrlComponents['host'];
				if (!empty($baseUrlComponents['port'])) {
				    $tmp .= $baseUrlComponents['port'];
				}

				/*
				 * The current url might be one of:
				 *   http://example.com/path/to/file.html
				 *   http://example.com/path/to/
				 *
				 * If it's a directory, it should have a trailing slash at this point.
				 * Either way, we want the base path to be:
				 *   http://example.com/path/to/
				 */
				$basePath = $baseUrlComponents['path'];
				if (!preg_match('/\/$/', $basePath)) {
				    $basePath = dirname($basePath) . '/';
				}
				$tmp .= $basePath;
				$url = $tmp . $url;
			    }
			    
			    $urlComponents = parse_url($url);
			    if (empty($urlComponents['scheme'])) {
				$urlComponents['scheme'] = $baseUrlComponents['scheme'];
			    }

			    if (empty($urlComponents['path'])) {
				continue;
			    }

			    $mimeType = GalleryUtilities::getMimeType($urlComponents['path']);
			    if ($mimeType == 'application/unknown') {
				/*
				 * Try again with end of the query string -- just in case.  Some sites, like
				 * Google's image search feature puts the file name at the end of the query
				 * string.
				 */
				if (empty($urlComponents['query'])) {
				    continue;
				}
				
				$mimeType = GalleryUtilities::getMimeType($urlComponents['query']);
				if ($mimeType == 'application/unknown') {
				    continue;
				}
			    }

			    if (!isset($mimeTypeItemMap[$mimeType])) {
				list ($ret, $mimeTypeItemMap[$mimeType]) =
				    GalleryCoreApi::newItemByMimeType($mimeType);
				if ($ret->isError()) {
				    return array($ret->wrap(__FILE__, __LINE__), null);
				}
			    }

			    if (empty($urlComponents['host'])) {
				$urlComponents['host'] = $baseUrlComponents['host'];
			    }

			    $tmp = $urlComponents['scheme'] . '://' . $urlComponents['host'];
			    if (!empty($urlComponents['path'])) {
				if ($urlComponents['path'][0] != '/' && $tmp[strlen($tmp)-1] != '/') {
				    $tmp .= '/';
				}
				$tmp .= $urlComponents['path'];
			    }

			    if (!empty($urlComponents['query'])) {
				$tmp .= '?' . $urlComponents['query'];
			    }

			    $form['webPageUrls'][] =
				array('url' => $tmp,
				      'itemType' => $mimeTypeItemMap[$mimeType]->itemTypeName());
			}
			$webPageUrlCount = sizeof($form['webPageUrls']);
		    }
		}
	    }
	}

	$ItemAddChildren = array();
	$ItemAddChildren['mode'] = $mode;
	$ItemAddChildren['isAdmin'] = $isAdmin;
	$ItemAddChildren['localServerDirList'] = $localServerDirList;
	if (isset($localServerFileCount)) {
	    $ItemAddChildren['localServerFileCount'] = $localServerFileCount;
	}
	if (isset($webPageUrlCount)) {
	    $ItemAddChildren['webPageUrlCount'] = $webPageUrlCount;
	}

	$session =& $gallery->getSession();
	$recentPaths = $session->get('core.view.ItemAddChildren.recentPaths');
	if (!isset($recentPaths[$mode])) {
	    $recentPaths[$mode] = array();
	}
	$ItemAddChildren['recentPaths'] = array_keys($recentPaths[$mode]);

	$template->setVariable('ItemAddChildren', $ItemAddChildren);

	if ($mode == 'fromBrowser') {
	    $template->setVariable('enctype', 'multipart/form-data');
	}
	$template->setVariable('controller', 'core:ItemAddChildren');
	return array(GalleryStatus::success(),
		     array('body' => 'modules/core/templates/ItemAddChildren.tpl'));
    }
}
?>
