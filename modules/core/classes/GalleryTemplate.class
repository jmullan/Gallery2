<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * The current protocol version of the template data.  Whenever the template
 * library changes, bump this number to trigger a complete rebuild of all
 * compiled templates.
 */
define('TEMPLATE_DATA_VERSION', 2);

/**
 * This is Gallery's templating class.  It hides the details of the
 * implementation (eg, Smarty) and provides a unified means of handling
 * internationalization.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryTemplate {
    
    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The Smarty instance
     *
     * @var object Smarty $_smarty
     * @access private
     */
    var $_smarty;

    /**
     * The template adapter
     *
     * @var object GalleryTemplateAdapter $_templateAdapter
     * @access private
     */
    var $_templateAdapter;

    /**
     * The directory containing our template files
     *
     * @var string
     * @access private
     */
    var $_templateDir;
    
    /**
     * A directory where the templates will be written into.
     *
     * @var string
     * @access private
     */
    var $_compiledTemplateDir;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Constructor
     */
    function GalleryTemplate($templateDir) {
	global $gallery;
	$this->_templateDir = $templateDir;
        /* This will be the place to put the compiled templates */
	$this->_compiledTemplateDir = $gallery->getConfig('data.smarty.templates_c') .
            '%%' . sprintf("%u", crc32($templateDir));
	$this->_smarty =& GalleryTemplate::_getSmarty();
    }

    /**
     * Assign a template key/value pair
     *
     * @param string the key
     * @param mixed the value
     */
    function setVariable($key, $value=null) {
	$this->_smarty->assign($key, $value);
    }

    /**
     * Retrieve a template value
     *
     * @param string the key
     * @param mixed the value
     */
    function getVariable($key) {
	$templateVars = $this->_smarty->get_template_vars();
	return $templateVars[$key];
    }

    /**
     * Return true if the given variable is set
     *
     * @param string the key
     * @return boolean true or false 
     */
    function hasVariable($key) {
	$templateVars = $this->_smarty->get_template_vars();
	return isset($templateVars[$key]);
    }

    /**
     * Assign a template key/value pair
     *
     * @param string the key
     * @param mixed the value
     */
    function setVariableByReference($key, &$value) {
	$this->_smarty->assign_by_ref($key, $value);
    }

    /**
     * Render the properly localized template
     *
     * @param string the template name
     * @return array object GalleryStatus the status of the call
     *               string the HTML content
     */
    function render($templateName) {
	global $gallery;

	$this->_smarty->template_dir = $this->_templateDir;

        $ret = $this->_initCompiledTemplateDir();
        if ($ret->isError()) {
            return array($ret->wrap(__FILE__, __LINE__), null);
        }
	$this->_smarty->compile_dir = $this->_compiledTemplateDir;

        list($ret, $html) = $this->_smarty->fetch($templateName);
        if ($ret->isError()) {
            return array($ret->wrap(__FILE__, __LINE__), null);
        }
	return array(GalleryStatus::success(), $html);
    }

    /**
     * Initializes the directory where compiled templates will be saved
     * for this specific template directory
     *
     * Each module should have its own directory for compiled Smarty
     * templates so that no name clashes occur. This subdirectory will be
     * created on demand here.
     *
     * @return array object GalleryStatus a status code
     */
    function _initCompiledTemplateDir() {
	global $gallery;

	/* Make a unique subdirectory for compiled templates for this templates dir */
        $dir = $this->_compiledTemplateDir;
	$platform = $gallery->getPlatform();
	if ($platform->file_exists($dir) && !$platform->is_dir($dir)) {
	    return GalleryStatus::error(ERROR_PLATFORM_FAILURE, __FILE__, __LINE__);
	}

	$templateVersionFile = $dir . '/v_' . TEMPLATE_DATA_VERSION;
	if (!$platform->file_exists($dir)) {
	    if (!$platform->mkdir($dir)) {
	        return GalleryStatus::error(ERROR_PLATFORM_FAILURE, __FILE__, __LINE__,
					    "Unable to mkdir($dir)");
	    }
	    if ($fd = $platform->fopen($templateVersionFile, 'w')) {
		$platform->fclose($fd);
	    } else {
	        return GalleryStatus::error(ERROR_PLATFORM_FAILURE, __FILE__, __LINE__,
					    sprintf('Unable to write to %s', $templateVersionFile));
	    }
	} else {
	    if (!$platform->is_writeable($dir)) {
		return GalleryStatus::error(ERROR_PLATFORM_FAILURE, __FILE__, __LINE__);
	    }

	    $rebuild = false;
	    if (!$platform->file_exists($templateVersionFile)) {
		$rebuild = true;
	    }

	    if ($rebuild) {
		/* Get rid of the current dir and start again. */
		if (!$platform->recursiveRmDir($dir)) {
		    return GalleryStatus::error(ERROR_PLATFORM_FAILURE, __FILE__, __LINE__,
						"Unable to remove dir $dir");
		}
		$this->_initCompiledTemplateDir();
	    }
	}
	
	return GalleryStatus::success();
    }

    /**
     * Return a properly configured instance of Smarty
     *
     * Create and configure one, if it does not exist.
     *
     * @return object Smarty
     * @staticvar object Smarty $smarty The only Smarty-object that we will need
     */
    function _getSmarty() {
	global $gallery;
	static $smarty;

	GalleryProfiler::start('modules.core.classes.Gallery::getSmarty');
	if (!isset($smarty)) {
	    /*
	     * Load and configure Smarty.
	     */
	    require_once(dirname(__FILE__) . '/../../../lib/smarty/Smarty.class.php');

	    if ($gallery->isProfiling()) {
		require_once(dirname(__FILE__) . '/GalleryProfilingSmarty.class');
		$smarty = new GalleryProfilingSmarty();
	    } else {
		require_once(dirname(__FILE__) . '/GallerySmarty.class');
		$smarty = new GallerySmarty();
	    }

	    /* Compiled templates go here */
	    $smarty->compile_dir = $gallery->getConfig('data.smarty.templates_c');

	    /* Don't let Smarty change the error reporting level */
	    $smarty->error_reporting = error_reporting();

	    /* We have our own plugins */
	    $platform = $gallery->getPlatform();
	    $slash = $platform->getDirectorySeparator();
	    $smarty->plugins_dir[] = dirname(__FILE__) . '/../../../lib/smarty_plugins';
	    
	    if ($gallery->getDebug()) {
		$smarty->debugging = true;
	    }
	    $smarty->use_sub_dirs = false;

	    $templateAdapter =& $gallery->getTemplateAdapter();
	    $smarty->register_object('g', $templateAdapter, array(), true,
				      GalleryTemplateAdapter::getBlockMethods());
	}

	GalleryProfiler::stop('modules.core.classes.Gallery::getSmarty');

	return $smarty;
    }
}

?>