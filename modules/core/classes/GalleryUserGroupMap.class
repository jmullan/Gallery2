<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Representation of the many-to-many relationship between users and groups
 *
 * @g2 <class-name>GalleryUserGroupMap</class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryUserGroupMap_core {

    /**
     * @g2 <map>
     * @g2   <member>
     * @g2     <member-name>userId</member-name>
     * @g2     <member-type>INTEGER</member-type>
     * @g2     <member-size>MEDIUM</member-size>
     * @g2     <indexed/>
     * @g2   </member>
     * @g2   <member>
     * @g2     <member-name>groupId</member-name>
     * @g2     <member-type>INTEGER</member-type>
     * @g2     <member-size>MEDIUM</member-size>
     * @g2     <indexed/>
     * @g2   </member>
     * @g2 </map>
     */
    
    /**
     * Add the user to the group id specified.
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     * @static
     */
    function addUserToGroup($userId, $groupId) {
	global $gallery;
	if (empty($userId) || empty($groupId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/*
	 * Add a new entry in our groups table to represent this
	 * relationship.
	 */
	$ret = GalleryUserGroupMap::addMapEntry(array("userId" => $userId,
						      "groupId" => $groupId));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Remove the user from the group id specified.
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     * @static
     */
    function removeUserFromGroup($userId, $groupId) {
	global $gallery;
	if (empty($userId) || empty($groupId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/*
	 * Remove this relationship from our groups table.
	 */
	$ret = GalleryUserGroupMap::removeMapEntry(array("userId" => $userId,
							 "groupId" => $groupId));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Remove the user from all groups
     *
     * @param int the id of the GalleryUser
     * @return object GalleryStatus a status code
     * @static
     */
    function removeUser($userId) {
	global $gallery;
	if (empty($userId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/*
	 * Remove this relationship from our groups table.
	 */
	$ret = GalleryUserGroupMap::removeMapEntry(array("userId" => $userId));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Remove any users in the group
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     * @static
     */
    function removeGroup($groupId) {
	global $gallery;
	if (empty($groupId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/*
	 * Remove this relationship from our groups table.
	 */
	$ret = GalleryUserGroupMap::removeMapEntry(array("groupId" => $groupId));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Return a list of user ids belonging to a group
     *
     * You can specify how many userids to list, and where the windows is in
     * the list of all users.
     *
     * @param int the group id
     * @param int the number of userids desired
     * @param int the start of the range
     * @return array object GalleryStatus a status code
     *               array user id => user name
     * @static
     */
    function fetchUsersForGroup($groupId, $count=null, $offset=null) {
	global $gallery;

	$query = '
        SELECT
          [GalleryUserGroupMap::userId],
          [GalleryUser::userName]
        FROM
          [GalleryUserGroupMap], [GalleryUser]
        WHERE
          [GalleryUserGroupMap::groupId] = ?
          AND
          [GalleryUserGroupMap::userId] = [GalleryUser::id]
        ORDER BY
          [GalleryUser::userName]
        ';

	list ($ret, $searchResults) =
	    $gallery->search($query,
			      array($groupId),
			      array('limit' => array('count' => $count,
						     'offset' => $offset)));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$data = array();
	while ($result = $searchResults->nextResult()) {
	    $data[$result[0]] = $result[1];
	}
	return array(GalleryStatus::success(), $data);
    }

    /**
     * Return a list of groups that a user belongs to
     *
     * You can specify how many userids to list, and where the windows is in
     * the list of all users.
     *
     * @param int the user id
     * @param int the number of group ids desired
     * @param int the start of the range
     * @return array object GalleryStatus a status code
     *               array group id => group name
     * @static
     */
    function fetchGroupsForUser($userId, $count=null, $offset=null) {
	global $gallery;

	$cacheKey = "GalleryUserGroupMap::fetchGroupsForUser($userId,$count,$offset)";
	if (GalleryDataCache::containsKey($cacheKey)) {
	    $data = GalleryDataCache::get($cacheKey);
	} else {
	    $query = '
            SELECT
              [GalleryGroup::id],
              [GalleryGroup::groupName]
            FROM
              [GalleryUserGroupMap], [GalleryGroup]
            WHERE
              [GalleryGroup::id] = [GalleryUserGroupMap::groupId]
              AND
              [GalleryUserGroupMap::userId] = ?
            ORDER BY
              [GalleryGroup::groupName]
            ';
	    list ($ret, $searchResults) =
		$gallery->search($query,
				  array($userId),
				  array('limit' => array('count' => $count,
							 'offset' => $offset)));
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    
	    $data = array();
	    while ($result = $searchResults->nextResult()) {
		$data[$result[0]] = $result[1];
	    }
	    
	    GalleryDataCache::put($cacheKey, $data);
	}
	
	return array(GalleryStatus::success(), $data);
    }
    

    /**
     * Is the active user in the admin group?
     *
     * @return array object GalleryStatus a status code
     *               bool true if yes
     * @static
     */
    function isUserInSiteAdminGroup() {
	global $gallery;
	list ($ret, $adminGroupId) =
	    $gallery->getModuleParameter('core', 'id.adminGroup');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list ($ret, $result) = GalleryUserGroupMap::isUserInGroup($gallery->getActiveUserId(),
								  $adminGroupId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return array(GalleryStatus::success(), $result);
    }

    /**
     * Is the given user id in the given group?
     *
     * @param int the id of the user
     * @return array object GalleryStatus a status code
     *               bool true if yes
     * @static
     */
    function isUserInGroup($userId, $groupId) {
	global $gallery;

	$query = '
        SELECT
          [GalleryUserGroupMap::userId]
        FROM
          [GalleryUserGroupMap]
        WHERE
          [GalleryUserGroupMap::userId] = ?
          AND
          [GalleryUserGroupMap::groupId] = ?
        ';

	list ($ret, $searchResults) = 
	    $gallery->search($query,
			     array($userId, $groupId),
			     array('limit' => array('count' => 1)));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(),
		     $searchResults->resultCount() ? true : false);
    }
    
}

include(dirname(__FILE__) . '/interfaces/GalleryUserGroupMap.inc');
?>
