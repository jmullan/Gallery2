<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Representation of the many-to-many relationship between users and groups
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 *
 * @g2 <class-name>GalleryUserGroupMap</class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 */
class GalleryUserGroupMap_core {

    /**
     * @g2 <map>
     * @g2   <member>
     * @g2     <member-name>userId</member-name>
     * @g2     <member-type>INTEGER</member-type>
     * @g2     <member-size>MEDIUM</member-size>
     * @g2     <indexed/>
     * @g2   </member>
     * @g2   <member>
     * @g2     <member-name>groupId</member-name>
     * @g2     <member-type>INTEGER</member-type>
     * @g2     <member-size>MEDIUM</member-size>
     * @g2     <indexed/>
     * @g2   </member>
     * @g2 </map>
     */
    
    /**
     * Add the user to the group id specified.
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     */
    function addUserToGroup($userId, $groupId) {
	global $gallery;
	if (empty($userId) || empty($groupId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/*
	 * Add a new entry in our groups table to represent this
	 * relationship.
	 */
	$ret = GalleryUserGroupMap::addMapEntry(array("userId" => $userId,
						      "groupId" => $groupId));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Remove the user from the group id specified.
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     */
    function removeUserFromGroup($userId, $groupId) {
	global $gallery;
	if (empty($userId) || empty($groupId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/*
	 * Remove this relationship from our groups table.
	 */
	$ret = GalleryUserGroupMap::removeMapEntry(array("userId" => $userId,
							 "groupId" => $groupId));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Return a list of user ids belonging to a group
     *
     * You can specify how many userids to list, and where the windows is in
     * the list of all users.
     *
     * @param int the number of userids desired
     * @param int the start of the range
     * @return array object GalleryStatus a status code
     *               array group ids
     */
    function getUsersForGroup($groupId, $count=null, $offset=null) {
	global $gallery;

	return $gallery->search(array('select' => '[GalleryUserGroupMap::userId]',
				      'where' => '[GalleryUserGroupMap::groupId] = ?',
				      'limit' => array('count' => $count,
						       'offset' => $offset)),
				array($groupId));
    }

    /**
     * Return a list of group ids the user belongs to
     *
     * You can specify how many userids to list, and where the windows is in
     * the list of all users.
     *
     * @param int the number of userids desired
     * @param int the start of the range
     * @return array object GalleryStatus a status code
     *               array user ids
     */
    function getGroupsForUser($userId, $count=null, $offset=null) {
	global $gallery;

	return $gallery->search(array('select' => '[GalleryUserGroupMap::groupId]',
				      'where' => '[GalleryUserGroupMap::userId] = ?',
				      'limit' => array('count' => $count,
						       'offset' => $start)),
				array($userId));
    }

}

include(dirname(__FILE__) . '/interfaces/GalleryUserGroupMap.inc');
?>
