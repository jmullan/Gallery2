<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Load required class
 */
require_once(dirname(__FILE__) . '/../GalleryPlatform.class');

/**
 * An Unix version of the GalleryPlatform class
 * 
 * @package GalleryCore
 * @subpackage Platform
 * @access public
 */
class UnixPlatform extends GalleryPlatform {

    /**
     * @see GalleryPlatform::exec()
     */
    function exec($cmdArray, $returnErrorOutput=false) {
	global $gallery;

	/* Assemble the command array into a pipeline */
	$command = '';
	foreach ($cmdArray as $cmdAndArgs) {
	    if (strlen($command)) {
		$command .= ' | ';
	    }
	    
	    foreach ($cmdAndArgs as $arg) {
		if ($arg == '>') {
		    $command .= '>';
		} else {
		    $command .= ' "' . $arg . '" ';
		}
	    }
	}
	
	/* If we're in debug mode, redirect STDERR to a file */
	if ($returnErrorOutput || $gallery->getDebug()) {
	    $tmpDir = $gallery->getConfig('data.gallery.tmp');
	    $debugFile = tempnam($tmpDir, 'g2dbg');
	    $command = "($command) 2>$debugFile";
	}

	if ($gallery->getDebug()) {
	    $gallery->debug("Executing: $command");
	}
	exec($command, $results, $status);

	list ($ret, $expected) =
	    $gallery->getModuleParameter('core', 'exec.expectedStatus');
	if ($ret->isError()) {
	    if ($gallery->getDebug()) {
		$gallery->debug('Unable to look up core.exec.expectedStatus param');
	    }
	    $expected = 0;
	}

	/* Read any debug output and dump it out */
	if ($returnErrorOutput || $gallery->getDebug()) {
	    $gallery->debug("Regular Output:");
	    if (!empty($results)) {
		foreach ($results as $line) {
		    $gallery->debug($line);
		}
	    }
	    
	    $gallery->debug("Error Output:");
	    $platform = $gallery->getPlatform();

	    if ($platform->file_exists($debugFile)) {
		if ($fd = $platform->fopen($debugFile, "r")) {
		    $lineCount = 0;
		    while (!feof($fd)) {
			$buf = fgets($fd, 4096);
			$buf = rtrim($buf);
			$results[] = $buf;
			$gallery->debug($buf);
			if (!empty($buf)) {
			    $lineCount++;
			}
		    }
		    fclose($fd);
		}
		unlink($debugFile);

		if ($lineCount == 0) {
		    $gallery->debug("(no error output)");
		} 
		
		$gallery->debug("Status: $status (expected $expected)");
	    }
	}

	return array($status == $expected, $results);
    }
    
    /**
     * @see GalleryPlatform::isRestrictedByOpenBaseDir
     */
    function isRestrictedByOpenBaseDir($path) {
	$baseDirArray = split(':', ini_get('open_basedir'));

	if (empty($baseDirArray)) {
	    return false;
	}
	
	foreach ($baseDirArray as $baseDir) {
	    if (!strncmp($baseDir, $path, strlen($baseDir))) {
		return false;
	    }
	}
	
	return true;
    }
}
?>
