<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Load required class
 */
require_once(dirname(__FILE__) . '/../GalleryPlatform.class');

/**
 * An WindowsNT based version of the GalleryPlatform class
 * 
 * @package GalleryCore
 * @subpackage Platform
 * @access public
 */
class WinNtPlatform extends GalleryPlatform {

    /**
     * @see GalleryPlatform::rename()
     */
    function rename($oldname, $newname) {
	/*
	 * Windows gets upset if the new file already exists.  If that's
	 * the case, remove the new file before renaming.
	 */
	if ($this->file_exists($newname)) {
	    @$this->unlink($newname);
	}
	return parent::rename($oldname, $newname);
    }
	
    /**
     * @see GalleryPlatform::exec()
     */
    function exec($cmdArray, $returnErrorOutput=false) {
	global $gallery;
	$gallery->guaranteeTimeLimit(5);

	/* Assemble the command array into a pipeline */
	$command = '';
	foreach ($cmdArray as $cmdAndArgs) {

	    if (!empty($command)) {
		$command .= ' | ';
	    }

	    foreach ($cmdAndArgs as $arg) {
		if ($arg === '>') {
		    $command .= '>';
		} else {
		    $command .= ' "' . $arg . '" ';
		}
	    }
	}

	/* We're going to redirect STDERR to a file */
	$tmpDir = $gallery->getConfig('data.gallery.tmp');
	$debugFile = tempnam($tmpDir, 'g2dbg');
	
	/*
	 * Ok, this is screwy, but for some reason these
	 * don't work:
	 *
	 *    cmd /c "c:\path with\spaces\binary" "arg"
	 *    cmd /c " c:\path\\ with\spaces\binary arg "
	 *    cmd /c " 'c:\path\ with\spaces\binary' 'arg' "
	 *
	 * But this does:
	 *
	 *    cmd /c " "c:\path with\spaces\binary" "arg" "
	 *
	 * Turns out that this is a documented feature of cmd.exe.
	 * See "cmd.exe /help" for more details
	 *
	 */
	$command = 'cmd /c "' . $command . ' 2> "' . $debugFile . '" "';

	if ($gallery->getDebug()) {
	    $gallery->debug("Executing: $command");
	}
	$results = array();
	exec($command, $results, $status);

	list ($ret, $expected) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'exec.expectedStatus');
	if ($ret->isError()) {
	    if ($gallery->getDebug()) {
		$gallery->debug('Unable to look up core.exec.expectedStatus param');
	    }
	    $expected = 0;
	}

	$stderr = array();
	if ($this->file_exists($debugFile)) {
	    if ($this->filesize($debugFile) > 0) {
		if ($fd = $this->fopen($debugFile, "r")) {
		    while (!$this->feof($fd)) {
			$buf = $this->fgets($fd, 4096);
			$buf = rtrim($buf);
			if (!empty($buf)) {
			    $stderr[] = $buf;
			}
		    }
		    $this->fclose($fd);
		}
	    }
	    $this->unlink($debugFile);
	}

	/* Dump any output we have */
	if ($gallery->getDebug()) {
	    $gallery->debug("Regular Output:");
	    foreach ($results as $line) {
		$gallery->debug($line);
	    }
	    
	    $gallery->debug("Error Output:");
	    foreach ($stderr as $line) {
		$gallery->debug($line);
	    }
	    $gallery->debug("Status: $status (expected $expected)");
	}
	
	return array($status == $expected, $results, $stderr);
    }
    
    /**
     * @see GalleryPlatform::isRestrictedByOpenBaseDir
     */
    function isRestrictedByOpenBaseDir($path) {
	$openBasedir = ini_get('open_basedir');

	if (empty($openBasedir)) {
	    return false;
	}
	
	$baseDirArray = split(';', $openBasedir);
	foreach ($baseDirArray as $baseDir) {
	    if (strncasecmp($baseDir, $path, strlen($baseDir))) {
		return false;
	    }
	}
	
	return true;
    }

    /**
     * @see GalleryPlatform::is_executable
     */
    function is_executable($filename) {
	/* Any existing file is considered executable on Windows */
	return $this->file_exists($filename);
    }
}
?>
