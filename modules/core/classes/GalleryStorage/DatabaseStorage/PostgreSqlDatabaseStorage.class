<?php
/*
 * $RCSfile
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * PostgreSQL extension of the DatabaseStorage class.
 *
 * This object implements the hooks for saving and restoring objects in a
 * PostgreSQL database.
 *
 * @package GalleryCore
 * @subpackage Storage
 */
class PostgreSqlDatabaseStorage extends DatabaseStorage {

    /**
     * The type of postgres database (postgres or postgrest)
     *
     * @var string $_postgresType
     * @access private
     */
    var $_postgresType;

    /**
     * Constructor
     *
     */
    function PostgreSqlDatabaseStorage($config) {
	$this->DatabaseStorage($config);
	$this->_postgresType = $config['type'];
	$this->_isTransactional = true;
    }

    /**
     * Return the type of this database
     *
     * @return string
     */
    function getAdoDbType() {
	return $this->_postgresType;
    }

    /**
     * Return the type of this database
     *
     * @return string
     */
    function getType() {
	return 'postgres';
    }

    /**
     * @see DatabaseStorage::cleanStore
     */
    function cleanStore() {
	$ret = parent::cleanStore();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/*
	 * Create a temporary database connection and install our custom
	 * aggregate function.
	 */
	list ($ret, $tmpDb) = $this->_getConnection(true);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$this->_traceStart();
	$recordSet = $tmpDb->Execute('DROP AGGREGATE BIT_OR(bit)');
	$tmpDb->Close();
	$this->_traceStop();

	if (empty($recordSet)) {
	    return GalleryStatus::error(ERROR_STORAGE_FAILURE, __FILE__, __LINE__);
	}
	
	return GalleryStatus::success();
    }

    /**
     * @see DatabaseStorage::configureStore
     */
    function configureStore($moduleName) {

	$query = '
        CREATE AGGREGATE BIT_OR
        (
          basetype = bit,
          sfunc = bitor,
          stype = bit
        )';

	/*
	 * Create a temporary database connection and install our custom
	 * aggregate function.
	 */
	list ($ret, $tmpDb) = $this->_getConnection(true);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$this->_traceStart();
	$recordSet = $tmpDb->Execute($query);
	$tmpDb->Close();
	$this->_traceStop();

	/*
	 * Ignore errors here, since we'll get them every time we try to
	 * install the aggregate, which will happen every time we install a new
	 * module.
	 *
	 * XXX: At some point figure out a way to detect if the aggregate is
	 * already there before trying to install it again.
	 */

	$ret = parent::configureStore($moduleName);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * @see GalleryStorage::_convertIntToBits
     */
    function convertIntToBits($intVal) {
	return sprintf("%032b", $intVal);
    }

    /**
     * @see GalleryStorage::_convertIntToBits
     */
    function convertBitsToInt($bitsVal) {
	return bindec($bitsVal);
    }
}
?>
