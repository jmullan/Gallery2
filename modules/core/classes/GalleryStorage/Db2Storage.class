<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author 
 */

GalleryCoreApi::requireOnce('modules/core/classes/GalleryStorage.class', true);

/**
 * IBM DB2 UDB (for Linux/UNIX/Windows) extension of the GalleryStorage class.
 *
 * This object implements the hooks for saving and restoring objects in an
 * IBM DB2 Universal Database database.
 *
 * @package GalleryCore
 * @subpackage Storage
 */
class Db2Storage extends GalleryStorage {

    /**
     * The type of DB2 database (N/A for DB2)
     *
     * @var string $_db2Type
     * @access private
     */
    var $_db2DbType;

    /**
     * Constructor
     */
    function Db2Storage($config) {
	$this->GalleryStorage($config);
	$this->_db2Type = $config['type'];
	$this->_isTransactional = true;
    }

    /**
     * Return the type of this database
     *
     * @return string
     */
    function getAdoDbType() {
	return $this->_db2Type;
    }

    /**
     * Return the type of this database
     *
     * @return string
     */
    function getType() {
	return 'db2';
    }

    /**
     * @see GalleryStorage::cleanStore
     */
    function cleanStore() {
	$ret = parent::cleanStore();
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/*
	 * Create a temporary database connection and install our custom
	 * aggregate function.
	 */
	list ($ret, $tmpDb) = $this->_getConnection(true);
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$statements = array();
	$statements[] = 'DROP FUNCTION G2_BIT_AND(CHAR(32), CHAR(32))';
	$statements[] = 'DROP FUNCTION BIT_AND(SMALLINT, SMALLINT)';
	$statements[] = 'DROP FUNCTION G2_LIKE(VARCHAR(8000), VARCHAR(8000))';
	$statements[] = 'DROP FUNCTION G2_BIT_OR(CHAR(32))';
	/*
	 * These SQLJ.*_JAR() calls blow up, looks like CLI can't handle it
	 * $recordSet5 = $tmpDb->Execute("CALL SQLJ.REMOVE_JAR ('g2_db2_jar')");
	 */
	foreach ($statements as $sql) {
	    $this->_traceStart();
	    $recordSet = $tmpDb->Execute($sql);
	    $this->_traceStop();
	    if (empty($recordSet)) {
		return GalleryCoreApi::error(ERROR_STORAGE_FAILURE, __FILE__, __LINE__);
	    }
	}
	$tmpDb->Close();

	return null;
    }

    /**
     * @see GalleryStorage::configureStore
     */
    function configureStore($moduleId, $upgradeInfo=array()) {
	if ($moduleId == 'core') {
	    global $gallery;

	    /*
	     * Need to install the JAR file for the java UDF here
	     * because the path to the jar file is variable, so it can't be hard-coded in
	     * 'Db2CreateUdfs.sql'.
	     * The source code for the Java DB2 UDF can be downloaded at:
	     * http://codex.gallery2.org/index.php/Gallery2:DB2
	     *
	     * The INSTALL call looks like it's unsupported in CLI (and therefore PHP)
	     * so we have to use (shudder) CLP.
	     *
	     * And DB2 considers the CLP call to be a separate application, so it requires
	     * its own CONNECT and CONNECT RESET.  Which means the userid and password need
	     * to be included in the CLP script.
	     *
	     * 1. Create a SQL file with correct username, password, and jar file path
	     *    which can be called from the command line
	     * 2. Execute the db2 command line call
	     * 3. Cleanup: Delete the SQL generated file
	     * 4. Verify the successful installation of the UDF
	     * 5. Create the UDFs with a normal G2 DB connection
	     */

	    /* 1. Create a temporary file to hold the SQL */
	    $platform =& $gallery->getPlatform();
	    $fileName = $platform->tempnam($gallery->getConfig('data.gallery.tmp'), 'db2_');

	    $slash = $platform->getDirectorySeparator();
	    $pathToJar = dirname(__FILE__) . $slash . 'g2_db2.jar';

	    $buf = sprintf("CONNECT TO gallery2 USER %s USING %s\n" .
			   "CALL SQLJ.INSTALL_JAR('file:%s', 'g2_db2_jar')\n" .
			   "CONNECT RESET", $this->_username, $this->_password, $pathToJar);

	    $platform->atomicWrite($fileName, $buf);

	    /* Assemble the command line call to install the Java UDF */
	    if (GalleryUtilities::isA($platform, 'WinNtPlatform')) {
		$cmdArgs= array("db2cmd", "/c",  "/w",  "/i",  "db2", "-vf");
	    } else {
		$cmdArgs = array("db2",  "-vf");
	    }
	    $cmdArgs[] = $fileName;

	    /* 2. Execute the command */
	    list ($success, $outputArray) = $platform->exec(array($cmdArgs));

	    /*
	     * 3. Cleanup: Delete the SQL file since it contains the DB username / password and
	     *    it's not needed anymore
	     */
	    @$platform->unlink($fileName);

	    /* 4. Check for successful installation of the UDF */
	    if (!$success) {
		return GalleryCoreApi::error(ERROR_PLATFORM_FAILURE, __FILE__, __LINE__);
	    }

	    /* We expect a success code (DB20000I) right after the INSTALL_JAR line */
	    $ok = $checkNextLine = false;
	    while (!is_null($line = array_shift($outputArray))) {
		if (!$checkNextLine && strpos(strtoupper($line), 'CALL SQLJ.INSTALL_JAR(') === 0) {
		    $checkNextLine = true;
		} else if ($checkNextLine && strpos($line, 'DB20000I ') === 0) {
		    $ok = true;
		    break;
		} else {
		    $checkNextLine = false;
		}
	    }

	    if (!$ok) {
		return GalleryCoreApi::error(ERROR_STORAGE_FAILURE, __FILE__, __LINE__);
	    }

	    /* 5. Create our user-defined DB2 functions */
	    $ret = $this->_executeSqlFile(dirname(__FILE__) . $slash . 'Db2CreateUdfs.sql');
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    /*
	     * XXX: At some point figure out a way to detect if the UDFs are
	     * already there before trying to install them again.
	     */
	}

	$ret = parent::configureStore($moduleId, $upgradeInfo);
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return null;
     }

    /**
     * @see GalleryStorage::convertIntToBits
     */
    function convertIntToBits($intVal) {
	return sprintf("%032b", $intVal);
    }

    /**
     * @see GalleryStorage::convertIntToBits
     */
    function convertBitsToInt($bitsVal) {
	return bindec($bitsVal);
    }

    /**
     * @see GalleryStorage::getFunctionsSql
     */
    function getFunctionSql($functionName, $args) {
	switch($functionName) {
	case 'CONCAT':
	    $sql = 'char(' . implode(') || char(', $args) . ')';
	    break;

	case 'BITAND':
	    $sql = 'G2_BIT_AND (CAST(' . $args[0] . ' AS CHAR(32)), ' .
		'CAST(' . $args[1] . ' AS CHAR(32)))';
	    break;

	case 'BIT_OR':
	    /*
	     * Emulation of a user-defined aggregate function by using a UDF that always operates
	     * on 2 operands (last result from scratchpad and current row) and outputs the result,
	     * plus it stores the result in the DB2 scratchpad. We use the built-in aggregate
	     * function MAX() to select the last "intermediate" result of the BIT_OR
	     */
	    $sql = 'MAX(G2_BIT_OR (' . $args[0] . '))';
	    break;

	case 'UNIX_TIMESTAMP':
	    $sql = 'date_part(\'epoch\', ' . $args[0] . ')';
	    break;

	case 'AS':
	    $sql = 'AS';
	    break;

	case 'SUBSTRING':
	    $sql = sprintf('SUBSTR(%s)', implode(', ', $args));
	    break;

	case 'RAND':
	    $sql = sprintf('RAND(%s)', empty($args) ? '' : $args[0]);
	    break;

	case 'LIMIT':
	    $sql = $args[1] . ' LIMIT ' . $args[0];
	    break;

	case 'CASE':
	    $sql = array();
	    while (count($args) > 1) {
		$sql[] = 'WHEN ' . array_shift($args) . ' THEN ' . array_shift($args);
	    }
	    $sql = 'CASE ' . implode(' ', $sql) . ' ELSE ' . $args[0] . ' END';
	    break;

	case 'LIKE':
	    /* DB2's LIKE predicate support is very restrictive.  No non-strings, no SQL UDFs. */
	    $sql = 'G2_LIKE(' . $args[0] . ', ' . $args[1] . ') = 1';
	    break;

	case 'MULTI_INSERT':
	    /* 
	     * 0 - table name
	     * 1 - array of column names
	     * 2 - number of rows
	     */
	    $markers = GalleryUtilities::makeMarkers(sizeof($args[1]));
	    $rowList = rtrim(str_repeat('(' . $markers . '), ', $args[2]), ', ');
	    $sql = 'INSERT INTO ' . $args[0] . ' (';
	    $sql .= join(', ', $args[1]);
	    $sql .= ') VALUES ' . $rowList;
	    break;

	default:
	    return array(GalleryCoreApi::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__,
					      $functionName . ' ' . implode(' ', $args)), null);
	}

	return array(null, $sql);
    }

    /**
     * Get database version.
     * @return string version
     */
    function getVersion() {
	global $gallery;
	$platform =& $gallery->getPlatform();
	
	list ($success, $results) = $platform->exec(array(array('db2level')));
	if ($success && is_array($results)) {
	    return implode("\n", $results);
	} else {
	    return '';
	}
    }
    
    /**
     * @see GalleryStorage::_getOptimizeStatement
     */
    function _getOptimizeStatement() {
	global $gallery;
	$platform =& $gallery->getPlatform();
	/*
	 * This requires SYSCTL (therefore, groups), so won't work on single-user 
	 * Windows (9*, ME, XP). getmygid() returns "0" on my XP system. We presume it will not
	 * return "0" on OSes that support groups.  Need to confirm that.
	 */
	if (GalleryUtilities::isA($platform, 'WinNtPlatform') && getmygid() == 0) {
	    return null;
	} else {
	    return "CALL REORGCHK_TB_STATS ('S', '" . $this->_username . "')";
        }
     }
}
?>