<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * This is the unified API for Gallery 2.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryCoreApi {

    /**
     * Set a given plugin instance in the plugin cache
     *
     * The core module can't be loaded from inside Gallery with the
     * loadModule() call for chicken-and-egg reasons, so we have to be able to
     * set it here.
     *
     * @param object a plugin
     * @static
     */
    function setPluginInstance($pluginType, $pluginId, &$instance) {
	GalleryCoreApi::apiMethodUsed('setPluginInstance', 'GalleryPluginHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryPluginHelper_simple.class');
	GalleryPluginHelper_simple::setPluginInstance($pluginType, $pluginId, $instance);
    }

    /**
     * Register a new implementation with the factory
     *
     * @param string the class type (eg. 'GalleryGraphics')
     * @param string the class name (eg. 'NetPbmGraphics')
     * @param string an id (eg. 'NetPBM')
     * @param string the file name (eg. '.../classes/NetPbmGraphics.class')
     * @param array optional hints that can be used to locate this
     *              implementation (eg. array('image/jpeg', 'image/gif'))
     * @static
     */
    function registerFactoryImplementation($classType, $className, $id, $fileName, $hints=array()) {
	GalleryCoreApi::apiMethodUsed('registerFactoryImplementation', 'GalleryFactoryHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryFactoryHelper_simple.class');
	GalleryFactoryHelper_simple::registerImplementation($classType, $className, $id, $fileName, $hints);
    }

    /**
     * Create a new instance of the given type based on the hint provided
     *
     * @param string the class type (eg. 'GalleryGraphics')
     * @param string the class name (eg. 'image/jpeg')
     * @return array object GalleryStatus a status code,
     *               object an instance
     * @static
     */
    function newFactoryInstanceByHint($classType, $hint) {
	GalleryCoreApi::apiMethodUsed('newFactoryInstanceByHint', 'GalleryFactoryHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryFactoryHelper_simple.class');
	return GalleryFactoryHelper_simple::newInstanceByHint($classType, $hint);
    }

    /**
     * Create a new instance of the given type
     *
     * @param string the class type (eg. 'GalleryGraphics')
     * @param string the class name (eg. 'NetPbmGraphics')
     * @static
     */
    function newFactoryInstance($classType, $className=null) {
	GalleryCoreApi::apiMethodUsed('newFactoryInstance', 'GalleryFactoryHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryFactoryHelper_simple.class');
	return GalleryFactoryHelper_simple::newInstance($classType, $className);
    }

    /**
     * Create a new instance of the given type based on the id provided
     *
     * @param string the class type (eg. 'GalleryGraphics')
     * @param string the class name (eg. 'NetPBM')
     * @return array object GalleryStatus a status code,
     *               object an instance
     * @static
     */
    function newFactoryInstanceById($classType, $id) {
	GalleryCoreApi::apiMethodUsed('newFactoryInstanceById', 'GalleryFactoryHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryFactoryHelper_medium.class');
	return GalleryFactoryHelper_medium::newInstanceById($classType, $id);
    }

    /**
     * Return the ids of all the available implementations for a class
     *
     * @return array (id => className)
     * @static
     */
    function getAllFactoryImplementationIds($classType) {
	GalleryCoreApi::apiMethodUsed('getAllFactoryImplementationIds', 'GalleryFactoryHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryFactoryHelper_medium.class');
	return GalleryFactoryHelper_medium::getAllImplementationIds($classType);
    }

    /**
     * Unregister an implementation from the factory by id
     *
     * @param string the class type (eg. 'GalleryGraphics')
     * @param string an id (eg. 'NetPBM')
     * @static
     */
    function unregisterFactoryImplementation($classType, $className) {
	GalleryCoreApi::apiMethodUsed('unregisterFactoryImplementation', 'GalleryFactoryHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryFactoryHelper_medium.class');
	return GalleryFactoryHelper_medium::unregisterImplementation($classType, $className);
    }    
    
    /**
     * Load and initialize the given plugin
     *
     * @param string the plugin type (eg, module, layout, etc)
     * @param string the plugin id
     * @param string whether or not to initialize the plugin
     * @return array object GalleryStatus a status code
     *               object the plugin
     * @static
     */
    function loadPlugin($pluginType, $pluginId, $initialize=true) {
	GalleryCoreApi::apiMethodUsed('loadPlugin', 'GalleryPluginHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryPluginHelper_simple.class');
	return GalleryPluginHelper_simple::loadPlugin($pluginType, $pluginId, $initialize);
    }

    /**
     * Convenience method to retrieve a plugin parameter
     *
     * @param string the plugin type
     * @param string the plugin id
     * @param string the parameter name
     * @param string optional item id
     * @return array object GalleryStatus a status code
     *               string a value
     * @static
     */
    function getPluginParameter($pluginType, $pluginId, $parameterName, $itemId=0) {
	GalleryCoreApi::apiMethodUsed('getPluginParameter', 'GalleryPluginHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryPluginHelper_simple.class');
	return GalleryPluginHelper_simple::getParameter($pluginType, $pluginId,
							$parameterName, $itemId);
    }

    /**
     * Get all the parameters for this plugin
     *
     * @param string the type of the plugin
     * @param string the id of the plugin
     * @param integer the id of item (or null for a global setting)
     * @return array object GalleryStatus a status code
     *               array (parameterName => parameterValue)
     * @static
     */
    function fetchAllPluginParameters($pluginType, $pluginId, $itemId=0) {
	GalleryCoreApi::apiMethodUsed('fetchAllPluginParameters', 'GalleryPluginHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryPluginHelper_simple.class');
	return GalleryPluginHelper_simple::fetchAllParameters($pluginType, $pluginId, $itemId);
    }
    
    /**
     * Get the status of all plugins of a given type
     *
     * @param string the plugin type (eg 'module', 'layout')
     * @return array object GalleryStatus as status code
     *                      array (moduleId => array('active' => true/false,
     *                                               'installed' => true/false)
     * @static
     */
    function getPluginStatus($pluginType) {
	GalleryCoreApi::apiMethodUsed('getPluginStatus', 'GalleryPluginHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryPluginHelper_simple.class');
	return GalleryPluginHelper_simple::getPluginStatus($pluginType);
    }

    /**
     * Activate the given plugin
     *
     * @param string the plugin type
     * @param string the plugin id
     * @return object GalleryStatus a status code
     * @static
     */
    function activatePlugin($pluginType, $pluginId) {
	GalleryCoreApi::apiMethodUsed('activatePlugin', 'GalleryPluginHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryPluginHelper_medium.class');
	return GalleryPluginHelper_medium::activate($pluginType, $pluginId);
    }

    /**
     * Deactivate the given plugin
     *
     * @param string the plugin type
     * @param string the plugin id
     * @return object GalleryStatus a status code
     * @static
     */
    function deactivatePlugin($pluginType, $pluginId) {
	GalleryCoreApi::apiMethodUsed('deactivatePlugin', 'GalleryPluginHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryPluginHelper_medium.class');
	return GalleryPluginHelper_medium::deactivate($pluginType, $pluginId);
    }

    /**
     * Remoe the given plugin from the map
     *
     * @param string the plugin type
     * @param string the plugin id
     * @return object GalleryStatus a status code
     * @static
     */
    function removePlugin($pluginType, $pluginId) {
	GalleryCoreApi::apiMethodUsed('removePlugin', 'GalleryPluginHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryPluginHelper_medium.class');
	return GalleryPluginHelper_medium::remove($pluginType, $pluginId);
    }

    /**
     * Get rid of the specified plugin.
     *
     * @param string the plugin type
     * @param string the plugin id
     * @static
     */
    function unloadPlugin($pluginType, $pluginId) {
	GalleryCoreApi::apiMethodUsed('unloadPlugin', 'GalleryPluginHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryPluginHelper_medium.class');
	return GalleryPluginHelper_medium::unloadPlugin($pluginType, $pluginId);
    }

    /**
     * Get the list of all available plugins of a given type
     *
     * @param string the plugin type
     * @return array object GalleryStatus a status code
     *               string plugin ids
     */
    function getAllPluginIds($pluginType) {
	GalleryCoreApi::apiMethodUsed('getAllPluginIds', 'GalleryPluginHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryPluginHelper_medium.class');
	return GalleryPluginHelper_medium::getAllPluginIds($pluginType);
    }

    /**
     * Remove a parameter for this plugin
     *
     * @param string the type of the plugin
     * @param string the id of the plugin
     * @param string the name of the parameter
     * @param integer the id of item (or null for a global setting)
     * @return object GalleryStatus a status code
     * @static
     */
    function removePluginParameter($pluginType, $pluginId, $parameterName, $itemId=0) {
	GalleryCoreApi::apiMethodUsed('removePluginParameter', 'GalleryPluginHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryPluginHelper_medium.class');
	return GalleryPluginHelper_medium::removeParameter($pluginType, $pluginId, $parameterName, $itemId);
    }
    
    /**
     * Remove all parameters for this plugin
     *
     * @param string the type of the plugin
     * @param string the id of the plugin
     * @return object GalleryStatus a status code
     * @static
     */
    function removeAllPluginParameters($pluginType, $pluginId) {
	GalleryCoreApi::apiMethodUsed('removeAllPluginParameters', 'GalleryPluginHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryPluginHelper_medium.class');
	return GalleryPluginHelper_medium::removeAllParameters($pluginType, $pluginId);
    }
	
    /**
     * Set a module parameter
     *
     * @param string the plugin type
     * @param string the plugin id
     * @param string the parameter name
     * @param string the value
     * @return object GalleryStatus a status code
     */
    function setPluginParameter($pluginType, $pluginId, $parameterName, $parameterValue, $itemId=0) {
	GalleryCoreApi::apiMethodUsed('setPluginParameter', 'GalleryPluginHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryPluginHelper_medium.class');
	return GalleryPluginHelper_medium::setParameter($pluginType, $pluginId,
							$parameterName, $parameterValue, $itemId);
    }
	
    /**
     * Assert that the given user has one of the specific permissions for the
     * target item
     *
     * @return object GalleryStatus success if the user is an administrator
     *                              ERROR_PERMISSION_DENIED if not.
     * @static
     */
    function assertHasItemPermission($itemId, $permission) {
	GalleryCoreApi::apiMethodUsed('assertHasItemPermission', 'GalleryUserHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryUserHelper_simple.class');
	return GalleryUserHelper_simple::assertHasItemPermission($itemId, $permission);
    }

    /**
     * Return true if the given user has the specific permission for the
     * target item
     *
     * @return array object GalleryStatus a status code
     *               boolean true if yes
     * @static
     */
    function hasItemPermission($itemId, $permission) {
	GalleryCoreApi::apiMethodUsed('hasItemPermission', 'GalleryUserHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryUserHelper_simple.class');
	return GalleryUserHelper_simple::hasItemPermission($itemId, $permission);
    }    

    /**
     * Return a map of userNames => userids
     *
     * You can specify how many usernames to list, and where the windows is in
     * the list of all users.
     *
     * @param int [optional] the number of usernames desired
     * @param int [optional] the start of the range
     * @param string [optional] a substring to match 
     * @return array object GalleryStatus a status code
     *               array (username, username, ...)
     * @static
     */
    function fetchUsernames($count=null, $offset=null, $substring=null) {
	GalleryCoreApi::apiMethodUsed('fetchUsernames', 'GalleryUserHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryUserHelper_medium.class');
	return GalleryUserHelper_medium::fetchUsernames($count, $offset, $substring);
    }
    
    /**
     * Return the total umber of users
     *
     * @param string an optional substring to match against the username
     * @static
     */
    function fetchUserCount($substring=null) {
	GalleryCoreApi::apiMethodUsed('fetchUserCount', 'GalleryUserHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryUserHelper_medium.class');
	return GalleryUserHelper_medium::fetchUserCount($substring);
    }
    
    /**
     * Return a map of userNames => userids
     *
     * You can specify how many usernames to list, and where the windows is in
     * the list of all users.
     *
     * @param string the username
     * @return array object GalleryStatus a status code
     *               object GalleryUser a user
     * @static
     */
    function fetchUserByUserName($userName=null) {
	GalleryCoreApi::apiMethodUsed('fetchUserByUserName', 'GalleryUserHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryUserHelper_medium.class');
	return GalleryUserHelper_medium::fetchUserByUserName($userName);
    }
    
    /**
     * Assert that the active user is a site administrator
     *
     * @return object GalleryStatus success if the user is an administrator
     *                              ERROR_PERMISSION_DENIED if not.
     * @static
     */
    function assertUserIsSiteAdministrator() {
	GalleryCoreApi::apiMethodUsed('assertSiteAdministrator', 'GalleryUserHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryUserHelper_medium.class');
	return GalleryUserHelper_medium::assertSiteAdministrator();
    }

    /**
     * Return a map of groupNames => groupids
     *
     * You can specify how many groupnames to list, and where the windows is in
     * the list of all groups.
     *
     * @param int [optional] the number of groupnames desired
     * @param int [optional] the start of the range
     * @param string [optional] a substring to match 
     * @return array object GalleryStatus a status code
     *               array (groupname, groupname, ...)
     * @static
     */
    function fetchGroupNames($count=null, $offset=null, $substring=null) {
	GalleryCoreApi::apiMethodUsed('fetchGroupNames', 'GalleryGroupHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryGroupHelper_simple.class');
	return GalleryGroupHelper_simple::fetchGroupNames($count, $offset, $substring);
    }

    /**
     * Return a map of groupNames => groupids
     *
     * You can specify how many groupnames to list, and where the windows is in
     * the list of all groups.
     *
     * @param string the substring to match
     * @static
     */
    function fetchGroupCount($substring=null) {
	GalleryCoreApi::apiMethodUsed('fetchGroupCount', 'GalleryGroupHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryGroupHelper_simple.class');
	return GalleryGroupHelper_simple::fetchGroupCount($substring);
    }
    
    /**
     * Return a map of groupNames => groupids
     *
     * You can specify how many groupnames to list, and where the windows is in
     * the list of all groups.
     *
     * @param string the groupname
     * @return array object GalleryStatus a status code
     *               object GalleryGroup a group
     * @static
     */
    function fetchGroupByGroupName($groupName=null) {
	GalleryCoreApi::apiMethodUsed('fetchGroupByGroupName', 'GalleryGroupHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryGroupHelper_simple.class');
	return GalleryGroupHelper_simple::fetchGroupByGroupName($groupName);
    }
    
    /**
     * Return the permission bits for a set of permission ids
     *
     * @return array object GalleryStatus a status code
     *               integer bits
     * @static
     */
    function convertPermissionIdsToBits($permissionIds) {
	GalleryCoreApi::apiMethodUsed('convertPermissionIdsToBits', 'GalleryPermissionHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_simple.class');
	return GalleryPermissionHelper_simple::convertIdsToBits($permissionIds);
    }

    /**
     * Return all the permission ids for a permission bit set
     *
     * @param int the bit mask
     * @param boolean should we compress the permission list?
     * @return array object GalleryStatus a status code
     *               array (bits, bits, bits)
     * @static
     */
    function convertPermissionBitsToIds($permissionBits, $compress=false) {
	GalleryCoreApi::apiMethodUsed('convertPermissionBitsToIds', 'GalleryPermissionHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_medium.class');
	return GalleryPermissionHelper_medium::convertBitsToIds($permissionBits, $compress);
    }

    /**
     * Return a list of permissions for the given items
     *
     * @param array int GalleryItem ids
     * @return array object GalleryStatus a status code
     *               array (id => array(array(permission.id => 1, ...), ...)
     * @static
     */
    function fetchPermissionsForItems($itemIds) {
	GalleryCoreApi::apiMethodUsed('fetchPermissionsForItems', 'GalleryPermissionHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_medium.class');
	return GalleryPermissionHelper_medium::fetchPermissionsForItems($itemIds);
    }

    /**
     * Return all the permissions that the given user has for the given item.
     *
     * @return array object GalleryStatus a status code
     *               array (perm1, perm2)
     * @static
     */
    function getPermissions($itemId) {
	GalleryCoreApi::apiMethodUsed('getPermissions', 'GalleryPermissionHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_medium.class');
	return GalleryPermissionHelper_medium::getPermissions($itemId);
    }

    /**
     * Study the permissions for all items (for the given user)
     *
     * @param array GalleryItem ids
     * @param int a user id
     * @return object GalleryStatus a status code
     * @static
     */
    function studyPermissions($itemIds) {
	GalleryCoreApi::apiMethodUsed('studyPermissions', 'GalleryPermissionHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_medium.class');
	return GalleryPermissionHelper_medium::studyPermissions($itemIds);
    }

    /**
     * Add the given itemid, userid, permission mapping
     *
     * @param int the id of the GalleryGroup
     * @param array userid => permission
     * @return object GalleryStatus a status code
     * @static
     */
    function addUserPermission($itemId, $userId, $permission, $applyToChildren=false) {
	GalleryCoreApi::apiMethodUsed('addUserPermission', 'GalleryPermissionHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_advanced.class');
	return GalleryPermissionHelper_advanced::addUserPermission($itemId, $userId, $permission, $applyToChildren);
    }
    
    /**
     * Add the given itemid, userid, permission mapping
     *
     * @param int the id of the GalleryGroup
     * @param array userid => permission
     * @return object GalleryStatus a status code
     * @static
     */
    function addGroupPermission($itemId, $groupId, $permission, $applyToChildren=false) {
	GalleryCoreApi::apiMethodUsed('addGroupPermission', 'GalleryPermissionHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_advanced.class');
	return GalleryPermissionHelper_advanced::addGroupPermission($itemId, $groupId, $permission, $applyToChildren);
    }

    /**
     * Remove the given itemid, userid, permission mapping
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     * @static
     */
    function removeUserPermission($itemId, $userId, $permission, $applyToChildren=false) {
	GalleryCoreApi::apiMethodUsed('removeUserPermission', 'GalleryPermissionHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_advanced.class');
	return GalleryPermissionHelper_advanced::removeUserPermission($itemId, $userId,
								      $permission, $applyToChildren);
    }
    
    /**
     * Remove the given itemid, userid, permission mapping
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     * @static
     */
    function removeGroupPermission($itemId, $groupId, $permission, $applyToChildren=false) {
	GalleryCoreApi::apiMethodUsed('removeGroupPermission', 'GalleryPermissionHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_advanced.class');
	return GalleryPermissionHelper_advanced::removeGroupPermission($itemId, $groupId,
								       $permission, $applyToChildren);
    }

    /**
     * Remove all permissions for the given itemid
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     * @static
     */
    function removeItemPermissions($itemId) {
	GalleryCoreApi::apiMethodUsed('removeItemPermissions', 'GalleryPermissionHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_advanced.class');
	return GalleryPermissionHelper_advanced::removeItemPermissions($itemId);
    }
    
    /**
     * Return a list of permissions for the given item id
     *
     * @param int the id of the item
     * @param boolean should we compress the permission list?
     * @return array object GalleryStatus a status code
     *               array array('userId' => ...,
     *                           'groupId' => ...,
     *                           'permission' => ...)
     * @static
     */
    function fetchAllPermissionsForItem($itemId, $compress=false) {
	GalleryCoreApi::apiMethodUsed('fetchAllPermissionsForItem', 'GalleryPermissionHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_advanced.class');
	return GalleryPermissionHelper_advanced::fetchAllPermissionsForItem($itemId, $compress);
    }
    
    /**
     * Copy a set of permissions from one id to another
     *
     * @param int the id of the target item
     * @param int the id of the source item
     * @return object GalleryStatus a status code
     * @static
     */
    function copyPermissions($itemId, $fromId) {
	GalleryCoreApi::apiMethodUsed('copyPermissions', 'GalleryPermissionHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_advanced.class');
	return GalleryPermissionHelper_advanced::copyPermissions($itemId, $fromId);
    }

    /**
     * Does the user/group combo have all needed permissions for the target item?
     *
     * @param int the id of the target item
     * @param array int user ids
     * @param array int group ids
     * @param array string target permissions
     * @return array object GalleryStatus a status code
     *               boolean true if yes
     * @static
     */
    function hasPermission($itemId, $userIds, $groupIds, $permission) {
	GalleryCoreApi::apiMethodUsed('hasPermission', 'GalleryPermissionHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_advanced.class');
	return GalleryPermissionHelper_advanced::hasPermission($itemId, $userIds, $groupIds, $permission);
    }

    /**
     * Register a new permission
     *
     * @param string the id of the module
     * @param string the id of the permission
     * @param string the non-localized description of the permission
     * @param int flags (of the GALLERY_PERMISSION_XXX variety)
     * @param array ids of other permissions that compose this one
     * @return object GalleryStatus a status code
     * @static
     */
    function registerPermission($module, $permissionId, $description, $flags=0, $composites=array()) {
	GalleryCoreApi::apiMethodUsed('registerPermission', 'GalleryPermissionHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_advanced.class');
	return GalleryPermissionHelper_advanced::registerPermission($module, $permissionId,
								    $description, $flags, $composites);
    }
    
    /**
     * Get all the permission ids that match the specified flags
     * This will return any permissions that contain *all* the bits from flags.
     *
     * @param int flags
     * @return array object GalleryStatus a status code
     *               array (id => description, id => description, ...)
     * @static
     */
    function getPermissionIds($flags=0) {
	GalleryCoreApi::apiMethodUsed('getPermissionIds', 'GalleryPermissionHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_advanced.class');
	return GalleryPermissionHelper_advanced::getPermissionIds($flags);
    }

    /**
     * Expand a single permission into all the possible permissions that it can
     * possibly be.  For example, convert 'core.viewAll' into:
     * ('core.viewAll', 'core.view', 'core.viewOriginal', 'core.viewResizes')
     *
     * @return array object GalleryStatus a status code
     *               array(array('id' => ..., 'description' => ...), ...)
     * @static
     */
    function getSubPermissions($permissionId) {
	GalleryCoreApi::apiMethodUsed('getSubPermissions', 'GalleryPermissionHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_advanced.class');
	return GalleryPermissionHelper_advanced::getSubPermissions($permissionId);
    }

    /**
     * Unregister all permission associated with a given module.
     *
     * @return object GalleryStatus a status code
     */
    function unregisterModulePermissions($moduleId) {
	GalleryCoreApi::apiMethodUsed('unregisterModulePermissions', 'GalleryPermissionHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryPermissionHelper_advanced.class');
	return GalleryPermissionHelper_advanced::unregisterModulePermissions($moduleId);
    }
    
    /**
     * Rebuild the cache if its not current
     *
     * If the cache is expired, it will be automatically rebuilt
     * 
     * @access public
     * @return array object GalleryStatus a status code,
     *               object GalleryDerivative the up-to-date derivative
     *               boolean true if it had to be rebuilt, false if not
     * @static
     */
    function rebuildDerivativeCacheIfNotCurrent($derivativeId) {
	GalleryCoreApi::apiMethodUsed('rebuildDerivativeCacheIfNotCurrent', 'GalleryDerivativeHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryDerivativeHelper_simple.class');
	return GalleryDerivativeHelper_simple::rebuildCacheIfNotCurrent($derivativeId);
    }

    /**
     * Rebuild the cache for the given derivative
     *
     * @param the id of the derivative
     * @return array object GalleryStatus a status code
     *               object GalleryDerivative the rebuilt derivative
     * @static
     */
    function rebuildDerivativeCache($derivativeId) {
	GalleryCoreApi::apiMethodUsed('rebuildDerivativeCache', 'GalleryDerivativeHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryDerivativeHelper_advanced.class');
	return GalleryDerivativeHelper_advanced::rebuildCache($derivativeId);
    }    

    /**
     * Expire all derivatives that depend on the source ids specified
     *
     * @param array source ids
     * @return object GalleryStatus a status code
     * @static
     */
    function expireDerivativeTreeBySourceIds($ids) {
	GalleryCoreApi::apiMethodUsed('expireDerivativeTreeBySourceIds', 'GalleryDerivativeHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryDerivativeHelper_advanced.class');
	return GalleryDerivativeHelper_advanced::expireDerivativeTreeBySourceIds($ids);
    }

    /**
     * Convenience function to fetch the thumbnail for an item id
     *
     * @param array GalleryItem ids
     * @return array object GalleryStatus a status code 
     *               array(GalleryItem id => GalleryDerivativeImage, ...)
     * @static
     */
    function fetchThumbnailsByItemIds($ids) {
	GalleryCoreApi::apiMethodUsed('fetchThumbnailsByItemIds', 'GalleryDerivativeHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryDerivativeHelper_medium.class');
	return GalleryDerivativeHelper_medium::fetchThumbnailsByItemIds($ids);
    }

    /**
     * Convenience function to fetch the preferred for an item id
     *
     * @param array GalleryItem ids
     * @return array object GalleryStatus a status code 
     *               array(GalleryItem id => GalleryDerivativeImage, ...)
     * @static
     */
    function fetchPreferredsByItemIds($ids) {
	GalleryCoreApi::apiMethodUsed('fetchPreferredsByItemIds', 'GalleryDerivativeHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryDerivativeHelper_medium.class');
	return GalleryDerivativeHelper_medium::fetchPreferredsByItemIds($ids);
    }

    /**
     * Convenience function to fetch the resizes for an item id
     *
     * @param array GalleryItem ids
     * @return array object GalleryStatus a status code 
     *               array(GalleryItem id => array(GalleryDerivativeImage, ...)
     *                     ...)
     * @static
     */
    function fetchResizesByItemIds($ids) {
	GalleryCoreApi::apiMethodUsed('fetchResizesByItemIds', 'GalleryDerivativeHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryDerivativeHelper_medium.class');
	return GalleryDerivativeHelper_medium::fetchResizesByItemIds($ids);
    }

    /**
     * Merge a new operation into this derivative's operation list
     *
     * @see GalleryToolkit::mergeOperation()
     *
     * @param string the command
     * @return object GalleryStatus a status code
     * @static
     */
    function mergeDerivativeOperation(&$derivative, $newOperation, $newArgs, $headMerge=false) {
	GalleryCoreApi::apiMethodUsed('mergeOperation', 'GalleryDerivativeHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryDerivativeHelper_advanced.class');
	return GalleryDerivativeHelper_advanced::mergeOperation($derivative, $newOperation, $newArgs, $headMerge);
    }
    
    /**
     * Load the derivative images that have the specified source id(s) with
     * the type(s) specified
     *
     * @param array GalleryItem ids
     * @param array derivative types (eg, 'DERIVATIVE_TYPE_IMAGE_THUMBNAIL')
     * @return array object GalleryStatus a status code 
     *               array(GalleryItem id => GalleryDerivativeImage, ...)
     * @static
     */
    function fetchDerivativesBySourceIds($ids, $types=array()) {
	GalleryCoreApi::apiMethodUsed('fetchDerivativesBySourceIds', 'GalleryDerivativeHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryDerivativeHelper_advanced.class');
	return GalleryDerivativeHelper_advanced::fetchDerivativesBySourceIds($ids, $types);
    }

    /**
     * Remove the given operations from any derivatives that depend on the given ids.  Use case: we've done
     * the "rotate" option on a data item but that data item has a derivative which is being generated using
     * the "crop" operation.  After the rotate, the crop parameters are no longer valid, so we remove it.
     *
     * @param array ids the source ids
     * @param array operation the operations to remove
     * @return object GalleryStatus a status code
     * @static
     */
    function pruneDerivativeOperations($ids, $operations) {
	GalleryCoreApi::apiMethodUsed('pruneDerivativeOperations', 'GalleryDerivativeHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryDerivativeHelper_advanced.class');
	return GalleryDerivativeHelper_advanced::pruneDerivativeOperations($ids, $operations);
    }

    /**
     * Find all derivatives attached to one source and switch them to another one
     *
     * @param string the original source id
     * @param string the new source id
     * @return object GalleryStatus a status code
     * @static
     */
    function remapSourceIds($originalSourceId, $newSourceId) {
	GalleryCoreApi::apiMethodUsed('remapSourceIds', 'GalleryDerivativeHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryDerivativeHelper_advanced.class');
	return GalleryDerivativeHelper_advanced::remapSourceIds($originalSourceId, $newSourceId);
    }

    /**
     * Copy the derivative preferences from one id to another
     *
     * Note that this doesn't modify pre-existing preferences already assigned
     * to the target.
     *
     * @param int the source id
     * @param int the target id
     * @return object GalleryStatus a status code
     * @static
     */
    function copyDerivativePreferences($sourceId, $targetId) {
	GalleryCoreApi::apiMethodUsed('copyDerivativePreferences', 'GalleryDerivativeHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryDerivativeHelper_advanced.class');
	return GalleryDerivativeHelper_advanced::copyPreferences($sourceId, $targetId);
    }

    /**
     * Get the derivative preferences for the given item
     *
     * @param int the target id
     * @return array object GalleryStatus a status code
     *               array (derivativeType => ..., derivativeOperations => ...)
     * @static
     */
    function fetchDerivativePreferencesForItem($targetId) {
	GalleryCoreApi::apiMethodUsed('fetchDerivativePreferencesForItem', 'GalleryDerivativeHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryDerivativeHelper_advanced.class');
	return GalleryDerivativeHelper_advanced::fetchPreferencesForItem($targetId);
    }

    /**
     * Add a derivative preference to a given item
     *
     * @param int the position of this preference
     * @param int the item id
     * @param int the derivative type (eg, DERIVATIVE_TYPE_IMAGE_THUMBNAIL)
     * @param string the derivative operations (eg, 'thumbnail|200')
     * @return object GalleryStatus a status code
     */
    function addDerivativePreference($order, $itemId, $derivativeType, $derivativeOperations) {
	GalleryCoreApi::apiMethodUsed('addPreference', 'GalleryDerivativeHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryDerivativeHelper_advanced.class');
	return GalleryDerivativeHelper_advanced::addPreference($order, $itemId, $derivativeType,
							       $derivativeOperations);
    }

    /**
     * Remove all derivative preferences for a given item
     *
     * @param int the item id
     * @return object GalleryStatus a status code
     */
    function removeDerivativePreferencesForItem($itemId) {
	GalleryCoreApi::apiMethodUsed('removePreferenceForItem', 'GalleryDerivativeHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryDerivativeHelper_advanced.class');
	return GalleryDerivativeHelper_advanced::removePreferencesForItem($itemId);
    }
    
    /**
     * Update the view count for this item id
     * @param int the item id
     * @param int the amount to increment
     * @static
     */
    function incrementItemViewCount($itemId, $step=1) {
	GalleryCoreApi::apiMethodUsed('incrementItemViewCount', 'GalleryItemAttributesHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemAttributesHelper_simple.class');
	return GalleryItemAttributesHelper_simple::incrementViewCount($itemId, $step);
    }

    /**
     * Create a new set of attributes for an item
     * @param int the item id
     * @param array the sequence of parent ids
     * @static
     */
    function createItemAttributes($itemId, $parentSequence) {
	GalleryCoreApi::apiMethodUsed('createItemAttributes', 'GalleryItemAttributesHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemAttributesHelper_advanced.class');
	return GalleryItemAttributesHelper_advanced::createItemAttributes($itemId, $parentSequence);
    }
    
    /**
     * Remove the attributes for the given item
     * @param int the item id
     * @static
     */
    function removeItemAttributes($itemId) {
	GalleryCoreApi::apiMethodUsed('removeItemAttributes', 'GalleryItemAttributesHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemAttributesHelper_advanced.class');
	return GalleryItemAttributesHelper_advanced::removeItemAttributes($itemId);
    }
    
    /**
     * Update the view count for this item id
     * @param int the item id
     * @param int the new count
     * @static
     */
    function setItemViewCount($itemId, $count) {
	GalleryCoreApi::apiMethodUsed('setItemViewCount', 'GalleryItemAttributesHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemAttributesHelper_advanced.class');
	return GalleryItemAttributesHelper_advanced::setViewCount($itemId, $count);
    }
    
    /**
     * Get the view counts for many item ids
     * @param int the item id
     * @static
     */
    function fetchItemViewCount($itemId) {
	GalleryCoreApi::apiMethodUsed('fetchItemViewCount', 'GalleryItemAttributesHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemAttributesHelper_advanced.class');
	return GalleryItemAttributesHelper_advanced::fetchViewCount($itemId);
    }
    
    /**
     * Get the view counts for many item ids
     * @param int the item id
     * @static
     */
    function fetchItemViewCounts($itemIds) {
	GalleryCoreApi::apiMethodUsed('fetchItemViewCounts', 'GalleryItemAttributesHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemAttributesHelper_medium.class');
	return GalleryItemAttributesHelper_medium::fetchViewCounts($itemIds);
    }
    
    /**
     * Set the order weight for an item id
     * @param int the item id
     * @param int the new order weight
     * @static
     */
    function setItemOrderWeight($itemId, $orderWeight) {
	GalleryCoreApi::apiMethodUsed('setItemOrderWeight', 'GalleryItemAttributesHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemAttributesHelper_advanced.class');
	return GalleryItemAttributesHelper_advanced::setOrderWeight($itemId, $orderWeight);
    }
    
    /**
     * Get the order weight for a given item id
     * @param int the item id
     * @param int the order weight
     * @static
     */
    function fetchItemOrderWeight($itemId) {
	GalleryCoreApi::apiMethodUsed('fetchItemOrderWeights', 'GalleryItemAttributesHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemAttributesHelper_medium.class');
	return GalleryItemAttributesHelper_medium::fetchOrderWeight($itemId);
    }
    
    /**
     * Get the order weight for a given item id
     * @param int the item id
     * @param int the order weight
     * @static
     */
    function fetchItemOrderWeights($itemIds) {
	GalleryCoreApi::apiMethodUsed('fetchItemOrderWeights', 'GalleryItemAttributesHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemAttributesHelper_medium.class');
	return GalleryItemAttributesHelper_medium::fetchOrderWeights($itemIds);
    }
    
    /**
     * Rebalance the order weights associated with this item's children.
     * When this method is complete, the child item ids should still have the
     * same order as they have now, but their order weights should be spaced
     * out to exactly the spacing value specified in the arguments.
     *
     * @param int the parent id
     * @param int the order spacing
     * @static
     */
    function rebalanceChildOrderWeights($parentItemId, $spacing=1000) {
	GalleryCoreApi::apiMethodUsed('rebalanceChildOrderWeights', 'GalleryItemAttributesHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemAttributesHelper_advanced.class');
	return GalleryItemAttributesHelper_advanced::rebalanceChildOrderWeights($parentItemId, $spacing);
    }
    
    /**
     * Fetch the highest or lowest weight of all children
     * @param int the parent item id
     * @param int the direction (HIGHER_WEIGHT, LOWER_WEIGHT)
     * @return int a weight
     * @static
     */
    function fetchExtremeChildWeight($itemId, $direction) {
	GalleryCoreApi::apiMethodUsed('fetchExtremeChildWeight', 'GalleryItemAttributesHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemAttributesHelper_advanced.class');
	return GalleryItemAttributesHelper_advanced::fetchExtremeChildWeight($itemId, $direction);
    }
    
    /**
     * Fetch the weight of the next peer in line (higher or lower, as specified)
     *
     * @param int the item id
     * @param int the direction (HIGHER_WEIGHT, LOWER_WEIGHT)
     * @return int a weight
     * @static
     */
    function fetchNextItemWeight($itemId, $direction) {
	GalleryCoreApi::apiMethodUsed('fetchNextItemWeight', 'GalleryItemAttributesHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemAttributesHelper_advanced.class');
	return GalleryItemAttributesHelper_advanced::fetchNextWeight($itemId, $direction);
    }
    
    /**
     * Set the parent id sequence for an item id
     *
     * @param int id the item id
     * @param array the parent sequence (ids)
     * @return object GalleryStatus a status code
     * @static
     */
    function setParentSequence($itemId, $parentSequence) {
	GalleryCoreApi::apiMethodUsed('setParentSequence', 'GalleryItemAttributesHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemAttributesHelper_advanced.class');
	return GalleryItemAttributesHelper_advanced::setParentSequence($itemId, $parentSequence);
    }
    
    /**
     * Update all items containing the source parent sequence to the new parent sequence
     *
     * @param int id the item id
     * @param array the parent sequence (ids)
     * @return object GalleryStatus a status code
     * @static
     */
    function updateParentSequence($oldParentSequence, $newParentSequence) {
	GalleryCoreApi::apiMethodUsed('updateParentSequence', 'GalleryItemAttributesHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemAttributesHelper_advanced.class');
	return GalleryItemAttributesHelper_advanced::updateParentSequence($oldParentSequence, $newParentSequence);
    }
    
    /**
     * Get the parent sequence for this item id
     * @param int the item id
     * @return array object GalleryStatus a status code
     *               array the parent id sequence
     * @static
     */
    function fetchParentSequence($itemId) {
	GalleryCoreApi::apiMethodUsed('fetchParentSequence', 'GalleryItemAttributesHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemAttributesHelper_medium.class');
	return GalleryItemAttributesHelper_medium::fetchParentSequence($itemId);
    }
    
    /**
     * Return the correct layout for this item
     *
     * @param object GalleryItem
     * @return array object GalleryStatus a status code
     *               object GalleryLayout a layout instance
     * @static
     */
    function fetchLayout($item) {
	GalleryCoreApi::apiMethodUsed('fetchLayout', 'GalleryItemHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_simple.class');
	return GalleryItemHelper_simple::fetchLayout($item);
    }

    /**
     * Return the number of children for the items specified, that are visible to the
     * user specified.
     *
     * @access public
     * @param array item ids
     * @param int user id
     * @return array object GalleryStatus a status code
     *               int a count
     * @static
     */
    function fetchChildCounts($itemIds) {
	GalleryCoreApi::apiMethodUsed('fetchChildCounts', 'GalleryItemHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_simple.class');
	return GalleryItemHelper_simple::fetchChildCounts($itemIds);
    }

    /**
     * Fetch the breakdown of descendents for a given item
     *
     * @param int the item id
     * @return array object GalleryStatus a status code
     *               array('GalleryAlbumItem' => ##,
     *                     'GalleryDataItem' => ##)
     * @static
     */
    function fetchDescendentCounts($itemIds) {
	GalleryCoreApi::apiMethodUsed('fetchDescendentCounts', 'GalleryItemHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_simple.class');
	return GalleryItemHelper_simple::fetchDescendentCounts($itemIds);
    }

    /**
     * Return the number of of items that match the given type and have the
     * given permission (defaults to 'core.view')
     *
     * @access public
     * @param string an item type (eg, 'GalleryAlbumItem')
     * @return array object GalleryStatus a status code
     *               int a count
     * @static
     */
    function fetchItemIdCount($itemType, $permission='core.view') {
	GalleryCoreApi::apiMethodUsed('fetchItemIdCount', 'GalleryItemHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_simple.class');
	return GalleryItemHelper_simple::fetchItemIdCount($itemType, $permission);
    }

    /**
     * Return the ids of all the child items of the given item that have the
     * matching permission.  Useful for, example, for finding all the children
     * where we (the active user) has the 'core.changePermissions' permission
     * bit set.  This allows us to cascade permission updates.
     *
     * @access public
     * @param array item ids
     * @param int permission id
     * @return array object GalleryStatus a status code
     *               int a count
     * @static
     */
    function fetchChildItemIdsWithPermission($itemId, $permissionId) {
	GalleryCoreApi::apiMethodUsed('fetchChildItemIdsWithPermission', 'GalleryItemHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_medium.class');
	return GalleryItemHelper_medium::fetchChildItemIdsWithPermission($itemId, $permissionId);
    }
    
    /**
     * Return the ids of all items that match the given type and have the
     * given permission (defaults to 'core.view')
     *
     * @access public
     * @param string an item type (eg, 'GalleryAlbumItem')
     * @return array object GalleryStatus a status code
     *               array(id, id, id, ...)
     * @static
     */
    function fetchAllItemIds($itemType, $permission='core.view') {
	GalleryCoreApi::apiMethodUsed('fetchAllItemIds', 'GalleryItemHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_medium.class');
	return GalleryItemHelper_medium::fetchAllItemIds($itemType, $permission);
    }

    /**
     * Return the appropriate GalleryItem instance for the mime type provided.
     *
     * Use the GalleryFactory to try to find an exact match to the mime type.
     * Failing that, fall back to the major type, then fall back to '*'.
     *
     * @param string the mime type
     * @return array object GalleryStatus a status code
     *               object GalleryItem an item
     * @static
     */
    function newItemByMimeType($mimeType) {
	GalleryCoreApi::apiMethodUsed('newItemByMimeType', 'GalleryItemHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_medium.class');
	return GalleryItemHelper_medium::newItemByMimeType($mimeType);
    }
    
    /**
     * Add a new data item to an album from a data file.
     *
     * @param string the path to the file on the local disk
     * @param string the name of the new item
     * @param string the title of the new item
     * @param string the summary of the new item
     * @param string the description of the new item
     * @param string the mime type of the new item
     * @param int the id of the target album
     * @return array object GalleryStatus a status code
     *               object GalleryDataItem a new item
     * @static
     */
    function addItemToAlbum($fileName, $itemName, $title, $summary,
			    $description, $mimeType, $albumId) {
	GalleryCoreApi::apiMethodUsed('addItemToAlbum', 'GalleryItemHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_medium.class');
	return GalleryItemHelper_medium::addItemToAlbum($fileName, $itemName, $title, $summary,
							$description, $mimeType, $albumId);
    }
    
    /**
     * Add an existing data item to an album 
     *
     * @param object GalleryItem the source item
     * @param int the id of the target album
     * @return object GalleryStatus a status code
     * @static
     */
    function addExistingItemToAlbum($item, $albumId) {
	GalleryCoreApi::apiMethodUsed('addExistingItemToAlbum', 'GalleryItemHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_medium.class');
	return GalleryItemHelper_medium::addExistingItemToAlbum($item, $albumId);
    }
    
    /**
     * Set the thumbnail for an album from an item, according to the thumbnail
     * preferences for the album.
     *
     * @param int the album id
     * @param int the item id
     * @return object GalleryStatus a status code
     * @static
     */
    function setThumbnailFromItem($itemId, $fromItemId) {
	GalleryCoreApi::apiMethodUsed('setThumbnailFromItem', 'GalleryItemHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_medium.class');
	return GalleryItemHelper_medium::setThumbnailFromItem($itemId, $fromItemId);
    }
    
    /**
     * Remove the specific item/key pair
     *
     * @param int the id of the GalleryItem
     * @return object GalleryStatus a status code
     * @static
     */
    function removeItemProperty($itemId, $key) {
	GalleryCoreApi::apiMethodUsed('removeItemProperty', 'GalleryItemHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_advanced.class');
	return GalleryItemHelper_advanced::removeProperty($itemId, $key);
    }

    /**
     * Change the specific item/key pair
     *
     * @param int the id of the GalleryItem
     * @param string the name of the property
     * @param string the value of the proprety
     * @return object GalleryStatus a status code
     * @static
     */
    function setItemProperty($itemId, $key, $value) {
	GalleryCoreApi::apiMethodUsed('setItemProperty', 'GalleryItemHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_advanced.class');
	return GalleryItemHelper_advanced::setProperty($itemId, $key, $value);
    }

    /**
     * Remove all properties for the given item id
     *
     * @param int the id of the GalleryItem
     * @return object GalleryStatus a status code
     * @static
     */
    function removeItemProperties($itemId) {
	GalleryCoreApi::apiMethodUsed('removeItemProperties', 'GalleryItemHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_advanced.class');
	return GalleryItemHelper_advanced::removeProperties($itemId);
    }

    /**
     * Return a list of all the property keys for this item
     *
     * @return array object GalleryStatus a status code
     *               array property keys
     * @static
     */
    function fetchItemPropertyKeys($itemId) {
	GalleryCoreApi::apiMethodUsed('fetchItemPropertyKeys', 'GalleryItemHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_advanced.class');
	return GalleryItemHelper_advanced::fetchPropertyKeys($itemId);
    }

    /**
     * Get the value for a specific property
     *
     * @param int the id of the GalleryItem
     * @param string the desired key
     * @return array object GalleryStatus a status code
     *               string value
     * @static
     */
    function fetchItemProperty($itemId, $key) {
	GalleryCoreApi::apiMethodUsed('fetchItemProperty', 'GalleryItemHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_advanced.class');
	return GalleryItemHelper_advanced::fetchProperty($itemId, $key);
    }

    /**
     * Get all the key/values for a specific GalleryItem
     *
     * @param int the id of the GalleryItem
     * @return array object GalleryStatus a status code
     *               array key => value pairs
     * @static
     */
    function fetchAllItemProperties($itemId) {
	GalleryCoreApi::apiMethodUsed('fetchAllItemProperties', 'GalleryItemHelper_advanced');
	require_once(dirname(__FILE__) . '/helpers/GalleryItemHelper_advanced.class');
	return GalleryItemHelper_advanced::fetchAllProperties($itemId);
    }
        
    /**
     * Is the active user in the admin group?
     *
     * @return array object GalleryStatus a status code
     *               bool true if yes
     * @static
     */
    function isUserInSiteAdminGroup() {
	GalleryCoreApi::apiMethodUsed('isUserInSiteAdminGroup', 'GalleryUserGroupHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryUserGroupHelper_simple.class');
	return GalleryUserGroupHelper_simple::isUserInSiteAdminGroup();
    }

    /**
     * Is the given user id in the given group?
     *
     * @param int the id of the user
     * @return array object GalleryStatus a status code
     *               bool true if yes
     * @static
     */
    function isUserInGroup($userId, $groupId) {
	GalleryCoreApi::apiMethodUsed('isUserInGroup', 'GalleryUserGroupHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryUserGroupHelper_simple.class');
	return GalleryUserGroupHelper_simple::isUserInGroup($userId, $groupId);
    }    

    /**
     * Add the user to the group id specified.
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     * @static
     */
    function addUserToGroup($userId, $groupId) {
	GalleryCoreApi::apiMethodUsed('addUserToGroup', 'GalleryUserGroupHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryUserGroupHelper_medium.class');
	return GalleryUserGroupHelper_medium::addUserToGroup($userId, $groupId);
    }

    /**
     * Remove the user from the group id specified.
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     * @static
     */
    function removeUserFromGroup($userId, $groupId) {
	GalleryCoreApi::apiMethodUsed('removeUserFromGroup', 'GalleryUserGroupHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryUserGroupHelper_medium.class');
	return GalleryUserGroupHelper_medium::removeUserFromGroup($userId, $groupId);
    }

    /**
     * Remove the user from all groups
     *
     * @param int the id of the GalleryUser
     * @return object GalleryStatus a status code
     * @static
     */
    function removeUserFromAllGroups($userId) {
	GalleryCoreApi::apiMethodUsed('removeUserFromAllGroups', 'GalleryUserGroupHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryUserGroupHelper_medium.class');
	return GalleryUserGroupHelper_medium::removeUserFromAllGroups($userId);
    }

    /**
     * Remove any users in the group
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     * @static
     */
    function removeAllUsersFromGroup($groupId) {
	GalleryCoreApi::apiMethodUsed('removeAllUsersFromGroup', 'GalleryUserGroupHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryUserGroupHelper_medium.class');
	return GalleryUserGroupHelper_medium::removeAllUsersFromGroup($groupId);
    }

    /**
     * Return a list of user ids belonging to a group
     *
     * You can specify how many userids to list, and where the windows is in
     * the list of all users.
     *
     * @param int the group id
     * @param int the number of userids desired
     * @param int the start of the range
     * @return array object GalleryStatus a status code
     *               array user id => user name
     * @static
     */
    function fetchUsersForGroup($groupId, $count=null, $offset=null) {
	GalleryCoreApi::apiMethodUsed('fetchUsersForGroup', 'GalleryUserGroupHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryUserGroupHelper_medium.class');
	return GalleryUserGroupHelper_medium::fetchUsersForGroup($groupId, $count, $offset);
    }

    /**
     * Return a list of groups that a user belongs to
     *
     * You can specify how many userids to list, and where the windows is in
     * the list of all users.
     *
     * @param int the user id
     * @param int the number of group ids desired
     * @param int the start of the range
     * @return array object GalleryStatus a status code
     *               array group id => group name
     * @static
     */
    function fetchGroupsForUser($userId, $count=null, $offset=null) {
	GalleryCoreApi::apiMethodUsed('fetchGroupsForUser', 'GalleryUserGroupHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryUserGroupHelper_medium.class');
	return GalleryUserGroupHelper_medium::fetchGroupsForUser($userId, $count, $offset);
    }	

    /**
     * Given a complete logical path, return the item id that it refers to.
     *
     * @param string the path
     * @return array object GalleryStatus a status code
     *               int the item id
     * @static
     */
    function fetchItemIdByPath($path) {
	GalleryCoreApi::apiMethodUsed('fetchItemIdByPath', 'GalleryFileSystemEntityHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryFileSystemEntityHelper_simple.class');
	return GalleryFileSystemEntityHelper_simple::fetchItemIdByPath($path);
    }
    
    /**
     * Typically, we create a FileSystemEntity with a specific path.  This
     * allows us to check for name collisions at this point.
     *
     * @param string the path component
     * @param int the id of the target parent
     * @return array object GalleryStatus a status code
     *               boolean true if there's a collision
     * @access private
     * @static
     */
    function checkPathCollision($pathComponent, $newParentId) {
	GalleryCoreApi::apiMethodUsed('checkPathCollision', 'GalleryFileSystemEntityHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryFileSystemEntityHelper_medium.class');
	return GalleryFileSystemEntityHelper_medium::checkPathCollision($pathComponent, $newParentId);
    }

    /**
     * Get a legal path component in the given parent id.  Legal by the platform standards, and
     * legal in that it doesn't cause a conflict with other path components.
     *
     * @param string the starting path component (eg, "IMG_10293.JPG")
     * @param int the target parent id
     * @return array object GalleryStatus a status code
     *               string the legal path component
     * @static
     */
    function getLegalPathComponent($pathComponent, $parentId) {
	GalleryCoreApi::apiMethodUsed('getLegalPathComponent', 'GalleryFileSystemEntityHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryFileSystemEntityHelper_medium.class');
	return GalleryFileSystemEntityHelper_medium::getLegalPathComponent($pathComponent, $parentId);
    }
    
    /**
     * Returns the id of the child filesystem entity that matches the given
     * path component.
     *
     * Note: this call ignores permissions so it must be used very carefully!
     *
     * @access public
     * @param id of the parent
     * @param path component of the target item
     * @return array object GalleryStatus a status code
     *               int an id
     * @static
     */
    function fetchChildIdByPathComponent($parentId, $pathComponent) {
	GalleryCoreApi::apiMethodUsed('fetchChildIdByPathComponent', 'GalleryFileSystemEntityHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryFileSystemEntityHelper_simple.class');
	return GalleryFileSystemEntityHelper_simple::fetchChildIdByPathComponent($parentId, $pathComponent);
    }

    /**
     * Register the operations that a toolkit is able to perform on a 
     * certain mime type
     *
     * This should be called by a module that provides a toolkit to
     * access certain mime types. The module should also call
     * GalleryCoreApi::registerFactoryImplementation with the same "id" that it
     * registers here, so the correct class can be found later
     *
     * @param string the id of the toolkit
     * @param array the applicable mime types for this operation
     * @param string the id of the operation
     * @param array a list of parameters that this operation requires
     * @param string the output mime type after performing this operation
     * @param string a translatable description of this operation
     * @return object GalleryStatus a status code
     * @static
     */
    function registerToolkitOperation($toolkitId, $mimeTypes, $operationName,
				      $parameterTypesArray, $description,
				      $outputMimeType='') {
	GalleryCoreApi::apiMethodUsed('registerToolkitOperation', 'GalleryToolkitHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryToolkitHelper_medium.class');
	return GalleryToolkitHelper_medium::registerOperation($toolkitId, $mimeTypes, $operationName,
							      $parameterTypesArray, $description,
							      $outputMimeType);
    }
    
    /**
     * Register a parameter that a toolkit can extract from a certain
     * mime type
     *
     * This should be called by a module that provides a toolkit to
     * access certain mime types. The module should also call
     * GalleryCoreApi::registerFactoryImplementation with the same "id" that it
     * registers here, so the correct class can be found later
     *
     * @param string the id of the toolkit
     * @param array the applicable mime types for this property
     * @param string the name of the property
     * @param string the type of the property
     * @param string a translatable description of this operation
     * @return object GalleryStatus a status code
     * @static
     */
    function registerToolkitProperty($toolkitId, $mimeTypes, $propertyName, $type, $description) {
	GalleryCoreApi::apiMethodUsed('registerToolkitProperty', 'GalleryToolkitHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryToolkitHelper_medium.class');
	return GalleryToolkitHelper_medium::registerProperty($toolkitId, $mimeTypes,
							     $propertyName, $type, $description);
    }
    
    /**
     * Unregister a toolkit's operations and properties.  If we have any
     * remaining operations or properties that are no longer implemented by any
     * toolkit then remove them from the system also.
     *
     * @param string a toolkit id
     * @return object GalleryStatus a status code
     * @static
     */
    function unregisterToolkit($toolkitId) {
	GalleryCoreApi::apiMethodUsed('unregisterToolkit', 'GalleryToolkitHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryToolkitHelper_medium.class');
	return GalleryToolkitHelper_medium::unregisterToolkit($toolkitId);
    }
    
    /**
     * Get all valid operations on a certain mime type
     *
     * @access public
     * @static
     * @param string a mime type
     * @return array object GalleryStatus a status code
     *               array('name' => ...,
     *                     'outputMimeType' => ...,
     *                     'description' => ...,
     *                     arguments => array('type' => ...,
     *                                        'description' => ...),
     *                                  ...)
     */
    function getToolkitOperations($mimeType) {
	GalleryCoreApi::apiMethodUsed('getToolkitOperations', 'GalleryToolkitHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryToolkitHelper_medium.class');
	return GalleryToolkitHelper_medium::getOperations($mimeType);
    }
    
    /**
     * Get all valid properties of a certain mime type
     *
     * @access public
     * @static
     * @param string a mime type
     * @return array object GalleryStatus a status code
     *               array (
     *                      array($toolkitId, $propertyId),
     *                      array($toolkitId, $propertyId)
     *               )
     *
     */
    function getToolkitProperties($mimeType) {
	GalleryCoreApi::apiMethodUsed('getToolkitProperties', 'GalleryToolkitHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryToolkitHelper_medium.class');
	return GalleryToolkitHelper_medium::getProperties($mimeType);
    }
    
    /**
     * Get a toolkit that can perform the given operation
     *
     * @access public
     * @static
     * @param string a mime type
     * @param string the operation name
     * @return array object GalleryStatus a status code
     *               object GalleryToolkit a toolkit
     *               string a result mime type
     * @static
     */
    function getToolkitByOperation($mimeType, $operationName) {
	GalleryCoreApi::apiMethodUsed('getToolkitByOperation', 'GalleryToolkitHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryToolkitHelper_simple.class');
	return GalleryToolkitHelper_simple::getToolkitByOperation($mimeType, $operationName);
    }
    
    /**
     * Verify that a given mime-type/operation-sequence combination is
     * supported by our existing toolkits by walking the sequence and making
     * sure that we have a toolkit that can handle each operation.
     *
     * @param string the original mime type
     * @param string a sequence of operations
     * @return object GalleryStatus a status code
     *         boolean true if supported, false if not
     *         string the output mime type
     * @static
     */
    function isSupportedOperationSequence($mimeType, $operations) {
	GalleryCoreApi::apiMethodUsed('isSupportedOperationSequence', 'GalleryToolkitHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryToolkitHelper_medium.class');
	return GalleryToolkitHelper_medium::isSupportedOperationSequence($mimeType, $operations);
    }
    
    /**
     * Get a toolkit that can retrieve the given property
     *
     * @access public
     * @static
     * @param string a mime type
     * @param string the property name
     * @return array object GalleryStatus a status code
     *               object GalleryToolkit a toolkit
     * @static
     */
    function getToolkitByProperty($mimeType, $propertyName) {
	GalleryCoreApi::apiMethodUsed('getToolkitByProperty', 'GalleryToolkitHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryToolkitHelper_simple.class');
	return GalleryToolkitHelper_simple::getToolkitByProperty($mimeType, $propertyName);
    }

    /**
     * Create a new event with the given name
     * @return object GalleryEvent an event with the given name
     * @static
     */
    function newEvent($eventName) {
	GalleryCoreApi::apiMethodUsed('newEvent', 'GalleryEventHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryEventHelper_simple.class');
	return GalleryEventHelper_simple::newEvent($eventName);
    }

    /**
     * Register an event listener
     *
     * @param string the name of the event (eg "GalleryEntity::save")
     * @param object a GalleryEventListener instance
     * @static
     */
    function registerEventListener($eventName, &$listener) {
	GalleryCoreApi::apiMethodUsed('registerEventListener', 'GalleryEventHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryEventHelper_simple.class');
	return GalleryEventHelper_simple::registerEventListener($eventName, $listener);
    }

    /**
     * Deliver an event to anybody listening
     *
     * @param string the name of the event (eg "GalleryEntity::save")
     * @param object a GalleryEvent
     * @return object GalleryStatus a status code
     * @static
     */
    function postEvent($event) {
	GalleryCoreApi::apiMethodUsed('postEvent', 'GalleryEventHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryEventHelper_simple.class');
	return GalleryEventHelper_simple::postEvent($event);
    }


    /**
     * Read Lock one or more objects
     *
     * @access public
     * @param array ids to lock
     * @param integer how long to wait for the lock before giving up
     * @return array object GalleryStatus a status code
     *               int the lock id
     * @static
     */
    function acquireReadLock($ids, $timeout=10) {
	GalleryCoreApi::apiMethodUsed('acquireReadLock', 'GalleryLockHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryLockHelper_medium.class');
	return GalleryLockHelper_medium::acquireReadLock($ids, $timeout);
    }

    /**
     * Acquire read locks on all the parents of this id.  This is useful when
     * we're going to do a filesystem related operation and we want to make
     * sure that the tree does not change out from underneath us.
     *
     * @access public
     * @param integer an id to lock
     * @param integer how long to wait for the lock before giving up
     * @return array object GalleryStatus a status code
     *               object GalleryLock a lock
     * @static
     */
    function acquireReadLockParents($id, $timeout=10) {
	GalleryCoreApi::apiMethodUsed('acquireReadLockParents', 'GalleryLockHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryLockHelper_medium.class');
	return GalleryLockHelper_medium::acquireReadLockParents($id, $timeout);
    }

    /**
     * Return true if the given id is read locked or write locked.
     *
     * @access public
     * @param int an entity id
     * @return boolean true if the entity is read locked
     * @static
     */
    function isReadLocked($id) {
	GalleryCoreApi::apiMethodUsed('isReadLocked', 'GalleryLockHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryLockHelper_medium.class');
	return GalleryLockHelper_medium::isReadLocked($id);
    }

    /**
     * Write lock one or more objects
     *
     * @access public
     * @param array ids to lock
     * @param integer how long to wait for the lock before giving up
     * @return array object GalleryStatus a status code
     *               int the lock id
     * @static
     */
    function acquireWriteLock($ids, $timeout=10) {
	GalleryCoreApi::apiMethodUsed('acquireWriteLock', 'GalleryLockHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryLockHelper_medium.class');
	return GalleryLockHelper_medium::acquireWriteLock($ids, $timeout);
    }

    /**
     * Return true if the given id is write locked
     *
     * @access public
     * @param int an entity id
     * @return boolean true if the entity is write locked
     * @static
     */
    function isWriteLocked($id) {
	GalleryCoreApi::apiMethodUsed('isWriteLocked', 'GalleryLockHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryLockHelper_medium.class');
	return GalleryLockHelper_medium::isWriteLocked($id);
    }

    /**
     * Release the given lock(s)
     *
     * @param array a list of lock ids, or a single lock id
     * @return object GalleryStatus a status code
     * @static
     */
    function releaseLocks($lockIds) {
	GalleryCoreApi::apiMethodUsed('releaseLocks', 'GalleryLockHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryLockHelper_medium.class');
	return GalleryLockHelper_medium::releaseLocks($lockIds);
    }

    /**
     * Let go of all of our locks.
     *
     * @param string halt after the first failure?  default: yes
     * @return object GalleryStatus a status code
     * @static
     */
    function releaseAllLocks($haltOnFailure=true) {
	GalleryCoreApi::apiMethodUsed('releaseAllLocks', 'GalleryLockHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryLockHelper_medium.class');
	return GalleryLockHelper_medium::releaseAllLocks($haltOnFailure);
    }

    /**
     * Get the set of lock ids
     *
     * @return object array of lock ids
     * @access private
     * @static
     */
    function getLockIds() {
	GalleryCoreApi::apiMethodUsed('getLockIds', 'GalleryLockHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryLockHelper_simple.class');
	return GalleryLockHelper_simple::getLockIds();
    }

    /**
     * Load the GalleryEntities with the ids specified
     *
     * @param mixed the ids (or id) of the GalleryEntities to load
     * @return array object GalleryStatus a status code,
     *               mixed one GalleryEntity or an array of GalleryEntities
     * @static
     */
    function loadEntitiesById($ids) {
	GalleryCoreApi::apiMethodUsed('loadEntitiesById', 'GalleryEntityHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryEntityHelper_simple.class');
	return GalleryEntityHelper_simple::loadEntitiesById($ids);
    }

    /**
     * Delete the entity with the given id 
     *
     * @param int the id of a GalleryEntity to delete
     * @return object GalleryStatus a status code 
     * @static
     */
    function deleteEntityById($id) {
	GalleryCoreApi::apiMethodUsed('deleteEntityById', 'GalleryEntityHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryEntityHelper_medium.class');
	return GalleryEntityHelper_medium::deleteEntityById($id);
    }
    
    /**
     * Fetch the ids of the entities linked to the target entity
     *
     * @param int the target entity id
     * @return array object GalleryStatus a status code
     *               array entity ids
     * @static
     */
    function fetchEntitiesLinkedTo($targetId) {
	GalleryCoreApi::apiMethodUsed('fetchEntitiesLinkedTo', 'GalleryEntityHelper_medium');
	require_once(dirname(__FILE__) . '/helpers/GalleryEntityHelper_medium.class');
	return GalleryEntityHelper_medium::fetchEntitiesLinkedTo($targetId);
    }

    /**
     * Return the ids of all the immediate child entities of the given entity.
     *
     * Note: this call ignores permissions and order so it must be used very
     * carefully!
     *
     * @access public
     * @param array item ids
     * @return array object GalleryStatus a status code
     *               int a count
     * @static
     */
    function fetchChildIds($id) {
	GalleryCoreApi::apiMethodUsed('fetchChildIds', 'GalleryChildEntityHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryChildEntityHelper_simple.class');
	return GalleryChildEntityHelper_simple::fetchChildIds($id);
    }
    
    /**
     * Return the ids in weighted order of all the immediate child entities of
     * the given entity.
     *
     * Note: this call ignores permissions so it must be used very carefully!
     *
     * @access public
     * @param array item ids
     * @return array object GalleryStatus a status code
     *               int a count
     * @static
     */
    function fetchOrderedChildIds($id) {
	GalleryCoreApi::apiMethodUsed('fetchOrderedChildIds', 'GalleryChildEntityHelper_simple');
	require_once(dirname(__FILE__) . '/helpers/GalleryChildEntityHelper_simple.class');
	return GalleryChildEntityHelper_simple::fetchOrderedChildIds($id);
    }

    // Debug
    function apiMethodUsed($name) {
	if (!isset($GLOBALS['GalleryCoreApi'][$name])) {
	    $GLOBALS['GalleryCoreApi'][$name] = 0;
	}
	$GLOBALS['GalleryCoreApi'][$name]++;
    }

    function apiMethodRoundup() {
	global $gallery;

	$platform = $gallery->getPlatform();
	$fd = $platform->fopen(__FILE__, "r");
	while ($line = $platform->fgets($fd, 4096)) {
	    if (preg_match("/GalleryCoreApi::apiMethodUsed\('(.*)', '(.*)'\)/", $line, $regs)) {
		$methods[$regs[1]] = $regs[2];
	    }
	}
	$platform->fclose($fd);

	$types = array();
	foreach ($methods as $method => $type) {
	    if (isset($GLOBALS['GalleryCoreApi'][$method])) {
		$types[$type] = 1;
	    }
	}

	foreach ($methods as $method => $type) {
	    if (!isset($types[$type])) {
		unset($methods[$method]);
	    }
	    
	    if (isset($GLOBALS['GalleryCoreApi'][$method])) {
		unset($methods[$method]);
	    }
	}

	asort($methods);

	return $methods;
    }
}
?>
