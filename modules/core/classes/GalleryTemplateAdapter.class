<?php
/*
 * $RCSfile
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * This class is a glue layer between the templating system and our various
 * callbacks that generate URLs, localized text, dates, themed widgets, etc.
 */
class GalleryTemplateAdapter {

    /**
     * The base URL to be used in all template methods
     *
     * @var $_baseUrl
     * @access private
     */
    var $_baseUrl;

    /**
     * The active theme
     *
     * @var object GalleryTheme a theme instance
     * @access private
     */
    var $_theme;

    /**
     * The location of the translation base
     *
     * @var string a directory
     * @access private
     */
    var $_translationBase;

    /**
     * Set the base URL to be used in all template methods
     *
     * @param string the base URL
     */
    function setBaseUrl($baseUrl) {
	$this->_baseUrl = $baseUrl;
    }

    /**
     * Get the base URL
     *
     * @return string the base URL
     */
    function getBaseUrl() {
	return $this->_baseUrl;
    }

    /**
     * Return a valid URL for a standalone Gallery.
     *
     * @param array data in key/value pairs
     * @return string a URL
     */
    function url($params) {
	global $gallery;

	$baseUrl = $this->getBaseUrl();

	/*
	 * We can't do much about errors at this level, so ignore them
	 * and hope for the best.
	 */
	list ($ret, $session) = $gallery->getSession();
	if ($ret->isError()) {
	    $gallery->debug($ret->errorAsHtml());
	} else {
	    if (!($session->isUsingCookies())) {
		list ($sessionKey, $sessionId) = $session->getSessionDescriptor();
		$params[$sessionKey] = $sessionId;
	    }
	}
	
	foreach ($params as $key => $value) {
	    $args[] = GALLERY_FORM_VARIABLE_PREFIX . "$key=$value";
	}

	$url = $baseUrl;
	if (isset($args)) {
	    $url .= '?' . join('&', $args);
	}

	return $url;
    }

    /**
     * Return a valid URL for a standalone Gallery.
     *
     * @param array data in key/value pairs
     * @return string a URL
     */
    function date($params) {
	global $gallery;

	if (empty($params['format'])) {
	    $params['format'] = '%D %T';
	}
	
	return strftime($params['format'], $params['timestamp']);
    }
    
    /**
     * Return an HTML form 
     *
     * @param array data in key/value pairs
     * @param string HTML content to go inside the form
     * @return string a complete HTML form
     */
    function form($params, $content) {
	global $gallery;
	
	$baseUrl = $this->getBaseUrl();

	/*
	 * We can't do much about errors at this level, so ignore them
	 * and hope for the best.
	 */
	list ($ret, $session) = $gallery->getSession();
	if ($ret->isError()) {
	    $gallery->debug($ret->errorAsHtml());
	} else {
	    if (!($session->isUsingCookies())) {
		list ($sessionKey, $sessionId) = $session->getSessionDescriptor();
		$params[$sessionKey] = $sessionId;
	    }
	}

	$enctype = null;
	if (!empty($params['enctype'])) {
	    $enctype = $params['enctype'];
	    unset($params['enctype']);
	}
	
	if (empty($params['method'])) {
	    $method = 'POST';
	} else {
	    $method = $params['method'];
	    unset($params['method']);
	}

	$result = '<form method="' . $method . '" action="' . $baseUrl . '"';
	if (!empty($enctype)) {
	    $result .= ' enctype="' . $enctype . '"';
	}
	$result .= '">';
	$result .= "\n";
	foreach ($params as $key => $value) {
	    $result .= '<input type="hidden" ' .
		'name="' . GALLERY_FORM_VARIABLE_PREFIX . $key . '" ' .
		'value="' . $value . '">';
	    $result .= "\n";
	}
	$result .= $content;
	$result .= "\n";
	$result .= '</form>';

	return $result;
    }

    /**
     * Translate a string into a localized version
     *
     * @see Gallery::translate()
     * @param array data in key/value pairs
     * @return string a translated string
     */
    function text($params) {
	global $gallery;

	/* Get the translator.  Jump through hoops to get it as a reference */
	$reply = $gallery->getTranslator();
	if ($reply[0]->isError()) {
	    $gallery->debug($reply[0]->getAsHtml());
	    return 'Translation error';
	} else {
	    $translator =& $reply[1];
	}

	/* Translate using the active module */
	list ($ret, $content) =
	    $translator->translate($this->_translationBase[0],
				   $this->_translationBase[1],
				   $params);

	if ($ret->isError()) {
	    $gallery->debug($ret->getAsHtml());
	    return 'Translation error';
	} else {
	    return $content;
	}
    }

    /**
     * Call a specific template method.
     *
     * @param string the method name (like 'galleryStyle')
     * @param array key => value attributes
     * @param string content
     */
    function callMethod($method, $params, $content) {
	global $gallery;

	if (!strncmp($method, 'gallery', 7)) {
	    $method = substr($method, 7); // get rid of the 'gallery' part

	    /* Check first to see if this class can handle the method */
	    if (method_exists($this, $method)) {
		return $this->$method($params, $content);
	    } else if (isset($this->_theme)) {
		/* See if the theme can handle it */
		if (method_exists($this->_theme, $method)) {
		    return $this->_theme->$method($params, $content);
		}
	    }
	}

	$result = "Unknown template method: $method";
	if (!isset($this->_theme)) {
	    $result .= " [no theme specified]";
	}
	return $result;
    }

    /**
     * Set the active theme
     *
     * @param object GalleryTheme
     */ 
    function setTheme($theme) {
	$this->_theme = $theme;
    }

    /**
     * Get the active theme
     *
     * @return object GalleryTheme
     */ 
    function getTheme() {
	return $this->_theme;
    }

    /**
     * Set the active translation base
     *
     * @param string a translation base
     */ 
    function setTranslationBase($module, $path) {
	$this->_translationBase = array($module, $path);
    }

    /**
     * Get the active translation base
     *
     * @return string a translation base
     */ 
    function getTranslationBase() {
	return $this->_translationBase;
    }
    
}
