<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * This class is a glue layer between the templating system and our various
 * callbacks that generate URLs, localized text, dates, themed widgets, etc.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryTemplateAdapter {

    /**
     * The active theme
     *
     * @var object GalleryTheme a theme instance
     * @access private
     */
    var $_theme;

    /**
     * Temporary storage for generated content.
     *
     * @var array content
     */
    var $_content_stack;

    /**
     * Constructor
     */
    function GalleryTemplateAdapter() {
	$this->_content_stack = array();
    }

    /**
     * Set the active theme
     *
     * @param object GalleryTheme
     */ 
    function setTheme($theme) {
	$this->_theme = $theme;
    }

    /**
     * Get the active theme
     *
     * @return object GalleryTheme
     */ 
    function getTheme() {
	return $this->_theme;
    }

    /*************************************************************
     * Special purpose template callback methods.
     *************************************************************/

    /**
     * @see GalleryUrlGenerator::generateUrl()
     *
     * Return a valid Gallery URL, standalone or embedded.
     *
     * @param array data in key/value pairs
     * @return string a URL
     */
    function url($params, &$smarty) {
	global $gallery;
	$urlGenerator = $gallery->getUrlGenerator();
	return $urlGenerator->generateUrl($params);
    }

    /**
     * Return a valid Gallery date.
     *
     * @todo This needs to be refactored.
     *
     * @param array data in key/value pairs
     * @return string a URL
     */
    function date($params, &$smarty) {
	global $gallery;

	if (empty($params['format'])) {
	    $params['format'] = '%D %T';
	}
	
	return strftime($params['format'], $params['timestamp']);
    }

    /**
     * @see GalleryTranslator::translate()
     */
    function text($params, &$smarty) {
	global $gallery;

	$domain = $smarty->_tpl_vars['l10Domain'];
	$translator =& $gallery->getTranslator();
	list ($ret, $text) = $translator->translateDomain($domain, $params);
	if ($ret->isError()) {
	    return "[Translation error]";
	} else {
	    return $text;
	}
    }

    /**
     * Return a transformed element name, useful when we're trying to use
     * Javascript to access a form element.
     *
     * @param array key => value attributes
     * @return HTML content
     */
    function elementName($params) {
	return GALLERY_FORM_VARIABLE_PREFIX . $params['name'];
    }

	
    /*************************************************************
     * Utility methods
     *************************************************************/

    /**
     * Get the context that this tag was called within
     *
     * @param object GallerySmarty the smarty instance
     * @return array('params' => array('key' => 'value', ...),
     *               'stack' => array('call1', 'call2', ...))
     */
    function _getContext(&$params, $smarty) {
	$context = array();
	$context['params'] = $params;
	for ($i = sizeof($smarty->_tag_stack)-2; $i >= 0; $i--) {
	    $context['stack'][] = $smarty->_tag_stack[$i][0];
	}
	$context['stack'][] = 'TOP';
	return $context;
    }

    /**
     * Push a new object onto the stack
     * @param object an object
     */
    function stackPush($object) {
	return array_push($this->_content_stack, $object);
    }

    /**
     * Pop the topmost object off the stack and return it
     * @return object an object
     */
    function stackPop() {
	return array_pop($this->_content_stack);
    }

    /**
     * Return the topmost object on the stack (or null)
     * @return object an object
     */
    function &stackPeek() {
	if ($this->stackEmpty()) {
	    return null;
	} else {
	    return $this->_content_stack[sizeof($this->_content_stack)-1];
	}
    }
    
    /**
     * Return true if the stack is empty
     * @return boolean 
     */
    function stackEmpty() {
	return (sizeof($this->_content_stack) == 0);
    }
    
    /*************************************************************
     * Theme callback methods
     *************************************************************/
    /**
     * This is a list of Smarty callback methods that contain content
     * data (eg, {tag} .. content .. {/tag}).
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function getBlockMethods() {
        static $_blockMethods = array(
            'input',
            'form',
            'select',
            'textarea',
            'link',
            'success',
            'warning',
            'error',
            'listing',
            'breadcrumb',
            'linkset',
            'actionset',
            'infoset',
            'tabset',
            'table',
            'row',
            'column',
            'element',
            'title',
            'subtitle',
            'description',
            'footer',
            'media',
            'value',
            'main',
            'sidebar',
            'itemthumbnail',
            'itemview',
            'tabbedbox',
            'box',
            'pagebox',
            'banner',
            'item',
            'actionitem',
        );
        return $_blockMethods;
    }

    /**
     * Call the style theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function style($params, &$smarty) {
        $context = $this->_getContext($params, $smarty);
        return $this->_theme->style($context);
    }

    /**
     * Call the input theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function input($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'input';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;

        $content = $this->_theme->input($context, $self['content']);


        $tagData = array('name' => 'input', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['input'])) {
                array_push($parent['input'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'input', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the form theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function form($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'form';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;

        $content = $this->_theme->form($context, $self['content']);


        $tagData = array('name' => 'form', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['form'])) {
                array_push($parent['form'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'form', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the select theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function select($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'select';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;

        $content = $this->_theme->select($context, $self['content']);


        $tagData = array('name' => 'select', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['select'])) {
                array_push($parent['select'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'select', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the textarea theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function textarea($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'textarea';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;

        $content = $this->_theme->textarea($context, $self['content']);


        $tagData = array('name' => 'textarea', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['textarea'])) {
                array_push($parent['textarea'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'textarea', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the link theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function link($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'link';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;

        $content = $this->_theme->link($context, $self['content']);


        $tagData = array('name' => 'link', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['link'])) {
                array_push($parent['link'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'link', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the success theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function success($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'success';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;

        $content = $this->_theme->success($context, $self['content']);


        $tagData = array('name' => 'success', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['success'])) {
                array_push($parent['success'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'success', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the warning theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function warning($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'warning';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;

        $content = $this->_theme->warning($context, $self['content']);


        $tagData = array('name' => 'warning', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['warning'])) {
                array_push($parent['warning'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'warning', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the error theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function error($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'error';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;

        $content = $this->_theme->error($context, $self['content']);


        $tagData = array('name' => 'error', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['error'])) {
                array_push($parent['error'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'error', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the image theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function image($params, &$smarty) {
        $context = $this->_getContext($params, $smarty);
        return $this->_theme->image($context);
    }

    /**
     * Call the listing theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function listing($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'listing';
            $self['item'] = array();
            $self['_arrays']['item'] = 1;
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'listing\' tag: <pre>%s</pre>', $content));
	}

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();

        $content = $this->_theme->listing($context, $self['item']);


        $tagData = array('name' => 'listing', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['listing'])) {
                array_push($parent['listing'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'listing', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the breadcrumb theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function breadcrumb($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'breadcrumb';
            $self['item'] = array();
            $self['_arrays']['item'] = 1;
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'breadcrumb\' tag: <pre>%s</pre>', $content));
	}

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();

        $content = $this->_theme->breadcrumb($context, $self['item']);


        $tagData = array('name' => 'breadcrumb', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['breadcrumb'])) {
                array_push($parent['breadcrumb'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'breadcrumb', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the linkset theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function linkset($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'linkset';
            $self['title'] = array();
            $self['item'] = array();
            $self['_arrays']['item'] = 1;
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'linkset\' tag: <pre>%s</pre>', $content));
	}

        /* Verify all attributes */
        if (!isset($params['style'])) {
            $params['style'] = null;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        /* Collapse title to a single value */
        if (sizeof($self['title']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple title tags inside tag linkset ' .
                                           '(1 expected, %d found)', sizeof($self['title'])));
            return;
        }
        if (sizeof($self['title']) > 0) {
            $self['title'] = $self['title'][0];
	}


        $content = $this->_theme->linkset($context, $self['title'], $self['item']);


        $tagData = array('name' => 'linkset', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['linkset'])) {
                array_push($parent['linkset'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'linkset', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the actionset theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function actionset($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'actionset';
            $self['title'] = array();
            $self['actionitem'] = array();
            $self['_arrays']['actionitem'] = 1;
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'actionset\' tag: <pre>%s</pre>', $content));
	}

        /* Verify all attributes */
        if (!isset($params['style'])) {
            $params['style'] = null;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        /* Collapse title to a single value */
        if (sizeof($self['title']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple title tags inside tag actionset ' .
                                           '(1 expected, %d found)', sizeof($self['title'])));
            return;
        }
        if (sizeof($self['title']) > 0) {
            $self['title'] = $self['title'][0];
	}


        $content = $this->_theme->actionset($context, $self['title'], $self['actionitem']);


        $tagData = array('name' => 'actionset', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['actionset'])) {
                array_push($parent['actionset'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'actionset', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the infoset theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function infoset($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'infoset';
            $self['item'] = array();
            $self['_arrays']['item'] = 1;
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'infoset\' tag: <pre>%s</pre>', $content));
	}

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();

        $content = $this->_theme->infoset($context, $self['item']);


        $tagData = array('name' => 'infoset', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['infoset'])) {
                array_push($parent['infoset'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'infoset', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the tabset theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function tabset($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'tabset';
            $self['item'] = array();
            $self['_arrays']['item'] = 1;
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'tabset\' tag: <pre>%s</pre>', $content));
	}

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();

        $content = $this->_theme->tabset($context, $self['item']);


        $tagData = array('name' => 'tabset', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['tabset'])) {
                array_push($parent['tabset'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'tabset', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the table theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function table($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'table';
            $self['row'] = array();
            $self['_arrays']['row'] = 1;
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'table\' tag: <pre>%s</pre>', $content));
	}

        /* Verify all attributes */
        if (!isset($params['style'])) {
            $params['style'] = null;
        }
        if (!isset($params['evenodd'])) {
            $params['evenodd'] = false;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();

        $content = $this->_theme->table($context, $self['row']);


        $tagData = array('name' => 'table', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['table'])) {
                array_push($parent['table'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'table', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the row theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function row($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'row';
            $self['column'] = array();
            $self['_arrays']['column'] = 1;
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'row\' tag: <pre>%s</pre>', $content));
	}

        /* Verify all attributes */
        if (!isset($params['rowspan'])) {
            $params['rowspan'] = 1;
        }
        if (!isset($params['colspan'])) {
            $params['colspan'] = 1;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();

        $content = $this->_theme->row($context, $self['column']);


        $tagData = array('name' => 'row', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['row'])) {
                array_push($parent['row'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'row', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the column theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function column($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'column';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        /* Verify all attributes */
        if (!isset($params['align'])) {
            $params['align'] = null;
        }
        if (!isset($params['valign'])) {
            $params['valign'] = null;
        }
        if (!isset($params['width'])) {
            $params['width'] = null;
        }
        if (!isset($params['header'])) {
            $params['header'] = false;
        }
        if (!isset($params['colspan'])) {
            $params['colspan'] = 1;
        }
        if (!isset($params['rowspan'])) {
            $params['rowspan'] = 1;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;



        $tagData = array('name' => 'column', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['column'])) {
                array_push($parent['column'], $tagData);
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'column', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the element theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function element($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'element';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        /* Verify all attributes */
        if (!isset($params['style'])) {
            $params['style'] = null;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;



        $tagData = array('name' => 'element', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['element'])) {
                array_push($parent['element'], $tagData);
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'element', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the title theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function title($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'title';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;



        $tagData = array('name' => 'title', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['title'])) {
                array_push($parent['title'], $tagData);
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'title', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the subtitle theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function subtitle($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'subtitle';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;



        $tagData = array('name' => 'subtitle', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['subtitle'])) {
                array_push($parent['subtitle'], $tagData);
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'subtitle', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the description theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function description($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'description';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;



        $tagData = array('name' => 'description', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['description'])) {
                array_push($parent['description'], $tagData);
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'description', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the footer theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function footer($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'footer';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;



        $tagData = array('name' => 'footer', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['footer'])) {
                array_push($parent['footer'], $tagData);
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'footer', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the media theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function media($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'media';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;



        $tagData = array('name' => 'media', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['media'])) {
                array_push($parent['media'], $tagData);
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'media', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the value theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function value($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'value';
            $self['content'] = array();
            $this->stackPush($self);
            return;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        $self['content'] = $content;


        $content = trim($self['content']);

        $tagData = array('name' => 'value', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['value'])) {
                array_push($parent['value'], $tagData);
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'value', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the main theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function main($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'main';
            $self['breadcrumb'] = array();
            $self['sidebar'] = array();
            $self['_arrays']['sidebar'] = 1;
            $self['pagebox'] = array();
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'main\' tag: <pre>%s</pre>', $content));
	}

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        /* Collapse breadcrumb to a single value */
        if (sizeof($self['breadcrumb']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple breadcrumb tags inside tag main ' .
                                           '(1 expected, %d found)', sizeof($self['breadcrumb'])));
            return;
        }
        if (sizeof($self['breadcrumb']) > 0) {
            $self['breadcrumb'] = $self['breadcrumb'][0];
	}


        /* Collapse pagebox to a single value */
        if (sizeof($self['pagebox']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple pagebox tags inside tag main ' .
                                           '(1 expected, %d found)', sizeof($self['pagebox'])));
            return;
        }
        if (sizeof($self['pagebox']) > 0) {
            $self['pagebox'] = $self['pagebox'][0];
	}

        $content = $this->_theme->main($context, $self['breadcrumb'], $self['sidebar'], $self['pagebox']);


        $tagData = array('name' => 'main', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['main'])) {
                array_push($parent['main'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'main', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the sidebar theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function sidebar($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'sidebar';
            $self['element'] = array();
            $self['_arrays']['element'] = 1;
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'sidebar\' tag: <pre>%s</pre>', $content));
	}

        /* Verify all attributes */
        if (!isset($params['style'])) {
            $params['style'] = null;
        }
        if (!isset($params['side'])) {
            $params['side'] = null;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();

        $content = $this->_theme->sidebar($context, $self['element']);


        $tagData = array('name' => 'sidebar', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['sidebar'])) {
                array_push($parent['sidebar'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'sidebar', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the itemthumbnail theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function itemthumbnail($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'itemthumbnail';
            $self['title'] = array();
            $self['description'] = array();
            $self['media'] = array();
            $self['infoset'] = array();
            $self['actionset'] = array();
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'itemthumbnail\' tag: <pre>%s</pre>', $content));
	}

        /* Verify all attributes */
        if (!isset($params['style'])) {
            $params['style'] = null;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        /* Collapse title to a single value */
        if (sizeof($self['title']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple title tags inside tag itemthumbnail ' .
                                           '(1 expected, %d found)', sizeof($self['title'])));
            return;
        }
        if (sizeof($self['title']) > 0) {
            $self['title'] = $self['title'][0];
	}

        /* Collapse description to a single value */
        if (sizeof($self['description']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple description tags inside tag itemthumbnail ' .
                                           '(1 expected, %d found)', sizeof($self['description'])));
            return;
        }
        if (sizeof($self['description']) > 0) {
            $self['description'] = $self['description'][0];
	}

        /* Collapse media to a single value */
        if (sizeof($self['media']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple media tags inside tag itemthumbnail ' .
                                           '(1 expected, %d found)', sizeof($self['media'])));
            return;
        }
        if (sizeof($self['media']) > 0) {
            $self['media'] = $self['media'][0];
	}

        /* Collapse infoset to a single value */
        if (sizeof($self['infoset']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple infoset tags inside tag itemthumbnail ' .
                                           '(1 expected, %d found)', sizeof($self['infoset'])));
            return;
        }
        if (sizeof($self['infoset']) > 0) {
            $self['infoset'] = $self['infoset'][0];
	}

        /* Collapse actionset to a single value */
        if (sizeof($self['actionset']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple actionset tags inside tag itemthumbnail ' .
                                           '(1 expected, %d found)', sizeof($self['actionset'])));
            return;
        }
        if (sizeof($self['actionset']) > 0) {
            $self['actionset'] = $self['actionset'][0];
	}

        $content = $this->_theme->itemthumbnail($context, $self['title'], $self['description'], $self['media'], $self['infoset'], $self['actionset']);


        $tagData = array('name' => 'itemthumbnail', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['itemthumbnail'])) {
                array_push($parent['itemthumbnail'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'itemthumbnail', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the itemview theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function itemview($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'itemview';
            $self['title'] = array();
            $self['description'] = array();
            $self['media'] = array();
            $self['footer'] = array();
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'itemview\' tag: <pre>%s</pre>', $content));
	}

        /* Verify all attributes */
        if (!isset($params['style'])) {
            $params['style'] = null;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        /* Collapse title to a single value */
        if (sizeof($self['title']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple title tags inside tag itemview ' .
                                           '(1 expected, %d found)', sizeof($self['title'])));
            return;
        }
        if (sizeof($self['title']) > 0) {
            $self['title'] = $self['title'][0];
	}

        /* Collapse description to a single value */
        if (sizeof($self['description']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple description tags inside tag itemview ' .
                                           '(1 expected, %d found)', sizeof($self['description'])));
            return;
        }
        if (sizeof($self['description']) > 0) {
            $self['description'] = $self['description'][0];
	}

        /* Collapse media to a single value */
        if (sizeof($self['media']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple media tags inside tag itemview ' .
                                           '(1 expected, %d found)', sizeof($self['media'])));
            return;
        }
        if (sizeof($self['media']) > 0) {
            $self['media'] = $self['media'][0];
	}

        /* Collapse footer to a single value */
        if (sizeof($self['footer']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple footer tags inside tag itemview ' .
                                           '(1 expected, %d found)', sizeof($self['footer'])));
            return;
        }
        if (sizeof($self['footer']) > 0) {
            $self['footer'] = $self['footer'][0];
	}

        $content = $this->_theme->itemview($context, $self['title'], $self['description'], $self['media'], $self['footer']);


        $tagData = array('name' => 'itemview', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['itemview'])) {
                array_push($parent['itemview'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'itemview', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the tabbedbox theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function tabbedbox($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'tabbedbox';
            $self['tabset'] = array();
            $self['footer'] = array();
            $self['element'] = array();
            $self['_arrays']['element'] = 1;
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'tabbedbox\' tag: <pre>%s</pre>', $content));
	}

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        /* Collapse tabset to a single value */
        if (sizeof($self['tabset']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple tabset tags inside tag tabbedbox ' .
                                           '(1 expected, %d found)', sizeof($self['tabset'])));
            return;
        }
        if (sizeof($self['tabset']) > 0) {
            $self['tabset'] = $self['tabset'][0];
	}

        /* Collapse footer to a single value */
        if (sizeof($self['footer']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple footer tags inside tag tabbedbox ' .
                                           '(1 expected, %d found)', sizeof($self['footer'])));
            return;
        }
        if (sizeof($self['footer']) > 0) {
            $self['footer'] = $self['footer'][0];
	}


        $content = $this->_theme->tabbedbox($context, $self['tabset'], $self['footer'], $self['element']);


        $tagData = array('name' => 'tabbedbox', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['tabbedbox'])) {
                array_push($parent['tabbedbox'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'tabbedbox', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the box theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function box($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'box';
            $self['title'] = array();
            $self['subtitle'] = array();
            $self['description'] = array();
            $self['footer'] = array();
            $self['element'] = array();
            $self['_arrays']['element'] = 1;
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'box\' tag: <pre>%s</pre>', $content));
	}

        /* Verify all attributes */
        if (!isset($params['style'])) {
            $params['style'] = null;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        /* Collapse title to a single value */
        if (sizeof($self['title']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple title tags inside tag box ' .
                                           '(1 expected, %d found)', sizeof($self['title'])));
            return;
        }
        if (sizeof($self['title']) > 0) {
            $self['title'] = $self['title'][0];
	}

        /* Collapse subtitle to a single value */
        if (sizeof($self['subtitle']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple subtitle tags inside tag box ' .
                                           '(1 expected, %d found)', sizeof($self['subtitle'])));
            return;
        }
        if (sizeof($self['subtitle']) > 0) {
            $self['subtitle'] = $self['subtitle'][0];
	}

        /* Collapse description to a single value */
        if (sizeof($self['description']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple description tags inside tag box ' .
                                           '(1 expected, %d found)', sizeof($self['description'])));
            return;
        }
        if (sizeof($self['description']) > 0) {
            $self['description'] = $self['description'][0];
	}

        /* Collapse footer to a single value */
        if (sizeof($self['footer']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple footer tags inside tag box ' .
                                           '(1 expected, %d found)', sizeof($self['footer'])));
            return;
        }
        if (sizeof($self['footer']) > 0) {
            $self['footer'] = $self['footer'][0];
	}


        $content = $this->_theme->box($context, $self['title'], $self['subtitle'], $self['description'], $self['footer'], $self['element']);


        $tagData = array('name' => 'box', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['box'])) {
                array_push($parent['box'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'box', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the pagebox theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function pagebox($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'pagebox';
            $self['element'] = array();
            $self['_arrays']['element'] = 1;
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'pagebox\' tag: <pre>%s</pre>', $content));
	}

        /* Verify all attributes */
        if (!isset($params['style'])) {
            $params['style'] = null;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();

        $content = $this->_theme->pagebox($context, $self['element']);


        $tagData = array('name' => 'pagebox', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['pagebox'])) {
                array_push($parent['pagebox'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'pagebox', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the banner theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function banner($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'banner';
            $self['title'] = array();
            $self['description'] = array();
            $self['element'] = array();
            $self['_arrays']['element'] = 1;
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'banner\' tag: <pre>%s</pre>', $content));
	}

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        /* Collapse title to a single value */
        if (sizeof($self['title']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple title tags inside tag banner ' .
                                           '(1 expected, %d found)', sizeof($self['title'])));
            return;
        }
        if (sizeof($self['title']) > 0) {
            $self['title'] = $self['title'][0];
	}

        /* Collapse description to a single value */
        if (sizeof($self['description']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple description tags inside tag banner ' .
                                           '(1 expected, %d found)', sizeof($self['description'])));
            return;
        }
        if (sizeof($self['description']) > 0) {
            $self['description'] = $self['description'][0];
	}


        $content = $this->_theme->banner($context, $self['title'], $self['description'], $self['element']);


        $tagData = array('name' => 'banner', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['banner'])) {
                array_push($parent['banner'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'banner', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the item theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function item($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'item';
            $self['title'] = array();
            $self['subtitle'] = array();
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'item\' tag: <pre>%s</pre>', $content));
	}

        /* Verify all attributes */
        if (!isset($params['selected'])) {
            $params['selected'] = false;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        /* Collapse title to a single value */
        if (sizeof($self['title']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple title tags inside tag item ' .
                                           '(1 expected, %d found)', sizeof($self['title'])));
            return;
        }
        if (sizeof($self['title']) > 0) {
            $self['title'] = $self['title'][0];
	}

        /* Collapse subtitle to a single value */
        if (sizeof($self['subtitle']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple subtitle tags inside tag item ' .
                                           '(1 expected, %d found)', sizeof($self['subtitle'])));
            return;
        }
        if (sizeof($self['subtitle']) > 0) {
            $self['subtitle'] = $self['subtitle'][0];
	}

        $content = $this->_theme->item($context, $self['title'], $self['subtitle']);


        $tagData = array('name' => 'item', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['item'])) {
                array_push($parent['item'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'item', $parent['_name']));
               return;
            }
        }
    }

    /**
     * Call the actionitem theme API method
     *
     * (NOTE: This method is generated by TemplateTags.php -- do not edit!)
     */
    function actionitem($params, $content, &$smarty) {
        if (!isset($content)) {
            /* Allocate space for named children */
            $self = array();
            $self['_name'] = 'actionitem';
            $self['title'] = array();
            $self['value'] = array();
            $this->stackPush($self);
            return;
        }

      	$content = trim($content);
	if (!empty($content)) {
	    $smarty->trigger_error(sprintf('Unexpected content detected in \'actionitem\' tag: <pre>%s</pre>', $content));
	}

        /* Verify all attributes */
        if (!isset($params['selected'])) {
            $params['selected'] = false;
        }

        $context = $this->_getContext($params, $smarty);
	$self = $this->stackPop();
        /* Collapse title to a single value */
        if (sizeof($self['title']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple title tags inside tag actionitem ' .
                                           '(1 expected, %d found)', sizeof($self['title'])));
            return;
        }
        if (sizeof($self['title']) > 0) {
            $self['title'] = $self['title'][0];
	}

        /* Collapse value to a single value */
        if (sizeof($self['value']) > 1) {
            $smarty->trigger_error(sprintf('Illegal multiple value tags inside tag actionitem ' .
                                           '(1 expected, %d found)', sizeof($self['value'])));
            return;
        }
        if (sizeof($self['value']) > 0) {
            $self['value'] = $self['value'][0];
	}

        $content = $this->_theme->actionitem($context, $self['title'], $self['value']);


        $tagData = array('name' => 'actionitem', 'params' => $params, 'content' => $content);
        if ($this->stackEmpty()) {
            return $content;
        } else {
            $parent =& $this->stackPeek();
            if (isset($parent['actionitem'])) {
                array_push($parent['actionitem'], $tagData);
            } else if (isset($parent['element'])) {
                /* Verify all element attributes */
		if (!isset($tagData['params']['style'])) {
		    $tagData['params']['style'] = null;
		}
                array_push($parent['element'], $tagData);
            } else if (isset($parent['content'])) {
	        /* Content is passed back inline */
	        return $content;
            } else {
               $smarty->trigger_error(sprintf('Illegal use of tag %s inside tag %s', 'actionitem', $parent['_name']));
               return;
            }
        }
    }

}
?>
