<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Internationalization and Localization utilities
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryTranslator {
    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * Keep track of the gettext domains we've already bound
     *
     * @var array $_boundDomains
     * @access private
     */
    var $_boundDomains;

    /**
     * This is the list of languages that the core module supports.  Other
     * modules may not support them, but that's not something we can really
     * do much about.
     *
     * @var array $_supportedLanguages
     * @access private
     */
    var $_supportedLanguages;

    /**  
     * Default country for languages spoken in more than one country. Used
     * when the browser doesn't send the country information.
     *
     * @var array $_defaultCountry
     * @access private
     */
    var $_defaultCountry;

    /**
     * The active character set.
     *
     * @var string $_activeCharset
     * @access private
     */
    var $_activeCharset;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    function GalleryTranslator() {
	$this->_boundDomains = array();
    }

    /**
     * Return our language data
     *
     * @return array array['language code']['country code'] = array('description', 'charset code')
     *         array array('country' => 'default language code',
     *                     'country' => 'default language code',
     *                     ...)
     */
    function getLanguageData() {
	static $supportedLanguages = array();
	static $defaultCountry = array();
	
	if (empty($supportedLanguages)) {
	    /* XXX: Move this information into a configuration file */
	    $supportedLanguages['de']['DE']['description'] = 'German';
	    $supportedLanguages['de']['DE']['charset'] = 'UTF-8';
	    $defaultCountry['de'] = 'DE';
	
	    $supportedLanguages['el']['GR']['description'] = 'Greek';
	    $supportedLanguages['el']['GR']['charset'] = 'UTF-8';
	    $defaultCountry['el'] = 'GR';
    
	    $supportedLanguages['en']['US']['description'] = 'English (US)';
	    $supportedLanguages['en']['US']['charset'] = 'UTF-8';
	    $supportedLanguages['en']['GB']['description'] = 'English (UK)';
	    $supportedLanguages['en']['GB']['charset'] = 'UTF-8';
	    $defaultCountry['en'] = 'US';
    
	    $supportedLanguages['es']['AR']['description'] = 'Spanish (AR)';
	    $supportedLanguages['es']['AR']['charset'] = 'UTF-8';
	    $defaultCountry['es'] = 'AR';
    
	    $supportedLanguages['fi']['FI']['description'] = 'Finnish';
	    $supportedLanguages['fi']['FI']['charset'] = 'UTF-8';
	    $defaultCountry['fi'] = 'FI';
    
	    $supportedLanguages['pl']['PL']['description'] = 'Polish';
	    $supportedLanguages['pl']['PL']['charset'] = 'UTF-8';
	    $defaultCountry['pl'] = 'PL';
	
	    $supportedLanguages['pt']['BR']['description'] = 'Portuguese (BR)';
	    $supportedLanguages['pt']['BR']['charset'] = 'UTF-8';
	    $defaultCountry['pt'] = 'BR';
	
	    $supportedLanguages['zh']['TW']['description'] = 'Chinese (Traditional)';
	    $supportedLanguages['zh']['TW']['charset'] = 'UTF-8';
	    $defaultCountry['zh'] = 'TW';

	    $supportedLanguages['nl']['NL']['description'] = 'Dutch';
	    $supportedLanguages['nl']['NL']['charset'] = 'UTF-8';
	    $defaultCountry['nl'] = 'NL';

	    $supportedLanguages['no']['NO']['description'] = 'Norwegian';
	    $supportedLanguages['no']['NO']['charset'] = 'UTF-8';
	    $defaultCountry['no'] = 'NO';

	    $supportedLanguages['pt']['BR']['description'] = 'Portuguese (BR)';
	    $supportedLanguages['pt']['BR']['charset'] = 'UTF-8';
	    $defaultCountry['pt'] = 'BR';

	    $supportedLanguages['ja']['JP']['description'] = 'Japanese';
	    $supportedLanguages['ja']['JP']['charset'] = 'UTF-8';
	    $defaultCountry['ja'] = 'JP';

	    $supportedLanguages['ga']['IE']['description'] = 'Irish';
	    $supportedLanguages['ga']['IE']['charset'] = 'UTF-8';
	    $defaultCountry['ga'] = 'IE';
	
	    $supportedLanguages['fr']['FR']['description'] = 'French';
	    $supportedLanguages['fr']['FR']['charset'] = 'UTF-8';
	    $defaultCountry['fr'] = 'FR';
}

	return array($supportedLanguages, $defaultCountry);
    }

    /**
     * Return the list of languages that we support.
     * Return our language data
     *
     * @return array['language code']['country code'] =
     *              array('description', 'charset code')
     */
    function getSupportedLanguages() {
	/* Get our language data */
	list ($supportedLanguages, $defaultCountry) = GalleryTranslator::getLanguageData();
	return $supportedLanguages;
    }

    /**
     * Initialize the translator with the specified language code hint
     *
     * @param string the language code hint (eg. 'en_US' or 'zh_CN')
     * @return object GalleryStatus a status code
     */
    function init($languageCode=null) {
	global $gallery;
	global $HTTP_SERVER_VARS;

	if (empty($languageCode)) {
	    $languageCode = $this->getLanguageCodeFromRequest();
	}

	/* Split the language code into language/country */
	list ($language, $country) = split('_', $languageCode);

	/* Get our language data */
	list ($supportedLanguages, $defaultCountry) = GalleryTranslator::getLanguageData();

	/* If we're using gettext, try to bind to a language */
	if ($gallery->getConfig('function.exists.dgettext')) {
	    
	    /* Set the appropriate charset in our HTTP header */
	    $this->_activeCharset = $supportedLanguages[$language][$country]['charset'];
	    if (!headers_sent()) {
		header('Content-Type: text/html; charset=' . $this->_activeCharset);
	    }

	    /*
	     * Some systems only require LANG, others (like Mandrake) seem to require
	     * LANGUAGE also.
	     */
	    putenv("LANG=${language}_${country}");
	    putenv("LANGUAGE=${language}_${country}");

	    // XXX: we'd like to say:
	    //    setlocale(LC_ALL, "${language}_${country}", "${language}");
	    // but the setlocale() call doesn't accept fallbacks until PHP 4.3+
	    
	    setlocale(LC_ALL, "${language}_${country}");
	}

	return GalleryStatus::success();
    }

    /**
     * Examine the incoming request and try to figure out what languages the
     * browser will accept.  Take the first one that we can support.
     *
     * @return a language code in the <language>_<COUNTRY> format, eg: en_US
     */
    function getLanguageCodeFromRequest() {
	global $HTTP_SERVER_VARS;

	/* Get our language data */
	list ($supportedLanguages, $defaultCountry) = GalleryTranslator::getLanguageData();
	
	/* Take the first thing the browser accepts that we can use */
	if (isset($HTTP_SERVER_VARS['HTTP_ACCEPT_LANGUAGE'])) {
	    foreach (explode(',', $HTTP_SERVER_VARS['HTTP_ACCEPT_LANGUAGE'])
		     as $code) {

		if (preg_match('/[-_]/', $code)) {
		    list ($language, $country) = preg_split('/[-_]/', $code);
		    $country = strtoupper($country);
		    if (empty($country)) {
			/* Cases like just 'de' */
			$country = $language;
		    }
		} else {
		    /* We only received a language code -- try the default country. */
		    $language = $code;
		    if (isset($defaultCountry[$language])) {
			$country = $defaultCountry[$language];
		    } else {
			$country = null;
		    }
		}

		if (isset($supportedLanguages[$language][$country])) {
		    break;
		} else {
		    $language = null;
		    $country = null;
		}
	    }
	}

	/* Fall back to English (US) */
	if (empty($language)) {
	    $language = 'en';
	    $country = 'US';
	}

	return "${language}_${country}";
    }

    /**
     * Localize the given content
     *
     * Expected inputs are of the form:
     *
     * Example 1:
     *  $data['text'] = 'Some text to localize with %d arguments'
     *  $data['arg1'] = 5;
     *
     *  localized:  'Some text to localize with 5 arguments' 
     *
     * Example 2:
     *  $data['one'] =   'You have %d orange'
     *  $data['many'] =  'You have %d oranges'
     *  $data['count'] = 3 (or 1);
     *
     * localized:  'You have 3 oranges'  (or 'You have 1 orange')
     *
     * @param string the domain (eg, a module name)
     * @param string a directory
     * @param mixed a single string, or an array of parameters
     * @return array object GalleryStatus a status code
     *               string the localized value
     */
    function translate($domain, $data) {
	global $gallery;

	GalleryProfiler::start('modules.core.classes.GalleryTranslator::translate');
	
	/* Validate our parameters */
	if (!(isset($data['text']) ||
	      (isset($data['one']) && isset($data['many']) && isset($data['count'])))) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__),
			 null);
	}

	if ($gallery->getConfig('function.exists.dgettext')) {
	    if (isset($domain) && !isset($this->_boundDomains[$domain])) {
		list ($componentType, $componentName) = split('_', $domain);
		$basePath = sprintf('%s%s/%s/locale',
				    $gallery->getConfig('code.gallery.base'),
				    $componentType,
				    $componentName);
		if ($gallery->getDebug()) {
		    $gallery->debug("Binding text domain: $domain -> $basePath");
		}
		bindtextdomain($domain, $basePath);
		textdomain($domain);
		if ($gallery->getConfig('function.exists.bind_textdomain_codeset')) {
		    bind_textdomain_codeset($domain, $this->_activeCharset);
		} 
		$this->_boundDomains[$domain] = $basePath;
	    }

	    /*
	     * We have to have dngettext (which is only available > PHP 4.2.0,
	     * according to the PHP manual) in order to do pluralization
	     * translations.  If we don't have have dngettext() we try to
	     * gracefully degrade to using dgettext().
	     */
	    if (isset($data['one'])) {
		if ($gallery->getConfig('function.exists.dngettext')) {
		    /*
		     * XXX: sometimes this call takes forever.  I have no idea
		     * why.  Do you?
		     */
		    $localized = dngettext($domain, $data['one'], $data['many'], $data['count']);
		} else {
		    /*
		     * It would make more sense to fall back to $data['many']
		     * here, since the odds are better that it will be more
		     * applicable.  However, due to the way that we do the
		     * pluralization, the keys will be organized by the
		     * $data['one'] entry so there won't be a $data['many'] key
		     * for dgettext() to use.  :-(
		     */
		    $localized = dgettext($domain, $data['one']);
		}
	    } else {
		$localized = dgettext($domain, $data['text']);
	    }
	} else {
	    /*
	     * The server doesn't have gettext, so fake it using the source of
	     * the message (which is almost definitely in US English)
	     */
	    if (isset($data['text'])) {
		$localized = $data['text'];
	    } else if ($data['count'] == 1) {
		$localized = $data['one'];
	    } else {
		$localized = $data['many'];
	    }
	}

	$i = 1;
	$args = array();
	while (isset($data['arg' . $i])) {
	    $args[] = $data['arg' . $i];
	    $i++;
	    
	    /* Catch runaways */
	    if ($i > 100) {
		return array(GalleryStatus::error(ERROR_UNKNOWN, __FILE__, __LINE__), null);
	    }
	}

	/*
	 * If we have arguments, then feed the localized string and the
	 * arguments into sprintf.
	 */
	if (sizeof($args) > 0) {
	    array_unshift($args, $localized);
	    $localized = call_user_func_array('sprintf', $args);
	}

	/*
	 * This is a useful debug routine.  Uncomment it to have every
	 * string prefixed with the domain it was localized in.
	 */
	//$localized = "[$domain: $localized]";

	GalleryProfiler::stop('modules.core.classes.GalleryTranslator::translate');
	
	return array(GalleryStatus::success(), $localized);
    }

    /**
     * Convenience method for doing module specific translations (which is the
     * common case)
     *
     * @param string the module name
     * @param mixed a single string, or an array of parameters
     * @return array object GalleryStatus a status code
     *               string the localized value
     */
    function translateModule($moduleName, $data) {
	global $gallery;
	list ($ret, $localized) = $this->translate('modules_' . $moduleName,
						   $gallery->getConfig('code.gallery.modules') . $moduleName,
						   $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $localized);
    }
}

?>
