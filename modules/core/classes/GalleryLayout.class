<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

GalleryCoreApi::requireOnce(dirname(__FILE__) . '/GalleryPlugin.class');

/**
 * This interface provides functionality to user-interfaces have a
 * customizable layout. A layout should implement this class.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryLayout extends GalleryPlugin {

    /**
     * The version of the GalleryLayout API required by this layout
     *
     * @var array _requiredLayoutApi
     * @access private
     */
    var $_requiredLayoutApi;

    /**
     * Return the major and minor version of the GalleryLayout API.
     *
     * This follows the same rules as the core API.
     * @see GalleryCoreApi::getApiVersion()
     *
     * @return array major number, minor number
     */
    function getApiVersion() {
	return array(0, 8);
    }

    /**
     * Return whether the layout uses simple or advanced settings.
     * To support simple settings the layout needs to implement getSettings and validateSettings.
     * To support advanced settings the layout must implement loadSettingsTemplate and
     * handleSettingsRequest.
     *
     * @return boolean true for advanced settings, false for simple
     */
    function isAdvancedSettings() {
	return false;  /* Default to simple */
    }

    /**
     * Return the possible settings that a layout can specify on a global or per
     * item basis.  Used for layout with simple settings ( @see isAdvancedSettings ).
     *
     * Each setting contains:
     *   key:         a unique identifier
     *   name:        a localized, displayable text string
     *   type:        single-select, multiple-select, text-field
     *   choices:     [only valid for single-select, multiple-select type]
     *                array of:
     *                   key:     a unique identifier within this set of choices
     *                   display: a localized displayable text string
     *   value:       the current value for this setting
     *
     * @param int optional itemId
     * @return array object GalleryStatus a status code
     *               settings array
     */
    function getSettings($itemId=null) {
	return array(GalleryStatus::success(), array());
    }

    /**
     * Return true if all the values are legal, or false if not.  If there are errors,
     * return an array of localized error messages to display for each invalid setting.
     * Used for layout with simple settings ( @see isAdvancedSettings ).
     *
     * @param settings array('key' => array(value, ...), ...)
     * @return array errors in the form of array('key' => 'translated text', ...)
     */
    function validateSettings($settings) {
	return array();
    }

    /**
     * Load the template with data to define the layout settings.
     * Used for layout with advanced settings ( @see isAdvancedSettings ).
     *
     * @param array object GalleryTemplate the template instance
     * @param array array the form values
     * @param the item id or null for site wide settings
     * @return array object GalleryStatus a status code
     *               string path to the body template
     */
    function loadSettingsTemplate(&$template, &$form, $itemId=null) {
	return array(GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__), null);
    }

    /**
     * Let the layout handle the incoming request.
     * Used for layout with advanced settings ( @see isAdvancedSettings ).
     * @see GalleryController::handleRequest
     *
     * @param array the form values
     * @param the item id or null for site wide settings
     * @return array object GalleryStatus a status code
     *               array error messages
     *               string status message (itemId!=null) or status key (itemId==null)
     */
    function handleSettingsRequest($form, $itemId=null) {
	return array(GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__), null, null);
    }

    /**
     * Activate this layout.
     *
     * @return array object GalleryStatus a status code
     *               array redirect info for error page (empty for success)
     */
    function activate() {
	global $gallery;

	list ($ret, $redirect) = parent::activate();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!empty($redirect)) {
	    return array(GalleryStatus::success(), $redirect);
	}

	/* Set the default value for all settings that don't have values */
	list ($ret, $settings) = $this->getSettings();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $currentParameters) =
	    GalleryCoreApi::fetchAllPluginParameters('layout', $this->getId());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/*
	 * Settings will have the correct value for all parameters, so if it's not in the map
	 * yet we should store it now.
	 */
	foreach ($settings as $setting) {
	    if (!isset($currentParameters[$setting['key']])) {
		$ret = $this->setParameter($setting['key'], $setting['value']);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
	    }
	}

	return array(GalleryStatus::success(), array());
    }

    /**
     * Perform the module installation or upgrade, whatever is required.
     *
     * It will do the following:
     * 1. Get the current version of the layout (if its already installed)
     * 2. Let the layout perform any necessary upgrade tasks.
     * 3. Set the new layout version and api requirements into the database
     *
     * Layouts should not need to override this method.  Instead they should
     * override the upgrade method and put all their layout specific logic
     * there.
     *
     * @return object GalleryStatus a status code
     */
    function installOrUpgrade() {
	list ($ret, $installedVersion) = $this->getParameter('_version');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if ($installedVersion != $this->getVersion()) {
	    $ret = $this->upgrade($installedVersion);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    $data = array('_version' => $this->getVersion(),
			  '_requiredCoreApi' => join(',', $this->getRequiredCoreApi()),
			  '_requiredLayoutApi' => join(',', $this->getRequiredLayoutApi()));
	    foreach ($data as $key => $value) {
		$ret = $this->setParameter($key, $value);
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	}

	return GalleryStatus::success();
    }

    /**
     * Load the template with data from this view.
     *
     * @param array object GalleryTemplate the template instance
     * @param object GalleryItem the item to display
     * @return array object GalleryStatus a status code
     *               array ('body'/'html' => string template or 'redirect' => array)
     */
    function loadTemplate(&$template, $item) {
	return array(GalleryStatus::success(), null);
    }

    /**
     * Study items very closely
     *
     * Learn whatever we think we'll need.  By performing operations on the
     * entire set of items, we potentially save time when it comes to
     * processing each item individually.
     *
     * @param array GalleryItem ids
     * @return object GalleryStatus a status code
     * @access private
     */
    function _studyItems($itemIds) {
	/* Study all permissions */
	$ret = GalleryCoreApi::studyPermissions($itemIds);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Load commonly used data into layout template
     * Always loaded:
     *   item      item data
     *   user      active user data
     *   children  array of child item data
     *   show      flags for standard sidebar
     * Available keys to include in $dataToLoad parameter:
     *   owner = item owner data
     *      ^if childIds non-empty also fill ownerMap with array of ownerId => owner data
     *   viewCount = number of views for item
     *      ^if childIds non-empty also set viewCount on each child item
     *   childCount = number of children for item
     *      ^if childIds non-empty also set childCount on each child item that canContainChildren
     *   descendentCount = number of descendents for item
     *      ^if childIds non-empty also set descendentCount on each child that canContainChildren
     *   parents = array of ancestor data; also set parent key (direct parent data)
     *   peers = array of peer data (first, last and a window of peers around this item),
     *      also set peerIds(of all peers), peerCount(total count), peerItemIndex(index of this item)
     *   systemLinks = array of array('text'=>.., 'params'=>.., 'url'=>.., 'moduleId'=>..)
     *   systemContent = array of moduleId => array(contentId => template file path, ...)
     *   itemLinks = array of array('text'=>.., 'params'=>.., 'url'=>.., 'moduleId'=>..)
     *      ^if childIds non-empty also set itemLinks on each child item
     *   itemSummaries = set itemSummaries (array of moduleId => html) on each child item
     *   itemDetailFiles = array of moduleId => template file path
     *   thumbnails = if childIds non-empty then set thumbnail on each child item
     *
     * @param array object GalleryTemplate the template instance
     * @param object GalleryItem the item to display
     * @param array (string data key, ..) data to load into template
     * @param array (optional) ids of child items to display
     * @return object GalleryStatus a status code
     * @access public
     * @static
     */
    function loadLayoutTemplate(&$template, $item, $dataToLoad, $childIds=array()) {
	global $gallery;
	$urlGenerator =& $gallery->getUrlGenerator();

	/*
	 * --------------------------------------------------------------------------------------
	 * Initialize..
	 */
	$load = $layout = $childItems = $childData = array();
	foreach ($dataToLoad as $key) {
	    $load[$key] = true;
	}
	if (!empty($childIds)) {
	    list ($ret, $childItems) = GalleryCoreApi::loadEntitiesById($childIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}
	$itemId = $item->getId();
	$allItems = array_merge(array($item), $childItems);
	$allItemIds = array_merge(array($itemId), $childIds);
	$allAlbumIds = array();
	foreach ($allItems as $it) {
	    if ($it->getCanContainChildren()) {
		$allAlbumIds[] = $it->getId();
	    }
	}

	if (!empty($childIds)) {
	    $ret = $this->_studyItems($childIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * Load additional required entities..
	 */
	$ids = array();
	if (isset($load['owner'])) {
	    $ids[$item->getOwnerId()] = true;
	    $childOwnerIds = array();
	    foreach ($childItems as $child) {
		$ids[$child->getOwnerId()] = true;
		$childOwnerIds[$child->getOwnerId()] = true;
	    }
	    $childOwnerIds = array_keys($childOwnerIds);
	}
	if (isset($load['parents'])) {
	    list ($ret, $parentSequence) = GalleryCoreApi::fetchParentSequence($itemId);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    if (!empty($parentSequence)) {
		$ret = GalleryCoreApi::studyPermissions($parentSequence);
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	    foreach ($parentSequence as $id) {
		$ids[$id] = true;
	    }
	}
	if (isset($load['peers'])) {
	    $peerIds = $peers = array();
	    $loadPeers = false;
	    if ($item->getParentId() != null) {
		list ($ret, $loadPeers) =
		    GalleryCoreApi::hasItemPermission($item->getParentId(), 'core.view');
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	    if ($loadPeers) {
		list ($ret, $parent) = GalleryCoreApi::loadEntitiesById($item->getParentId());
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		list ($ret, $peerIds) = GalleryCoreApi::fetchChildItemIds($parent);
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		foreach (array_keys($peerIds) as $i) {
		    if ($peerIds[$i] == $itemId) {
			$peerItemIndex = $i;
			break;
		    }
		}
		$peerWindowSize = 6;
		$peerLast = count($peerIds) - 1;
		$peerNeighborStart = max($peerItemIndex - (int)($peerWindowSize/2), 0);
		$peerNeighborEnd = min($peerItemIndex + (int)($peerWindowSize/2), $peerLast);
		/* If the window is pinned to one end, expand it to the entire
		 * windowSize */
		if ($peerNeighborStart == 0) {
		    $peerNeighborEnd = min($peerLast, $peerWindowSize-1);
		} else if ($peerNeighborEnd == $peerLast) {
		    $peerNeighborStart = max($peerLast - $peerWindowSize, 0);
		}
		if ($peerNeighborStart > 0) {
		    $peers[0] = $peerIds[0];
		}
		for ($i = $peerNeighborStart; $i <= $peerNeighborEnd; $i++) {
		    $peers[$i] = $peerIds[$i];
		}
		if ($peerNeighborEnd < $peerLast) {
		    $peers[$peerLast] = $peerIds[$peerLast];
		}
		foreach ($peers as $id) {
		    $ids[$id] = true;
		}
	    }
	    if (empty($peers)) {
		unset($load['peers']);
	    }
	}
	if (!empty($ids)) {
	    list ($ret, $list) = GalleryCoreApi::loadEntitiesById(array_keys($ids));
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    foreach ($list as $it) {
		$entities[$it->getId()] = $it;
	    }
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * Always load 'item', 'user', 'children' and 'show'
	 */
	$layout['item'] = $item->getMemberData();
	$user = $gallery->getActiveUser();
	$layout['user'] = $user->getMemberData();
	$layout['children'] = array();
	foreach ($childItems as $child) {
	    $layout['children'][] = $child->getMemberData();
	}
	$layout['show'] = array('sidebar' => GalleryCapabilities::can('showSidebar'),
				'sidebarGreeting' => GalleryCapabilities::can('showSidebarGreeting'),
				'sidebarActions' => true,
				'sidebarPeers' => isset($load['peers']),
				'pathbar' => GalleryCapabilities::can('showPathbar'));

	/*
	 * --------------------------------------------------------------------------------------
	 * 'owner'
	 */
	if (isset($load['owner'])) {
	    $layout['owner'] = $entities[$item->getOwnerId()]->getMemberData();
	    foreach ($childOwnerIds as $id) {
		if (!isset($layout['ownerMap'][$id])) {
		    $layout['ownerMap'][$id] = $entities[$id]->getMemberData();
		}
	    }
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'viewCount'
	 */
	if (isset($load['viewCount'])) {
	    list ($ret, $viewCount) = GalleryCoreApi::fetchItemViewCounts($allItemIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $layout['viewCount'] = $viewCount[$itemId];
	    $childData[] = 'viewCount';
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'childCount'
	 */
	if (isset($load['childCount'])) {
	    list ($ret, $childCount) = GalleryCoreApi::fetchChildCounts($allAlbumIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    foreach ($allAlbumIds as $id) {
		if (!isset($childCount[$id])) {
		    $childCount[$id] = 0;
		}
	    }
	    $layout['childCount'] = isset($childCount[$itemId]) ? $childCount[$itemId] : 0;
	    $childData[] = 'childCount';
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'descendentCount'
	 */
	if (isset($load['descendentCount'])) {
	    list ($ret, $descendentCount) = GalleryCoreApi::fetchDescendentCounts($allAlbumIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    foreach ($allAlbumIds as $id) {
		if (!isset($descendentCount[$id])) {
		    $descendentCount[$id] = 0;
		}
	    }
	    $layout['descendentCount'] =
		isset($descendentCount[$itemId]) ? $descendentCount[$itemId] : 0;
	    $childData[] = 'descendentCount';
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'parents'
	 */
	if (isset($load['parents'])) {
	    $layout['parents'] = array();
	    foreach ($parentSequence as $id) {
		list ($ret, $canSee) = GalleryCoreApi::hasItemPermission($id, 'core.view');
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		if ($canSee) {
		    $layout['parents'][] = $entities[$id]->getMemberData();
		}
	    }
	    $layout['parent'] = empty($layout['parents']) ? null :
		$layout['parents'][count($layout['parents']) - 1];
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'peers'
	 */
	if (isset($load['peers'])) {
	    $layout['peers'] = array();
	    $layout['peerIds'] = $peerIds;
	    $layout['peerCount'] = count($peerIds);
	    $layout['peerItemIndex'] = isset($peerItemIndex) ? $peerItemIndex : 0;
	    foreach ($peers as $i => $id) {
		$peer = $entities[$id]->getMemberData();
		$peer['peerIndex'] = $i + 1;
		$layout['peers'][] = $peer;
	    }
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'systemLinks', 'systemContent', 'itemLinks', 'itemSummaries', 'itemDetailFiles'
	 * Load links and content from all active modules
	 */
	if (isset($load['systemLinks']) || isset($load['systemContent'])
		|| isset($load['itemLinks']) || isset($load['itemSummaries'])
		|| isset($load['itemDetailFiles'])) {
	    if (isset($load['systemLinks'])) {
		$layout['systemLinks'] = array();
	    }
	    if (isset($load['systemContent'])) {
		$layout['systemContent'] = array();
	    }
	    if (isset($load['itemLinks'])) {
		$itemLinks = array($itemId => array());
		foreach ($childIds as $id) {
		    $itemLinks[$id] = array();
		}
	    }
	    if (isset($load['itemSummaries']) && !empty($childIds)) {
		foreach ($childIds as $id) {
		    $itemSummaries[$id] = array();
		}
		$childData[] = 'itemSummaries';
	    }
	    if (isset($load['itemDetailFiles'])) {
		$layout['itemDetailFiles'] = array();
	    }

	    list ($ret, $moduleStatus) = GalleryCoreApi::fetchPluginStatus('module');
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    foreach ($moduleStatus as $moduleId => $status) {
		if (empty($status['active'])) {
		    continue;
		}
		$callbacks = array_flip(explode('|', $status['callbacks']));

		$required = false;
		foreach (array('systemLinks' => 'getSystemLinks',
			       'systemContent' => 'loadSystemContent',
			       'itemLinks' => 'getItemLinks',
			       'itemSummaries' => 'getItemSummaries',
			       'itemDetailFiles' => 'loadItemDetails') as $key => $callbackKey) {
		    if (isset($load[$key]) && isset($callbacks[$callbackKey])) {
			$required = true;
			break;
		    }
		}

		if (!$required) {
		    /* This module doesn't have anything we need.  Don't bother with it */
		    continue;
		}

		list ($ret, $module) = GalleryCoreApi::loadPlugin('module', $moduleId);
		if ($ret->isError()) {
		    if ($ret->getErrorCode() & ERROR_PLUGIN_VERSION_MISMATCH) {
			continue;
		    }
		    return $ret->wrap(__FILE__, __LINE__);
		}

		if (isset($load['systemLinks']) && isset($callbacks['getSystemLinks'])) {
		    list ($ret, $links) = $module->getSystemLinks();
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    /* Add url/moduleId keys.. */
		    foreach ($links as $link) {
			$link['url'] = $urlGenerator->generateUrl($link['params']);
			$link['moduleId'] = $moduleId;
			$layout['systemLinks'][] = $link;
		    }
		}

		if (isset($load['systemContent']) && isset($callbacks['loadSystemContent'])) {
		    list ($ret, $content) = $module->loadSystemContent($template);
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    if (!empty($content)) {
			$layout['systemContent'][$moduleId] = $content;
		    }
		}

		if (isset($itemLinks) && isset($callbacks['getItemLinks'])) {
		    list ($ret, $links) = $module->getItemLinks($allItems);
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    /* Add url/moduleId keys.. */
		    foreach ($links as $id => $list) {
			foreach ($list as $link) {
			    $link['url'] = $urlGenerator->generateUrl($link['params']);
			    $link['moduleId'] = $moduleId;
			    $itemLinks[$id][] = $link;
			}
		    }
		}

		if (isset($itemSummaries) && isset($callbacks['getItemSummaries'])) {
		    list ($ret, $content) = $module->getItemSummaries($childItems);
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    foreach ($content as $id => $html) {
			$itemSummaries[$id][$moduleId] = $html;
		    }
		}

		if (isset($load['itemDetailFiles']) && isset($callbacks['loadItemDetails'])) {
		    list ($ret, $content) = $module->loadItemDetails($template, $item);
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    if (!empty($content)) {
			$layout['itemDetailFiles'][$moduleId] = $content;
		    }
		}
	    }

	    if (isset($itemLinks)) {
		foreach (array_keys($itemLinks) as $id) {
		    usort($itemLinks[$id], array('GalleryLayout', '_sortItemLinks'));
		}
		$layout['itemLinks'] = $itemLinks[$itemId];
		$childData[] = 'itemLinks';
	    }
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'thumbnails'
	 */
	if (isset($load['thumbnails']) && !empty($childIds)) {
	    list ($ret, $thumbnail) = GalleryCoreApi::fetchThumbnailsByItemIds($childIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    foreach (array_keys($thumbnail) as $id) {
		if (!($thumbnail[$id]->getWidth() && $thumbnail[$id]->getHeight())) {
		    list ($ret, $thumbnail[$id]) =
			GalleryCoreApi::rebuildDerivativeCache($thumbnail[$id]->getId());
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		}
		$thumbnail[$id] = $thumbnail[$id]->getMemberData();
	    }
	    $childData[] = 'thumbnail';
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * Populate data in children list..
	 */
	if (!empty($childData)) {
	    foreach (array_keys($layout['children']) as $i) {
		$id = $layout['children'][$i]['id'];
		foreach ($childData as $key) {
		    if (isset(${$key}[$id])) {
			$layout['children'][$i][$key] = ${$key}[$id];
		    }
		}
	    }
	}

	/* -------------------------------------------------------------------------------------- */
	$template->setVariable('layout', $layout);

	return GalleryStatus::success();
    }

    function _sortItemLinks($a, $b) {
	return strcmp($a['text'], $b['text']);
    }

    /**
     * @see GalleryPlugin::getPluginType()
     */
    function getPluginType() {
	return 'layout';
    }

    function setRequiredLayoutApi($requirement) {
	$this->_requiredLayoutApi = $requirement;
    }

    function getRequiredLayoutApi() {
	return $this->_requiredLayoutApi;
    }
}
?>
