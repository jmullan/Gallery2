<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * This interface provides functionality to user-interfaces have a
 * customizable layout. A layout should implement this class.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryLayout {
    
    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The localization domain for this view
     *
     * @access private
     */
    var $_l10Domain;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Initialize this instance to use the layout specified.
     *
     * @param layoutName the name of a layout in the layouts directory.
     * @return object GalleryStatus a status code
     */
    function init($layoutName) {
	global $gallery;
	$this->_l10Domain = 'layouts_' . $layoutName;
    }

    /**
     * Get the localization domain for this view
     *
     * @return string
     */
    function getL10Domain() {
	return $this->_l10Domain;
    }
    
    /**
     * Load the template with data from this view.
     *
     * @param array object GalleryTemplate the template instance
     * @param array array the form values
     * @return array object GalleryStatus a status code
     *               string path to the head template
     *               string path to the body template
     */
    function loadTemplate(&$template, &$form) {
	return array(GalleryStatus::success(), null, null);
    }

    /**
     * Call loadSystemContent on every active module
     *
     * @param object GalleryTemplate a template instance
     * @return array object GalleryStatus a status code
     *               array('moduleName' => 'template file path',
     *                     ...)
     * @access private
     */
    function _loadModuleSystemContent(&$template) {
	global $gallery;

	GalleryProfiler::start('modules.core.classes.GalleryLayout::_loadModuleSystemContent');

	/* Load the module list */
	list ($ret, $moduleStatus) = $gallery->getModuleStatus();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$systemContent = array();
	foreach ($moduleStatus as $moduleName => $status) {
	    if (empty($status['active'])) {
		continue;
	    }
	    
	    list ($ret, $module) = $gallery->loadModule($moduleName);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    /* Load all module-related content for these items */
	    list ($ret, $systemContent[$moduleName]) = $module->loadSystemContent($template);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    if (empty($systemContent[$moduleName])) {
		unset($systemContent[$moduleName]);
	    }
	}

	GalleryProfiler::stop('modules.core.classes.GalleryLayout::_loadModuleSystemContent');

	return array(GalleryStatus::success(), $systemContent);
    }

    /**
     * Call getSystemLinks on every active module
     *
     * @param object GalleryTemplate a template instance
     * @return array object GalleryStatus a status code
     *               array(array('moduleName' => array('text' => ...,
     *                                                 'params' => ...,
     *                                                 'url' => ...)),
     * @access private
     */
    function _getModuleSystemLinks() {
	global $gallery;

        GalleryProfiler::start('modules.core.classes.GalleryLayout::_getModuleSystemLinks');
	
        /* Load the module list */
        list ($ret, $moduleStatus) = $gallery->getModuleStatus();
        if ($ret->isError()) {
            return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
        $urlGenerator = $gallery->getUrlGenerator();
	
        $links = array();
        foreach ($moduleStatus as $moduleName => $status) {
            if (empty($status['active'])) {
                continue;
	    }
	    
            list ($ret, $module) = $gallery->loadModule($moduleName);
            if ($ret->isError()) {
                return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    
            /* Get all module-related links for these items */
            list ($ret, $links[$moduleName]) = $module->getSystemLinks();
            if ($ret->isError()) {
                return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    
            if (empty($links[$moduleName])) {
                unset($links[$moduleName]);
	    }
	}
	
        GalleryProfiler::stop('modules.core.classes.GalleryLayout::_getModuleSystemLinks');
	
        return array(GalleryStatus::success(), $links);
    }

    /**
     * Call getItemLinks on every active module
     *
     * @param mixed object GalleryItem a target item, or array of object GalleryItem
     * @return array object GalleryStatus a status code
     *               array('itemId' => array('moduleName' =>
     *                                            array('text' => ...,
     *                                                  'params' => ...,
     *                                                  'url' => ...))),
     * @access private
     */
    function _getModuleItemLinks($items) {
	global $gallery;

	GalleryProfiler::start('modules.core.classes.GalleryLayout::_getModuleItemLinks');

	if (!is_array($items)) {
	    $items = array($items);
	}

	/* Load the module list */
	list ($ret, $moduleStatus) = $gallery->getModuleStatus();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$urlGenerator = $gallery->getUrlGenerator();

	$itemLinks = array();
	foreach ($moduleStatus as $moduleName => $status) {
	    if (empty($status['active'])) {
		continue;
	    }
	    
	    list ($ret, $module) = $gallery->loadModule($moduleName);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    /* Get all module-related links for these items */
	    list ($ret, $moduleLinks) = $module->getItemLinks($items);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    /* Refactor into: array[itemId][moduleName][links] */
	    foreach ($moduleLinks as $itemId => $links) {
		foreach ($links as $link) {
		    $link['url'] = $urlGenerator->generateUrl($link['params']);
		    $itemLinks[$itemId][$moduleName][] = $link;
		}
	    }
	}

	GalleryProfiler::stop('modules.core.classes.GalleryLayout::_getModuleItemLinks');

	return array(GalleryStatus::success(), $itemLinks);
    }

    /**
     * Call getItemSummaries on every active module
     *
     * @param mixed object GalleryItem a target item, or array of object GalleryItem
     * @return array object GalleryStatus a status code
     *               array ('itemId' => array('moduleName' => html, ...))
     * @access private
     */
    function _getModuleItemSummaries($items) {
	global $gallery;

	GalleryProfiler::start('modules.core.classes.GalleryLayout::_getModuleItemSummaries');

	if (!is_array($items)) {
	    $items = array($items);
	}
	
	/* Load the module list */
	list ($ret, $moduleStatus) = $gallery->getModuleStatus();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$itemSummaries = array();
	foreach ($moduleStatus as $moduleName => $status) {
	    if (empty($status['active'])) {
		continue;
	    }

	    list ($ret, $module) = $gallery->loadModule($moduleName);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    list ($ret, $moduleSummaries) = $module->getItemSummaries($items);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    /* Refactor into: array[itemId][moduleName][links] */
	    foreach ($moduleSummaries as $itemId => $html) {
		$itemSummaries[$itemId][$moduleName] = $html;
	    }
	}

	GalleryProfiler::stop('modules.core.classes.GalleryLayout::_getModuleItemSummaries');

	return array(GalleryStatus::success(), $itemSummaries);
    }

    /**
     * Call loadItemDetails on every active module
     *
     * @param object GalleryTemplate a template
     * @param object GalleryItem a target item
     * @return array object GalleryStatus a status code
     *               array ('itemId' => array('moduleName' => 'foo.tpl', ...))
     * @access private
     */
    function _loadModuleItemDetails(&$template, $item) {
	global $gallery;

	GalleryProfiler::start('modules.core.classes.GalleryLayout::_loadModuleItemDetails');

	/* Load the module list */
	list ($ret, $moduleStatus) = $gallery->getModuleStatus();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$itemDetails = array();
	foreach ($moduleStatus as $moduleName => $status) {
	    if (empty($status['active'])) {
		continue;
	    }

	    list ($ret, $module) = $gallery->loadModule($moduleName);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    list ($ret, $itemDetails[$moduleName]) = $module->loadItemDetails($template, $item);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    if (empty($itemDetails[$moduleName])) {
		unset($itemDetails[$moduleName]);
	    }
	}

	GalleryProfiler::stop('modules.core.classes.GalleryLayout::_loadModuleItemDetails');

	return array(GalleryStatus::success(), $itemDetails);
    }

    /**
     * Study items very closely
     *
     * Learn whatever we think we'll need.  By performing operations on the
     * entire set of items, we potentially save time when it comes to
     * processing each item individually. 
     *
     * @param array GalleryItems
     * @return object GalleryStatus a status code
     * @access private
     */
    function _studyItems($items) {
	global $gallery;

	/* Study all permissions */
	$ret = GalleryItemHelper::studyPermissions($items, $gallery->getActiveUserId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
    }

    /**
     * Get an array of available layout-names
     *
     * @static
     * @return array string name of the themes
     */
    function getLayoutList() {
	global $gallery;
	 
	$platform = $gallery->getPlatform();
	$layoutList = array();
	$layoutDir = $gallery->getConfig('code.gallery.layouts');
	if ($dir = $platform->opendir($layoutDir)) {
	    while (($file = readdir($dir)) !== false) {
		if ($file{0} == '.' || $file == 'CVS') {
		    continue;
		}
		$layoutInc = "$layoutDir$file/layout.inc";
		if ($platform->file_exists($layoutInc)) {
		    $layoutList[$file] = $file;
		}
	    }
	    closedir($dir);
	}
	return $layoutList;
    }
}

?>