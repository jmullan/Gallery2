<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

GalleryCoreApi::requireOnce(dirname(__FILE__) . '/GalleryPlugin.class');

/**
 * This interface provides functionality to user-interfaces have a
 * customizable layout. A layout should implement this class.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryLayout extends GalleryPlugin {

    /**
     * The version of the GalleryLayout API required by this layout
     *
     * @var array _requiredLayoutApi
     * @access private
     */
    var $_requiredLayoutApi;

    /**
     * Which of the standard layout settings this layout supports
     *
     * @var array _standardSettings
     * @access private
     */
    var $_standardSettings = array();

    /**
     * Return the major and minor version of the GalleryLayout API.
     *
     * This follows the same rules as the core API.
     * @see GalleryCoreApi::getApiVersion()
     *
     * @return array major number, minor number
     */
    function getApiVersion() {
	return array(1, 1);
    }

    /**
     * Return whether the layout uses simple or advanced settings.
     * To support simple settings the layout needs to implement getSettings and validateSettings.
     * To support advanced settings the layout must implement loadSettingsTemplate and
     * handleSettingsRequest.
     *
     * @return boolean true for advanced settings, false for simple
     */
    function isAdvancedSettings() {
	return false;  /* Default to simple */
    }

    /**
     * Return the possible settings that a layout can specify on a global or per
     * item basis.  Used for layout with simple settings ( @see isAdvancedSettings ).
     *
     * Each setting contains:
     *   key:         a unique identifier
     *   name:        a localized, displayable text string
     *   type:        single-select, multiple-select, text-field
     *   choices:     [only valid for single-select, multiple-select type]
     *                array of:
     *                   key:     a unique identifier within this set of choices
     *                   display: a localized displayable text string
     *   value:       the current value for this setting
     *
     * @param int optional itemId
     * @return array object GalleryStatus a status code
     *               settings array
     */
    function getSettings($itemId=null) {
	list ($ret, $params) = $this->fetchParameters($itemId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $core) = GalleryCoreApi::loadPlugin('module', 'core');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/**
	 * For simplicity in upgrading, we don't require layouts to delete their old settings.  So
	 * any item may be carting around extra settings that are no longer valid.  We could fix
	 * this in the future, but for now, just leave those out of the settings list.
	 */
	$standard = $this->getStandardSettings();
	$params = array_merge($standard, $params);

	$settings = array();
	if (isset($params['rows']) && isset($standard['rows'])) {
	    $settings[] = array('key' => 'rows',
				'name' => $core->translate('Rows per album page'),
				'type' => 'text-field',
				'typeParams' => array('size' => 2),
				'value' => $params['rows']);
	}

	if (isset($params['columns']) && isset($standard['columns'])) {
	    $settings[] = array('key' => 'columns',
				'name' => $core->translate('Columns per album page'),
				'type' => 'text-field',
				'typeParams' => array('size' => 2),
				'value' => $params['columns']);
	}

	if (isset($params['showImageOwner']) && isset($standard['showImageOwner'])) {
	    $settings[] = array('key' => 'showImageOwner',
				'name' => $core->translate('Show image owners'),
				'type' => 'checkbox',
				'value' => $params['showImageOwner']);
	}

	if (isset($params['showAlbumOwner']) && isset($standard['showAlbumOwner'])) {
	    $settings[] = array('key' => 'showAlbumOwner',
				'name' => $core->translate('Show album owners'),
				'type' => 'checkbox',
				'value' => $params['showAlbumOwner']);
	}

	if (isset($params['showMicroThumbs']) && isset($standard['showMicroThumbs'])) {
	    $settings[] = array('key' => 'showMicroThumbs',
				'name' => $core->translate('Show micro navigation thumbnails'),
				'type' => 'checkbox',
				'value' => $params['showMicroThumbs']);
	}

	if (isset($params['perPage']) && isset($standard['perPage'])) {
	    $settings[] = array('key' => 'perPage',
				'name' => $core->translate('Number of items to show per page'),
				'type' => 'text-field',
				'typeParams' => array('size' => 2),
				'value' => $params['perPage']);
	}

	/* ImageFrame settings, if available */
	list ($ret, $imageframe) = GalleryCoreApi::newFactoryInstance('ImageFrameInterface_1_1');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (isset($imageframe) &&
	    (isset($params['albumFrame']) ||
	     isset($params['itemFrame']) ||
	     isset($params['photoFrame']))) {
	    list ($ret, $list) = $imageframe->getImageFrameList();
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    list ($ret, $sampleUrl) = $imageframe->getSampleUrl($itemId);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    $sample = ' (<a href="' . $sampleUrl . '">'
		    . $core->translate('View Samples') . '</a>)';

	    if (isset($params['albumFrame']) && isset($standard['albumFrame'])) {
		$settings[] = array('key' => 'albumFrame',
				    'name' => $core->translate('Album Frame') . $sample,
				    'type' => 'single-select',
				    'choices' => $list,
				    'value' => $params['albumFrame']);
	    }

	    if (isset($params['itemFrame']) && isset($standard['itemFrame'])) {
		$settings[] = array('key' => 'itemFrame',
				    'name' => $core->translate('Item Frame') . $sample,
				    'type' => 'single-select',
				    'choices' => $list,
				    'value' => $params['itemFrame']);
	    }

	    if (isset($params['photoFrame']) && isset($standard['photoFrame'])) {
		$settings[] = array('key' => 'photoFrame',
				    'name' => $core->translate('Photo Frame') . $sample,
				    'type' => 'single-select',
				    'choices' => $list,
				    'value' => $params['photoFrame']);
	    }
	}

	return array(GalleryStatus::success(), $settings);
    }

    /**
     * Return true if all the values are legal, or false if not.  If there are errors,
     * return an array of localized error messages to display for each invalid setting.
     * Used for layout with simple settings ( @see isAdvancedSettings ).
     *
     * @param settings array('key' => array(value, ...), ...)
     * @return array errors in the form of array('key' => 'translated text', ...)
     */
    function validateSettings($settings) {
	$error = array();
	$standard = $this->getStandardSettings();

	if (isset($standard['rows'])) {
	    if (empty($settings['rows']) || !is_numeric($settings['rows'])) {
		$error['rows'] = $this->translate('You must enter a number greater than 0');
	    }
	}

	if (isset($standard['columns'])) {
	    if (empty($settings['columns']) || !is_numeric($settings['columns'])) {
		$error['columns'] = $this->translate('You must enter a number greater than 0');
	    }
	}

	return $error;
    }

    /**
     * Load the template with data to define the layout settings.
     * Used for layout with advanced settings ( @see isAdvancedSettings ).
     *
     * @param array object GalleryTemplate the template instance
     * @param array array the form values
     * @param the item id or null for site wide settings
     * @return array object GalleryStatus a status code
     *               string path to the body template
     */
    function loadSettingsTemplate(&$template, &$form, $itemId=null) {
	return array(GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__), null);
    }

    /**
     * Let the layout handle the incoming request.
     * Used for layout with advanced settings ( @see isAdvancedSettings ).
     * @see GalleryController::handleRequest
     *
     * @param array the form values
     * @param the item id or null for site wide settings
     * @return array object GalleryStatus a status code
     *               array error messages
     *               string status message (itemId!=null) or status key (itemId==null)
     */
    function handleSettingsRequest($form, $itemId=null) {
	return array(GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__), null, null);
    }

    /**
     * Activate this layout.
     *
     * @return array object GalleryStatus a status code
     *               array redirect info for error page (empty for success)
     */
    function activate() {
	list ($ret, $redirect) = parent::activate();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!empty($redirect)) {
	    return array(GalleryStatus::success(), $redirect);
	}

	/* Set the default value for all settings that don't have values */
	list ($ret, $settings) = $this->getSettings();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $currentParameters) =
	    GalleryCoreApi::fetchAllPluginParameters('layout', $this->getId());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/*
	 * Settings will have the correct value for all parameters, so if it's not in the map
	 * yet we should store it now.
	 */
	foreach ($settings as $setting) {
	    if (!isset($currentParameters[$setting['key']])) {
		$ret = $this->setParameter($setting['key'], $setting['value']);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
	    }
	}

	return array(GalleryStatus::success(), array());
    }

    /**
     * Perform the module installation or upgrade, whatever is required.
     *
     * It will do the following:
     * 1. Get the current version of the layout (if its already installed)
     * 2. Let the layout perform any necessary upgrade tasks.
     * 3. Set the new layout version and api requirements into the database
     *
     * Layouts should not need to override this method.  Instead they should
     * override the upgrade method and put all their layout specific logic
     * there.
     *
     * @return object GalleryStatus a status code
     */
    function installOrUpgrade() {
	list ($ret, $installedVersion) = $this->getParameter('_version');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if ($installedVersion != $this->getVersion()) {
	    $ret = $this->upgrade($installedVersion);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    $data = array('_version' => $this->getVersion(),
			  '_requiredCoreApi' => join(',', $this->getRequiredCoreApi()),
			  '_requiredLayoutApi' => join(',', $this->getRequiredLayoutApi()));
	    foreach ($data as $key => $value) {
		$ret = $this->setParameter($key, $value);
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	}

	return GalleryStatus::success();
    }

    /**
     * Remove this layout from all albums.
     *
     * @return object GalleryStatus a status code
     */
    function uninstall() {
	global $gallery;

	list ($ret, $searchResults) = $gallery->search(
	    'SELECT [GalleryAlbumItem::id] FROM [GalleryAlbumItem] WHERE ' .
	    '[GalleryAlbumItem::layout] = ?', array($this->getId()));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	for ($ids = array(); $result = $searchResults->nextResult();) {
	    $ids[] = $result[0];
	}
	if (!empty($ids)) {
	    /* Reset albums to default layout */
	    list ($ret, $defaultLayout) =
		GalleryCoreApi::getPluginParameter('module', 'core', 'default.layout');
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($ids);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    list ($ret, $albums) = GalleryCoreApi::loadEntitiesById($ids);
	    if ($ret->isError()) {
		GalleryCoreApi::releaseLocks($lockId);
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    foreach ($albums as $album) {
		$album->setLayout($defaultLayout);
		$album->save();
		if ($ret->isError()) {
		    GalleryCoreApi::releaseLocks($lockId);
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	    $ret = GalleryCoreApi::releaseLocks($lockId);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	/* Remove this plugin */
	$ret = parent::uninstall();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * @see GalleryPlugin::deactivate
     */
    function deactivate() {
	list ($ret, $defaultLayout) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'default.layout');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	if ($defaultLayout == $this->getId()) {
	    /*
	     * Can't deactivate default layout.  UI doesn't offer this option, so we should
	     * only reach this code if default layout needs to be upgraded.  loadPlugin
	     * will see a redirect url is returned and jump to upgrader (the actual redirect
	     * returned below isn't used).
	     */
	    return array(GalleryStatus::success(), array('href' => 'upgrade/'));
	}

	list ($ret, $redirect) = parent::deactivate();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $redirect);
    }

    /**
     * Load the template with data from this view.
     *
     * @param array object GalleryTemplate the template instance
     * @param object GalleryItem the item to display
     * @return array object GalleryStatus a status code
     *               array ('body'/'html' => string template or 'redirect' => array)
     */
    function loadTemplate(&$template, $item, $params) {
	global $gallery;

	$layout =& $template->getVariableByReference('layout');
	$urlGenerator =& $gallery->getUrlGenerator();
	$layout['layoutUrl'] =
	    $urlGenerator->generateUrl(array('href' => 'layouts/' . $this->getId()), false);

	$session =& $gallery->getSession();

	if ($session->get('layout.guestPreviewMode')) {
	    $layout['guestPreviewMode'] = 1;
	    list ($ret, $layout['actingUserId']) =
		  GalleryCoreApi::getPluginParameter('module', 'core', 'id.anonymousUser');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	} else {
	    $layout['guestPreviewMode'] = 0;
	    $layout['actingUserId'] = $gallery->getActiveUserId();
	}

	/* Albums have their own settings.  Photos use their parent album's settings */
	if ($item->getCanContainChildren()) {
	    /* If we care about pagination, then figure out the current page and total pages */
	    $perPage = $this->getPageSize($params);
	    if (!empty($perPage)) {
		$page = GalleryUtilities::getRequestVariables('page');
		if (empty($page)) {
		    $page = 1;
		}

		/* Use the pagination to calculate the child item ids to load */
		$start = $perPage * ($page - 1);
		list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIds(
		    $item, $start, $perPage, $layout['actingUserId']);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}

		/*
		 * Load up our child count so that we can figure out the max pages.  We do this
		 * after we get the child ids because the 'childCount' common template data also
		 * gets the child counts for the child albums.
		 */
		$ret = $this->loadCommonTemplateData(
		    $template, $item, $params, array('childCount'), $childIds);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}

		/* Store the total pages in the layout */
		$layout['totalPages'] = ceil($layout['childCount'] / $perPage);
		$layout['currentPage'] = $page;

		/* If our page is over the max, redirect the user to the max page */
		if ($page > $layout['totalPages'] && $layout['childCount'] > 0) {
		    $redirect = array('view' => 'core.ShowItem', 'itemId' => $item->getId(),
				      'page' => $layout['totalPages']);
		    return array(GalleryStatus::success(), array('redirect' => $redirect));
		}
	    } else {
		/*
		 * No pagination; load all children (this isn't going to scale, but the layout is
		 * the boss... for now).
		 */
		list ($ret, $childIds) =
		    GalleryCoreApi::fetchChildItemIds($item, null, null, $layout['actingUserId']);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
	    }

	    list ($ret, $result) = $this->loadAlbumTemplate($template, $item, $params, $childIds);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	} else {
	    list ($ret, $result) = $this->loadItemTemplate($template, $item, $params);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}
	$layout =& $template->getVariableByReference('layout');

	/* Load image frames if the layout supports them (and they're available) */
	if (!empty($params['albumFrame']) ||
		!empty($params['itemFrame']) ||
		!empty($params['photoFrame'])) {
	    list ($ret, $imageframe) =
		GalleryCoreApi::newFactoryInstance('ImageFrameInterface_1_1');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    if (isset($imageframe)) {
		$frameIds = array();
		if ($item->getCanContainChildren()) {
		    foreach (array('albumFrame', 'itemFrame') as $key) {
			if (!empty($params[$key])) {
			    $frameIds[] = $layout[$key] = $params[$key];
			}
		    }
		} else {
		    if (!empty($params['photoFrame'])) {
			$frameIds[] = $layout['photoFrame'] = $params['photoFrame'];
		    }
		}
		if (!empty($frameIds)) {
		    $ret = $imageframe->init($template, $frameIds);
		    if ($ret->isError()) {
			return array($ret->wrap(__FILE__, __LINE__), null);
		    }
		}
	    }
	}

	$layout['params'] = $params;

	return array(GalleryStatus::success(),
		     is_array($result) ? $result : array('body' => $result));
    }

    /**
     * Load commonly used data into layout template
     * Always loaded:
     *   item      item data
     *   children  array of child item data
     *   show      flags for standard sidebar
     * Available keys to include in $dataToLoad parameter:
     *   owner = item owner data
     *      ^if childIds non-empty also fill ownerMap with array of ownerId => owner data
     *   viewCount = number of views for item
     *      ^if childIds non-empty also set viewCount on each child item
     *   childCount = number of children for item
     *      ^if childIds non-empty also set childCount on each child item that canContainChildren
     *   descendentCount = number of descendents for item
     *      ^if childIds non-empty also set descendentCount on each child that canContainChildren
     *   parents = array of ancestor data; also set parent key (direct parent data)
     *   peers = array of peer data (first, last and a window of peers around this item),
     *      also set peerIds(of all peers), peerCount(total count),
     *      peerItemIndex(index of this item in peers array)
     *   systemLinks = array of array('text'=>.., 'params'=>.., 'moduleId'=>..)
     *   systemContent = array of moduleId => array(contentId => template file path, ...)
     *   itemLinks = array of id => array('text'=>.., 'params'=>.., 'moduleId'=>..)
     *      ^if childIds non-empty also set itemLinks on each child item
     *   childItemLinksDetailed = boolean.  true if you want detailed item links for children.
     *                            you always get detailed item links for the current item
     *   itemSummaries = set itemSummaries (array of moduleId => html) on each child item
     *   itemDetailFiles = array of moduleId => template file path
     *   thumbnails = if childIds non-empty then set thumbnail on each child item
     *   peerThumbnails = set the thumbnails for all the peers
     *   pageNavigator = calculate urls for first/back/next/last links for album page navigation
     *   itemNavigator = calculate urls for first/back/next/last links for photo navigation
     *                   (requires you to load 'peers' also)
     *   jumpRange = calculate page urls for inter-album navigation (eg, "page: 1, 2 .. 7, 8")
     *   imageViews = loads entity data for resizes and source images, suitable for display
     *                when viewing a single image:
     *                'imageViews' => derivatives,
     *                'sourceImage' => data item,
     *                'imageViewsIndex' => index to the resize currently displayed
     *                'viewInline' => array of booleans specifying which can be displayed inline
     *
     * @param object GalleryItem the item to display
     * @param array (string data key, ..) data to load into template
     * @param array (optional) ids of child items to display
     * @return object GalleryStatus a status code
     * @access public
     * @static
     */
    function loadCommonTemplateData(&$template, $item, $params, $dataToLoad,
				    $childIds=array()) {
	global $gallery;

	/*
	 * --------------------------------------------------------------------------------------
	 * Initialize..
	 */
	$layout =& $template->getVariableByReference('layout');
	$load = $childItems = $childData = array();

	foreach ($dataToLoad as $key) {
	    $load[$key] = true;
	}
	if (!empty($childIds)) {
	    list ($ret, $childItems) = GalleryCoreApi::loadEntitiesById($childIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}
	$itemId = $item->getId();
	$allItems = array_merge(array($item), $childItems);
	$allItemIds = array_merge(array($itemId), $childIds);
	$allAlbumIds = array();
	foreach ($allItems as $it) {
	    if ($it->getCanContainChildren()) {
		$allAlbumIds[] = $it->getId();
	    }
	}
	$perPage = $this->getPageSize($params);

	if (!empty($childIds)) {
	    /* Study all permissions */
	    $ret = GalleryCoreApi::studyPermissions($childIds, $layout['actingUserId']);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * Load additional required entities..
	 */
	$ids = array();
	if (isset($load['owner'])) {
	    $ids[$item->getOwnerId()] = true;
	    $childOwnerIds = array();
	    foreach ($childItems as $child) {
		$ids[$child->getOwnerId()] = true;
		$childOwnerIds[$child->getOwnerId()] = true;
	    }
	    $childOwnerIds = array_keys($childOwnerIds);
	}
	if (isset($load['parents'])) {
	    list ($ret, $parentSequence) = GalleryCoreApi::fetchParentSequence($itemId);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    if (!empty($parentSequence)) {
		$ret = GalleryCoreApi::studyPermissions($parentSequence, $layout['actingUserId']);
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	    foreach ($parentSequence as $id) {
		$ids[$id] = true;
	    }
	}
	if (isset($load['peers'])) {
	    $peerIds = $peers = array();
	    $loadPeers = false;
	    if ($item->getParentId() != null) {
		list ($ret, $loadPeers) =
		    GalleryCoreApi::hasItemPermission($item->getParentId(), 'core.view');
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	    if ($loadPeers) {
		list ($ret, $parent) = GalleryCoreApi::loadEntitiesById($item->getParentId());
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		list ($ret, $peerIds) =
		    GalleryCoreApi::fetchChildItemIds($parent, null, null, $layout['actingUserId']);
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		foreach (array_keys($peerIds) as $i) {
		    if ($peerIds[$i] == $itemId) {
			$peerItemIndex = $i;
			break;
		    }
		}
		$peerWindowSize = 6;
		$peerLast = count($peerIds) - 1;
		$peerNeighborStart = max($peerItemIndex - (int)($peerWindowSize/2), 0);
		$peerNeighborEnd = min($peerItemIndex + (int)($peerWindowSize/2), $peerLast);
		/* If the window is pinned to one end, expand it to the entire windowSize */
		if ($peerNeighborStart == 0) {
		    $peerNeighborEnd = min($peerLast, $peerWindowSize-1);
		} else if ($peerNeighborEnd == $peerLast) {
		    $peerNeighborStart = max($peerLast - $peerWindowSize, 0);
		}
		if ($peerNeighborStart > 0) {
		    $peers[0] = $peerIds[0];
		}
		for ($i = $peerNeighborStart; $i <= $peerNeighborEnd; $i++) {
		    $peers[$i] = $peerIds[$i];
		}
		if ($peerNeighborEnd < $peerLast) {
		    $peers[$peerLast] = $peerIds[$peerLast];
		}
		foreach ($peers as $id) {
		    $ids[$id] = true;
		}
	    }
	    if (empty($peers)) {
		unset($load['peers']);
	    }
	}
	if (!empty($ids)) {
	    list ($ret, $list) = GalleryCoreApi::loadEntitiesById(array_keys($ids));
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    foreach ($list as $it) {
		$entities[$it->getId()] = $it;
	    }
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * Always load 'item', 'children' and 'show'
	 */
	$layout['item'] = $item->getMemberData();
	if (!isset($layout['children'])) {
	    $layout['children'] = array();
	    foreach ($childItems as $child) {
		$layout['children'][] = $child->getMemberData();
	    }
	}
	$layout['show'] = array('sidebar' => GalleryCapabilities::can('showSidebar'),
				'sidebarGreeting' =>
				    GalleryCapabilities::can('showSidebarGreeting'),
				'sidebarActions' => true,
				'sidebarPeers' => isset($load['peers']),
				'pathbar' => GalleryCapabilities::can('showPathbar'));

	/*
	 * --------------------------------------------------------------------------------------
	 * 'owner'
	 */
	if (isset($load['owner'])) {
	    $layout['owner'] = $entities[$item->getOwnerId()]->getMemberData();
	    foreach ($childOwnerIds as $id) {
		if (!isset($layout['ownerMap'][$id])) {
		    $layout['ownerMap'][$id] = $entities[$id]->getMemberData();
		}
	    }
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'viewCount'
	 */
	if (isset($load['viewCount'])) {
	    list ($ret, $viewCount) = GalleryCoreApi::fetchItemViewCounts($allItemIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $layout['viewCount'] = $viewCount[$itemId];
	    $childData[] = 'viewCount';
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'childCount'
	 */
	if (isset($load['childCount']) && !isset($layout['childCount'])) {
	    list ($ret, $childCount) =
		GalleryCoreApi::fetchChildCounts($allAlbumIds, $layout['actingUserId']);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    foreach ($allAlbumIds as $id) {
		if (!isset($childCount[$id])) {
		    $childCount[$id] = 0;
		}
	    }
	    $layout['childCount'] = isset($childCount[$itemId]) ? $childCount[$itemId] : 0;
	    $childData[] = 'childCount';
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'descendentCount'
	 */
	if (isset($load['descendentCount'])) {
	    list ($ret, $descendentCount) =
		GalleryCoreApi::fetchDescendentCounts($allAlbumIds, $layout['actingUserId']);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    foreach ($allAlbumIds as $id) {
		if (!isset($descendentCount[$id])) {
		    $descendentCount[$id] = 0;
		}
	    }
	    $layout['descendentCount'] =
		isset($descendentCount[$itemId]) ? $descendentCount[$itemId] : 0;
	    $childData[] = 'descendentCount';
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'parents'
	 */
	if (isset($load['parents'])) {
	    $layout['parents'] = array();
	    foreach ($parentSequence as $id) {
		list ($ret, $canSee) =
		    GalleryCoreApi::hasItemPermission($id, 'core.view', $layout['actingUserId']);
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		if ($canSee) {
		    $layout['parents'][] = $entities[$id]->getMemberData();
		}
	    }
	    $layout['parent'] = empty($layout['parents']) ? null :
		$layout['parents'][count($layout['parents']) - 1];
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'peers', 'peerThumbnails'
	 */
	if (isset($load['peers'])) {
	    $layout['peers'] = array();
	    $layout['peerIds'] = $peerIds;
	    $layout['peerCount'] = count($peerIds);

	    if (isset($load['peerThumbnails'])) {
		list ($ret, $thumbTable) = GalleryCoreApi::fetchThumbnailsByItemIds($peers);
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }

	    $j = 0;
	    foreach ($peers as $i => $id) {
		if ($id == $itemId) {
		    $layout['peerItemIndex'] = $j;
		}

		$peer = $entities[$id]->getMemberData();
		$peer['peerIndex'] = $i + 1;

		if (isset($thumbTable[$id])) {
		    $peer['thumbnail'] = $thumbTable[$id]->getMemberData();
		}

		$layout['peers'][] = $peer;
		$j++;
	    }
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'systemLinks', 'systemContent', 'itemLinks', 'itemSummaries', 'itemDetailFiles'
	 * Load links and content from all active modules
	 */
	if (isset($load['systemLinks']) || isset($load['systemContent'])
		|| isset($load['itemLinks']) || isset($load['itemSummaries'])
		|| isset($load['itemDetailFiles'])) {
	    $urlGenerator =& $gallery->getUrlGenerator();

	    list ($ret, $permissions) =
		GalleryCoreApi::fetchPermissionsForItems($allItemIds, $layout['actingUserId']);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    if (isset($load['systemLinks'])) {
		$layout['systemLinks'] = array();
	    }
	    if (isset($load['systemContent'])) {
		$layout['systemContent'] = array();
	    }
	    if (isset($load['itemLinks'])) {
		$itemLinks = array($itemId => array());
		foreach ($childIds as $id) {
		    $itemLinks[$id] = array();
		}
	    }
	    if (isset($load['itemSummaries']) && !empty($childIds)) {
		foreach ($childIds as $id) {
		    $itemSummaries[$id] = array();
		}
		$childData[] = 'itemSummaries';
	    }
	    if (isset($load['itemDetailFiles'])) {
		$layout['itemDetailFiles'] = array();
	    }

	    list ($ret, $moduleStatus) = GalleryCoreApi::fetchPluginStatus('module');
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    if (empty($load['childItemLinksDetailed'])) {
		/* We always want detailed links for the current item */
		$wantsDetailedLinks = array($item->getId() => 1);
	    } else {
		/* We want detailed links for everybody */
		$wantsDetailedLinks = array_flip($allItemIds);
	    }

	    foreach ($moduleStatus as $moduleId => $status) {
		if (empty($status['active'])) {
		    continue;
		}
		$callbacks = array_flip(explode('|', $status['callbacks']));

		$required = false;
		foreach (array('systemLinks' => 'getSystemLinks',
			       'systemContent' => 'loadSystemContent',
			       'itemLinks' => 'getItemLinks',
			       'itemSummaries' => 'getItemSummaries',
			       'itemDetailFiles' => 'loadItemDetails') as $key => $callbackKey) {
		    if (isset($load[$key]) && isset($callbacks[$callbackKey])) {
			$required = true;
			break;
		    }
		}

		if (!$required) {
		    /* This module doesn't have anything we need.  Don't bother with it */
		    continue;
		}

		list ($ret, $module) = GalleryCoreApi::loadPlugin('module', $moduleId);
		if ($ret->isError()) {
		    if ($ret->getErrorCode() & ERROR_PLUGIN_VERSION_MISMATCH) {
			continue;
		    }
		    return $ret->wrap(__FILE__, __LINE__);
		}

		if (isset($load['systemLinks']) && isset($callbacks['getSystemLinks'])) {
		    /* We don't use the acting user for system links -- it's too confusing */
		    list ($ret, $links) = $module->getSystemLinks();
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    /* Add url/moduleId keys.. */
		    foreach ($links as $link) {
			$link['moduleId'] = $moduleId;
			$layout['systemLinks'][] = $link;
		    }
		}

		if (isset($load['systemContent']) && isset($callbacks['loadSystemContent'])) {
		    /* We don't use the acting user for system content -- it's too confusing */
		    list ($ret, $content) = $module->loadSystemContent($template);
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    if (!empty($content)) {
			$layout['systemContent'][$moduleId] = $content;
		    }
		}

		if (isset($itemLinks) && isset($callbacks['getItemLinks'])) {
		    list ($ret, $links) = $module->getItemLinks(
			$allItems, $wantsDetailedLinks, $permissions);
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }

		    /* Add url/moduleId keys.. */
		    foreach ($links as $id => $list) {
			foreach ($list as $link) {
			    $link['moduleId'] = $moduleId;
			    $itemLinks[$id][] = $link;
			}
		    }
		}

		if (isset($itemSummaries) && isset($callbacks['getItemSummaries'])) {
		    list ($ret, $content) = $module->getItemSummaries($childItems, $permissions);
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    foreach ($content as $id => $html) {
			$itemSummaries[$id][$moduleId] = $html;
		    }
		}

		if (isset($load['itemDetailFiles']) && isset($callbacks['loadItemDetails'])) {
		    list ($ret, $content) =
			$module->loadItemDetails($template, $item, $permissions[$item->getId()]);
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    if (!empty($content)) {
			$layout['itemDetailFiles'][$moduleId] = $content;
		    }
		}
	    }

	    if (isset($itemLinks)) {
		foreach (array_keys($itemLinks) as $id) {
		    usort($itemLinks[$id], array('GalleryLayout', '_sortItemLinks'));
		}
		$layout['itemLinks'] = $itemLinks[$itemId];
		$childData[] = 'itemLinks';
	    }
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'thumbnails'
	 */
	if (isset($load['thumbnails']) && !empty($childIds)) {
	    list ($ret, $thumbnail) = GalleryCoreApi::fetchThumbnailsByItemIds($childIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    foreach (array_keys($thumbnail) as $id) {
		if (!($thumbnail[$id]->getWidth() && $thumbnail[$id]->getHeight())) {
		    list ($ret, $thumbnail[$id]) =
			GalleryCoreApi::rebuildDerivativeCache($thumbnail[$id]->getId());
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		}
		$thumbnail[$id] = $thumbnail[$id]->getMemberData();
	    }
	    $childData[] = 'thumbnail';
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * Populate data in children list..
	 */
	if (!empty($childData)) {
	    foreach (array_keys($layout['children']) as $i) {
		$id = $layout['children'][$i]['id'];
		foreach ($childData as $key) {
		    if (isset(${$key}[$id])) {
			$layout['children'][$i][$key] = ${$key}[$id];
		    }
		}
	    }
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'pageNavigator'
	 */
	if (isset($load['pageNavigator']) && isset($layout['totalPages'])) {
	    $page = GalleryUtilities::getRequestVariables('page');
	    if (empty($page)) {
		$page = 1;
	    }

	    /* Set up the navigator */
	    $navigator = array();
	    if ($page > 1) {
		$navigator['first']['urlParams'] =
		    array('view' => 'core.ShowItem', 'itemId' => $item->getId(), 'page' => 1);
		if ($page - 1 != 1) {
		    $navigator['back']['urlParams'] = array(
			'view' => 'core.ShowItem', 'itemId' => $item->getId(), 'page' => $page - 1);
		}
	    }
	    if ($page < $layout['totalPages']) {
		if ($page + 1 != $layout['totalPages']) {
		    $navigator['next']['urlParams'] = array(
			'view' => 'core.ShowItem', 'itemId' => $item->getId(), 'page' => $page + 1);
		}

		$navigator['last']['urlParams'] =
		    array('view' => 'core.ShowItem', 'itemId' => $item->getId(),
			  'page' => $layout['totalPages']);
	    }
	    $layout['navigator'] = $navigator;
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'itemNavigator'
	 */
	if (isset($load['itemNavigator']) && isset($layout['peerItemIndex'])) {
	    $navigator = array();
	    $itemIndex = $layout['peerItemIndex'];
	    if ($itemIndex > 0) {
		$navigator['first']['urlParams'] = array('view' => 'core.ShowItem',
							 'itemId' => $layout['peers'][0]['id']);
		$navigator['first']['item'] = $layout['peers'][0];
	    }

	    if ($itemIndex > 1) {
		$navigator['back']['urlParams'] =
		    array('view' => 'core.ShowItem',
			  'itemId' => $layout['peers'][$itemIndex - 1]['id']);
		$navigator['back']['item'] = $layout['peers'][$itemIndex - 1];
	    }

	    if ($itemIndex < count($layout['peers']) - 2) {
		$navigator['next']['urlParams'] =
		    array('view' => 'core.ShowItem',
			  'itemId' => $layout['peers'][$itemIndex + 1]['id']);
		$navigator['next']['item'] = $layout['peers'][$itemIndex + 1];
	    }

	    if ($itemIndex < count($layout['peers']) - 1) {
		$navigator['last']['urlParams'] =
		    array('view' => 'core.ShowItem',
			  'itemId' => $layout['peers'][count($layout['peers']) - 1]['id']);
		$navigator['last']['item'] = $layout['peers'][count($layout['peers']) - 1];
	    }
	    $layout['navigator'] = $navigator;
	}


	/*
	 * --------------------------------------------------------------------------------------
	 * 'jumpRange'
	 */
	if (isset($load['jumpRange']) && isset($layout['totalPages'])) {
	    $windowSize = 6;      /* TODO: make this configurable */
	    $jumpRange = array();
	    $lowerPage = max($page - (int)($windowSize / 2), 1);
	    $upperPage = min($page + (int)($windowSize / 2), $layout['totalPages']);
	    if ($upperPage == 0) {
		$upperPage = 1;
	    }
	    if ($upperPage == $layout['totalPages']) {
		$lowerPage = max($upperPage - $windowSize, 1);
	    } else if ($lowerPage == 1) {
		$upperPage = min($lowerPage + ($windowSize-1), $layout['totalPages']);
	    }
	    for ($i = $lowerPage; $i <= $upperPage; $i++) {
		$jumpRange[] = $i;
	    }
	    if ($lowerPage > 1) {
		array_unshift($jumpRange, 1);
	    }
	    if ($upperPage < $layout['totalPages']) {
		$jumpRange[] = $layout['totalPages'];
	    }
	    $layout['jumpRange'] = $jumpRange;
	}

	/*
	 * --------------------------------------------------------------------------------------
	 * 'imageViews'
	 */
	if (isset($load['imageViews'])) {
	    /*
	     * Figure out all possible views of this item that the user can see and
	     * get them into an acceptable format for the template engine.
	     */
	    $imageViews = array();
	    $can = array();
	    list ($ret, $permissions) =
		GalleryCoreApi::getPermissions($item->getId(), $layout['actingUserId']);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    /* If the user can see resized versions, add those to the list */
	    if (isset($permissions['core.viewResizes'])) {
		/* Load the resizes */
		list ($ret, $resizes) =
		    GalleryCoreApi::fetchResizesByItemIds(array($item->getId()));
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}

		if (!empty($resizes)) {
		    foreach ($resizes[$item->getId()] as $resize) {
			/* Rebuild the derivative if we don't have its dimensions */
			if ($resize->getWidth() == 0 || $resize->getHeight() == 0) {
			    list ($ret, $resize) =
				GalleryCoreApi::rebuildDerivativeCacheIfNotCurrent(
				    $resize->getId());
			    if ($ret->isError()) {
				return $ret->wrap(__FILE__, __LINE__);
			    }
			}
			$imageViews[] = $resize->getMemberData();
			$viewInline[] = 1;
		    }
		}
	    }

	    /* If the user can see the full version, add it to the list */
	    $sourceImage = null;
	    if (isset($permissions['core.viewSource'])) {
		/* Add the full version */
		list ($ret, $preferred) =
		    GalleryCoreApi::fetchPreferredsByItemIds(array($item->getId()));
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}

		/* Show the preferred item, if it's there */
		if (empty($preferred)) {
		    $sourceImage = $item->getMemberData();
		    if ($item->canBeViewedInline()) {
			$viewInline[] = 1;
		    } else {
			$viewInline[] = 0;
		    }
		} else {
		    $sourceImage = $preferred[$item->getId()]->getMemberData();
		    $viewInline[] = 1;
		}
		$sourceImage['itemTypeName'] = $item->itemTypeName();
		$sourceImage['isSource'] = true;
		$imageViews[] = $sourceImage;
		$sourceImageViewIndex = sizeof($imageViews)-1;
	    }

	    /* If all else fails, just show the thumbnail. */
	    if (empty($imageViews)) {
		/* Load the thumbnail */
		list ($ret, $thumbnails) =
		    GalleryCoreApi::fetchThumbnailsByItemIds(array($item->getId()));
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}

		if (!empty($thumbnails)) {
		    $imageViews[] = $thumbnails[$item->getId()]->getMemberData();
		    $viewInline[] = 1;
		}
	    }

	    $imageViewsIndex = GalleryUtilities::getRequestVariables('imageViewsIndex');
	    if (empty($imageViewsIndex)) {
		$imageViewsIndex = 0;
	    }

	    /* Don't let the index overflow the images array */
	    $imageViewsIndex = min($imageViewsIndex, count($imageViews) - 1);
	    $layout['viewInline'] = $viewInline;
	    if (isset($sourceImageViewIndex)) {
		$layout['sourceImageViewIndex'] = $sourceImageViewIndex;
	    }
	    $layout['imageViews'] = $imageViews;
	    $layout['sourceImage'] = $sourceImage;
	    $layout['imageViewsIndex'] = $imageViewsIndex;
	}

	/* -------------------------------------------------------------------------------------- */
	$template->setVariable('layout', $layout);

	return GalleryStatus::success();
    }

    /**
     * Sort an array of associative arrays on the 'text' key
     * @access private
     */
    function _sortItemLinks($a, $b) {
	return strcmp($a['text'], $b['text']);
    }

    /**
     * Return the number of items per page, or 0 if there is no pagination in this layout.
     *
     * @param array the layout parameters
     * @return int
     */
    function getPageSize($params) {
	if (!empty($params['rows']) && !empty($params['columns'])) {
	    return $params['rows'] * $params['columns'];
	}

	if (!empty($params['perPage'])) {
	    return $params['perPage'];
	}

	return 0;
    }

    /**
     * Load all the necessary template data to render a page for an album
     *
     * @param array object GalleryTemplate the template instance
     * @param object GalleryAlbumItem the album item to render.
     * @param array the layout parameters
     * @param int the child item ids
     * @return array object GalleryStatus a status code
     *         string path to a template file or array(html/redirect)
     * @access private
     */
    function loadAlbumTemplate(&$template, $item, $params, $childIds) {
	return array(GalleryStatus::success(), null);
    }

    /**
     * Load all the necessary template data to render a page for a single item
     *
     * @param array object GalleryTemplate the template instance
     * @param object GalleryItem the item to render.  Can be any subclass of GalleryItem
     * @param array the layout parameters
     * @return array object GalleryStatus a status code
     *         string path to a template file or array(html/redirect)
     * @access private
     */
    function loadItemTemplate(&$template, $item, $params) {
	return array(GalleryStatus::success(), null);
    }

    /**
     * @see GalleryPlugin::getPluginType()
     */
    function getPluginType() {
	return 'layout';
    }

    function setRequiredLayoutApi($requirement) {
	$this->_requiredLayoutApi = $requirement;
    }

    function getRequiredLayoutApi() {
	return $this->_requiredLayoutApi;
    }

    function setStandardSettings($standardSettings) {
	$this->_standardSettings = $standardSettings;
    }

    function getStandardSettings() {
	return $this->_standardSettings;
    }
}
?>
