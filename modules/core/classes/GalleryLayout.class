<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * This interface provides functionality to user-interfaces have a
 * customizable layout. A layout should implement this class.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryLayout {

    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The id of this layout
     *
     * @var string _id
     * @access private
     */
    var $_id;

    /**
     * The name of this layout
     *
     * @var string _name
     * @access private
     */
    var $_name;

    /**
     * The description of this layout
     *
     * @var string _description
     * @access private
     */
    var $_description;

    /**
     * The version of this layout
     *
     * @var string _version
     * @access private
     */
    var $_version;

    /**
     * The localization domain for this layout
     *
     * @access private
     */
    var $_l10Domain;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Return whether the layout uses simple or advanced settings.
     * To support simple settings the layout needs to implement getSettings and validateSettings.
     * To support advanced settings the layout must implement loadSettingsTemplate and
     * handleSettingsRequest.
     *
     * @return boolean true for advanced settings, false for simple
     */
    function isAdvancedSettings() {
	return false;  // Default to simple
    }

    /**
     * Return the possible settings that a layout can specify on a global or per
     * item basis.  Used for layout with simple settings ( @see isAdvancedSettings ).
     *
     * Each setting contains:
     *   key:         a unique identifier
     *   name:        a localized, displayable text string
     *   type:        single-select, multiple-select, text-field
     *   choices:     [only valid for single-select, multiple-select type]
     *                array of:
     *                   key:     a unique identifier within this set of choices
     *                   display: a localized displayable text string
     *   value:       the current value for this setting
     *
     * @param int optional itemId
     * @return array object GalleryStatus a status code
     *               settings array
     */
    function getSettings($itemId=null) {
	return array(GalleryStatus::success(), array());
    }

    /**
     * Return true if all the values are legal, or false if not.  If there are errors,
     * return an array of localized error messages to display for each invalid setting.
     * Used for layout with simple settings ( @see isAdvancedSettings ).
     *
     * @param settings array('key' => array(value, ...), ...)
     * @return array errors in the form of array('key' => 'translated text', ...)
     */
    function validateSettings($settings) {
	return array();
    }

    /**
     * Load the template with data to define the layout settings.
     * Used for layout with advanced settings ( @see isAdvancedSettings ).
     *
     * @param array object GalleryTemplate the template instance
     * @param array array the form values
     * @param the item id or null for site wide settings
     * @return array object GalleryStatus a status code
     *               string path to the body template
     */
    function loadSettingsTemplate(&$template, &$form, $itemId=null) {
	return array(GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__), null);
    }

    /**
     * Let the layout handle the incoming request.
     * Used for layout with advanced settings ( @see isAdvancedSettings ).
     * @see GalleryController::handleRequest
     *
     * @param array the form values
     * @param the item id or null for site wide settings
     * @return array object GalleryStatus a status code
     *               array error messages
     *               string status message (itemId!=null) or status key (itemId==null)
     */
    function handleSettingsRequest($form, $itemId=null) {
	return array(GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__), null, null);
    }

    /**
     * Activate this layout
     *
     * @return object GalleryStatus a status code
     */
    function activate() {
	global $gallery;

	/* Set the default value for all settings that don't have values */
	list ($ret, $settings) = $this->getSettings();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list ($ret, $currentParameters) = GalleryCoreApi::fetchAllPluginParameters('layout', $this->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/*
	 * Settings will have the correct value for all parameters, so if it's not in the map
	 * yet we should store it now.
	 */
	foreach ($settings as $setting) {
	    if (!isset($currentParameters[$setting['key']])) {
		$ret = $this->setParameter($setting['key'], $setting['value']);
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	}

	$ret = GalleryCoreApi::activatePlugin('layout', $this->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Deactivate this layout
     *
     * @return object GalleryStatus a status code
     */
    function deactivate() {
	global $gallery;

	$ret = GalleryCoreApi::deactivatePlugin('layout', $this->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Load the template with data from this view.
     *
     * @param array object GalleryTemplate the template instance
     * @param object GalleryItem the item to display
     * @return array object GalleryStatus a status code
     *               array ('head' => head HTML, 'body' => body html)
     */
    function loadTemplate(&$template, $item) {
	return array(GalleryStatus::success(), null);
    }

    /**
     * Study items very closely
     *
     * Learn whatever we think we'll need.  By performing operations on the
     * entire set of items, we potentially save time when it comes to
     * processing each item individually.
     *
     * @param array GalleryItem ids
     * @return object GalleryStatus a status code
     * @access private
     */
    function _studyItems($itemIds) {
	/* Study all permissions */
	$ret = GalleryCoreApi::studyPermissions($itemIds);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Fetch all layout specific parameters for the given item.  The results will contain
     * a mixture of global parameters and item specific parameters, where the item specific
     * ones override the global ones.
     *
     * @param int optional itemId
     * @return array object GalleryStatus a status code
     *               array parameters in key => value form
     */
    function fetchParameters($itemId=null) {
	/* Fetch global params */
	list ($ret, $params) =
	    GalleryCoreApi::fetchAllPluginParameters('layout', $this->getId(), null);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Then fetch item params (if applicable) */
	if (isset($itemId)) {
	    list ($ret, $local) =
		GalleryCoreApi::fetchAllPluginParameters('layout', $this->getId(), $itemId);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    $params = array_merge($params, $local);
	}

	return array(GalleryStatus::success(), $params);
    }

    /**
     * Convenience method to get a layout parameter
     *
     * @param string the parameter name
     * @param int the (optional) item id
     * @return array object GalleryStatus a status code
     *               mixed value
     */
    function getParameter($parameterName, $itemId=0) {
	list ($ret, $value) = GalleryCoreApi::getPluginParameter('layout', $this->getId(),
								 $parameterName, $itemId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $value);
    }

    /**
     * Convenience method to set a layout parameter
     *
     * @param string the parameter name
     * @param string the value
     * @param int the (optional) item id
     * @return object GalleryStatus a status code
     */
    function setParameter($parameterName, $parameterValue, $itemId=0) {
	$ret = GalleryCoreApi::setPluginParameter('layout', $this->getId(),
						  $parameterName, $parameterValue, $itemId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Remove a layout parameter for a specific item
     *
     * @param string the parameter name
     * @param int the item id
     * @return object GalleryStatus a status code
     */
    function removeItemParameter($parameterName, $itemId) {
	$ret = GalleryCoreApi::removePluginParameter('layout', $this->getId(), $parameterName, $itemId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Localize the given content
     *
     * @see Gallery::translate()
     *
     * @param mixed a single string, or an array of parameters
     * @return string the localized value
     */
    function translate($params) {
	global $gallery;

	if (!is_array($params)) {
	    $params = array('text' => $params);
	}

	$translator =& $gallery->getTranslator();
	list ($ret, $content) =
	    $translator->translateDomain('layouts_' . $this->getId(), $params);
	if ($ret->isError()) {
	    if ($gallery->getDebug()) {
		$gallery->debug($ret->getAsHtml());
	    }
	    return 'Translation error';
	} else {
	    return $content;
	}
    }

    /**
     * Load commonly used data into layout template
     * Always loaded:
     *   item      item data
     *   user      active user data
     *   children  array of child item data
     * Available keys to include in $dataToLoad parameter:
     *   owner = item owner data
     *      ^if childIds non-empty also fill ownerMap with array of ownerId => owner data
     *   viewCount = number of views for item
     *      ^if childIds non-empty also set viewCount on each child item
     *   childCount = number of children for item
     *      ^if childIds non-empty also set childCount on each child item that canContainChildren
     *   descendentCount = number of descendents for item
     *      ^if childIds non-empty also set descendentCount on each child that canContainChildren
     *   systemLinks = array of array('text'=>.., 'params'=>.., 'url'=>.., 'moduleId'=>..)
     *   systemContentFiles = array of moduleId => template file path
     *   itemLinks = array of array('text'=>.., 'params'=>.., 'url'=>.., 'moduleId'=>..)
     *      ^if childIds non-empty also set itemLinks on each child item
     *   itemSummaries = set itemSummaries (array of moduleId => html) on each child item
     *   itemDetailFiles = array of moduleId => template file path
     *   thumbnails = if childIds non-empty then set thumbnail on each child item
     *
     * @param array object GalleryTemplate the template instance
     * @param object GalleryItem the item to display
     * @param array (string data key, ..) data to load into template
     * @param array (optional) ids of child items to display
     * @return object GalleryStatus a status code
     * @access private
     */
    function loadLayoutTemplate(&$template, $item, $dataToLoad, $childIds=array()) {
	global $gallery;
	$urlGenerator = $gallery->getUrlGenerator();

	// -------------------------------------------------------------------------------------
	// Initialize..
	$load = $layout = $childItems = $childData = array();
	foreach ($dataToLoad as $key) {
	    $load[$key] = true;
	}
	if (!empty($childIds)) {
	    list ($ret, $childItems) = GalleryCoreApi::loadEntitiesById($childIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}
	$itemId = $item->getId();
	$allItems = array_merge(array($item), $childItems);
	$allItemIds = array_merge(array($itemId), $childIds);
	$allAlbumIds = array();
	foreach ($allItems as $it) {
	    if ($it->getCanContainChildren()) {
		$allAlbumIds[] = $it->getId();
	    }
	}

	// -------------------------------------------------------------------------------------
	// Load additional required entities..
	$ids = array();
	if (isset($load['owner'])) {
	    $ids[$item->getOwnerId()] = true;
	    $childOwnerIds = array();
	    foreach ($childItems as $child) {
		$ids[$child->getOwnerId()] = true;
		$childOwnerIds[$child->getOwnerId()] = true;
	    }
	    $childOwnerIds = array_keys($childOwnerIds);
	}
	if (!empty($ids)) {
	    list ($ret, $list) = GalleryCoreApi::loadEntitiesById(array_keys($ids));
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    foreach ($list as $it) {
		$entities[$it->getId()] = $it;
	    }
	}

	// -------------------------------------------------------------------------------------
	// Always load 'item', 'user' and 'children'
	$layout['item'] = $item->getMemberData();
	$user = $gallery->getActiveUser();
	$layout['user'] = $user->getMemberData();
	$layout['children'] = array();
	foreach ($childItems as $child) {
	    $layout['children'][] = $child->getMemberData();
	}

	// -------------------------------------------------------------------------------------
	// 'owner'
	if (isset($load['owner'])) {
	    $layout['owner'] = $entities[$item->getOwnerId()]->getMemberData();
	    foreach ($childOwnerIds as $id) {
		if (!isset($layout['ownerMap'][$id])) {
		    $layout['ownerMap'][$id] = $entities[$id]->getMemberData();
		}
	    }
	}

	// -------------------------------------------------------------------------------------
	// 'viewCount'
	if (isset($load['viewCount'])) {
	    list ($ret, $viewCount) = GalleryCoreApi::fetchItemViewCounts($allItemIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $layout['viewCount'] = $viewCount[$itemId];
	    $childData[] = 'viewCount';
	}

	// -------------------------------------------------------------------------------------
	// 'childCount'
	if (isset($load['childCount'])) {
	    list ($ret, $childCount) = GalleryCoreApi::fetchChildCounts($allAlbumIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    foreach ($allAlbumIds as $id) {
		if (!isset($childCount[$id])) {
		    $childCount[$id] = 0;
		}
	    }
	    $layout['childCount'] = isset($childCount[$itemId]) ? $childCount[$itemId] : 0;
	    $childData[] = 'childCount';
	}

	// -------------------------------------------------------------------------------------
	// 'descendentCount'
	if (isset($load['descendentCount'])) {
	    list ($ret, $descendentCount) = GalleryCoreApi::fetchDescendentCounts($allAlbumIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    foreach ($allAlbumIds as $id) {
		if (!isset($descendentCount[$id])) {
		    $descendentCount[$id] = 0;
		}
	    }
	    $layout['descendentCount'] =
		isset($descendentCount[$itemId]) ? $descendentCount[$itemId] : 0;
	    $childData[] = 'descendentCount';
	}

	// -------------------------------------------------------------------------------------
	// 'systemLinks', 'systemContentFiles', 'itemLinks', 'itemSummaries', 'itemDetailFiles'
	// Load links and content from all active modules
	if (isset($load['systemLinks']) || isset($load['systemContentFiles'])) {
	    if (isset($load['systemLinks'])) {
		$layout['systemLinks'] = array();
	    }
	    if (isset($load['systemContentFiles'])) {
		$layout['systemContentFiles'] = array();
	    }
	    if (isset($load['itemLinks'])) {
		$itemLinks = array($itemId => array());
		foreach ($childIds as $id) {
		    $itemLinks[$id] = array();
		}
	    }
	    if (isset($load['itemSummaries']) && !empty($childIds)) {
		foreach ($childIds as $id) {
		    $itemSummaries[$id] = array();
		}
		$childData[] = 'itemSummaries';
	    }
	    if (isset($load['itemDetailFiles'])) {
		$layout['itemDetailFiles'] = array();
	    }

	    list ($ret, $moduleStatus) = GalleryCoreApi::fetchPluginStatus('module');
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    foreach ($moduleStatus as $moduleId => $status) {
		if (empty($status['active'])) {
		    continue;
		}
		list ($ret, $module) = GalleryCoreApi::loadPlugin('module', $moduleId);
		if ($ret->isError()) {
		    if ($ret->getErrorCode() & ERROR_PLUGIN_VERSION_MISMATCH) {
			continue;
		    }
		    return $ret->wrap(__FILE__, __LINE__);
		}

		if (isset($load['systemLinks'])) {
		    list ($ret, $links) = $module->getSystemLinks();
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    // Add url/moduleId keys..
		    foreach ($links as $link) {
			$link['url'] = $urlGenerator->generateUrl($link['params']);
			$link['moduleId'] = $moduleId;
			$layout['systemLinks'][] = $link;
		    }
		}

		if (isset($load['systemContentFiles'])) {
		    list ($ret, $content) = $module->loadSystemContent($template);
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    if (!empty($content)) {
			$layout['systemContentFiles'][$moduleId] = $content;
		    }
		}

		if (isset($itemLinks)) {
		    list ($ret, $links) = $module->getItemLinks($allItems);
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    // Add url/moduleId keys..
		    foreach ($links as $itemId => $list) {
			foreach ($list as $link) {
			    $link['url'] = $urlGenerator->generateUrl($link['params']);
			    $link['moduleId'] = $moduleId;
			    $itemLinks[$itemId][] = $link;
			}
		    }
		}

		if (isset($itemSummaries)) {
		    list ($ret, $content) = $module->getItemSummaries($childItems);
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    foreach ($content as $itemId => $html) {
			$itemSummaries[$itemId][$moduleId] = $html;
		    }
		}

		if (isset($load['itemDetailFiles'])) {
		    list ($ret, $content) = $module->loadItemDetails($template, $item);
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		    if (!empty($content)) {
			$layout['itemDetailFiles'][$moduleId] = $content;
		    }
		}
	    }

	    if (isset($itemLinks)) {
		foreach (array_keys($itemLinks) as $itemId) {
		    usort($itemLinks[$itemId], array($this, '_sortItemLinks'));
		}
		$layout['itemLinks'] = $itemLinks[$itemId];
		$childData[] = 'itemLinks';
	    }
	}

	// -------------------------------------------------------------------------------------
	// 'thumbnails'
	if (isset($load['thumbnails']) && !empty($childIds)) {
	    list ($ret, $thumbnail) = GalleryCoreApi::fetchThumbnailsByItemIds($childIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    foreach (array_keys($thumbnail) as $id) {
		if (!($thumbnail[$id]->getWidth() && $thumbnail[$id]->getHeight())) {
		    list ($ret, $thumbnail[$id]) =
			GalleryCoreApi::rebuildDerivativeCache($thumbnail[$id]->getId());
		    if ($ret->isError()) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		}
		$thumbnail[$id] = $thumbnail[$id]->getMemberData();
	    }
	    $childData[] = 'thumbnail';
	}

	// -------------------------------------------------------------------------------------
	// Populate data in children list..
	if (!empty($childData)) {
	    foreach (array_keys($layout['children']) as $i) {
		$id = $layout['children'][$i]['id'];
		foreach ($childData as $key) {
		    if (isset(${$key}[$id])) {
			$layout['children'][$i][$key] = ${$key}[$id];
		    }
		}
	    }
	}

	// -------------------------------------------------------------------------------------
	$template->setVariable('layout', $layout);
	return GalleryStatus::success();
    }

    function _sortItemLinks($a, $b) {
	return strcmp($a['text'], $b['text']);
    }

    /* Getters and setters below */

    function setName($name) {
	$this->_name = $name;
    }

    function getName() {
	return $this->_name;
    }

    function setId($id) {
	$this->_id = $id;
    }

    function getId() {
	return $this->_id;
    }

    function setDescription($description) {
	$this->_description = $description;
    }

    function getDescription() {
	return $this->_description;
    }

    function setVersion($version) {
	$this->_version = $version;
    }

    function getVersion() {
	return $this->_version;
    }

    /**
     * Get the localization domain for this layout
     *
     * @return string
     */
    function getL10Domain() {
	return $this->_l10Domain;
    }

    /**
     * Set the localization domain for this layout
     *
     * @param string the l10 domain
     */
    function setL10Domain($l10Domain) {
	$this->_l10Domain = $l10Domain;
    }
}
?>
