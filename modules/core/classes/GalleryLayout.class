<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

class GalleryLayout {
    
    /**
     * Render the item
     *
     * @param object GalleryItem the item to render.  Can be any subclass of
     *               GalleryItem
     * @param array the layout properties
     * @return array object GalleryStatus a status code
     *         string the html body
     */
    function render($item) {
	return array(GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__),
		     null);
    }

    /**
     * Load all the parents of this item
     *
     * @param string the id of a GalleryItem
     * @return array object GalleryStatus a status code 
     *               array(GalleryItem, ...)
     */
    function _loadParents($item) {
	global $gallery;

	$parents = array();
	$parentId = $item->getParentId();
	while (!empty($parentId)) {

	    list ($ret, $parent) = $gallery->loadEntitiesById($parentId);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    array_unshift($parents, $parent->getMemberData());
	    $parentId = $parent->getParentId();
	}

	return array(GalleryStatus::success(), $parents);
    }

    /**
     * Load the derivative images for the ids/types specified
     *
     * @param array GalleryItem ids
     * @param array image types 
     * @return array object GalleryStatus a status code 
     *               array(GalleryItem id => GalleryDerivativeImage, ...)
     */
    function _loadDerivativeImages($ids, $imageTypes) {
	global $gallery;
	
	if (!is_array($ids)) {
	    $ids = array($ids);
	}

	if (!is_array($imageTypes)) {
	    $imageTypes = array($imageTypes);
	}
	    
	/* Look up the ids of all their thumbnail images */
	$idMarkers = GalleryUtilities::makeMarkers(sizeof($ids));
	$imageTypeMarkers = GalleryUtilities::makeMarkers(sizeof($imageTypes));
	$data = array_merge(array('GalleryDerivativeImage'),
			    $imageTypes,
			    $ids);
	list ($ret, $searchResults) = $gallery->search(
            array('select' => ('[GalleryDerivativeImage::id], ' .
			       '[GalleryChildEntity::parentId]'),
		  'where' => ('[GalleryEntity::entityType]=? AND ' .
			      '[GalleryDerivativeImage::imageType] IN (' .
			      $imageTypeMarkers . ') AND ' .
			      '[GalleryChildEntity::parentId] IN (' .
			      $idMarkers . ')')),
            $data);
	    
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$imageTable = array();
	if ($searchResults->resultCount() > 0) {
	    $imageIds = array();
	    while ($result = $searchResults->nextResult()) {
		$imageIds[] = $result[0];
	    }
		
	    /* Load all the derivative images */
	    list ($ret, $imageEntities) = $gallery->loadEntitiesById($imageIds);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
		
	    /* Create a table of child id -> image data */
	    foreach ($imageEntities as $image) {
		$imageTable[$image->getParentId()][] = $image->getMemberData();
	    }
	}

	return array(GalleryStatus::success(), $imageTable);
    }
}