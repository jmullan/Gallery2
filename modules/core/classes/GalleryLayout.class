<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * This interface provides functionality to user-interfaces have a
 * customizable layout. A layout should implement this class.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryLayout {
    
    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The name of this layout
     * 
     * @var string _name
     * @access private
     */
    var $_name;

    /**
     * The description of this layout
     * 
     * @var string _description
     * @access private
     */
    var $_description;

    /**
     * The version of this layout
     * 
     * @var string _version
     * @access private
     */
    var $_version;

    /**
     * The localization domain for this layout
     *
     * @access private
     */
    var $_l10Domain;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Initialize this layout
     *
     * @return object GalleryStatus a status code
     */
    function init() {
	return GalleryStatus::success();
    }

    /**
     * Localize the given content
     *
     * @see Gallery::translate()
     *
     * @param mixed a single string, or an array of parameters
     * @return array object GalleryStatus a status code
     *               string the localized value
     */
    function translate($params) {
	global $gallery;
	
	if (!is_array($params)) {
	    $params = array('text' => $params);
	}

	$translator =& $gallery->getTranslator();
	list ($ret, $content) = $translator->translateDomain($this->getL10Domain(), $params);
	if ($ret->isError()) {
	    if ($gallery->getDebug()) {
		$gallery->debug($ret->getAsHtml());
	    }
	    return 'Translation error';
	} else {
	    return $content;
	}
    }
    
    /**
     * Return the possible settings that a layout can specify on a global or per
     * item basis.
     *
     * Each setting contains:
     *   key:         a unique identifier
     *   name:        a localized, displayable text string
     *   type:        single-select, multiple-select, input
     *   choices:     [only valid for single-select, multiple-select type]
     *                array of:
     *                   key:     a unique identifier within this set of choices
     *                   display: a localized displayable text string
     *   values:      the current value(s) for this choice
     *
     * @return array object GalleryStatus a status code
     *               settings array
     */
    function getSettings() {
	return array(GalleryStatus::success(), array());
    }

    /**
     * Return true if all the values are legal, or false if not.  If there are errors,
     * return an array of localized error messages to display for each invalid setting.
     *
     * @param settings array('key' => array(value, ...), ...)
     * @return array object GalleryStatus a status code
     *               boolean
     *               errors
     */
    function validateSettings($settings) {
	return array(GalleryStatus::success(), true, array());
    }

    /**
     * Load the template with data from this view.
     *
     * @param array object GalleryTemplate the template instance
     * @param array array the form values
     * @return array object GalleryStatus a status code
     *               string path to the head template
     *               string path to the body template
     */
    function loadTemplate(&$template, &$form) {
	return array(GalleryStatus::success(), null, null);
    }

    /**
     * Call loadSystemContent on every active module
     *
     * @param object GalleryTemplate a template instance
     * @return array object GalleryStatus a status code
     *               array('moduleName' => 'template file path',
     *                     ...)
     * @access private
     */
    function _loadModuleSystemContent(&$template) {
	global $gallery;

	GalleryProfiler::start('modules.core.classes.GalleryLayout::_loadModuleSystemContent');

	/* Load the module list */
	list ($ret, $moduleStatus) = GalleryPluginMap::getPluginStatus('module');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$systemContent = array();
	foreach ($moduleStatus as $moduleName => $status) {
	    if (empty($status['active'])) {
		continue;
	    }
	    
	    list ($ret, $module) = $gallery->loadModule($moduleName);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    /* Load all module-related content for these items */
	    list ($ret, $systemContent[$moduleName]) = $module->loadSystemContent($template);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    if (empty($systemContent[$moduleName])) {
		unset($systemContent[$moduleName]);
	    }
	}

	GalleryProfiler::stop('modules.core.classes.GalleryLayout::_loadModuleSystemContent');

	return array(GalleryStatus::success(), $systemContent);
    }

    /**
     * Call getSystemLinks on every active module
     *
     * @param object GalleryTemplate a template instance
     * @return array object GalleryStatus a status code
     *               array(array('moduleName' => array('text' => ...,
     *                                                 'params' => ...,
     *                                                 'url' => ...)),
     * @access private
     */
    function _getModuleSystemLinks() {
	global $gallery;

        GalleryProfiler::start('modules.core.classes.GalleryLayout::_getModuleSystemLinks');
	
        /* Load the module list */
        list ($ret, $moduleStatus) = GalleryPluginMap::getPluginStatus('module');
        if ($ret->isError()) {
            return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
        $urlGenerator = $gallery->getUrlGenerator();
	
        $links = array();
        foreach ($moduleStatus as $moduleName => $status) {
            if (empty($status['active'])) {
                continue;
	    }
	    
            list ($ret, $module) = $gallery->loadModule($moduleName);
            if ($ret->isError()) {
                return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    
            /* Get all module-related links for these items */
            list ($ret, $links[$moduleName]) = $module->getSystemLinks();
            if ($ret->isError()) {
                return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    
            if (empty($links[$moduleName])) {
                unset($links[$moduleName]);
	    }
	}
	
        GalleryProfiler::stop('modules.core.classes.GalleryLayout::_getModuleSystemLinks');
	
        return array(GalleryStatus::success(), $links);
    }

    /**
     * Call getItemLinks on every active module
     *
     * @param mixed object GalleryItem a target item, or array of object GalleryItem
     * @return array object GalleryStatus a status code
     *               array('itemId' => array('moduleName' =>
     *                                            array('text' => ...,
     *                                                  'params' => ...,
     *                                                  'url' => ...))),
     * @access private
     */
    function _getModuleItemLinks($items) {
	global $gallery;

	GalleryProfiler::start('modules.core.classes.GalleryLayout::_getModuleItemLinks');

	if (!is_array($items)) {
	    $items = array($items);
	}

	/* Load the module list */
	list ($ret, $moduleStatus) = GalleryPluginMap::getPluginStatus('module');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$urlGenerator = $gallery->getUrlGenerator();

	$itemLinks = array();
	foreach ($moduleStatus as $moduleName => $status) {
	    if (empty($status['active'])) {
		continue;
	    }
	    
	    list ($ret, $module) = $gallery->loadModule($moduleName);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    /* Get all module-related links for these items */
	    list ($ret, $moduleLinks) = $module->getItemLinks($items);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    /* Refactor into: array[itemId][moduleName][links] */
	    foreach ($moduleLinks as $itemId => $links) {
		foreach ($links as $link) {
		    $link['url'] = $urlGenerator->generateUrl($link['params']);
		    $itemLinks[$itemId][$moduleName][] = $link;
		}
	    }
	}

	GalleryProfiler::stop('modules.core.classes.GalleryLayout::_getModuleItemLinks');

	return array(GalleryStatus::success(), $itemLinks);
    }

    /**
     * Call getItemSummaries on every active module
     *
     * @param mixed object GalleryItem a target item, or array of object GalleryItem
     * @return array object GalleryStatus a status code
     *               array ('itemId' => array('moduleName' => html, ...))
     * @access private
     */
    function _getModuleItemSummaries($items) {
	global $gallery;

	GalleryProfiler::start('modules.core.classes.GalleryLayout::_getModuleItemSummaries');

	if (!is_array($items)) {
	    $items = array($items);
	}
	
	/* Load the module list */
	list ($ret, $moduleStatus) = GalleryPluginMap::getPluginStatus('module');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$itemSummaries = array();
	foreach ($moduleStatus as $moduleName => $status) {
	    if (empty($status['active'])) {
		continue;
	    }

	    list ($ret, $module) = $gallery->loadModule($moduleName);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    list ($ret, $moduleSummaries) = $module->getItemSummaries($items);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    /* Refactor into: array[itemId][moduleName][links] */
	    foreach ($moduleSummaries as $itemId => $html) {
		$itemSummaries[$itemId][$moduleName] = $html;
	    }
	}

	GalleryProfiler::stop('modules.core.classes.GalleryLayout::_getModuleItemSummaries');

	return array(GalleryStatus::success(), $itemSummaries);
    }

    /**
     * Call loadItemDetails on every active module
     *
     * @param object GalleryTemplate a template
     * @param object GalleryItem a target item
     * @return array object GalleryStatus a status code
     *               array ('itemId' => array('moduleName' => 'foo.tpl', ...))
     * @access private
     */
    function _loadModuleItemDetails(&$template, $item) {
	global $gallery;

	GalleryProfiler::start('modules.core.classes.GalleryLayout::_loadModuleItemDetails');

	/* Load the module list */
	list ($ret, $moduleStatus) = GalleryPluginMap::getPluginStatus('module');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$itemDetails = array();
	foreach ($moduleStatus as $moduleName => $status) {
	    if (empty($status['active'])) {
		continue;
	    }

	    list ($ret, $module) = $gallery->loadModule($moduleName);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    list ($ret, $itemDetails[$moduleName]) = $module->loadItemDetails($template, $item);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    if (empty($itemDetails[$moduleName])) {
		unset($itemDetails[$moduleName]);
	    }
	}

	GalleryProfiler::stop('modules.core.classes.GalleryLayout::_loadModuleItemDetails');

	return array(GalleryStatus::success(), $itemDetails);
    }

    /**
     * Study items very closely
     *
     * Learn whatever we think we'll need.  By performing operations on the
     * entire set of items, we potentially save time when it comes to
     * processing each item individually. 
     *
     * @param array GalleryItems
     * @return object GalleryStatus a status code
     * @access private
     */
    function _studyItems($items) {
	global $gallery;

	/* Study all permissions */
	$ret = GalleryItemHelper::studyPermissions($items, $gallery->getActiveUserId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
    }

    /* Getters and setters below */

    function setName($name) {
	$this->_name = $name;
    }

    function getName() {
	return $this->_name;
    }
    
    function setDescription($description) {
	$this->_description = $description;
    }

    function getDescription() {
	return $this->_description;
    }

    function setVersion($version) {
	$this->_version = $version;
    }

    function getVersion() {
	return $this->_version;
    }

    /**
     * Get the localization domain for this layout
     *
     * @return string
     */
    function getL10Domain() {
	return $this->_l10Domain;
    }

    /**
     * Set the localization domain for this layout
     *
     * @param string the l10 domain
     */
    function setL10Domain($l10Domain) {
	$this->_l10Domain = $l10Domain;
    }
}

?>