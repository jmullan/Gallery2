<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Interface class for the GalleryPermissionMap class.
 * (Class schema version: 1.0)
 *
 * This file is automatically generated from XML embedded in the
 * class, combined with the ClassCode.xsl file.  You should not modify
 * it by hand, as your changes will be lost next time this file is
 * rebuilt.  If you want to add more getters/setters, you should add
 * them in the core class.  If you want to change the format of this
 * file, then you should edit the XSL template.
 *
 * @version $Id$
 * @package GalleryCoreInterfaces
 * @author Bharat Mediratta <bharat@menalto.com>
 */

class GalleryPermissionMap extends GalleryPermissionMap_core {
  

  
    /**
     * Get meta information about this class' map 
     *
     * @return array map member => type
     */
    function getMapInfo() {
        $info = array();
    
        $info['members']['itemId'] = STORAGE_TYPE_INTEGER;
  
        $info['members']['userId'] = STORAGE_TYPE_INTEGER;
  
        $info['members']['permission'] = STORAGE_TYPE_INTEGER;
  
        return $info; 
    }

    /**
     * Add an entry to this map
     *
     * @param array an associative array of the entry data
     * @return object GalleryStatus a status code
     */
    function addMapEntry($data) {
        global $gallery;
    
        if (!isset($data['itemId'])) {
            return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
        }
    
        if (!isset($data['userId'])) {
            return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
        }
    
        if (!isset($data['permission'])) {
            return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
        }
    

        list ($ret, $storage) = $gallery->getStorage();
        if ($ret->isError()) {
            return $ret->wrap(__FILE__, __LINE__);
        }

        return $storage->addMapEntry('GalleryPermissionMap', $data);
    }

    /**
     * Remove an entry from this map
     *
     * @param array an associative array of the entry data to match and remove
     * @return object GalleryStatus a status code
     */
    function removeMapEntry($data) {
        global $gallery;

        if (sizeof($data) == 0) {
            return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
        }
        list ($ret, $storage) = $gallery->getStorage();

        if ($ret->isError()) {
            return $ret->wrap(__FILE__, __LINE__);
        }

        return $storage->removeMapEntry('GalleryPermissionMap', $data);
    }

    /**
     * Update an entry in this map
     *
     * @param array an associative array of the entry data to match and remove
     * @return object GalleryStatus a status code
     */
    function updateMapEntry($data) {
        global $gallery;

    
        if (!isset($data['itemId'])) {
            return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
        }
    
        if (!isset($data['userId'])) {
            return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
        }
    

        list ($ret, $storage) = $gallery->getStorage();
        if ($ret->isError()) {
            return $ret->wrap(__FILE__, __LINE__);
        }
  
        return $storage->updateMapEntry('GalleryPermissionMap', $data);
    }

    /**
     * Return an array of matching entries in this map
     *
     * @param array an associative array of the entry data to match
     * @return array object GalleryStatus a status code
     *               array the entries
     */
    function getMatchingMapEntries($array) {
        global $gallery;

    
        if (!isset($data['itemId'])) {
            return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
        }
  
        if (!isset($data['userId'])) {
            return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
        }
  

        $query = 'SELECT ';
        $where = array();
        $data = array();
        foreach ($array as $key => $value) {
            $where[] = "[GalleryPermissionMap.$key]=? ";
            $data[] = $value;
        }
        if (sizeof($where)) {
            $query .= 'WHERE ' . join(', ', $where);
        }

        list ($ret, $searchResults) = $gallery->search($query, $data);
        if ($ret->isError()) {
            return array($ret->wrap(__FILE__, __LINE__), null);
        }

        return array(GalleryStatus::success(), $searchResults->allResults());
    }
  
}
?>