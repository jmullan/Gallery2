<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @package GalleryCore
 * @subpackage ClassInterfaces
 * @version $Revision$ $Date$
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Interface class for the GalleryDataItem class.
 * (Class schema version: 1.0)
 *
 * This file is automatically generated from XML embedded in the
 * class, combined with the ClassCode.xsl file.  You should not modify
 * it by hand, as your changes will be lost next time this file is
 * rebuilt.  If you want to add more getters/setters, you should add
 * them in the core class.  If you want to change the format of this
 * file, then you should edit the XSL template.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryDataItem extends GalleryDataItem_core {
  

  
    /**
     * Return meta information about the members of this class
     *
     * @return array member => array(type, class)
     */
    function getPersistentMemberInfo() {
	$meta = parent::getPersistentMemberInfo();
    
	$meta['members']['mimeType'] = array(
	    'class' => 'GalleryDataItem',
	    'type' => STORAGE_TYPE_STRING
	);
    
	$meta['members']['size'] = array(
	    'class' => 'GalleryDataItem',
	    'type' => STORAGE_TYPE_INTEGER
	);
    
	return $meta;
    }

    /**
     * Get the data from this persistent object as an associative array
     *
     * @return array memberName => memberValue
     */
    function getMemberData() {
	$data = parent::getMemberData();
    
	if (isset($this->_linkedEntity)) {
	    if (!isset($this->_linkedEntity->_mimeType)) {
 	        $data['mimeType'] = null;
	    } else {
		$data['mimeType'] = $this->_linkedEntity->_mimeType;
	    }
	} else if (!isset($this->_mimeType)) {
 	    $data['mimeType'] = null;
 	} else {
	    $data['mimeType'] = $this->_mimeType;
	}
	
	if (isset($this->_linkedEntity)) {
	    if (!isset($this->_linkedEntity->_size)) {
 	        $data['size'] = null;
	    } else {
		$data['size'] = $this->_linkedEntity->_size;
	    }
	} else if (!isset($this->_size)) {
 	    $data['size'] = null;
 	} else {
	    $data['size'] = $this->_size;
	}
	
	return $data;
    }
  

    /**
     * Return the name of this class with the proper mix of uppercase and
     * lowercase (get_class() always returns lowercase)
     *
     * @return string class name
     */
    function getClassName() {
	return 'GalleryDataItem';
    }

    /** 
     * Return the path to the PHP file for this class, relative to the gallery2 dir
     * 
     * @return string path
     */ 
    function getClassFile() { 
        return 'modules/' .  
            basename(dirname(dirname(dirname(__FILE__)))) .  
            '/classes/GalleryDataItem.class'; 
    }

    
    /**
     * Get the value of mimeType
     *
     * @return STRING the value
     */
    function getmimeType() {
 	
	$linkedEntity = $this->getLinkedEntity();
	if (isset($linkedEntity)) {
	    return $linkedEntity->getmimeType();
	}
	

	if (!isset($this->_mimeType)) {
	    return null;
	}

	return $this->_mimeType;
    }

    /**
     * Set the value of mimeType
     *
     * @param STRING the value
     */
    function setmimeType($value) {
    
	/* 
	 * Convert unset values to null, to avoid generating warnings.
	 */
	$a = isset($value) ? $value : null;
	$b = isset($this->_mimeType) ? $this->_mimeType : null;

	/* 
	 * Only take action if the value actually changes, but take care not to 
	 * generate warnings for unset values.
	 */
    
	if ($a != $b) {
      
	    $this->setModifiedFlag('mimeType', $value);
	    $this->_mimeType = $value;
	}
    }
  
    /**
     * Get the value of size
     *
     * @return INTEGER the value
     */
    function getsize() {
 	
	$linkedEntity = $this->getLinkedEntity();
	if (isset($linkedEntity)) {
	    return $linkedEntity->getsize();
	}
	

	if (!isset($this->_size)) {
	    return null;
	}

	return $this->_size;
    }

    /**
     * Set the value of size
     *
     * @param INTEGER the value
     */
    function setsize($value) {
    
	/* Type cast the incoming value to be an integer */
	if ($value != null) {
	    $value = (int)$value;
	}
      
	/* 
	 * Convert unset values to null, to avoid generating warnings.
	 */
	$a = isset($value) ? $value : null;
	$b = isset($this->_size) ? $this->_size : null;

	/* 
	 * Only take action if the value actually changes, but take care not to 
	 * generate warnings for unset values.
	 */
    
	if ($a !== $b) {
      
	    $this->setModifiedFlag('size', $value);
	    $this->_size = $value;
	}
    }
  
}
?>
