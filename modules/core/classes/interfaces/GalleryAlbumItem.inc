<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Interface class for the GalleryAlbumItem class.
 * (Class schema version: 1.0)
 *
 * This file is automatically generated from XML embedded in the
 * class, combined with the ClassCode.xsl file.  You should not modify
 * it by hand, as your changes will be lost next time this file is
 * rebuilt.  If you want to add more getters/setters, you should add
 * them in the core class.  If you want to change the format of this
 * file, then you should edit the XSL template.
 *
 * @version $Id$
 * @package GalleryCoreInterfaces
 * @author Bharat Mediratta <bharat@menalto.com>
 */

class GalleryAlbumItem extends GalleryAlbumItem_core {
  

  
    /**
     * Return meta information about the members of this class
     *
     * @return array member => array(type, class)
     */
    function getPersistentMemberInfo() {
        $meta = parent::getPersistentMemberInfo();
    
        $meta['members']['backgroundColor'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_STRING
        );
    
        $meta['members']['backgroundColor2'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_STRING
        );
    
        $meta['members']['border'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_INTEGER
        );
    
        $meta['members']['borderColor'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_STRING
        );
    
        $meta['members']['columns'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_INTEGER
        );
    
        $meta['members']['displayViewCount'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_BOOLEAN
        );
    
        $meta['members']['font'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_STRING
        );
    
        $meta['members']['htmlFooter'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_TEXT
        );
    
        $meta['members']['htmlHeader'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_TEXT
        );
    
        $meta['members']['layout'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_STRING
        );
    
        $meta['members']['linkColor'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_STRING
        );
    
        $meta['members']['allowPrinting'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_BOOLEAN
        );
    
        $meta['members']['childIntermediateResize'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_INTEGER
        );
    
        $meta['members']['childThumbSize'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_INTEGER
        );
    
        $meta['members']['rows'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_INTEGER
        );
    
        $meta['members']['showBreadCrumb'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_BOOLEAN
        );
    
        $meta['members']['textColor'] = array(
            'class' => 'GalleryAlbumItem',
            'type' => STORAGE_TYPE_STRING
        );
    
        return $meta;
    }
  
    /**
     * Get the value of backgroundColor
     *
     * @return STRING the value
     */
    function getbackgroundColor() {
        if (!isset($this->_backgroundColor)) {
            return null;
        }
        return $this->_backgroundColor;
    }

    /**
     * Set the value of backgroundColor
     *
     * @param STRING the value
     */
    function setbackgroundColor($value) {
    
        $this->_backgroundColor = $value;
        $this->setModifiedFlag('backgroundColor', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of backgroundColor2
     *
     * @return STRING the value
     */
    function getbackgroundColor2() {
        if (!isset($this->_backgroundColor2)) {
            return null;
        }
        return $this->_backgroundColor2;
    }

    /**
     * Set the value of backgroundColor2
     *
     * @param STRING the value
     */
    function setbackgroundColor2($value) {
    
        $this->_backgroundColor2 = $value;
        $this->setModifiedFlag('backgroundColor2', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of border
     *
     * @return INTEGER the value
     */
    function getborder() {
        if (!isset($this->_border)) {
            return null;
        }
        return $this->_border;
    }

    /**
     * Set the value of border
     *
     * @param INTEGER the value
     */
    function setborder($value) {
    
        $value = (int)$value;
      
        $this->_border = $value;
        $this->setModifiedFlag('border', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of borderColor
     *
     * @return STRING the value
     */
    function getborderColor() {
        if (!isset($this->_borderColor)) {
            return null;
        }
        return $this->_borderColor;
    }

    /**
     * Set the value of borderColor
     *
     * @param STRING the value
     */
    function setborderColor($value) {
    
        $this->_borderColor = $value;
        $this->setModifiedFlag('borderColor', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of columns
     *
     * @return INTEGER the value
     */
    function getcolumns() {
        if (!isset($this->_columns)) {
            return null;
        }
        return $this->_columns;
    }

    /**
     * Set the value of columns
     *
     * @param INTEGER the value
     */
    function setcolumns($value) {
    
        $value = (int)$value;
      
        $this->_columns = $value;
        $this->setModifiedFlag('columns', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of displayViewCount
     *
     * @return BOOLEAN the value
     */
    function getdisplayViewCount() {
        if (!isset($this->_displayViewCount)) {
            return null;
        }
        return $this->_displayViewCount;
    }

    /**
     * Set the value of displayViewCount
     *
     * @param BOOLEAN the value
     */
    function setdisplayViewCount($value) {
    
        $value = (bool)$value;
      
        $this->_displayViewCount = $value;
        $this->setModifiedFlag('displayViewCount', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of font
     *
     * @return STRING the value
     */
    function getfont() {
        if (!isset($this->_font)) {
            return null;
        }
        return $this->_font;
    }

    /**
     * Set the value of font
     *
     * @param STRING the value
     */
    function setfont($value) {
    
        $this->_font = $value;
        $this->setModifiedFlag('font', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of htmlFooter
     *
     * @return TEXT the value
     */
    function gethtmlFooter() {
        if (!isset($this->_htmlFooter)) {
            return null;
        }
        return $this->_htmlFooter;
    }

    /**
     * Set the value of htmlFooter
     *
     * @param TEXT the value
     */
    function sethtmlFooter($value) {
    
        $this->_htmlFooter = $value;
        $this->setModifiedFlag('htmlFooter', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of htmlHeader
     *
     * @return TEXT the value
     */
    function gethtmlHeader() {
        if (!isset($this->_htmlHeader)) {
            return null;
        }
        return $this->_htmlHeader;
    }

    /**
     * Set the value of htmlHeader
     *
     * @param TEXT the value
     */
    function sethtmlHeader($value) {
    
        $this->_htmlHeader = $value;
        $this->setModifiedFlag('htmlHeader', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of layout
     *
     * @return STRING the value
     */
    function getlayout() {
        if (!isset($this->_layout)) {
            return null;
        }
        return $this->_layout;
    }

    /**
     * Set the value of layout
     *
     * @param STRING the value
     */
    function setlayout($value) {
    
        $this->_layout = $value;
        $this->setModifiedFlag('layout', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of linkColor
     *
     * @return STRING the value
     */
    function getlinkColor() {
        if (!isset($this->_linkColor)) {
            return null;
        }
        return $this->_linkColor;
    }

    /**
     * Set the value of linkColor
     *
     * @param STRING the value
     */
    function setlinkColor($value) {
    
        $this->_linkColor = $value;
        $this->setModifiedFlag('linkColor', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of allowPrinting
     *
     * @return BOOLEAN the value
     */
    function getallowPrinting() {
        if (!isset($this->_allowPrinting)) {
            return null;
        }
        return $this->_allowPrinting;
    }

    /**
     * Set the value of allowPrinting
     *
     * @param BOOLEAN the value
     */
    function setallowPrinting($value) {
    
        $value = (bool)$value;
      
        $this->_allowPrinting = $value;
        $this->setModifiedFlag('allowPrinting', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of childIntermediateResize
     *
     * @return INTEGER the value
     */
    function getchildIntermediateResize() {
        if (!isset($this->_childIntermediateResize)) {
            return null;
        }
        return $this->_childIntermediateResize;
    }

    /**
     * Set the value of childIntermediateResize
     *
     * @param INTEGER the value
     */
    function setchildIntermediateResize($value) {
    
        $value = (int)$value;
      
        $this->_childIntermediateResize = $value;
        $this->setModifiedFlag('childIntermediateResize', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of childThumbSize
     *
     * @return INTEGER the value
     */
    function getchildThumbSize() {
        if (!isset($this->_childThumbSize)) {
            return null;
        }
        return $this->_childThumbSize;
    }

    /**
     * Set the value of childThumbSize
     *
     * @param INTEGER the value
     */
    function setchildThumbSize($value) {
    
        $value = (int)$value;
      
        $this->_childThumbSize = $value;
        $this->setModifiedFlag('childThumbSize', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of rows
     *
     * @return INTEGER the value
     */
    function getrows() {
        if (!isset($this->_rows)) {
            return null;
        }
        return $this->_rows;
    }

    /**
     * Set the value of rows
     *
     * @param INTEGER the value
     */
    function setrows($value) {
    
        $value = (int)$value;
      
        $this->_rows = $value;
        $this->setModifiedFlag('rows', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of showBreadCrumb
     *
     * @return BOOLEAN the value
     */
    function getshowBreadCrumb() {
        if (!isset($this->_showBreadCrumb)) {
            return null;
        }
        return $this->_showBreadCrumb;
    }

    /**
     * Set the value of showBreadCrumb
     *
     * @param BOOLEAN the value
     */
    function setshowBreadCrumb($value) {
    
        $value = (bool)$value;
      
        $this->_showBreadCrumb = $value;
        $this->setModifiedFlag('showBreadCrumb', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of textColor
     *
     * @return STRING the value
     */
    function gettextColor() {
        if (!isset($this->_textColor)) {
            return null;
        }
        return $this->_textColor;
    }

    /**
     * Set the value of textColor
     *
     * @param STRING the value
     */
    function settextColor($value) {
    
        $this->_textColor = $value;
        $this->setModifiedFlag('textColor', MEMBER_MODIFIED);
    }
  
}
?>