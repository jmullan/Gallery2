<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @package GalleryCore
 * @subpackage ClassInterfaces
 * @version $Revision$ $Date$
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Interface class for the GalleryItem class.
 * (Class schema version: 1.0)
 *
 * This file is automatically generated from XML embedded in the
 * class, combined with the ClassCode.xsl file.  You should not modify
 * it by hand, as your changes will be lost next time this file is
 * rebuilt.  If you want to add more getters/setters, you should add
 * them in the core class.  If you want to change the format of this
 * file, then you should edit the XSL template.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryItem extends GalleryItem_core {
  

  
    /**
     * Return meta information about the members of this class
     *
     * @return array member => array(type, class)
     */
    function getPersistentMemberInfo() {
	$meta = parent::getPersistentMemberInfo();
    
	$meta['members']['canContainChildren'] = array(
	    'class' => 'GalleryItem',
	    'type' => STORAGE_TYPE_BOOLEAN
	);
    
	$meta['members']['description'] = array(
	    'class' => 'GalleryItem',
	    'type' => STORAGE_TYPE_TEXT
	);
    
	$meta['members']['keywords'] = array(
	    'class' => 'GalleryItem',
	    'type' => STORAGE_TYPE_STRING
	);
    
	$meta['members']['orderBy'] = array(
	    'class' => 'GalleryItem',
	    'type' => STORAGE_TYPE_STRING
	);
    
	$meta['members']['orderDirection'] = array(
	    'class' => 'GalleryItem',
	    'type' => STORAGE_TYPE_STRING
	);
    
	$meta['members']['ownerId'] = array(
	    'class' => 'GalleryItem',
	    'type' => STORAGE_TYPE_INTEGER
	);
    
	$meta['members']['summary'] = array(
	    'class' => 'GalleryItem',
	    'type' => STORAGE_TYPE_STRING
	);
    
	$meta['members']['theme'] = array(
	    'class' => 'GalleryItem',
	    'type' => STORAGE_TYPE_STRING
	);
    
	$meta['members']['title'] = array(
	    'class' => 'GalleryItem',
	    'type' => STORAGE_TYPE_STRING
	);
    
	$meta['members']['viewedSinceTimestamp'] = array(
	    'class' => 'GalleryItem',
	    'type' => STORAGE_TYPE_INTEGER
	);
    
	return $meta;
    }

    /**
     * Get the data from this persistent object as an associative array
     *
     * @return array memberName => memberValue
     */
    function getMemberData() {
	$data = parent::getMemberData();
    
	if (!isset($this->_canContainChildren)) {
 	    $data['canContainChildren'] = null;
 	} else {
	    $data['canContainChildren'] = $this->_canContainChildren;
	}
	
	if (!isset($this->_description)) {
 	    $data['description'] = null;
 	} else {
	    $data['description'] = $this->_description;
	}
	
	if (!isset($this->_keywords)) {
 	    $data['keywords'] = null;
 	} else {
	    $data['keywords'] = $this->_keywords;
	}
	
	if (!isset($this->_orderBy)) {
 	    $data['orderBy'] = null;
 	} else {
	    $data['orderBy'] = $this->_orderBy;
	}
	
	if (!isset($this->_orderDirection)) {
 	    $data['orderDirection'] = null;
 	} else {
	    $data['orderDirection'] = $this->_orderDirection;
	}
	
	if (!isset($this->_ownerId)) {
 	    $data['ownerId'] = null;
 	} else {
	    $data['ownerId'] = $this->_ownerId;
	}
	
	if (!isset($this->_summary)) {
 	    $data['summary'] = null;
 	} else {
	    $data['summary'] = $this->_summary;
	}
	
	if (!isset($this->_theme)) {
 	    $data['theme'] = null;
 	} else {
	    $data['theme'] = $this->_theme;
	}
	
	if (!isset($this->_title)) {
 	    $data['title'] = null;
 	} else {
	    $data['title'] = $this->_title;
	}
	
	if (!isset($this->_viewedSinceTimestamp)) {
 	    $data['viewedSinceTimestamp'] = null;
 	} else {
	    $data['viewedSinceTimestamp'] = $this->_viewedSinceTimestamp;
	}
	
	return $data;
    }
  

    /**
     * Return the name of this class with the proper mix of uppercase and
     * lowercase (get_class() always returns lowercase)
     *
     * @return string class name
     */
    function getClassName() {
	return 'GalleryItem';
    }

    /** 
     * Return the path to the PHP file for this class, relative to the gallery2 dir
     * 
     * @return string path
     */ 
    function getClassFile() { 
        return 'modules/' .  
            basename(dirname(dirname(dirname(__FILE__)))) .  
            '/classes/GalleryItem.class'; 
    }

    
    /**
     * Get the value of canContainChildren
     *
     * @return BOOLEAN the value
     */
    function getcanContainChildren() {
 	

	if (!isset($this->_canContainChildren)) {
	    return null;
	}

	return $this->_canContainChildren;
    }

    /**
     * Set the value of canContainChildren
     *
     * @param BOOLEAN the value
     */
    function setcanContainChildren($value) {
    
	/* Set the incoming value to be a 1 or 0 */
	$value = empty($value) ? 0 : 1;
      
	/* 
	 * Convert unset values to null, to avoid generating warnings.
	 */
	$a = isset($value) ? $value : null;
	$b = isset($this->_canContainChildren) ? $this->_canContainChildren : null;

	/* 
	 * Only take action if the value actually changes, but take care not to 
	 * generate warnings for unset values.
	 */
    
	if ($a !== $b) {
      
	    $this->setModifiedFlag('canContainChildren', $value);
	    $this->_canContainChildren = $value;
	}
    }
  
    /**
     * Get the value of description
     *
     * @return TEXT the value
     */
    function getdescription() {
 	

	if (!isset($this->_description)) {
	    return null;
	}

	return $this->_description;
    }

    /**
     * Set the value of description
     *
     * @param TEXT the value
     */
    function setdescription($value) {
    
	/* 
	 * Convert unset values to null, to avoid generating warnings.
	 */
	$a = isset($value) ? $value : null;
	$b = isset($this->_description) ? $this->_description : null;

	/* 
	 * Only take action if the value actually changes, but take care not to 
	 * generate warnings for unset values.
	 */
    
	if ($a != $b) {
      
	    $this->setModifiedFlag('description', $value);
	    $this->_description = $value;
	}
    }
  
    /**
     * Get the value of keywords
     *
     * @return STRING the value
     */
    function getkeywords() {
 	

	if (!isset($this->_keywords)) {
	    return null;
	}

	return $this->_keywords;
    }

    /**
     * Set the value of keywords
     *
     * @param STRING the value
     */
    function setkeywords($value) {
    
	/* 
	 * Convert unset values to null, to avoid generating warnings.
	 */
	$a = isset($value) ? $value : null;
	$b = isset($this->_keywords) ? $this->_keywords : null;

	/* 
	 * Only take action if the value actually changes, but take care not to 
	 * generate warnings for unset values.
	 */
    
	if ($a != $b) {
      
	    $this->setModifiedFlag('keywords', $value);
	    $this->_keywords = $value;
	}
    }
  
    /**
     * Get the value of orderBy
     *
     * @return STRING the value
     */
    function getorderBy() {
 	

	if (!isset($this->_orderBy)) {
	    return null;
	}

	return $this->_orderBy;
    }

    /**
     * Set the value of orderBy
     *
     * @param STRING the value
     */
    function setorderBy($value) {
    
	/* 
	 * Convert unset values to null, to avoid generating warnings.
	 */
	$a = isset($value) ? $value : null;
	$b = isset($this->_orderBy) ? $this->_orderBy : null;

	/* 
	 * Only take action if the value actually changes, but take care not to 
	 * generate warnings for unset values.
	 */
    
	if ($a != $b) {
      
	    $this->setModifiedFlag('orderBy', $value);
	    $this->_orderBy = $value;
	}
    }
  
    /**
     * Get the value of orderDirection
     *
     * @return STRING the value
     */
    function getorderDirection() {
 	

	if (!isset($this->_orderDirection)) {
	    return null;
	}

	return $this->_orderDirection;
    }

    /**
     * Set the value of orderDirection
     *
     * @param STRING the value
     */
    function setorderDirection($value) {
    
	/* 
	 * Convert unset values to null, to avoid generating warnings.
	 */
	$a = isset($value) ? $value : null;
	$b = isset($this->_orderDirection) ? $this->_orderDirection : null;

	/* 
	 * Only take action if the value actually changes, but take care not to 
	 * generate warnings for unset values.
	 */
    
	if ($a != $b) {
      
	    $this->setModifiedFlag('orderDirection', $value);
	    $this->_orderDirection = $value;
	}
    }
  
    /**
     * Get the value of ownerId
     *
     * @return INTEGER the value
     */
    function getownerId() {
 	

	if (!isset($this->_ownerId)) {
	    return null;
	}

	return $this->_ownerId;
    }

    /**
     * Set the value of ownerId
     *
     * @param INTEGER the value
     */
    function setownerId($value) {
    
	/* Type cast the incoming value to be an integer */
	if ($value != null) {
	    $value = (int)$value;
	}
      
	/* 
	 * Convert unset values to null, to avoid generating warnings.
	 */
	$a = isset($value) ? $value : null;
	$b = isset($this->_ownerId) ? $this->_ownerId : null;

	/* 
	 * Only take action if the value actually changes, but take care not to 
	 * generate warnings for unset values.
	 */
    
	if ($a !== $b) {
      
	    $this->setModifiedFlag('ownerId', $value);
	    $this->_ownerId = $value;
	}
    }
  
    /**
     * Get the value of summary
     *
     * @return STRING the value
     */
    function getsummary() {
 	

	if (!isset($this->_summary)) {
	    return null;
	}

	return $this->_summary;
    }

    /**
     * Set the value of summary
     *
     * @param STRING the value
     */
    function setsummary($value) {
    
	/* 
	 * Convert unset values to null, to avoid generating warnings.
	 */
	$a = isset($value) ? $value : null;
	$b = isset($this->_summary) ? $this->_summary : null;

	/* 
	 * Only take action if the value actually changes, but take care not to 
	 * generate warnings for unset values.
	 */
    
	if ($a != $b) {
      
	    $this->setModifiedFlag('summary', $value);
	    $this->_summary = $value;
	}
    }
  
    /**
     * Get the value of theme
     *
     * @return STRING the value
     */
    function gettheme() {
 	

	if (!isset($this->_theme)) {
	    return null;
	}

	return $this->_theme;
    }

    /**
     * Set the value of theme
     *
     * @param STRING the value
     */
    function settheme($value) {
    
	/* 
	 * Convert unset values to null, to avoid generating warnings.
	 */
	$a = isset($value) ? $value : null;
	$b = isset($this->_theme) ? $this->_theme : null;

	/* 
	 * Only take action if the value actually changes, but take care not to 
	 * generate warnings for unset values.
	 */
    
	if ($a != $b) {
      
	    $this->setModifiedFlag('theme', $value);
	    $this->_theme = $value;
	}
    }
  
    /**
     * Get the value of title
     *
     * @return STRING the value
     */
    function gettitle() {
 	

	if (!isset($this->_title)) {
	    return null;
	}

	return $this->_title;
    }

    /**
     * Set the value of title
     *
     * @param STRING the value
     */
    function settitle($value) {
    
	/* 
	 * Convert unset values to null, to avoid generating warnings.
	 */
	$a = isset($value) ? $value : null;
	$b = isset($this->_title) ? $this->_title : null;

	/* 
	 * Only take action if the value actually changes, but take care not to 
	 * generate warnings for unset values.
	 */
    
	if ($a != $b) {
      
	    $this->setModifiedFlag('title', $value);
	    $this->_title = $value;
	}
    }
  
    /**
     * Get the value of viewedSinceTimestamp
     *
     * @return INTEGER the value
     */
    function getviewedSinceTimestamp() {
 	

	if (!isset($this->_viewedSinceTimestamp)) {
	    return null;
	}

	return $this->_viewedSinceTimestamp;
    }

    /**
     * Set the value of viewedSinceTimestamp
     *
     * @param INTEGER the value
     */
    function setviewedSinceTimestamp($value) {
    
	/* Type cast the incoming value to be an integer */
	if ($value != null) {
	    $value = (int)$value;
	}
      
	/* 
	 * Convert unset values to null, to avoid generating warnings.
	 */
	$a = isset($value) ? $value : null;
	$b = isset($this->_viewedSinceTimestamp) ? $this->_viewedSinceTimestamp : null;

	/* 
	 * Only take action if the value actually changes, but take care not to 
	 * generate warnings for unset values.
	 */
    
	if ($a !== $b) {
      
	    $this->setModifiedFlag('viewedSinceTimestamp', $value);
	    $this->_viewedSinceTimestamp = $value;
	}
    }
  
}
?>