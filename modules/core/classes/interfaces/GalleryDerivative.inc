<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @package GalleryCore
 * @subpackage ClassInterfaces
 * @version $Revision$ $Date$
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Interface class for the GalleryDerivative class.
 * (Class schema version: 1.0)
 *
 * This file is automatically generated from XML embedded in the
 * class, combined with the ClassCode.xsl file.  You should not modify
 * it by hand, as your changes will be lost next time this file is
 * rebuilt.  If you want to add more getters/setters, you should add
 * them in the core class.  If you want to change the format of this
 * file, then you should edit the XSL template.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryDerivative extends GalleryDerivative_core {
  

  
    /**
     * Return meta information about the members of this class
     *
     * @return array member => array(type, class)
     */
    function getPersistentMemberInfo() {
        $meta = parent::getPersistentMemberInfo();
    
        $meta['members']['derivativeSourceId'] = array(
            'class' => 'GalleryDerivative',
            'type' => STORAGE_TYPE_INTEGER
        );
    
        $meta['members']['derivativeOperations'] = array(
            'class' => 'GalleryDerivative',
            'type' => STORAGE_TYPE_STRING
        );
    
        $meta['members']['derivativeOrder'] = array(
            'class' => 'GalleryDerivative',
            'type' => STORAGE_TYPE_INTEGER
        );
    
        $meta['members']['derivativeSize'] = array(
            'class' => 'GalleryDerivative',
            'type' => STORAGE_TYPE_INTEGER
        );
    
        $meta['members']['derivativeType'] = array(
            'class' => 'GalleryDerivative',
            'type' => STORAGE_TYPE_INTEGER
        );
    
        $meta['members']['mimeType'] = array(
            'class' => 'GalleryDerivative',
            'type' => STORAGE_TYPE_STRING
        );
    
        return $meta;
    }

    /**
     * Get the data from this persistent object as an associative array
     *
     * @return array memberName => memberValue
     */
    function getMemberData() {
        $data = parent::getMemberData();
    
	if (!isset($this->_derivativeSourceId)) {
 	    $data['derivativeSourceId'] = null;
 	} else {
	    $data['derivativeSourceId'] = $this->_derivativeSourceId;
	}
	
	if (!isset($this->_derivativeOperations)) {
 	    $data['derivativeOperations'] = null;
 	} else {
	    $data['derivativeOperations'] = $this->_derivativeOperations;
	}
	
	if (!isset($this->_derivativeOrder)) {
 	    $data['derivativeOrder'] = null;
 	} else {
	    $data['derivativeOrder'] = $this->_derivativeOrder;
	}
	
	if (!isset($this->_derivativeSize)) {
 	    $data['derivativeSize'] = null;
 	} else {
	    $data['derivativeSize'] = $this->_derivativeSize;
	}
	
	if (!isset($this->_derivativeType)) {
 	    $data['derivativeType'] = null;
 	} else {
	    $data['derivativeType'] = $this->_derivativeType;
	}
	
	if (!isset($this->_mimeType)) {
 	    $data['mimeType'] = null;
 	} else {
	    $data['mimeType'] = $this->_mimeType;
	}
	
        return $data;
    }
  

    /**
     * Return the name of this class with the proper mix of uppercase and
     * lowercase (get_class() always returns lowercase)
     *
     * @return string class name
     */
    function getClassName() {
        return 'GalleryDerivative';
    }

    
    /**
     * Get the value of derivativeSourceId
     *
     * @return INTEGER the value
     */
    function getderivativeSourceId() {
 	

        if (!isset($this->_derivativeSourceId)) {
            return null;
        }

        return $this->_derivativeSourceId;
    }

    /**
     * Set the value of derivativeSourceId
     *
     * @param INTEGER the value
     */
    function setderivativeSourceId($value) {

        /* 
         * Convert unset values to null, to avoid generating warnings.
         */
	$a = isset($value) ? $value : null;
	$b = isset($this->_derivativeSourceId) ? $this->_derivativeSourceId : null;

    
        /* Type case the incoming value to be an integer */
        if ($value != null) {
            $value = (int)$value;
        }
      
        /* 
         * Only take action if the value actually changes, but take care not to 
         * generate warnings for unset values.
         */
    
        if ($a !== $b) {
      
            $this->_derivativeSourceId = $value;
            $this->setModifiedFlag('derivativeSourceId', MEMBER_MODIFIED);
        }
    }
  
    /**
     * Get the value of derivativeOperations
     *
     * @return STRING the value
     */
    function getderivativeOperations() {
 	

        if (!isset($this->_derivativeOperations)) {
            return null;
        }

        return $this->_derivativeOperations;
    }

    /**
     * Set the value of derivativeOperations
     *
     * @param STRING the value
     */
    function setderivativeOperations($value) {

        /* 
         * Convert unset values to null, to avoid generating warnings.
         */
	$a = isset($value) ? $value : null;
	$b = isset($this->_derivativeOperations) ? $this->_derivativeOperations : null;

    
        /* 
         * Only take action if the value actually changes, but take care not to 
         * generate warnings for unset values.
         */
    
        if ($a != $b) {
      
            $this->_derivativeOperations = $value;
            $this->setModifiedFlag('derivativeOperations', MEMBER_MODIFIED);
        }
    }
  
    /**
     * Get the value of derivativeOrder
     *
     * @return INTEGER the value
     */
    function getderivativeOrder() {
 	

        if (!isset($this->_derivativeOrder)) {
            return null;
        }

        return $this->_derivativeOrder;
    }

    /**
     * Set the value of derivativeOrder
     *
     * @param INTEGER the value
     */
    function setderivativeOrder($value) {

        /* 
         * Convert unset values to null, to avoid generating warnings.
         */
	$a = isset($value) ? $value : null;
	$b = isset($this->_derivativeOrder) ? $this->_derivativeOrder : null;

    
        /* Type case the incoming value to be an integer */
        if ($value != null) {
            $value = (int)$value;
        }
      
        /* 
         * Only take action if the value actually changes, but take care not to 
         * generate warnings for unset values.
         */
    
        if ($a !== $b) {
      
            $this->_derivativeOrder = $value;
            $this->setModifiedFlag('derivativeOrder', MEMBER_MODIFIED);
        }
    }
  
    /**
     * Get the value of derivativeSize
     *
     * @return INTEGER the value
     */
    function getderivativeSize() {
 	

        if (!isset($this->_derivativeSize)) {
            return null;
        }

        return $this->_derivativeSize;
    }

    /**
     * Set the value of derivativeSize
     *
     * @param INTEGER the value
     */
    function setderivativeSize($value) {

        /* 
         * Convert unset values to null, to avoid generating warnings.
         */
	$a = isset($value) ? $value : null;
	$b = isset($this->_derivativeSize) ? $this->_derivativeSize : null;

    
        /* Type case the incoming value to be an integer */
        if ($value != null) {
            $value = (int)$value;
        }
      
        /* 
         * Only take action if the value actually changes, but take care not to 
         * generate warnings for unset values.
         */
    
        if ($a !== $b) {
      
            $this->_derivativeSize = $value;
            $this->setModifiedFlag('derivativeSize', MEMBER_MODIFIED);
        }
    }
  
    /**
     * Get the value of derivativeType
     *
     * @return INTEGER the value
     */
    function getderivativeType() {
 	

        if (!isset($this->_derivativeType)) {
            return null;
        }

        return $this->_derivativeType;
    }

    /**
     * Set the value of derivativeType
     *
     * @param INTEGER the value
     */
    function setderivativeType($value) {

        /* 
         * Convert unset values to null, to avoid generating warnings.
         */
	$a = isset($value) ? $value : null;
	$b = isset($this->_derivativeType) ? $this->_derivativeType : null;

    
        /* Type case the incoming value to be an integer */
        if ($value != null) {
            $value = (int)$value;
        }
      
        /* 
         * Only take action if the value actually changes, but take care not to 
         * generate warnings for unset values.
         */
    
        if ($a !== $b) {
      
            $this->_derivativeType = $value;
            $this->setModifiedFlag('derivativeType', MEMBER_MODIFIED);
        }
    }
  
    /**
     * Get the value of mimeType
     *
     * @return STRING the value
     */
    function getmimeType() {
 	

        if (!isset($this->_mimeType)) {
            return null;
        }

        return $this->_mimeType;
    }

    /**
     * Set the value of mimeType
     *
     * @param STRING the value
     */
    function setmimeType($value) {

        /* 
         * Convert unset values to null, to avoid generating warnings.
         */
	$a = isset($value) ? $value : null;
	$b = isset($this->_mimeType) ? $this->_mimeType : null;

    
        /* 
         * Only take action if the value actually changes, but take care not to 
         * generate warnings for unset values.
         */
    
        if ($a != $b) {
      
            $this->_mimeType = $value;
            $this->setModifiedFlag('mimeType', MEMBER_MODIFIED);
        }
    }
  
}
?>