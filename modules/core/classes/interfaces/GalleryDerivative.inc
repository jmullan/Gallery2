<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Interface class for the GalleryDerivative class.
 * (Class schema version: 1.0)
 *
 * This file is automatically generated from XML embedded in the
 * class, combined with the ClassCode.xsl file.  You should not modify
 * it by hand, as your changes will be lost next time this file is
 * rebuilt.  If you want to add more getters/setters, you should add
 * them in the core class.  If you want to change the format of this
 * file, then you should edit the XSL template.
 *
 * @version $Id$
 * @package GalleryCoreInterfaces
 * @author Bharat Mediratta <bharat@menalto.com>
 */

class GalleryDerivative extends GalleryDerivative_core {
  

  
    /**
     * Return meta information about the members of this class
     *
     * @return array member => array(type, class)
     */
    function getPersistentMemberInfo() {
        $meta = parent::getPersistentMemberInfo();
    
        $meta['members']['derivativeSourceId'] = array(
            'class' => 'GalleryDerivative',
            'type' => STORAGE_TYPE_INTEGER
        );
    
        $meta['members']['derivativeCommands'] = array(
            'class' => 'GalleryDerivative',
            'type' => STORAGE_TYPE_STRING
        );
    
        $meta['members']['derivativeSize'] = array(
            'class' => 'GalleryDerivative',
            'type' => STORAGE_TYPE_INTEGER
        );
    
        $meta['members']['derivativeType'] = array(
            'class' => 'GalleryDerivative',
            'type' => STORAGE_TYPE_INTEGER
        );
    
        $meta['members']['derivativeMimeType'] = array(
            'class' => 'GalleryDerivative',
            'type' => STORAGE_TYPE_STRING
        );
    
        return $meta;
    }

    /**
     * Get the data from this persistent object as an associative array
     *
     * @return array memberName => memberValue
     */
    function getMemberData() {
        $data = parent::getMemberData();
        GalleryProfiler::start('GalleryPersistent::getMemberData');
    
        $data['derivativeSourceId'] = $this->_derivativeSourceId;
    
        $data['derivativeCommands'] = $this->_derivativeCommands;
    
        $data['derivativeSize'] = $this->_derivativeSize;
    
        $data['derivativeType'] = $this->_derivativeType;
    
        $data['derivativeMimeType'] = $this->_derivativeMimeType;
    
        GalleryProfiler::stop('GalleryPersistent::getMemberData');
        return $data;
    }
  
    /**
     * Get the value of derivativeSourceId
     *
     * @return INTEGER the value
     */
    function getderivativeSourceId() {
        if (!isset($this->_derivativeSourceId)) {
            return null;
        }
        return $this->_derivativeSourceId;
    }

    /**
     * Set the value of derivativeSourceId
     *
     * @param INTEGER the value
     */
    function setderivativeSourceId($value) {
    
        $value = (int)$value;
      
        $this->_derivativeSourceId = $value;
        $this->setModifiedFlag('derivativeSourceId', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of derivativeCommands
     *
     * @return STRING the value
     */
    function getderivativeCommands() {
        if (!isset($this->_derivativeCommands)) {
            return null;
        }
        return $this->_derivativeCommands;
    }

    /**
     * Set the value of derivativeCommands
     *
     * @param STRING the value
     */
    function setderivativeCommands($value) {
    
        $this->_derivativeCommands = $value;
        $this->setModifiedFlag('derivativeCommands', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of derivativeSize
     *
     * @return INTEGER the value
     */
    function getderivativeSize() {
        if (!isset($this->_derivativeSize)) {
            return null;
        }
        return $this->_derivativeSize;
    }

    /**
     * Set the value of derivativeSize
     *
     * @param INTEGER the value
     */
    function setderivativeSize($value) {
    
        $value = (int)$value;
      
        $this->_derivativeSize = $value;
        $this->setModifiedFlag('derivativeSize', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of derivativeType
     *
     * @return INTEGER the value
     */
    function getderivativeType() {
        if (!isset($this->_derivativeType)) {
            return null;
        }
        return $this->_derivativeType;
    }

    /**
     * Set the value of derivativeType
     *
     * @param INTEGER the value
     */
    function setderivativeType($value) {
    
        $value = (int)$value;
      
        $this->_derivativeType = $value;
        $this->setModifiedFlag('derivativeType', MEMBER_MODIFIED);
    }
  
    /**
     * Get the value of derivativeMimeType
     *
     * @return STRING the value
     */
    function getderivativeMimeType() {
        if (!isset($this->_derivativeMimeType)) {
            return null;
        }
        return $this->_derivativeMimeType;
    }

    /**
     * Set the value of derivativeMimeType
     *
     * @param STRING the value
     */
    function setderivativeMimeType($value) {
    
        $this->_derivativeMimeType = $value;
        $this->setModifiedFlag('derivativeMimeType', MEMBER_MODIFIED);
    }
  
}
?>