<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @package GalleryCore
 * @subpackage ClassInterfaces
 * @version $Revision$ $Date$
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Interface class for the GalleryUser class.
 * (Class schema version: 1.0)
 *
 * This file is automatically generated from XML embedded in the
 * class, combined with the ClassCode.xsl file.  You should not modify
 * it by hand, as your changes will be lost next time this file is
 * rebuilt.  If you want to add more getters/setters, you should add
 * them in the core class.  If you want to change the format of this
 * file, then you should edit the XSL template.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryUser extends GalleryUser_core {
  

  
    /**
     * Return meta information about the members of this class
     *
     * @return array member => array(type, class)
     */
    function getPersistentMemberInfo() {
        $meta = parent::getPersistentMemberInfo();
    
        $meta['members']['userName'] = array(
            'class' => 'GalleryUser',
            'type' => STORAGE_TYPE_STRING
        );
    
        $meta['members']['fullName'] = array(
            'class' => 'GalleryUser',
            'type' => STORAGE_TYPE_STRING
        );
    
        $meta['members']['hashedPassword'] = array(
            'class' => 'GalleryUser',
            'type' => STORAGE_TYPE_STRING
        );
    
        $meta['members']['email'] = array(
            'class' => 'GalleryUser',
            'type' => STORAGE_TYPE_STRING
        );
    
        $meta['members']['language'] = array(
            'class' => 'GalleryUser',
            'type' => STORAGE_TYPE_STRING
        );
    
        return $meta;
    }

    /**
     * Get the data from this persistent object as an associative array
     *
     * @return array memberName => memberValue
     */
    function getMemberData() {
        $data = parent::getMemberData();
        GalleryProfiler::start('modules.core.classes.GalleryPersistent::getMemberData');
    
        if (!isset($this->_userName)) {
            $data['userName'] = null;
        } else {
            $data['userName'] = $this->_userName;
        }
    
        if (!isset($this->_fullName)) {
            $data['fullName'] = null;
        } else {
            $data['fullName'] = $this->_fullName;
        }
    
        if (!isset($this->_hashedPassword)) {
            $data['hashedPassword'] = null;
        } else {
            $data['hashedPassword'] = $this->_hashedPassword;
        }
    
        if (!isset($this->_email)) {
            $data['email'] = null;
        } else {
            $data['email'] = $this->_email;
        }
    
        if (!isset($this->_language)) {
            $data['language'] = null;
        } else {
            $data['language'] = $this->_language;
        }
    
        GalleryProfiler::stop('modules.core.classes.GalleryPersistent::getMemberData');
        return $data;
    }
  

    /**
     * Return the name of this class with the proper mix of uppercase and
     * lowercase (get_class() always returns lowercase)
     *
     * @return string class name
     */
    function getClassName() {
        return 'GalleryUser';
    }

    
    /**
     * Get the value of userName
     *
     * @return STRING the value
     */
    function getuserName() {
        if (!isset($this->_userName)) {
            return null;
        }
        return $this->_userName;
    }

    /**
     * Set the value of userName
     *
     * @param STRING the value
     */
    function setuserName($value) {

        /* 
         * Convert unset values to null, to avoid generating warnings.
         */
	$a = isset($value) ? $value : null;
	$b = isset($this->_userName) ? $this->_userName : null;

    
        /* 
         * Only take action if the value actually changes, but take care not to 
         * generate warnings for unset values.
         */
    
        if ($a != $b) {
      
            $this->_userName = $value;
            $this->setModifiedFlag('userName', MEMBER_MODIFIED);
        }
    }
  
    /**
     * Get the value of fullName
     *
     * @return STRING the value
     */
    function getfullName() {
        if (!isset($this->_fullName)) {
            return null;
        }
        return $this->_fullName;
    }

    /**
     * Set the value of fullName
     *
     * @param STRING the value
     */
    function setfullName($value) {

        /* 
         * Convert unset values to null, to avoid generating warnings.
         */
	$a = isset($value) ? $value : null;
	$b = isset($this->_fullName) ? $this->_fullName : null;

    
        /* 
         * Only take action if the value actually changes, but take care not to 
         * generate warnings for unset values.
         */
    
        if ($a != $b) {
      
            $this->_fullName = $value;
            $this->setModifiedFlag('fullName', MEMBER_MODIFIED);
        }
    }
  
    /**
     * Get the value of hashedPassword
     *
     * @return STRING the value
     */
    function gethashedPassword() {
        if (!isset($this->_hashedPassword)) {
            return null;
        }
        return $this->_hashedPassword;
    }

    /**
     * Set the value of hashedPassword
     *
     * @param STRING the value
     */
    function sethashedPassword($value) {

        /* 
         * Convert unset values to null, to avoid generating warnings.
         */
	$a = isset($value) ? $value : null;
	$b = isset($this->_hashedPassword) ? $this->_hashedPassword : null;

    
        /* 
         * Only take action if the value actually changes, but take care not to 
         * generate warnings for unset values.
         */
    
        if ($a != $b) {
      
            $this->_hashedPassword = $value;
            $this->setModifiedFlag('hashedPassword', MEMBER_MODIFIED);
        }
    }
  
    /**
     * Get the value of email
     *
     * @return STRING the value
     */
    function getemail() {
        if (!isset($this->_email)) {
            return null;
        }
        return $this->_email;
    }

    /**
     * Set the value of email
     *
     * @param STRING the value
     */
    function setemail($value) {

        /* 
         * Convert unset values to null, to avoid generating warnings.
         */
	$a = isset($value) ? $value : null;
	$b = isset($this->_email) ? $this->_email : null;

    
        /* 
         * Only take action if the value actually changes, but take care not to 
         * generate warnings for unset values.
         */
    
        if ($a != $b) {
      
            $this->_email = $value;
            $this->setModifiedFlag('email', MEMBER_MODIFIED);
        }
    }
  
    /**
     * Get the value of language
     *
     * @return STRING the value
     */
    function getlanguage() {
        if (!isset($this->_language)) {
            return null;
        }
        return $this->_language;
    }

    /**
     * Set the value of language
     *
     * @param STRING the value
     */
    function setlanguage($value) {

        /* 
         * Convert unset values to null, to avoid generating warnings.
         */
	$a = isset($value) ? $value : null;
	$b = isset($this->_language) ? $this->_language : null;

    
        /* 
         * Only take action if the value actually changes, but take care not to 
         * generate warnings for unset values.
         */
    
        if ($a != $b) {
      
            $this->_language = $value;
            $this->setModifiedFlag('language', MEMBER_MODIFIED);
        }
    }
  
}
?>