<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Interface class for the GalleryEntity class.
 * (Class schema version: 1.0)
 *
 * This file is automatically generated from XML embedded in the
 * class, combined with the ClassCode.xsl file.  You should not modify
 * it by hand, as your changes will be lost next time this file is
 * rebuilt.  If you want to add more getters/setters, you should add
 * them in the core class.  If you want to change the format of this
 * file, then you should edit the XSL template.
 *
 * @version $Id$
 * @package GalleryCoreInterfaces
 * @author Bharat Mediratta <bharat@menalto.com>
 */

class GalleryEntity extends GalleryEntity_core {
  

  
    /**
     * Return meta information about the members of this class
     *
     * @return array member => array(type, class)
     */
    function getPersistentMemberInfo() {
        $meta = parent::getPersistentMemberInfo();
    
        $meta['members']['id'] = array(
            'class' => 'GalleryEntity',
            'type' => STORAGE_TYPE_INTEGER | STORAGE_TYPE_ID
        );
    
        $meta['members']['creationTimestamp'] = array(
            'class' => 'GalleryEntity',
            'type' => STORAGE_TYPE_TIMESTAMP
        );
    
        $meta['members']['dataVersion'] = array(
            'class' => 'GalleryEntity',
            'type' => STORAGE_TYPE_INTEGER
        );
    
        $meta['members']['modificationTimestamp'] = array(
            'class' => 'GalleryEntity',
            'type' => STORAGE_TYPE_TIMESTAMP
        );
    
        $meta['members']['serialNumber'] = array(
            'class' => 'GalleryEntity',
            'type' => STORAGE_TYPE_INTEGER
        );
    
        $meta['members']['entityType'] = array(
            'class' => 'GalleryEntity',
            'type' => STORAGE_TYPE_STRING
        );
    
        return $meta;
    }

    /**
     * Get the data from this persistent object as an associative array
     *
     * @return array memberName => memberValue
     */
    function getMemberData() {
        $data = parent::getMemberData();
        GalleryProfiler::start('GalleryPersistent::getMemberData');
    
        $data['id'] = $this->_id;
    
        $data['creationTimestamp'] = $this->_creationTimestamp;
    
        $data['dataVersion'] = $this->_dataVersion;
    
        $data['modificationTimestamp'] = $this->_modificationTimestamp;
    
        $data['serialNumber'] = $this->_serialNumber;
    
        $data['entityType'] = $this->_entityType;
    
        GalleryProfiler::stop('GalleryPersistent::getMemberData');
        return $data;
    }
  
    /**
     * Get the value of id
     *
     * @return INTEGER the value
     */
    function getid() {
        if (!isset($this->_id)) {
            return null;
        }
        return $this->_id;
    }

    /**
     * Set the value of id
     *
     * @param INTEGER the value
     */
    function setid($value) {
    
        $value = (int)$value;
      

        /* Only take action if the value actually changes */
        if (!isset($this->_id) || $this->_id != $value) {
            $this->_id = $value;
            $this->setModifiedFlag('id', MEMBER_MODIFIED);
        }
    }
  
    /**
     * Get the value of creationTimestamp
     *
     * @return TIMESTAMP the value
     */
    function getcreationTimestamp() {
        if (!isset($this->_creationTimestamp)) {
            return null;
        }
        return $this->_creationTimestamp;
    }

    /**
     * Set the value of creationTimestamp
     *
     * @param TIMESTAMP the value
     */
    function setcreationTimestamp($value) {
    

        /* Only take action if the value actually changes */
        if (!isset($this->_creationTimestamp) || $this->_creationTimestamp != $value) {
            $this->_creationTimestamp = $value;
            $this->setModifiedFlag('creationTimestamp', MEMBER_MODIFIED);
        }
    }
  
    /**
     * Get the value of dataVersion
     *
     * @return INTEGER the value
     */
    function getdataVersion() {
        if (!isset($this->_dataVersion)) {
            return null;
        }
        return $this->_dataVersion;
    }

    /**
     * Set the value of dataVersion
     *
     * @param INTEGER the value
     */
    function setdataVersion($value) {
    
        $value = (int)$value;
      

        /* Only take action if the value actually changes */
        if (!isset($this->_dataVersion) || $this->_dataVersion != $value) {
            $this->_dataVersion = $value;
            $this->setModifiedFlag('dataVersion', MEMBER_MODIFIED);
        }
    }
  
    /**
     * Get the value of modificationTimestamp
     *
     * @return TIMESTAMP the value
     */
    function getmodificationTimestamp() {
        if (!isset($this->_modificationTimestamp)) {
            return null;
        }
        return $this->_modificationTimestamp;
    }

    /**
     * Set the value of modificationTimestamp
     *
     * @param TIMESTAMP the value
     */
    function setmodificationTimestamp($value) {
    

        /* Only take action if the value actually changes */
        if (!isset($this->_modificationTimestamp) || $this->_modificationTimestamp != $value) {
            $this->_modificationTimestamp = $value;
            $this->setModifiedFlag('modificationTimestamp', MEMBER_MODIFIED);
        }
    }
  
    /**
     * Get the value of serialNumber
     *
     * @return INTEGER the value
     */
    function getserialNumber() {
        if (!isset($this->_serialNumber)) {
            return null;
        }
        return $this->_serialNumber;
    }

    /**
     * Set the value of serialNumber
     *
     * @param INTEGER the value
     */
    function setserialNumber($value) {
    
        $value = (int)$value;
      

        /* Only take action if the value actually changes */
        if (!isset($this->_serialNumber) || $this->_serialNumber != $value) {
            $this->_serialNumber = $value;
            $this->setModifiedFlag('serialNumber', MEMBER_MODIFIED);
        }
    }
  
    /**
     * Get the value of entityType
     *
     * @return STRING the value
     */
    function getentityType() {
        if (!isset($this->_entityType)) {
            return null;
        }
        return $this->_entityType;
    }

    /**
     * Set the value of entityType
     *
     * @param STRING the value
     */
    function setentityType($value) {
    

        /* Only take action if the value actually changes */
        if (!isset($this->_entityType) || $this->_entityType != $value) {
            $this->_entityType = $value;
            $this->setModifiedFlag('entityType', MEMBER_MODIFIED);
        }
    }
  
}
?>