<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Theme handling class. It provides functions to create an user-interface 
 * based on a customizable theme.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryTheme {

    
    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The theme directory
     *
     * @var string $_baseDir;
     * @access private
     */
    var $_baseDir;

    /**
     * The theme url
     *
     * @var string $_baseUrl;
     * @access private
     */
    var $_baseUrl;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Constructor
     *
     * @param string the path to the theme directory
     */
    function GalleryTheme($themeDir) {
	$this->_baseDir = $themeDir;
	$this->_baseUrl = GalleryUtilities::convertPathToUrl($themeDir) . '/';
    }

    /**
     * Get the theme url.
     * @return string the theme url
     */
    function getBaseUrl() {
	return $this->_baseUrl;
    }

    /**
     * Get the theme directory.
     * @return string the theme directory
     */
    function getBaseDir() {
	return $this->_baseDir;
    }

    /**
     * Get an array of available theme-names
     *
     * @static
     * @return array string name of the themes
     */
     function getThemeList() {
	global $gallery;

	$platform = $gallery->getPlatform();
	$themeList = array();
	$themeDir = $gallery->getConfig('code.gallery.themes');
	if ($dir = $platform->opendir($themeDir)) {
	    while (($subdir = readdir($dir)) !== false) {
		if ($subdir{0} == '.' || $subdir == 'CVS') {
		    continue;
		}

		if ($platform->is_dir("$themeDir$subdir")) {
		    $file = "$themeDir$subdir/theme.inc";
		    if ($platform->file_exists($file)) {
			$themeList[] = $subdir;
		    }
		}
	    }
	    closedir($dir);
	}
	return $themeList;
    }

    /**
     * Initialize this instance to use the theme specified.
     *
     * @param themeName the name of a theme in the themes directory.
     * @return array object GalleryStatus a status code
     *               object a GalleryTheme instance
     */
    function loadTheme($themeName=null) {
	global $gallery;

	GalleryProfiler::start('modules.core.classes.GalleryTheme::loadTheme');
	
	/* If we don't have a theme name then use the default theme. */
	if (empty($themeName)) {
	    list ($ret, $themeName) = $gallery->getModuleParameter('core', 'default.theme');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	$platform = $gallery->getPlatform();
	$themeDir = $gallery->getConfig('code.gallery.themes') . $themeName . '/';

	$themeClass = $themeDir . 'theme.inc';
	if ($platform->file_exists($themeClass)) {
	    require_once($themeClass);

	    /*
	     * Expect the theme class name to be the same as the theme
	     * name plus "Theme"
	     */
	    $themeClassName = $themeName . "Theme";
	    if (!class_exists($themeClassName)) {
		if ($gallery->getDebug()) {
		    $gallery->debug("Theme $themeName must have a class named '$themeClassName'");
		}
		return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null);
	    }

	    $theme = new $themeClassName($themeDir);
	    if (!GalleryUtilities::isA($theme, 'GalleryTheme')) {
		if ($gallery->getDebug()) {
		    $gallery->debug("Theme $themeName is not an instance of GalleryTheme");
		}
		return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null);
	    }
	} else {
	    if ($gallery->getDebug()) {
		$gallery->debug("Theme $themeName is missing theme.inc");
	    }
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null);
	}
	GalleryProfiler::stop('modules.core.classes.GalleryTheme::loadTheme');

	return array(GalleryStatus::success(), $theme);
    }
    
    /*************************************************************
     * Built-in theme methods
     *************************************************************/

    /**
     * Return an HTML form 
     *
     * @param array template context data
     * @param string HTML content to go inside the form
     * @return string a complete HTML form
     */
    function form($context, $content) {
	global $gallery;

	$params = $context['params'];
	/* Embed the session key, if we're not using cookies */
	$session =& $gallery->getSession();
	if (!($session->isUsingCookies())) {
	    list ($sessionKey, $sessionId) = $session->getSessionDescriptor();
	    $params[$sessionKey] = $sessionId;
	}

	/* Preprocessing */
	if (empty($params['method'])) {
	    $params['method'] = 'post';
	}
	$urlGenerator = $gallery->getUrlGenerator();
	$params['action'] = $urlGenerator->generateUrl();
	$params['accept-charset'] = 'UTF-8';

	/* Prepare the tag */
	$results = '<form';
	$actionParams = array();
	foreach ($params as $caseSensitiveKey => $value) {

	    if (!strncmp($caseSensitiveKey, 'action_', 7)) {
		$actionParams[substr($caseSensitiveKey, 7)] = $value;
		continue;
	    }
	    
	    /* Force the key to lower case */
	    $key = strtolower($caseSensitiveKey);
	    switch($key) {
	    case 'action':
	    case 'method':
	    case 'enctype':
	    case 'accept':
	    case 'name':
	    case 'onsubmit':
	    case 'onreset':
	    case 'accept-charset':
		$results .= " $key=\"$value\"";
		break;

		
	    /* Generic attributes */
	    case 'id':
	    case 'class':
	    case 'style':
	    case 'title':
	    case 'lang':
	    case 'dir':
	    case 'onclick':
	    case 'ondblclick':
	    case 'onmousedown':
	    case 'onmouseup':
	    case 'onmouseover':
	    case 'onmouseout':
	    case 'onkeypress':
	    case 'onkeydown':
	    case 'onkeyup':
		$results .= " $key=\"$value\"";
		break;
	    }
	}
	$results .= ">\n";

	/*
	 * Add the "return" parameter to the action params if it exists
	 */
	if (GalleryUtilities::hasRequestVariable('return')) {
	    $actionParams['return'] = GalleryUtilities::getRequestVariables('return');
	}

	foreach ($actionParams as $key => $value) {
	    $results .= sprintf('<input type="hidden" name="%s" value="%s">',
				GALLERY_FORM_VARIABLE_PREFIX . $key, $value);
	}
	
	$results .= $content;
	$results .= "\n</form>\n";

	return $results;
    }

    /**
     * Return a themed <input> tag
     *
     * @param array template context data
     * @return HTML content
     */
    function input($context, $content=null) {
	$params = $context['params'];
	
	/* Do some preprocessing */
	$params['value'] = trim($content);
	if (isset($params['name'])) {
	    $params['name'] = GALLERY_FORM_VARIABLE_PREFIX . $params['name'];
	}
	if (empty($params['type'])) {
	    $params['type'] = 'text';
	}

	/* Prepare the tag */
	$results = '<input';
	foreach ($params as $key => $value) {
	    /* Force the key to lower case */
	    $key = strtolower($key);
	    switch($key) {
	    case 'type':
	    case 'name':
	    case 'size':
	    case 'maxlength':
	    case 'src':
	    case 'alt':
	    case 'usemap':
	    case 'tabindex':
	    case 'accesskey':
	    case 'onfocus':
	    case 'onblur':
	    case 'onchange':
	    case 'onselect':
	    case 'accept':
		$results .= " $key=\"$value\"";
		break;

	    case 'disabled':
	    case 'readonly':
	    case 'ismap':
		$results .= " $key";
		break;

	    case 'value':
		if ($params['type'] == 'checkbox' || $params['type'] == 'radio') {
		    if (!empty($value)) {
			$results .= ' checked';
		    }
		} else {
		    $results .= " value=\"$value\"";
		}
		break;

	    /* Generic attributes */
	    case 'id':
	    case 'class':
	    case 'style':
	    case 'title':
	    case 'lang':
	    case 'dir':
	    case 'onclick':
	    case 'ondblclick':
	    case 'onmousedown':
	    case 'onmouseup':
	    case 'onmouseover':
	    case 'onmouseout':
	    case 'onkeypress':
	    case 'onkeydown':
	    case 'onkeyup':
		$results .= " $key=\"$value\"";
		break;
	    }
	}
	$results .= '>';

	return $results;
    }

    /**
     * Return a themed <select> .. </select> block
     *
     * @param array template context data
     * @param string content to go inside the block
     * @return HTML content
     */
    function select($context, $content) {
	$params = $context['params'];
	
	/* Translate the form variable name */
	if (isset($params['name'])) {
	    $params['name'] = GALLERY_FORM_VARIABLE_PREFIX . $params['name'];
	}

	/* Prepare the tag */
	$results = '<select';
	foreach ($params as $key => $value) {
	    /* Force the key to lower case */
	    $key = strtolower($key);
	    switch($key) {
	    case 'name':
	    case 'size':
	    case 'tabindex':
	    case 'onfocus':
	    case 'onblur':
	    case 'onchange':
		$results .= " $key=\"$value\"";
		break;

	    case 'multiple':
	    case 'disabled':
		$results .= " $key";
		break;

	    /* Generic attributes */
	    case 'id':
	    case 'class':
	    case 'style':
	    case 'title':
	    case 'lang':
	    case 'dir':
	    case 'onclick':
	    case 'ondblclick':
	    case 'onmousedown':
	    case 'onmouseup':
	    case 'onmouseover':
	    case 'onmouseout':
	    case 'onkeypress':
	    case 'onkeydown':
	    case 'onkeyup':
		$results .= " $key=\"$value\"";
		break;
	    }
	}
	$results .= '>';
	$results .= $content;
	$results .= '</select>';

	return $results;
    }
    
    /**
     * Return a themed <textarea> .. </textarea> block
     *
     * @param array template context data
     * @param string content to go inside the block
     * @return HTML content
     */
    function textarea($context, $content) {
	$params = $context['params'];
	
	/* Translate the form variable name */
	if (isset($params['name'])) {
	    $params['name'] = GALLERY_FORM_VARIABLE_PREFIX . $params['name'];
	}

	/* Prepare the tag */
	$results = '<textarea';
	foreach ($params as $key => $value) {
	    /* Force the key to lower case */
	    $key = strtolower($key);
	    switch($key) {
	    case 'name':
	    case 'rows':
	    case 'cols':
	    case 'tabindex':
	    case 'accesskey':
	    case 'onfocus':
	    case 'onblur':
	    case 'onselect':
	    case 'onchange':
		$results .= " $key=\"$value\"";
		break;

	    case 'disabled':
	    case 'readonly':
		$results .= " $key";
		break;

	    /* Generic attributes */
	    case 'id':
	    case 'class':
	    case 'style':
	    case 'title':
	    case 'lang':
	    case 'dir':
	    case 'onclick':
	    case 'ondblclick':
	    case 'onmousedown':
	    case 'onmouseup':
	    case 'onmouseover':
	    case 'onmouseout':
	    case 'onkeypress':
	    case 'onkeydown':
	    case 'onkeyup':
		$results .= " $key=\"$value\"";
		break;
	    }
	}
	$results .= '>';
	$results .= $content;
	$results .= '</textarea>';

	return $results;
    }

    /**
     * Return a themed <a> .. </a> block
     *
     * @param array template context data
     * @param string content to go inside the block
     * @return HTML content
     */
    function link($context, $content) {
	global $gallery;
	$params = $context['params'];

	/* All the user to pass in bulk params */
	if (isset($params['params'])) {
	    foreach ($params['params'] as $key => $value) {
		$params['url_' . $key] = $value;
	    }
	    unset($params['params']);
	}
	
	/* Translate the form variable name */
	if (isset($params['name'])) {
	    $params['name'] = GALLERY_FORM_VARIABLE_PREFIX . $params['name'];
	}

	/* Prepare the tag */
	$results = '<a';
	$hrefParams = array();
	$javascript = null;
	foreach ($params as $origKey => $value) {

	    if (!strncmp($origKey, 'url_', 4)) {
		$hrefParams[substr($origKey, 4)] = $value;
		continue;
	    }
	    
	    /* Force the key to lower case */
	    $key = strtolower($origKey);
	    
	    switch($key) {
	    case 'charset':
	    case 'type':
	    case 'name':
	    case 'hreflang':
	    case 'rel':
	    case 'rev':
	    case 'accesskey':
	    case 'shape':
	    case 'coords':
	    case 'tabindex':
	    case 'onfocus':
	    case 'onblur':
		$results .= " $key=\"$value\"";
		break;

	    /* Generic attributes */
	    case 'id':
	    case 'class':
	    case 'style':
	    case 'title':
	    case 'lang':
	    case 'dir':
	    case 'onclick':
	    case 'ondblclick':
	    case 'onmousedown':
	    case 'onmouseup':
	    case 'onmouseover':
	    case 'onmouseout':
	    case 'onkeypress':
	    case 'onkeydown':
	    case 'onkeyup':
		$results .= " $key=\"$value\"";
		break;

	    case 'javascript':
		$javascript = $value;
		break;
	    }
	}

	if ($javascript) {
	    $href = "javascript:$javascript";
	} else {
	    $urlGenerator = $gallery->getUrlGenerator();
	    $href = $urlGenerator->generateUrl($hrefParams);
	}
	$results .= " href=\"$href\"";
	
	$results .= '>';
	$results .= trim($content);
	$results .= '</a>';

	return $results;
    }

    /**
     * image theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param int maximum dimension on a side
     * @return string HTML content
     */
    function image($context, $class=null, $maxSize=null) {
 	global $gallery;

	$params = $context['params'];

	/* Ask the entity to render itself in HTML */
	list ($ret, $item) = $gallery->loadEntitiesById($params['item']['id']);
	if ($ret->isError()) {
	    // XXX: is there a more graceful way to handle this?
	    return '[Render error: missing item]';
	}
	
	list ($ret, $entity) = $gallery->loadEntitiesById($params['image']['id']);
	if ($ret->isError()) {
	    // XXX: is there a more graceful way to handle this?
	    return '[Render error: missing entity]';
	}

	if ($entity->getId() == $item->getId()) {
	    $html = $item->render('HTML', array('class' => $class, 'maxSize' => $maxSize));
	} else {
	    $html = $entity->render('HTML', $item, 
				    array('class' => $class, 'maxSize' => $maxSize));
	}
	if (empty($html)) {
	    /*
	     * XXX: We should let the {g->image} tag provide some kind of fallback in case the image can't
	     * be rendered.
	     */
	    return '[Render error: Unable to render]';
	}

	return $html;
     }

    /*************************************************************
     * Standard theme methods
     *************************************************************/
    /**
     * style theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param string HTML content 
     * @return string HTML content
     */
     function style($context) {
         trigger_error('Undefined theme function: style', E_USER_ERROR);
     }

    /**
     * success theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param string HTML content 
     * @return string HTML content
     */
     function success($context, $content) {
         trigger_error('Undefined theme function: success', E_USER_ERROR);
     }

    /**
     * warning theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param string HTML content 
     * @return string HTML content
     */
     function warning($context, $content) {
         trigger_error('Undefined theme function: warning', E_USER_ERROR);
     }

    /**
     * error theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param string HTML content 
     * @return string HTML content
     */
     function error($context, $content) {
         trigger_error('Undefined theme function: error', E_USER_ERROR);
     }

    /**
     * listing theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => item HTML content)
     * @return string HTML content
     */
     function listing($context, $item_array) {
         trigger_error('Undefined theme function: listing', E_USER_ERROR);
     }

    /**
     * breadcrumb theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => item HTML content)
     * @return string HTML content
     */
     function breadcrumb($context, $item_array) {
         trigger_error('Undefined theme function: breadcrumb', E_USER_ERROR);
     }

    /**
     * linkset theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => title HTML content)
     * @param array ("params" => array, "content" => item HTML content)
     * @return string HTML content
     */
     function linkset($context, $title, $item_array) {
         trigger_error('Undefined theme function: linkset', E_USER_ERROR);
     }

    /**
     * actionset theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => title HTML content)
     * @param array ("params" => array, "content" => actionitem HTML content)
     * @return string HTML content
     */
     function actionset($context, $title, $actionitem_array) {
         trigger_error('Undefined theme function: actionset', E_USER_ERROR);
     }

    /**
     * infoset theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => item HTML content)
     * @return string HTML content
     */
     function infoset($context, $item_array) {
         trigger_error('Undefined theme function: infoset', E_USER_ERROR);
     }

    /**
     * tabset theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => item HTML content)
     * @return string HTML content
     */
     function tabset($context, $item_array) {
         trigger_error('Undefined theme function: tabset', E_USER_ERROR);
     }

    /**
     * table theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => row HTML content)
     * @return string HTML content
     */
     function table($context, $row_array) {
         trigger_error('Undefined theme function: table', E_USER_ERROR);
     }

    /**
     * row theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => column HTML content)
     * @return string HTML content
     */
     function row($context, $column_array) {
         trigger_error('Undefined theme function: row', E_USER_ERROR);
     }

    /**
     * main theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => breadcrumb HTML content)
     * @param array ("params" => array, "content" => sidebar HTML content)
     * @param array ("params" => array, "content" => pagebox HTML content)
     * @return string HTML content
     */
     function main($context, $breadcrumb, $sidebar_array, $pagebox) {
         trigger_error('Undefined theme function: main', E_USER_ERROR);
     }

    /**
     * sidebar theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => element HTML content)
     * @return string HTML content
     */
     function sidebar($context, $element_array) {
         trigger_error('Undefined theme function: sidebar', E_USER_ERROR);
     }

    /**
     * itemthumbnail theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => title HTML content)
     * @param array ("params" => array, "content" => description HTML content)
     * @param array ("params" => array, "content" => media HTML content)
     * @param array ("params" => array, "content" => infoset HTML content)
     * @param array ("params" => array, "content" => actionset HTML content)
     * @return string HTML content
     */
     function itemthumbnail($context, $title, $description, $media, $infoset, $actionset) {
         trigger_error('Undefined theme function: itemthumbnail', E_USER_ERROR);
     }

    /**
     * itemview theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => title HTML content)
     * @param array ("params" => array, "content" => description HTML content)
     * @param array ("params" => array, "content" => media HTML content)
     * @param array ("params" => array, "content" => footer HTML content)
     * @return string HTML content
     */
     function itemview($context, $title, $description, $media, $footer) {
         trigger_error('Undefined theme function: itemview', E_USER_ERROR);
     }

    /**
     * tabbedbox theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => tabset HTML content)
     * @param array ("params" => array, "content" => footer HTML content)
     * @param array ("params" => array, "content" => element HTML content)
     * @return string HTML content
     */
     function tabbedbox($context, $tabset, $footer, $element_array) {
         trigger_error('Undefined theme function: tabbedbox', E_USER_ERROR);
     }

    /**
     * box theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => title HTML content)
     * @param array ("params" => array, "content" => subtitle HTML content)
     * @param array ("params" => array, "content" => description HTML content)
     * @param array ("params" => array, "content" => footer HTML content)
     * @param array ("params" => array, "content" => element HTML content)
     * @return string HTML content
     */
     function box($context, $title, $subtitle, $description, $footer, $element_array) {
         trigger_error('Undefined theme function: box', E_USER_ERROR);
     }

    /**
     * pagebox theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => element HTML content)
     * @return string HTML content
     */
     function pagebox($context, $element_array) {
         trigger_error('Undefined theme function: pagebox', E_USER_ERROR);
     }

    /**
     * banner theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => title HTML content)
     * @param array ("params" => array, "content" => description HTML content)
     * @param array ("params" => array, "content" => element HTML content)
     * @return string HTML content
     */
     function banner($context, $title, $description, $element_array) {
         trigger_error('Undefined theme function: banner', E_USER_ERROR);
     }

    /**
     * item theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => title HTML content)
     * @param array ("params" => array, "content" => subtitle HTML content)
     * @return string HTML content
     */
     function item($context, $title, $subtitle) {
         trigger_error('Undefined theme function: item', E_USER_ERROR);
     }

    /**
     * actionitem theme method
     * 
     * @param array ("params" => ..., "stack" => ...)
     * @param array ("params" => array, "content" => title HTML content)
     * @param array ("params" => array, "content" => value HTML content)
     * @return string HTML content
     */
     function actionitem($context, $title, $value) {
         trigger_error('Undefined theme function: actionitem', E_USER_ERROR);
     }

}
?>
