<?php
/*
 * $RCSfile
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Representation of the one-to-many mapping between a module and its
 * parameters
 *
 * @g2 <class-name>GalleryModuleParameterMap</class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 *
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class GalleryModuleParameterMap_core {

    /**
     * @g2 <map>
     * @g2   <member>
     * @g2     <member-name>moduleName</member-name>
     * @g2     <member-type>STRING</member-type>
     * @g2     <member-size>MEDIUM</member-size>
     * @g2   </member>
     * @g2   <member>
     * @g2     <member-name>parameterName</member-name>
     * @g2     <member-type>STRING</member-type>
     * @g2     <member-size>MEDIUM</member-size>
     * @g2   </member>
     * @g2   <member>
     * @g2     <member-name>parameterValue</member-name>
     * @g2     <member-type>STRING</member-type>
     * @g2     <member-size>LARGE</member-size>
     * @g2   </member>
     * @g2   <key>
     * @g2     <member-name>moduleName</member-name>
     * @g2     <member-name>parameterName</member-name>
     * @g2   </key>
     * @g2 </map>
     */

    /**
     * Add a new parameter for this module
     *
     * @param string the name of the module
     * @param string the name of the parameter
     * @param string the value of the parameter
     * @return object GalleryStatus a status code
     */
    function addParameter($moduleName, $parameterName, $parameterValue) {
	if (empty($moduleName) || empty($parameterName)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	$ret = GalleryModuleParameterMap::addMapEntry(
	    array('moduleName' => $moduleName,
		  'parameterName' => $parameterName,
		  'parameterValue' => $parameterValue));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Update an existing parameter for this module
     *
     * @param string the name of the module
     * @param string the name of the parameter
     * @param string the value of the parameter
     * @return object GalleryStatus a status code
     */
    function updateParameter($moduleName, $parameterName, $parameterValue) {
	if (empty($moduleName) || empty($parameterName)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	$ret = GalleryModuleParameterMap::updateMapEntry(
	    array('moduleName' => $moduleName,
		  'parameterName' => $parameterName),
	    array('parameterValue' => $parameterValue));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Get all the parameters for this module
     *
     * @param string the name of the module
     * @return array object GalleryStatus a status code
     *               array (parameterName => parameterValue)
     */
    function fetchAllParameters($moduleName) {
	global $gallery;
	
	if (empty($moduleName)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER,
					      __FILE__, __LINE__), null);
	}

	$query = '
        SELECT
          [GalleryModuleParameterMap::parameterName],
          [GalleryModuleParameterMap::parameterValue]
        FROM
          [GalleryModuleParameterMap]
        WHERE
          [GalleryModuleParameterMap::moduleName] = ?
        ';

	list ($ret, $searchResults) = $gallery->search($query, array($moduleName));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$data = array();
	while ($result = $searchResults->nextResult()) {
	    $data[$result[0]] = $result[1];
	}
	return array($ret, $data);
	
    }

    /**
     * Remove a parameter for this module
     *
     * @param string the name of the module
     * @param string the name of the parameter
     * @return object GalleryStatus a status code
     */
    function removeParameter($moduleName, $parameterName) {
	if (empty($moduleName) || empty($parameterName)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	$ret = GalleryModuleParameterMap::removeMapEntry(array('moduleName' => $moduleName,
							       'parameterName' => $parameterName));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }
}

include(dirname(__FILE__) . '/interfaces/GalleryModuleParameterMap.inc');
?>
