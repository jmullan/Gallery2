<?php
/*
 * $RCSfile
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Load the parent class
 */
require_once(dirname(__FILE__) . '/GalleryEntity.class');

/**
 * An entity that can be the child of another entity.
 *
 * This object performs all of the basic functions required in all
 * Gallery objects.
 *
 * @g2 <class-name>GalleryChildEntity</class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 * @g2 <requires-id/>
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryChildEntity_core extends GalleryEntity {

    /**
     * The id of the parent of this GalleryChildEntity
     *
     * @g2 <member>
     * @g2   <member-name>parentId</member-name>
     * @g2   <member-type>INTEGER</member-type>
     * @g2   <indexed/>
     * @g2 </member>
     *
     * @var int $_parentId
     * @access private
     */
    var $_parentId;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Create this item in our persistent store
     *
     * @param int the id of the GalleryItem parent
     * @return object GalleryStatus a status code
     */
    function create($parentId) {
	global $gallery;

	if (empty($parentId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	$ret = parent::create();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Set the parent id */
	$this->setParentId($parentId);

	return GalleryStatus::success();
    }

    /**
     * Move this item to a new parent
     *
     * @param int the id of the GalleryItem parent
     * @return object GalleryStatus a status code
     */
    function move($newParentId) {
	global $gallery;

	if (empty($newParentId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/* Set the new parent id */
	$this->setParentId($newParentId);

	return GalleryStatus::success();
    }

    /**
     * Create a root level item
     *
     * This is a special case; every other GalleryChildEntry will have a
     * parent.  But the root items don't have one.
     */
    function createRoot() {
	return parent::create();
    }
    
    /**
     * Get the parent instance
     *
     * @return array object GalleryStatus a status code
     *               object GalleryItem the parent item
     */
    function fetchParent() {
	global $gallery;
	return $gallery->loadEntitiesById($this->getParentId());
    }

    /**
     * Get a flat list of the hierarchy of all children of an item
     *
     * This is handy when you need a complete tree of certain entities,
     * but don't want (or can't) to do tree-walking functions to do that.
     * The 'level' array item will give us sense of depth of the tree,
     * starting with '0' for the starting entitiy.
     * 
     * @access public
     * @return array object GalleryStatus a status code
     *               array
     */
    function getDescendantsList() {
	global $gallery;

	/*
	 * Build the entityTree, starting at the current item.
	 * (making a non-recursive pre-order transversal)
	 *  $entityTree[]['itemId']
	 *  $entityTree[]['entity']
	 *  $entityTree[]['level']
	 */
	$entityTree = array();
	$current = 0;
	$maxLevel = 0;
	$startItem = array('level' => 0,
			   'itemId' => $this->getId(),
			   'entity' => $this
		     );
	$entityTree = array($startItem);
	while ($current < count($entityTree)) {
	    $currentItemId = $entityTree[$current]['itemId'];
	    $currentLevel = $entityTree[$current]['level'];

	    /* Get the childIds of the current item */
	    list ($ret, $childIds) =
		GalleryChildEntityHelper::fetchChildIds($currentItemId);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    if (!empty($childIds)) {
		/* Load the children */
		$childItems = array();
		list ($ret, $childItems) = $gallery->loadEntitiesById($childIds);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
		$newlevel = $currentLevel + 1;
		if ($newlevel > $maxLevel) {
		    $maxLevel = $newlevel;
		}
		$childrenList = array();
		foreach ($childItems as $child) {
		    $childId = $child->getId();
		    $childrenList[] = array('level' => $newlevel,
					    'itemId' => $childId,
					    'entity' => $child
				      );
		}
		/* put child items after currentItem in the array */
		$entityTree = array_merge(
				  array_slice($entityTree, 0, $current + 1),
				  $childrenList,
				  array_slice($entityTree, $current + 1)
			      );
	    }
	    $current++;
	}

	return array(GalleryStatus::success(), $entityTree);
    }


}

include(dirname(__FILE__) . '/interfaces/GalleryChildEntity.inc');
?>
