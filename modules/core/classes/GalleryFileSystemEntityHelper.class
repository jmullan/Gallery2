<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Helper class for GalleryFileSystemEntities
 *
 * @package GalleryCore
 * @subpackage Classes
 * @abstract
 */
class GalleryFileSystemEntityHelper {

    /**
     * Given a complete logical path, return the item id that it refers to.
     *
     * @param string the path
     * @return array object GalleryStatus a status code
     *               int the item id
     */
    function fetchItemIdByPath($path) {
	global $gallery;
	if (empty($path)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null);
	}

	list ($ret, $rootId) = $gallery->getModuleParameter('core', 'id.rootAlbum');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if ($path == '/') {
	    return array(GalleryStatus::success(), $rootId);
	}

	$currentId = $rootId;
	foreach (preg_split('|/|', $path, -1, PREG_SPLIT_NO_EMPTY) as $pathComponent) {
	    list ($ret, $currentId) =
		GalleryFileSystemEntityHelper::fetchChildIdByPathComponent($currentId, $pathComponent);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	return array(GalleryStatus::success(), $currentId);
    }

    /**
     * Returns the id of the child filesystem entity that matches the given
     * path component.
     *
     * Note: this call ignores permissions so it must be used very carefully!
     *
     * @access public
     * @param id of the parent
     * @param path component of the target item
     * @return array object GalleryStatus a status code
     *               int an id
     * @static
     */
    function fetchChildIdByPathComponent($parentId, $pathComponent) {
	global $gallery;

	if (empty($parentId) || empty($pathComponent)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__),
			 null);
	}

	$storage = $gallery->getStorage();

	$query = '
        SELECT
          [GalleryFileSystemEntity::id]
        FROM
          [GalleryFileSystemEntity], [GalleryChildEntity]
        WHERE
          [GalleryChildEntity::parentId] = ?
          AND
          [GalleryChildEntity::id] = [GalleryFileSystemEntity::id]
          AND
          [GalleryFileSystemEntity::pathComponent] = ?
        ';
	$data = array();
	$data[] = $parentId;
	$data[] = $pathComponent;

	list ($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if ($searchResults->resultCount() == 0) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	}

	if ($searchResults->resultCount() > 1) {
	    return array(GalleryStatus::error(ERROR_COLLISION, __FILE__, __LINE__), null);
	}

	$data = array();
	$result = $searchResults->nextResult();
	$targetId = (int)$result[0];

	return array(GalleryStatus::success(), $targetId);
    }

    /**
     * Typically, we create a FileSystemEntity with a specific path.  This
     * allows us to check for name collisions at this point.
     *
     * @param string the path component
     * @param int the id of the target parent
     * @return array object GalleryStatus a status code
     *               boolean true if there's a collision
     * @access private
     */
    function checkPathCollision($pathComponent, $newParentId) {
	global $gallery;

	if (!empty($newParentId)) {
	   $parentId = $newParentId;
	} else {
	   $parentId = $this->getParentId();
	}

	$data = array();
	$query = '
          SELECT
            COUNT([GalleryChildEntity::id])
          FROM
            [GalleryChildEntity], [GalleryFileSystemEntity]
          WHERE
        ';
	if (empty($parentId)) {
	    $query .= '[GalleryChildEntity::parentId] IS NULL';
	} else {
	    $query .= '[GalleryChildEntity::parentId] = ?';
	    $data[] = $parentId;
	}
	$query .= '
          AND
          [GalleryFileSystemEntity::pathComponent] = ?
          AND
          [GalleryChildEntity::id] = [GalleryFileSystemEntity::id]
        ';
	$data[] = $pathComponent;

	/*
	 * The id is null if we're creating a new entity, in which case we don't want to
	 * try to filter ourselves out of the collision check.
	 */
	if ($this->getId() != null) {
	    $query .= '
              AND
              [GalleryChildEntity::id] <> ?
            ';
	    $data[] = $this->getId();
	}
	    
	list($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$result = $searchResults->nextResult();
	if ($result[0] > 0) {
	    $isCollision = true;
	} else {
	    $isCollision = false;
	}

	return array(GalleryStatus::success(), $isCollision);
    }

    /**
     * Get a legal path component in the given parent id.  Legal by the platform standards, and
     * legal in that it doesn't cause a conflict with other path components.
     *
     * @param string the starting path component (eg, "IMG_10293.JPG")
     * @param int the target parent id
     * @return array object GalleryStatus a status code
     *               string the legal path component
     */
    function getLegalPathComponent($pathComponent, $parentId) {
	global $gallery;
	
	$platform = $gallery->getPlatform();

	/* Make sure our path component is legal */
	$pathComponent = $platform->legalizePathComponent($pathComponent);

	/* Get the parent path */
	list ($ret, $parent) = $gallery->loadEntitiesById($parentId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $parentPath) = $parent->fetchPath();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	
	/* Extract the file base and extension */
	list ($fileBase, $extension) = GalleryUtilities::getFileNameComponents($pathComponent);
	
	/*
	 * Try <fileBase>.<extension>
	 *     <fileBase>_001.<extension>
	 *     <fileBase>_002.<extension>
	 *     etc.
	 * Don't be intimidated by the first 100 collisions
	 */
	$retry = 0;
	while (true) {
	    $newPathComponent = sprintf('%s%s%s%s',
				$fileBase,
				$retry > 0 ? sprintf('_%03d', $retry) : '',
				empty($extension) ? '' : '.',
				$extension);

	    /* Make sure that we don't have a collision in the db. */
	    list ($ret, $isCollision) =
		GalleryFileSystemEntityHelper::checkPathCollision($newPathComponent, $parentId);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    if (!$isCollision) {
		break;
	    }

	    if (++$retry > 100) {
		return array(GalleryStatus::error(ERROR_COLLISION, __FILE__, __LINE__), null);
	    }
	}

	return array(GalleryStatus::success(), $newPathComponent);
    }
}
?>
