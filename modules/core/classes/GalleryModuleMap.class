<?php
/*
 * $RCSfile
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Representation of the one-to-many mapping between a module and its
 * attributes
 *
 * @g2 <class-name>GalleryModuleMap</class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryModuleMap_core {

    /**
     * @g2 <map>
     * @g2   <member>
     * @g2     <member-name>moduleName</member-name>
     * @g2     <member-type>STRING</member-type>
     * @g2     <member-size>MEDIUM</member-size>
     * @g2     <unique/>
     * @g2   </member>
     * @g2   <member>
     * @g2     <member-name>active</member-name>
     * @g2     <member-type>BOOLEAN</member-type>
     * @g2   </member>
     * @g2 </map>
     */

    /**
     * Activate the given module
     *
     * @param string the module name
     * @return object GalleryStatus a status code
     * @static
     */
    function activate($moduleName) {
	global $gallery;

	list ($ret, $moduleStatus) = $gallery->getModuleStatus();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}


	if (empty($moduleName)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	if (isset($moduleStatus[$moduleName]['active'])) {
	    $ret = GalleryModuleMap::updateMapEntry(array('moduleName' => $moduleName),
						    array('active' => 1));
	} else {
	    $ret = GalleryModuleMap::addMapEntry(array('moduleName' => $moduleName,
						       'active' => 1));
	}
	
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Deactivate the given module
     *
     * @param string the module name
     * @return object GalleryStatus a status code
     * @static
     */
    function deactivate($moduleName) {
	if (empty($moduleName)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	$ret = GalleryModuleMap::updateMapEntry(array('moduleName' => $moduleName),
						array('active' => 0));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Remoe the given module from the map
     *
     * @param string the module name
     * @return object GalleryStatus a status code
     * @static
     */
    function remove($moduleName) {
	if (empty($moduleName)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	$ret = GalleryModuleMap::removeMapEntry(array('moduleName' => $moduleName));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Return the module list
     *
     * @return array GalleryStatus a status code
     *               array an array of (moduleName => (active, version))
     * @static
     */
    function fetchModuleList() {
	global $gallery;
	GalleryProfiler::start('GalleryModuleMap::fetchModuleList');

	$query = '
        SELECT
          [GalleryModuleMap::moduleName],
          [GalleryModuleMap::active]
        FROM
          [GalleryModuleMap]
        ';
	
	list ($ret, $searchResults) = $gallery->search($query);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$data = array();
	while ($result = $searchResults->nextResult()) {
	    $data[$result[0]] = array('active' => $result[1]);
	}
	
	GalleryProfiler::stop('GalleryModuleMap::fetchModuleList');
	return array(GalleryStatus::success(), $data);
    }
}

include(dirname(__FILE__) . '/interfaces/GalleryModuleMap.inc');
?>
