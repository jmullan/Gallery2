<?php
/*
 * $RCSfile
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/*
 * ****************************************
 *             Ordering Tags
 * ****************************************
 */

/**
 * Order in an ascending fashion
 *
 */
define('ORDER_ASCENDING', 1);

/**
 * Order in an descending fashion
 *
 */
define('ORDER_DESCENDING', 2);

/**
 * Helper class for GalleryItems
 *
 * @package GalleryCore
 * @subpackage Classes
 * @abstract
 */
class GalleryItemHelper {

    /**
     * Return the number of children for the items specified, that are visible to the
     * user specified.
     *
     * @access public
     * @param array item ids
     * @param int user id
     * @return array object GalleryStatus a status code
     *               int a count
     * @static
     */
    function getChildCounts($itemIds, $userId) {
	global $gallery;

	if (empty($itemIds)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__),
			 null);
	}

	$storage = $gallery->getStorage();

	list ($ret, $permissionBits) = GalleryPermissionSetMap::convertIdsToBits('core.view');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	foreach ($itemIds as $itemId) {
	    $parentIdClause[] = '[GalleryChildEntity::parentId] = ?';
	}

	$query = '
        SELECT
          [GalleryChildEntity::parentId], COUNT(DISTINCT([GalleryChildEntity::id]))
        FROM
          [GalleryChildEntity], [GalleryUserGroupMap], [GalleryPermissionMap]
        WHERE
          ( ' . join(' OR ', $parentIdClause) . ' )
          AND
          [GalleryPermissionMap::itemId] = [GalleryChildEntity::id]
          AND
          ([GalleryPermissionMap::userId] = ?
           OR
           ([GalleryUserGroupMap::userId] = ?
            AND
            [GalleryPermissionMap::groupId] = [GalleryUserGroupMap::groupId]))
          AND
          [GalleryPermissionMap::permission] & ? > ?
        GROUP BY
          [GalleryChildEntity::parentId]
        ';
	$data = $itemIds;
	$data[] = $userId;
	$data[] = $userId;
	$data[] = $storage->convertIntToBits($permissionBits);
	$data[] = $storage->convertIntToBits(0);

	list ($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$counts = array();
	while ($result = $searchResults->nextResult()) {
	    $counts[$result[0]] = $result[1];
	}

	return array(GalleryStatus::success(), $counts);
    }

    /**
     * Return the ids of all the child items of the given item that have the
     * matching permission.  Useful for, example, for finding all the children
     * where we (the active user) has the 'core.changePermissions' permission
     * bit set.  This allows us to cascade permission updates.
     *
     * @access public
     * @param array item ids
     * @param int permission id
     * @return array object GalleryStatus a status code
     *               int a count
     * @static
     */
    function fetchChildItemIdsWithPermission($itemId, $permissionId) {
	global $gallery;

	if (empty($itemId) || empty($permissionId)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__),
			 null);
	}

	$storage = $gallery->getStorage();
	list ($ret, $permissionBits) = GalleryPermissionSetMap::convertIdsToBits($permissionId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$query = '
        SELECT
          DISTINCT([GalleryChildEntity::id])
        FROM
          [GalleryChildEntity], [GalleryItem], [GalleryUserGroupMap], [GalleryPermissionMap]
        WHERE
          [GalleryChildEntity::parentId] = ?
          AND
          [GalleryPermissionMap::itemId] = [GalleryChildEntity::id]
          AND
          [GalleryItem::id] = [GalleryChildEntity::id]
          AND
          ([GalleryPermissionMap::userId] = ?
           OR
           ([GalleryUserGroupMap::userId] = ?
            AND
            [GalleryPermissionMap::groupId] = [GalleryUserGroupMap::groupId]))
          AND
          [GalleryPermissionMap::permission] & ? > ?
        GROUP BY
          [GalleryChildEntity::id]
        ';
	$data = array();
	$data[] = $itemId;
	$data[] = $gallery->getActiveUserId();
	$data[] = $gallery->getActiveUserId();
	$data[] = $storage->convertIntToBits($permissionBits);
	$data[] = $storage->convertIntToBits(0);

	list ($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$data = array();
	while ($result = $searchResults->nextResult()) {
	    $data[] = $result[0];
	}

	return array(GalleryStatus::success(), $data);
    }
    

    /**
     * Study the permissions for all items (for the given user)
     *
     * @param array GalleryItem ids
     * @param int a user id
     * @return object GalleryStatus a status code
     * @static
     */
    function studyPermissions($itemIds, $userId) {

	list ($ret, $permissionsTable) =
	    GalleryPermissionMap::fetchPermissionsForItems($itemIds, $userId);

	/* Cache the permissions */
	foreach ($permissionsTable as $itemId => $permissions) {
	    $cacheKey = "GalleryItemHelper::getPermissions($itemId,$userId)";
	    GalleryDataCache::put($cacheKey, $permissions);
	}
	    
	return GalleryStatus::success();
    }

    /**
     * Return all the permissions that the given user has for the given item.
     *
     * @return array object GalleryStatus a status code
     *               boolean true if yes
     * @static
     */
    function getPermissions($itemId, $userId) {

	$cacheKey = "GalleryItemHelper::getPermissions($itemId,$userId)";
	if (GalleryDataCache::containsKey($cacheKey)) {
	    $permissions = GalleryDataCache::get($cacheKey);
	} else {
	    list ($ret, $permissionsTable) =
		GalleryPermissionMap::fetchPermissionsForItems(array($itemId), $userId);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    if (isset($permissionsTable[$itemId])) {
		$permissions = $permissionsTable[$itemId];
	    } else {
		$permissions = null;
	    }
	    GalleryDataCache::put($cacheKey, $permissions);
	}

	return array(GalleryStatus::success(), $permissions);
    }
}
?>