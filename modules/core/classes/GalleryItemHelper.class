<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*
 * ****************************************
 *             Ordering Tags
 * ****************************************
 */

/**
 * Order in an ascending fashion
 *
 * @constant ORDER_ASCENDING
 */
define('ORDER_ASCENDING', 1);

/**
 * Order in an descending fashion
 *
 * @constant ORDER_DESCENDING
 */
define('ORDER_DESCENDING', 2);

/**
 * Helper class for GalleryItems
 *
 * @version $Id$
 * @package GalleryCore
 * @abstract
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class GalleryItemHelper {

    /**
     * Return the number of children for the items specified, that are visible to the
     * user specified.
     *
     * @access public
     * @param array item ids
     * @param int user id
     * @return array object GalleryStatus a status code
     *               int a count
     */
    function getChildCounts($itemIds, $userId) {
	global $gallery;

	/* Filter by parent id */
	$idMarkers = GalleryUtilities::makeMarkers($itemIds);
	$where = '[GalleryChildEntity::parentId] IN (' . $idMarkers . ')';
	$data = $itemIds;

	/* Associate permissions */
	$where .= ' AND [GalleryPermissionMap::itemId] = [GalleryChildEntity::id]';
	list ($clause, $clauseData) =
	    GalleryItemHelper::getViewPermissionClause($userId);
	$where .= ' AND ' . $clause;
	$data = array_merge($data, $clauseData);

	list ($ret, $searchResults) =
	    $gallery->search(array('select' => ('[GalleryChildEntity::parentId], ' .
						'COUNT(DISTINCT([GalleryChildEntity::id]))'),
				   'where' => $where,
				   'group-by' => '[GalleryChildEntity::parentId]'),
			     $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$counts = array();
	while ($result = $searchResults->nextResult()) {
	    $counts[$result[0]] = $result[1];
	}

	return array(GalleryStatus::success(), $counts);
    }


    /**
     * Return a search clause that only displays the items that the specified
     * user id is allowed to see.
     *
     * @param string a user id
     * @return string a where clause
     */
    function getViewPermissionClause($userId) {
	/* Figure out what groups the active user is in. */
	list ($ret, $groupIds) =
	    GalleryUserGroupMap::fetchGroupsForUser($userId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$groupIdString = join(', ', array_values($groupIds));
	    
	$where = ' ([GalleryItem::ownerId] = ? OR';
	$data[] = $userId;
	$where .= ' (([GalleryPermissionMap::groupId] IN (' .
	    $groupIdString . ')';
	$where .= ' OR [GalleryPermissionMap::userId] = ?)';
	$data[] = $userId;
	$where .= ' AND';
	$where .= ' [GalleryPermissionMap::permission] IN (?, ?, ?)))';
	$data = array_merge($data, array('core.view', 'core.viewAll', 'core.all'));

	return array($where, $data);
    }

    /**
     * Assert that the given user has one of the specific permissions for the
     * target item
     *
     * @return array object GalleryStatus a status code
     *               boolean true if yes
     */
    function getPermissions($itemId, $userId) {

	list ($ret, $groupIds) = GalleryUserGroupMap::fetchGroupsForUser($userId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list ($ret, $permissions) =
	    GalleryPermissionMap::fetchPermissionsForItem($itemId,
							  array($userId),
							  $groupIds);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $permissions);
    }
}
?>