<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/*
 * ****************************************
 *             Ordering Tags
 * ****************************************
 */

/**
 * Order in an ascending fashion
 *
 */
define('ORDER_ASCENDING', 'asc');

/**
 * Order in an descending fashion
 *
 */
define('ORDER_DESCENDING', 'desc');

/**
 * Helper class for GalleryItems
 *
 * @package GalleryCore
 * @subpackage Classes
 * @abstract
 */
class GalleryItemHelper {

    /**
     * Return the number of children for the items specified, that are visible to the
     * user specified.
     *
     * @access public
     * @param array item ids
     * @param int user id
     * @return array object GalleryStatus a status code
     *               int a count
     * @static
     */
    function getChildCounts($itemIds) {
	global $gallery;

	if (empty($itemIds)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__),
			 null);
	}

	$storage = $gallery->getStorage();

	list ($ret, $permissionBits) = GalleryPermissionSetMap::convertIdsToBits('core.view');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	foreach ($itemIds as $itemId) {
	    $parentIdClause[] = '[GalleryChildEntity::parentId] = ?';
	}

	$query = '
        SELECT
          [GalleryChildEntity::parentId], COUNT(DISTINCT([GalleryChildEntity::id]))
        FROM
          [GalleryChildEntity], [GalleryUserGroupMap], [GalleryPermissionMap]
        WHERE
          ( ' . join(' OR ', $parentIdClause) . ' )
          AND
          [GalleryPermissionMap::itemId] = [GalleryChildEntity::id]
          AND
          ([GalleryPermissionMap::userId] = ?
           OR
           ([GalleryUserGroupMap::userId] = ?
            AND
            [GalleryPermissionMap::groupId] = [GalleryUserGroupMap::groupId]))
          AND
          [GalleryPermissionMap::permission] & ? > ?
        GROUP BY
          [GalleryChildEntity::parentId]
        ';
	$data = $itemIds;
	$data[] = $gallery->getActiveUserId();
	$data[] = $gallery->getActiveUserId();
	$data[] = $storage->convertIntToBits($permissionBits);
	$data[] = $storage->convertIntToBits(0);

	list ($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$counts = array();
	while ($result = $searchResults->nextResult()) {
	    $counts[$result[0]] = $result[1];
	}

	return array(GalleryStatus::success(), $counts);
    }

    /**
     * Return the ids of all the child items of the given item that have the
     * matching permission.  Useful for, example, for finding all the children
     * where we (the active user) has the 'core.changePermissions' permission
     * bit set.  This allows us to cascade permission updates.
     *
     * @access public
     * @param array item ids
     * @param int permission id
     * @return array object GalleryStatus a status code
     *               int a count
     * @static
     */
    function fetchChildItemIdsWithPermission($itemId, $permissionId) {
	global $gallery;

	if (empty($itemId) || empty($permissionId)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__),
			 null);
	}

	$storage = $gallery->getStorage();
	list ($ret, $permissionBits) = GalleryPermissionSetMap::convertIdsToBits($permissionId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$query = '
        SELECT
          DISTINCT([GalleryChildEntity::id])
        FROM
          [GalleryChildEntity], [GalleryItem], [GalleryUserGroupMap], [GalleryPermissionMap]
        WHERE
          [GalleryChildEntity::parentId] = ?
          AND
          [GalleryPermissionMap::itemId] = [GalleryChildEntity::id]
          AND
          [GalleryItem::id] = [GalleryChildEntity::id]
          AND
          ([GalleryPermissionMap::userId] = ?
           OR
           ([GalleryUserGroupMap::userId] = ?
            AND
            [GalleryPermissionMap::groupId] = [GalleryUserGroupMap::groupId]))
          AND
          [GalleryPermissionMap::permission] & ? > ?
        GROUP BY
          [GalleryChildEntity::id]
        ';
	$data = array();
	$data[] = $itemId;
	$data[] = $gallery->getActiveUserId();
	$data[] = $gallery->getActiveUserId();
	$data[] = $storage->convertIntToBits($permissionBits);
	$data[] = $storage->convertIntToBits(0);

	list ($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$data = array();
	while ($result = $searchResults->nextResult()) {
	    $data[] = $result[0];
	}

	return array(GalleryStatus::success(), $data);
    }
    
    /**
     * Return the ids of all items that match the given type and have the
     * given permission (defaults to 'core.view')
     *
     * @access public
     * @param string an item type (eg, 'GalleryAlbumItem')
     * @return array object GalleryStatus a status code
     *               array(id, id, id, ...)
     * @static
     */
    function fetchAllItemIds($itemType, $permission='core.view') {
	global $gallery;

	if (empty($itemType)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__),
			 null);
	}

	list ($ret, $permissionBits) = GalleryPermissionSetMap::convertIdsToBits(array($permission));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$storage = $gallery->getStorage();

	$query = '
        SELECT
          DISTINCT([GalleryItem::id]),
	  [GalleryPermissionMap::permission]
        FROM
          [GalleryEntity], [GalleryItem], [GalleryUserGroupMap], [GalleryPermissionMap]
        WHERE
          [GalleryEntity::entityType] = ?
          AND
          [GalleryItem::id] = [GalleryEntity::id]
          AND
          [GalleryPermissionMap::itemId] = [GalleryEntity::id]
          AND
          ([GalleryPermissionMap::userId] = ?
           OR
           ([GalleryUserGroupMap::userId] = ?
            AND
            [GalleryPermissionMap::groupId] = [GalleryUserGroupMap::groupId]))
          AND
          [GalleryPermissionMap::permission] & ? = ?
        ';
	$data = array();
	$data[] = $itemType;
	$data[] = $gallery->getActiveUserId();
	$data[] = $gallery->getActiveUserId();
	$data[] = $storage->convertIntToBits($permissionBits);
	$data[] = $storage->convertIntToBits($permissionBits);

	list ($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$data = array();
	while ($result = $searchResults->nextResult()) {
	    $data[] = $result[0];
	}

	return array(GalleryStatus::success(), $data);
    }

    /**
     * Study the permissions for all items (for the given user)
     *
     * @param array GalleryItem ids
     * @param int a user id
     * @return object GalleryStatus a status code
     * @static
     */
    function studyPermissions($itemIds) {

	list ($ret, $permissionsTable) = GalleryPermissionMap::fetchPermissionsForItems($itemIds);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Cache the permissions */
	foreach ($permissionsTable as $itemId => $permissions) {
	    $cacheKey = "GalleryItemHelper::getPermissions($itemId)";
	    GalleryDataCache::put($cacheKey, $permissions);
	}
	    
	return GalleryStatus::success();
    }

    /**
     * Return all the permissions that the given user has for the given item.
     *
     * @return array object GalleryStatus a status code
     *               array (perm1, perm2)
     * @static
     */
    function getPermissions($itemId) {
	$cacheKey = "GalleryItemHelper::getPermissions($itemId)";
	if (GalleryDataCache::containsKey($cacheKey)) {
	    $permissions = GalleryDataCache::get($cacheKey);
	} else {
	    list ($ret, $permissionsTable) = GalleryPermissionMap::fetchPermissionsForItems(array($itemId));
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    if (isset($permissionsTable[$itemId])) {
		$permissions = $permissionsTable[$itemId];
	    } else {
		$permissions = null;
	    }
	    GalleryDataCache::put($cacheKey, $permissions);
	}

	return array(GalleryStatus::success(), $permissions);
    }

    /**
     * Return the appropriate GalleryItem instance for the mime type provided.
     *
     * Use the GalleryFactory to try to find an exact match to the mime type.
     * Failing that, fall back to the major type, then fall back to '*'.
     *
     * @param string the mime type
     * @return array object GalleryStatus a status code
     *               object GalleryItem an item
     */
    function newItemByMimeType($mimeType) {

	/* Try the whole mime type */
	list ($ret, $instance) = GalleryFactory::newInstanceByHint('GalleryItem', $mimeType);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!isset($instance)) {
	    /* No? Try the major type only */
	    $mimeType = substr($mimeType, 0, strpos($mimeType, '/')) . '/*';
	    list ($ret, $instance) = GalleryFactory::newInstanceByHint('GalleryItem', $mimeType);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    if (!isset($instance)) {
		/* No? Try all types */
		$mimeType = '*';
		list ($ret, $instance) = GalleryFactory::newInstanceByHint('GalleryItem', $mimeType);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
	    }
	}

	return array(GalleryStatus::success(), $instance);
    }

    /**
     * Add a new data item to an album from a data file.
     *
     * @param string the path to the file on the local disk
     * @param string the name of the new item
     * @param string the title of the new item
     * @param string the summary of the new item
     * @param string the description of the new item
     * @param string the mime type of the new item
     * @param int the id of the target album
     * @return array object GalleryStatus a status code
     *               object GalleryDataItem a new item
     */
    function addItemToAlbum($fileName, $itemName, $title, $summary,
			    $description, $mimeType, $albumId) {
	global $gallery;

	$platform = $gallery->getPlatform();

	/*
	 * Assume that we've got a working mime type, go ahead and
	 * get an appropriate GalleryDataItem from the GalleryFactory.
	 */
	list ($ret, $newItem) = GalleryItemHelper::newItemByMimeType($mimeType);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$ret = $newItem->create($albumId, $fileName, $mimeType, substr($itemName, 0, 64));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$newItem->setTitle(substr($title, 0, 128));
	$newItem->setSummary(substr($summary, 0, 255));
	$newItem->setDescription($description);

	$ret = $newItem->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Set the order weight */
	list ($ret, $maxWeight) =
	    GalleryItemAttributesMap::fetchExtremeChildWeight($albumId, HIGHER_WEIGHT);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$ret = GalleryItemAttributesMap::setOrderWeight($newItem->getId(), $maxWeight + 1000);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/*
	 * Now create thumbnails and resizes according to the
	 * wishes of the parent album.
	 */
	list ($ret, $preferences) = GalleryDerivativePreferencesMap::fetchPreferencesForItem($albumId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	foreach ($preferences as $preference) {
	    /*
	     * Validate the stored preferences to make sure that
	     * they're supported by an active toolkit.
	     */
	    list ($ret, $isSupported, $outputMimeType) =
		GalleryToolkitHelper::isSupportedOperationSequence($mimeType, $preference['derivativeOperations']);

	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    /* Not supported?  Try the next preference */
	    if (!$isSupported) {
		continue;
	    }

	    list ($ret, $derivative) = GalleryFactory::newInstance('GalleryEntity', 'GalleryDerivativeImage');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    if (!isset($derivative)) {
		return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__),
			     null);
	    }

	    $ret = $derivative->create($newItem->getId(), $preference['derivativeType']);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    $derivative->setDerivativeMimeType($outputMimeType);
	    $derivative->setDerivativeSourceId($newItem->getId());
	    $derivative->setDerivativeOperations($preference['derivativeOperations']);
			
	    $ret = $derivative->save();
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	}

	return array(GalleryStatus::success(), $newItem);
    }


    /**
     * Set the thumbnail for an album from an item, according to the thumbnail
     * preferences for the album.
     *
     * @param int the album id
     * @param int the item id
     * @return object GalleryStatus a status code
     */
    function setThumbnailFromItem($itemId, $fromItemId) {
	global $gallery;

	/* Load the current album thumbnail. */ 
	list ($ret, $thumbnailTable) =
	    GalleryDerivativeHelper::fetchThumbnailsByItemIds(array($itemId, $fromItemId));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), false);
	}

	/*
	 * Find the right source id to create our thumbnail from.  Search for
	 * it in this order:
	 * 1. The fromItem's preferred derivative's source id
	 * 2. The fromItem's thumbnail's source id
	 * 3. The fromItem data itself
	 * 4. no thumbnail
	 */
	$source = null;
	$sourceMimeType = null;
	
	/* 1. The fromItem's preferred derivative's source id */
	list ($ret, $derivatives) = GalleryDerivativeHelper::fetchPreferredsByItemIds(array($fromItemId));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	if (!empty($derivatives[$fromItemId])) {
	    $source = $derivatives[$fromItemId];
	    $sourceMimeType = $source->getDerivativeMimeType();
	}

	/* 2. The item's thumbnail's source id */
	if (!$sourceMimeType) {
	    if (!empty($thumbnailTable[$fromItemId])) {
		$source = $thumbnailTable[$fromItemId];
		$sourceMimeType = $source->getDerivativeMimeType();
	    }
	}

	/* 3. The item data itself */
	if (!$sourceMimeType) {
	    list ($ret, $fromItem) = $gallery->loadEntitiesById($fromItemId);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    
	    if (GalleryUtilities::isA($fromItem, 'GalleryDataItem')) {
		$source = $fromItem;
		$sourceMimeType = $fromItem->getMimeType();
	    }
	}

	/*
	 * If at this point $source is undefined then we have no source
	 * thumbnail and that means that we're done.
	 */
	if (isset($source)) {
	    list ($ret, $lockIds[]) = $gallery->acquireReadLock($source->getId());
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    /* Reuse the existing derivative, if one exists */
	    if (isset($thumbnailTable[$itemId])) {
		$derivative = $thumbnailTable[$itemId];
	    
		/* Modify existing thumbnail */
		list ($ret, $lockIds[]) = $gallery->acquireWriteLock($derivative->getId());
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}

		list ($ret, $derivative) = $derivative->refresh();
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}

		$success = true;
	    } else {
		/* Create a new one */
		list ($ret, $derivative) = GalleryFactory::newInstance('GalleryEntity', 'GalleryDerivativeImage');
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}

		if (!isset($derivative)) {
		    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
		}  

		$ret = $derivative->create($itemId, DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
	    
		/*
		 * Get the derivativeOperations to generate a thumbnail for the
		 * item.
		 *
		 * XXX: this will only work with albums!  We need to check the
		 * parent's preferences if we're creating a new thumbnail for
		 * an item.
		 */
		list ($ret, $preferences) = GalleryDerivativePreferencesMap::fetchPreferencesForItem($itemId);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
		
		foreach ($preferences as $preference) {
		    if ($preference['derivativeType'] == DERIVATIVE_TYPE_IMAGE_THUMBNAIL) {
			$derivativeOperations = $preference['derivativeOperations'];
			break;
		    }
		}
		if (empty($derivativeOperations)) {
		    return array(GalleryStatus::error(ERROR_MISSING_VALUE, __FILE__, __LINE__), null);
		}

		/*
		 * Validate the stored preferences to make sure that
		 * they're supported by an active toolkit.
		 */
		list ($ret, $isSupported, $outputMimeType) =
		    GalleryToolkitHelper::isSupportedOperationSequence($sourceMimeType,
								       $derivativeOperations);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}

		if ($isSupported) {
		    $success = true;
		    $derivative->setDerivativeOperations($derivativeOperations);
		    $derivative->setDerivativeMimeType($outputMimeType);
		} else {
		    $success = false;
		}
	    }

	    if ($success) {
		$derivative->setDerivativeSourceId($source->getId());
	    
		$ret = $derivative->save();
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
	    }

	    if (isset($lockIds)) {
		$ret = $gallery->releaseLocks($lockIds);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
	    }
	}

	return array(GalleryStatus::success(), $success);
    }
}
?>