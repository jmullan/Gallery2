<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Load the parent class
 */
require_once(dirname(__FILE__) . '/GalleryItem.class');

/**
 * A subclass of GalleryItem for items containing actual data
 *
 * DataItems are ones that have an actual data source, such as 
 * PhotoItem or MovieItem.
 *
 * @g2 <class-name>GalleryDataItem</class-name>
 * @g2 <parent-class-name>GalleryItem</parent-class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 * @g2 <requires-id/>
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryDataItem_core extends GalleryItem {

    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The mime type of the data file
     *
     * @g2 <member>
     * @g2   <member-name>mimeType</member-name>
     * @g2   <member-type>STRING</member-type>
     * @g2 </member>
     *
     * @var string $_mimeType
     * @access private
     */
    var $_mimeType;

    /**
     * The byte size of the data file
     *
     * @g2 <member>
     * @g2   <member-name>size</member-name>
     * @g2   <member-type>INTEGER</member-type>
     * @g2 </member>
     *
     * @var string $_size
     * @access private
     */
    var $_size;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Data items that can be viewed inline (photos, movies, etc) should return
     * true.  Items that can't be viewed inline (word documents, text, etc)
     * should return false.
     *
     * Classes that return true for this query must implement getWidth() and getHeight()
     *
     * @return boolean true if this data item can be viewed inline
     */
    function canBeViewedInline() {
	return false;
    }

    /**
     * Create a new instance of this type in the persistent store.
     *
     * @access public
     * @param int the id of the parent GalleryItem
     * @param string the path to a data file to be contained
     * @param int the owner of the new item
     * @param string the desired name of the new item
     * @return object GalleryStatus a status code
     */
    function create($parentId, $inputFileName, $mimeType, $targetName=null) {
	global $gallery;
	$platform = $gallery->getPlatform();

	/* Validate the input file */
	if (empty($inputFileName)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	if (!$platform->is_uploaded_file($inputFileName) && !$platform->file_exists($inputFileName)) {
	    return GalleryStatus::error(ERROR_BAD_PATH, __FILE__, __LINE__);
	}
	
	/*
	 * The parent must be read locked at this point to make sure that it's
	 * not going to be moved around while we're adding stuff to it.
	 */
	if (!$gallery->isReadLocked($parentId)) {
	    return GalleryStatus::error(ERROR_LOCK_REQUIRED,
					__FILE__, __LINE__);
	}
	
	/* Figure out the new location for this file */
	list($ret, $parent) = $gallery->loadEntitiesById($parentId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list($ret, $parentPath) = $parent->fetchContainerPath();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	if (empty($targetName)) {
	    $baseName = basename($inputFileName);
	} else {
	    $baseName = $targetName;
	}

	/* Make sure our base file name is legal */
	$baseName = $platform->legalizePathComponent($baseName);

	/* Don't be intimidated by the first 10 collisions */
	$retry = 0;
	$newFileName = $parentPath . $baseName;
	list ($fileBase, $extension) = GalleryUtilities::getFileNameComponents($baseName);
	while ($platform->file_exists($newFileName)) {
	    if (++$retry > 10) {
		return GalleryStatus::error(ERROR_COLLISION, __FILE__, __LINE__);
	    }
	    $baseName = sprintf('%s_%03d%s', $fileBase, $retry, empty($extension) ? '' : '.' . $extension);
	    $newFileName = sprintf('%s%s', $parentPath, $baseName);
	} 
	
	/*
	 * XXX: Race condition here!  It's possible for two threads to be
	 * adding a file with the same name to the container at the same time.
	 * We have to write lock the container to be sure that this doesn't
	 * happen.
	 */
	/* Copy the file to its new location */
	if (!$platform->copy($inputFileName, $newFileName)) {
	    return GalleryStatus::error(ERROR_PLATFORM_FAILURE,
					__FILE__, __LINE__);
	}

	$ret = parent::create($parentId, $baseName);
	if ($ret->isError()) {
	    $platform->unlink($newFileName);
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Set my mime type and file size */
	$this->setMimeType($mimeType);
	$this->setSize($platform->filesize($newFileName));

	return GalleryStatus::success();
    }

    /**
     * Delete this GalleryEntity
     *
     * @access public
     * @return object GalleryStatus a status code
     */
    function delete() {
	global $gallery;

	/*
	 * XXX: Check for derivative relationships and expire as necessary.
	 */

	/* Delete myself */
	$ret = parent::delete();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Delete our source file */
	list($ret, $path) = $this->fetchPath();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	$platform = $gallery->getPlatform();

	if (!$platform->unlink($path)) {
	    return GalleryStatus::error(ERROR_BAD_PATH, __FILE__, __LINE__, "Could not delete $path");
	}

	return GalleryStatus::success();
    }

    /**
     * Scan this item's data for changes.
     *
     * @return object GalleryStatus a status code
     */
    function rescan() {
	return GalleryStatus::success();
    }

    /**
     * Rename this DataItem
     *
     * @access public
     * @param string the path component
     * @return object GalleryStatus a status code
     */
    function rename($newName) {
	global $gallery;

	if ($newName == $this->getPathComponent()) {
	    return GalleryStatus::success();
	}

	/*
	 * Read lock the parent so that we don't have a race condition below.
	 */
	list ($ret, $lockId) = $gallery->acquireReadLock($this->getParentId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$platform = $gallery->getPlatform();

	/*
	 * Get the current path
	 */
	list($ret, $currentPath) = $this->fetchPath();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Make sure our base file name is legal */
	$newName = $platform->legalizePathComponent($newName);

	/*
	 * Set the new path in the database.  If that succeeds then we should
	 * be ok in general.  Jump through hoops to make sure that we release
	 * our locks at the end.
	 */
	$error = null;
	$ret = parent::rename($newName);
	if ($ret->isError()) {
	    $error = $ret->wrap(__FILE__, __LINE__);
	}

	if (!isset($error)) {
	    $newPath = dirname($currentPath) . '/' . $newName;
	    
	    /* Check to see if the desired path exists. */
	    if ($platform->file_exists($newPath)) {
		$error = GalleryStatus::error(ERROR_COLLISION, __FILE__, __LINE__);
	    }
	}

	if (!isset($error)) {
	    if (!$platform->rename($currentPath, $newPath)) {
		$error = GalleryStatus::error(ERROR_BAD_PATH, __FILE__, __LINE__);
	    }
	}

	/* Release locks */
	$ret = $gallery->releaseLocks($lockId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if (isset($error)) {
	    return $error;
	}

	return GalleryStatus::success();
    }
    
    /**
     * Get the full path to the data file.
     *
     * @access public
     * @return array object GalleryStatus a status code,
     *               string a path where children can store their data files
     */
    function fetchPath() {
	global $gallery;

	/*
	 * Source files in the item's directory.  But the parent may be an item
	 * that doesn't have its own directory, so we need to get the path of
	 * the nearest parent who is a container (eg an AlbumItem), because a
	 * container has a directory for the items it contains.
	 */
	list($ret, $containerPath) = $this->fetchContainerPath();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	return array(GalleryStatus::success(), $containerPath . $this->getPathComponent());
    }

    /**
     * Render this item in the given format.  For example, GalleryPhotoItem may want to render as an <img> tag
     * in the HTML format, whereas GalleryMovieItem would use <object> or <embed> in HTML.
     *
     * @param string the format (eg, "HTML")
     * @param array format specific key value pairs
     */
    function render($format, $params) {
	return null;
    }
}

include(dirname(__FILE__) . '/interfaces/GalleryDataItem.inc');
?>
