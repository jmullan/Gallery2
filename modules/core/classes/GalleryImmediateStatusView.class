<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Jesse Mullan <jmullan@visi.com>
 */

/**
 * @package GalleryCore
 * @subpackage GalleryImmediateStatusView
 */
class GalleryImmediateStatusView extends GalleryView {
    /**
     * The template that this view will be using
     *
     * @access private
     */
    var $_template;

    /**
     * General data needed by the template to render the page
     *
     * @access private
     */
    var $_main;

    /**
     * The starting time for this job.
     */
    var $_startTime;

    /**
     * True if there was data flushed
     */
    var $_isFlushed;

    /**
     * Reset any timing statistics we've gathered so far.
     */
    function resetTimingStats() {
	$this->_startTime = time();
    }

    /**
     * This is the class that prepares the global template for display
     * and loads all non-action-specific data into it.  It is basically
     * a copy of the code from main.php
     *
     * @return object GalleryStatus a status code
     */
    function doLoadImmediateTemplate() {
	global $gallery;

	GalleryCoreApi::requireOnce(dirname(__FILE__) . '/GalleryTemplate.class');

	/*
	 * This normally expects to be called in the gallery root so that it
	 * can create paths relative to that directory.
	 */
	$this->_template = new GalleryTemplate(dirname(__FILE__) . '/../../..');

	/*
	 * Check for errors when loading the template, but otherwise throw away
	 * the $results because we don't need them
	 */
	list ($ret, $results) = $this->doLoadTemplate($this->_template);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$this->_main['viewBodyFile'] = 'modules/core/templates/ImmediateStatus.tpl';
	$this->_main['viewL10Domain'] = 'modules_core';

	/* This is basically a copy of the code in main.php */
	$this->_template->setVariable('main', $this->_main);
	$this->_template->setVariable('l10Domain', 'modules_core');
	return GalleryStatus::success();
    }

    /**
     * This renders the global template and splits the output into a header
     * and footer.  We simply discard the footer since the header and footer
     * are re-rendered explicitly for the footer later
     *
     * @return object GalleryStatus a status code
     */
    function renderHeader($pageTitle, $sectionTitle, $sectionDescription) {
	$this->_template->setVariable('ImmediateStatus',
				      array('pageTitle' => $pageTitle,
					    'sectionTitle' => $sectionTitle,
					    'sectionDescription' => $sectionDescription,
					    'percentComplete' => 0));

	list ($ret, $html) = $this->_template->fetch('gallery:templates/global.tpl');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$pieces = explode('SPLIT ON THIS LINE', $html);
	print $pieces[0];
	$this->_flush();

	if (empty($this->_startTime)) {
	    $this->_startTime = time();
	}

	return GalleryStatus::success();
    }

    /**
     * This is a one-shot, and might be able to reuse the class's template,
     * but for safety and simplicity, it gets its own barebones template for
     * no-frills rendering.
     * Turn off smarty debugging for this template so we don't get a smarty
     * debug console for every status message if debugging is active.
     *
     * @param string a short string to print (status group)
     * @param string a long string to print (status line item)
     * @param float a percentage between 0 and 1 where 1 == status complete.
     * @return object GalleryStatus a status code
     */
    function renderStatusMessage($title, $description, $percentComplete) {
	if (empty($this->_startTime)) {
	    $this->_startTime = time();
	}

	if (!isset($this->_coreModule)) {
	    list ($ret, $this->_coreModule) = GalleryCoreApi::loadPlugin('module', 'core');
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	/*
	 * Calculate the time remaining
	 *
	 * TODO: Use a weighted measurement to provide a balanced estimate.  Consider the case
	 * where the first 50% goes really quickly and the second 50% goes really slowly; the
	 * estimate will be wildly inaccurate at the transition.
	 */
	if ($percentComplete > 0 && $percentComplete < 1 && time() > $this->_startTime) {
	    $elapsed = (int)(time() - $this->_startTime);
	    $timeRemaining = ($elapsed / $percentComplete) - $elapsed;
	    $timeRemaining = $this->_coreModule->translate(
		array('text' => 'Estimated time remaining: %d:%02d',
		      'arg1' => (int)($timeRemaining / 60),
		      'arg2' => $timeRemaining % 60));
	} else {
	    $timeRemaining = '';
	}

	/* it is possible to not have this function compiled into php */
	$memoryUsage = (function_exists('memory_get_usage')) ? memory_get_usage() : 0;

	/* A disabled memory_limit is -1, 0 crashes php */
	$memoryLimit = (0 < ini_get('memory_limit')) ? ini_get('memory_limit') : 0;

	/*
	 * Ensure that percentComplete is in a dotted-decimal format.  Since
	 * the immediateView is dealing in percentages, anything beyond two decimal
	 * places is unnecessary.
	 */
	$percentComplete = GalleryUtilities::roundToString($percentComplete, 2);

	$statusTemplate = new GalleryTemplate(dirname(__FILE__) . '/../../..');
	$statusTemplate->_smarty->debugging = false;
	$statusTemplate->setVariable('l10Domain', 'modules_core');
	$statusTemplate->setVariable('ImmediateStatusMessage',
				     array('sectionTitle' => $title,
					   'sectionDescription' => $description,
					   'memoryUsage' => $memoryUsage,
					   'memoryLimit' => $memoryLimit,
					   'percentComplete' => $percentComplete,
					   'timeRemaining' => $timeRemaining));
	$ret = $statusTemplate->display('modules/core/templates/ImmediateStatusMessage.tpl');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$this->_flush();
	return GalleryStatus::success();
    }

    /**
     * This prints a link to $redirectUrl, similar to the debug link.
     *
     * @param string a url to send the user to when they click the link
     * @return object GalleryStatus a status code
     */
    function renderRedirect($redirectUrl) {
	$statusTemplate = new GalleryTemplate(dirname(__FILE__) . '/../../..');
	$statusTemplate->setVariable('l10Domain', 'modules_core');
	$statusTemplate->setVariable('redirectUrl', $redirectUrl);
	$ret = $statusTemplate->display('modules/core/templates/LateRedirect.tpl');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$this->_flush();
	return GalleryStatus::success();
    }

    /**
     * This renders the global template and splits the output into a header
     * and footer.  We simply discard the header since the header was
     * previously printed
     *
     * @return object GalleryStatus a status code
     */
    function renderFooter() {
	list ($ret, $html) = $this->_template->fetch('gallery:templates/global.tpl');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$pieces = explode('SPLIT ON THIS LINE', $html);
	print $pieces[1];
	$this->_flush();
	return GalleryStatus::success();
    }

    /**
     * Set the base data that will eventually be passed into the template
     *
     * @param array base data to pass into the template
     * @return object GalleryStatus a status code
     */
    function setMain($main) {
	if (is_array($main)) {
	    $this->_main = $main;
	    return GalleryStatus::success();
	} else {
	    return (GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__));
	}
    }

    /**
     * Indicate whether the data has been output to the screen or cleared
     *
     * @param boolean
     */
    function setFlushed($val) {
	$this->_isFlushed = $val;
    }

    /**
     * Inquire if the data has been output to the screen
     *
     * @return boolean
     */
    function getFlushed() {
	return $this->_isFlushed;
    }

    /**
     * Flush the buffer and set the flag
     *
     * @access private
     */
    function _flush() {
	flush();
	$this->_isFlushed = true;
    }
}
?>
