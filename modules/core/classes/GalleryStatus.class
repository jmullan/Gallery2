<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*
 * ****************************************
 *           Status code bitflags
 * ****************************************
 */

/**
 * The operation was a success
 *
 * @constant SUCCESS
 */
define('SUCCESS', 0x00000000);

/**
 * The operation had errors
 *
 * @constant ERROR
 */
define('ERROR', 0x00000001);

/**
 * A name collision happened in the filesystem or database as a result of this
 * operation.  A common cause for this is attempting to use an existing filename
 * when moving an item from one location to another.
 *
 * @constant ERROR_COLLISION
 */
define('ERROR_COLLISION', 0x00000002);

/**
 * The object you're trying to access is no longer available.  Perhaps it was
 * deleted.  You shouldn't get this when an object has simply moved.
 *
 * @constant ERROR_MISSING_OBJECT
 */
define('ERROR_MISSING_OBJECT', 0x00000004);

/**
 * The lock you're trying to acquire is currently in use and was not released
 * within the timeout period you specified.
 *
 * @constant ERROR_LOCK_IN_USE
 */
define('ERROR_LOCK_IN_USE', 0x00000008);

/**
 * One of the parameters passed to this function is bad.
 *
 * @constant ERROR_BAD_PARAMETER
 */
define('ERROR_BAD_PARAMETER', 0x00000010);

/**
 * Missing a value necessary to continue
 *
 * @constant ERROR_MISSING_VALUE
 */
define('ERROR_MISSING_VALUE', 0x00000020);

/**
 * An unspecified storage error occurred
 *
 * @constant ERROR_STORAGE_FAILURE
 */
define('ERROR_STORAGE_FAILURE', 0x00000040);

/**
 * A storage operation was attempted with an invalid storage connection
 *
 * @constant ERROR_STORAGE_CONNECTION
 */
define('ERROR_STORAGE_CONNECTION', 0x00000080);

/**
 * A storage operation was attempted with invalid credentials
 *
 * @constant ERROR_STORAGE_BAD_AUTHENTICAITON
 */
define('ERROR_STORAGE_BAD_AUTHENTICATON', 0x00000100);

/**
 * You attempted to modify an object using an in-memory version that
 * is out of date with the version that's in the storage
 *
 * @constant ERROR_OBSOLETE_DATA
 */
define('ERROR_OBSOLETE_DATA', 0x00000200);

/**
 * You attempted an operation which requires a lock.
 *
 * @constant ERROR_LOCK_REQUIRED
 */
define('ERROR_LOCK_REQUIRED', 0x00000400);

/**
 * We tried a file operation on an unsupported file type
 *
 * @constant ERROR_UNSUPPORTED_FILE_TYPE
 */
define('ERROR_UNSUPPORTED_FILE_TYPE', 0x00000800);

/**
 * You attempted an illegal operation on a deleted object
 *
 * @constant ERROR_DELETED_OBJECT
 */
define('ERROR_DELETED_OBJECT', 0x00001000);

/**
 * You attempted an operation which had a bad path component
 *
 * @constant ERROR_BAD_PATH
 */
define('ERROR_BAD_PATH', 0x00002000);

/**
 * You attempted an operation which had a bad data type
 *
 * @constant ERROR_BAD_DATA_TYPE
 */
define('ERROR_BAD_DATA_TYPE', 0x00004000);

/**
 * You attempted to add a child to a GalleryItem which can't have children
 *
 * @constant ERROR_ILLEGAL_CHILD
 */
define('ERROR_ILLEGAL_CHILD', 0x00008000);

/**
 * An unspecified error occured while completing a graphics command.
 *
 * @constant ERROR_GRAPHICS_FAILURE
 */
define('ERROR_GRAPHICS_FAILURE', 0x00010000);

/**
 * We experienced a platform specific error (perhaps filesystem related)
 *
 * @constant ERROR_PLATFORM_FAILURE
 */
define('ERROR_PLATFORM_FAILURE', 0x00020000);

/**
 * You did an operation on a derivative that is broken
 *
 * @constant ERROR_BROKEN_DERIVATIVE
 */
define('ERROR_BROKEN_DERIVATIVE', 0x00040000);

/**
 * We tried an unsupported operation
 *
 * @constant ERROR_UNSUPPORTED_OPERATION
 */
define('ERROR_UNSUPPORTED_OPERATION', 0x00080000);

/**
 * We were unable to get a lock in the time allotted
 *
 * @constant ERROR_LOCK_TIMEOUT
 */
define('ERROR_LOCK_TIMEOUT', 0x00100000);

/**
 * Something went wrong when loading or activating a module
 *
 * @constant ERROR_BAD_MODULE
 */
define('ERROR_BAD_MODULE', 0x00200000);

/**
 * The module you tried to use requires configuration 
 *
 * @constant ERROR_CONFIGURATION_REQUIRED
 */
define('ERROR_CONFIGURATION_REQUIRED', 0x00400000);

/**
 * The operation you attempted is unimplemented
 *
 * @constant ERROR_UNIMPLEMENTED
 */
define('ERROR_UNIMPLEMENTED', 0x40000000);

/**
 * An unknown error occurred
 *
 * @constant ERROR_UNKNOWN
 */
define('ERROR_UNKNOWN', 0x80000000);

/**
 * Global storage container and utility class for Gallery
 *
 * This is a container for global information required for gallery
 * operation, such as configuration, session, user, etc.  
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class GalleryStatus {

    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The actual error code
     *
     * @var string $_errorCode
     * @access private
     */
    var $_errorCode;

    /**
     * The file name where the error occurred
     *
     * @var string $_fileName
     * @access private
     */
    var $_fileName;

    /**
     * The line number where the error occurred
     *
     * @var string $_lineNumber
     * @access private
     */
    var $_lineNumber;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    function GalleryStatus($errorCode, $fileName=null, $lineNumber=null) {
	$this->_errorCode = $errorCode;
	$this->_fileName = array($fileName);
	$this->_lineNumber = array($lineNumber);
    }

    /**
     * Return an error status
     *
     * @return object GalleryStatus an error status
     */
    function error($errorCode, $fileName, $lineNumber) {
	return new GalleryStatus(ERROR | $errorCode, $fileName, $lineNumber);
    }

    /**
     * Return a success status
     *
     * @return object GalleryStatus a successful status
     */
    function success() {

	/*
	 * Use a static singleton for the success object, so that we don't have
	 * to construct new objects needlessly.
	 */
	static $success;
	if (empty($success)) {
	    $success = new GalleryStatus(SUCCESS);
	}
	return $success;
    }

    /**
     * Return the filename the error was found in.
     *
     * @return string 
     */
    function getFileName() {
	return $this->_fileName[0];
    }

    /**
     * Return the line number the error was found at.
     *
     * @return int 
     */
    function getLineNumber() {
	return $this->_lineNumber[0];
    }

    /**
     * Return the actual error code
     *
     * @return int 
     */
    function getErrorCode() {
	return $this->_errorCode;
    }

    /**
     * Add a new code to our set of codes
     *
     * @param int an error code
     */
    function addErrorCode($code) {
	$this->_errorCode |= $code;
    }

    /**
     * Add a new file name and line number to our stack trace
     *
     * Don't add the value, unless it's an error.  As a debug measure, whine if
     * somebody tries to add a trace to a success code, because the success
     * code is supposed to be a singleton.
     *
     * @param string a file name
     * @param int a line number
     */
    function wrap($fileName, $lineNumber) {
	if (!empty($this->_errorCode)) {
	    array_push($this->_fileName, $fileName);
	    array_push($this->_lineNumber, $lineNumber);
	}

	return $this;
    }

    /**
     * Is this an error?
     *
     * @return boolean  
     */
    function isError() {
	return $this->_errorCode & ERROR;
    }

    /**
     * Is this a success?
     *
     * @return boolean  
     */
    function isSuccess() {
	return $this->_errorCode == SUCCESS;
    }

    /**
     * Return the error as an HTML string 
     *
     * @return string 
     */
    function getAsHtml() {
	$data = $this->_getAsArray();
	$buf = array_shift($data);
	if (count($data)) {
	    $buf .= '<ul><li>' . join('<li>', $data) . '</ul>';
	}

	return $buf;
    }

    /**
     * Return the error as a plain text string delimited by newlines
     *
     * @return string 
     */
    function getAsText() {
	$data = $this->_getAsArray();
	return join("\n\t", $data);
    }

    /**
     * Internal function turn error code and stack trace into text
     *
     * @return string
     */
    function _getAsArray() {
	global $gallery;
	
	$codes = array();

	/* get_defined_constants() arrived in 4.1? */
	if (function_exists("get_defined_constants")) {
	    foreach (get_defined_constants() as $constantName => $constantValue) {
		if (strpos($constantName, 'ERROR_') === 0) {
		    if ($this->_errorCode & $constantValue) {
			$codes[] = $constantName;
		    }
		}
	    }
	} else {
	    $codes[] = "UnknownErrorName";
	}

	$results = array();
	$results[] = 'Error (' . join(', ', $codes) . ')';

	$base = $gallery->getConfig('code.gallery.base');
	for ($i = 0; $i < count($this->_fileName); $i++) {
	    $results[] = 'in ' .
		    str_replace($base, '', $this->_fileName[$i])  .
		    ' at line ' .
		    $this->_lineNumber[$i];
	}

	return $results;
    }
}
?>
