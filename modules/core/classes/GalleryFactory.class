<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * A factory for creating all different kinds of objects
 *
 * @package GalleryCore
 * @subpackage Classes
 * @abstract
 */
class GalleryFactory {

    /**
     * Get the static factory registry
     *
     * @return array
     * @access private
     * @staticvar array $registry The only factory registry we will need
     * @static
     */
    function &_getFactoryData() {
	static $registry = array();
	return $registry;
    }

    /**
     * Register a new implementation with the factory
     *
     * @param string the class type (eg. 'GalleryGraphics')
     * @param string the class name (eg. 'NetPbmGraphics')
     * @param string an id (eg. 'NetPBM')
     * @param string the file name (eg. '.../classes/NetPbmGraphics.class')
     * @param array optional hints that can be used to locate this
     *              implementation (eg. array('image/jpeg', 'image/gif'))
     * @static
     */
    function registerImplementation($classType, $className, $id, $fileName, $hints=array()) {
	$registry =& GalleryFactory::_getFactoryData();
	$className = strtolower($className);
	$registry['implementations'][$classType][$className] = $fileName;
	$registry['ids'][$classType][$id] = $className;
	foreach ($hints as $hint) {
	    $registry['hints'][$classType][strtolower($hint)][$className] = 1;
	}
    }

    /**
     * Unregister an implementation from the factory by id
     *
     * @param string the class type (eg. 'GalleryGraphics')
     * @param string an id (eg. 'NetPBM')
     * @static
     */
    function unregisterImplementation($classType, $className) {
	$registry =& GalleryFactory::_getFactoryData();
	unset($registry['implementations'][$classType][$className]);
	foreach ($registry['ids'][$classType] as $id => $name) {
	    if ($name == $className) {
		unset($registry['ids'][$classType][$id]);
		break;
	    }
	}
	foreach ($registry['hints'][$classType] as $hint => $names) {
	    if (isset($names[$className])) {
		unset($registry['hints'][$classType][$hint][$className]);
		if (empty($registry['hints'][$classType][$hint])) {
		    unset($registry['hints'][$classType][$hint]);
		}
	    }
	}
    }
    
    /**
     * Create a new instance of the given type
     *
     * @param string the class type (eg. 'GalleryGraphics')
     * @param string the class name (eg. 'NetPbmGraphics')
     * @static
     */
    function newInstance($classType, $className) {
	global $gallery;

	$className = strtolower($className);
	if (!class_exists($className)) {
	    $registry =& GalleryFactory::_getFactoryData();
	    if (empty($registry['implementations'][$classType][$className])) {
		$gallery->debug("Unimplemented: $classType, $className");
		return array(GalleryStatus::success(), null);
	    }
	    
	    $fileName = $registry['implementations'][$classType][$className];

	    /*
	     * Make sure the file exists, unless of course we're actually
	     * loading the platform class.
	     */
	    if ($classType != 'GalleryPlatform') {
		$platform = $gallery->getPlatform();
		if (!$platform->file_exists($fileName)) {
		    return array(GalleryStatus::error(ERROR_BAD_PATH, __FILE__, __LINE__),
				 null);
		    
		}
	    }
	    
	    require_once($fileName);

	    if (!class_exists($className)) {
		return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__),
			     null);
	    }
	}

	return array(GalleryStatus::success(), new $className);
    }

    /**
     * Create a new instance of the given type based on the hint provided
     *
     * @param string the class type (eg. 'GalleryGraphics')
     * @param string the class name (eg. 'image/jpeg')
     * @return array object GalleryStatus a status code,
     *               object an instance
     * @static
     */
    function newInstanceByHint($classType, $hint) {
	$registry =& GalleryFactory::_getFactoryData();
	$hint = strtolower($hint);

	if (empty($registry['hints'][$classType][$hint])) {
	    return array(GalleryStatus::success(), null);
	}

	$classNames = array_keys($registry['hints'][$classType][$hint]);

	/* Right now we just use the first available hint */
	$className = $classNames[0];
	list ($ret, $instance) = GalleryFactory::newInstance($classType, $className);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $instance);
    }

    /**
     * Create a new instance of the given type based on the id provided
     *
     * @param string the class type (eg. 'GalleryGraphics')
     * @param string the class name (eg. 'NetPBM')
     * @return array object GalleryStatus a status code,
     *               object an instance
     * @static
     */
    function newInstanceById($classType, $id) {
	$registry =& GalleryFactory::_getFactoryData();

	if (empty($registry['ids'][$classType][$id])) {
	    return array(GalleryStatus::success(), null);
	}

	$className = $registry['ids'][$classType][$id];
	list ($ret, $instance) = GalleryFactory::newInstance($classType, $className);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $instance);
    }
    
    /**
     * Return the ids of all the available implementations for a class
     *
     * @return array (id => className)
     * @static
     */
    function getAllImplementationIds($classType) {
	$registry =& GalleryFactory::_getFactoryData();
	if (isset($registry['ids'][$classType])) {
	    return $registry['ids'][$classType];
	} else {
	    return null;
	}
    }
}
?>
