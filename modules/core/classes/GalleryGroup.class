<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * A normal group
 *
 */
define('GROUP_NORMAL', 1);

/**
 * The "all users" group 
 *
 */
define('GROUP_ALL_USERS', 2);

/**
 * The "site admins" group 
 *
 */
define('GROUP_SITE_ADMINS', 3);

/**
 * Load the parent class
 */
require_once(dirname(__FILE__) . '/GalleryEntity.class');

/**
 * Representation of a group of users
 *
 * A group is a set of GalleryUsers that can be treated as if they were a
 * single user.  This is very useful for managing permissions.
 *
 * @g2 <class-name>GalleryGroup</class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 * @g2 <requires-id/>
 * 
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryGroup_core extends GalleryEntity {
	
    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The group type
     *
     * @g2 <member>
     * @g2   <member-name>groupType</member-name>
     * @g2   <member-type>INTEGER</member-type>
     * @g2   <member-size>SMALL</member-size>
     * @g2 </member>
     *
     * @var int $_groupType
     * @access private
     */
    var $_groupType;

    /**
     * The group name
     *
     * @g2 <member>
     * @g2   <member-name>groupName</member-name>
     * @g2   <member-type>STRING</member-type>
     * @g2   <member-size>SMALL</member-size>
     * @g2   <unique/>
     * @g2 </member>
     *
     * @var string $_groupName
     * @access private
     */
    var $_groupName;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Create a new instance of this GalleryGroup in the persistent store
     *
     * @param string the name of the new group
     * @param int the type of group
     * @return object GalleryStatus a status code
     */
    function create($groupName, $groupType=GROUP_NORMAL) {
	global $gallery;

	/* Check to see if we have a collision */
	$query = '
        SELECT
          [GalleryGroup::id]
        FROM
          [GalleryGroup]
        WHERE
          [GalleryGroup::groupName] = ?
        ';
	list($ret, $results) =
	    $gallery->search($query, array($groupName), array('count' => 1));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$result = $results->nextResult();
	if ($result[0] > 0) {
	    return GalleryStatus::error(ERROR_COLLISION,
					__FILE__, __LINE__);
	}
	
	$ret = parent::create();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$this->setGroupName($groupName);
	$this->setGroupType($groupType);

	return GalleryStatus::success();
    }

    /**
     * Delete this GalleryGroup
     *
     * Do some bookkeeping, like removing any user/group mappings
     *
     * @access public
     * @return object GalleryStatus a status code
     */
    function delete() {
	global $gallery;

	$ret = parent::delete();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$ret = GalleryUserGroupMap::removeGroup($this->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

}

include(dirname(__FILE__) . '/interfaces/GalleryGroup.inc');
?>
