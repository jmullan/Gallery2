<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */


/**
 * A normal group
 *
 * @constant GROUP_NORMAL
 */
define('GROUP_NORMAL', 1);

/**
 * The "all users" group 
 *
 * @constant GROUP_ALL_USERS
 */
define('GROUP_ALL_USERS', 2);

/**
 * The "all admins" group 
 *
 * @constant GROUP_ALL_ADMINS
 */
define('GROUP_ALL_ADMINS', 3);


/**
 * Representation of a group of users
 *
 * A group is a set of GalleryUsers that can be treated as if they were a
 * single user.  This is very useful for managing permissions.
 *
 * @g2 <class-name>GalleryGroup</class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 * @g2 <requires-id/>
 * 
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

class GalleryGroup_core extends GalleryEntity {
	
    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The group type
     *
     * @g2 <member>
     * @g2   <member-name>groupType</member-name>
     * @g2   <member-type>INTEGER</member-type>
     * @g2   <member-size>SMALL</member-size>
     * @g2 </member>
     *
     * @var int $_groupType
     * @access private
     */
    var $_groupType;

    /**
     * The group name
     *
     * @g2 <member>
     * @g2   <member-name>groupName</member-name>
     * @g2   <member-type>STRING</member-type>
     * @g2   <member-size>SMALL</member-size>
     * @g2   <indexed/>
     * @g2   <unique/>
     * @g2 </member>
     *
     * @var string $_groupName
     * @access private
     */
    var $_groupName;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Create a new instance of this GalleryGroup in the persistent store
     *
     * @param int the type of group
     * @return object GalleryStatus a status code
     */
    function create($groupName, $groupType=GROUP_NORMAL) {
	global $gallery;

	/* Check to see if we have a collision */
	list($ret, $results) =
	    $gallery->search(array('select' => 'COUNT([GalleryGroup::id])',
				   'where' => ('[GalleryGroup::groupName]=?')),
			     array($groupName));

	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$result = $results->nextResult();
	if ($result[0] > 0) {
	    return GalleryStatus::error(ERROR_COLLISION,
					__FILE__, __LINE__);
	}
	
	$ret = parent::create();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$this->setGroupName($groupName);
	$this->setGroupType($groupType);

	return GalleryStatus::success();
    }

    /**
     * Return a map of group names => ids
     *
     * You can specify how many group names to list, and where the windows is
     * in the list of all groups.
     *
     * @param int the number of usernames desired
     * @param int the start of the range
     */
    function getGroupnames($count=null, $offset=null) {
	global $gallery;

	return $gallery->search(
	    array('select' => '[GalleryGroup::id] [GalleryGroup::groupName]',
		  'limit' => array('count' => $count,
				   'offset' => $offset)));
    }

}

include(dirname(__FILE__) . '/interfaces/GalleryGroup.inc');
?>
