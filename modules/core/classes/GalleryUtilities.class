<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * The prefix for all HTTP GET/POST arguments
 *
 * @constant GALLERY_FORM_VARIABLE_PREFIX
 */
define('GALLERY_FORM_VARIABLE_PREFIX', 'g2_');

/**
 * A collection of useful utilities that have no obvious home
 *
 * All of these utilities should be accessed in a static sense,
 * ie:
 *
 *   GalleryUtilities::getFileExtension($filename);
 *
 * Try not to jam too many methods into this class.  Only put methods here if
 * they are of obvious value to the class layer and there's no other home for
 * them.
 * 
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class GalleryUtilities {

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Get the type of the file from its filename
     *
     * Eg, "foo.jpg" yields 'foo', 'jpg'
     *     "foo.bar.jpeg" yields 'foo.bar', 'jpeg'
     *
     * @param string the filename
     * @return array the file base name, the file tag
     */
    function getFileNameComponents($filename) {

	$pos = strrpos($filename, '.');

	/* No dot == bogus */
	if ($pos === false) {
	    return null;
	}

	$pos++;
	
	/* If it's the last char in the name, it's also bogus */
	if ($pos >= strlen($filename)) {
	    return null;
	}

	return array(substr($filename, 0, $pos-1), substr($filename, $pos));
    }

    /**
     * Return the file's tag
     *
     * Eg, "foo.jpg" yields "jpg"
     *
     * @param string the filename
     * @return array the file tag
     */
    function getFileExtension($filename) {
	list ($base, $tag) = GalleryUtilities::getFileNameComponents($filename);
	return $tag;
    }

    /**
     * Return the file's tag
     *
     * Eg, "foo.jpg" yields "foo"
     *
     * @param string the filename
     * @return array the file base
     */
    function getFileBase($filename) {
	list ($base, $tag) = GalleryUtilities::getFileNameComponents($filename);
	return $base;
    }

    /**
     * Figure out the file's mime type
     *
     * Eg, "foo.jpg" returns "image/jpeg"
     *
     * @param string the filename
     * @return string the mime type
     */
    function getMimeType($filename) {
	list ($base, $tag) = GalleryUtilities::getFileNameComponents($filename);
	return GalleryUtilities::convertTagToMime($tag);
    }

    /**
     * Return the specified request variables
     *
     * Sanitize the input data
     */
    function getRequestVariables() {
	global $gallery;
	global $HTTP_POST_VARS;
	global $HTTP_GET_VARS;

	$values = array();
	foreach (func_get_args() as $argName) {
	    /* Prepend our prefix here */
	    $argName = GALLERY_FORM_VARIABLE_PREFIX . $argName;

	    /*
	     * Convert dots to underscores.  Some versions of PHP seem to do
	     * this when processing POST data, so we force the issue here so
	     * that we get consistent behaviour across all versions.
	     */
	    $argName = strtr($argName, '.', '_');
	    
	    if (!empty($HTTP_GET_VARS[$argName])) {
		$values[] = $HTTP_GET_VARS[$argName];
	    } else if (!empty($HTTP_POST_VARS[$argName])) {
		$values[] = $HTTP_POST_VARS[$argName];
	    } else {
		$values[] = null;
	    }
	}

	/* Undo the damage caused by magic_quotes */
	if (get_magic_quotes_gpc()) {
	    for ($i = 0; $i < sizeof($values); $i++) {
		$values[$i] = stripslashes($values[$i]);
	    }
	}

	if (sizeof($values) == 1) {
	    return $values[0];
	} else {
	    return $values;
	}
    }

    function convertTagToMime($tag) {
	static $extensionMap;

	if (empty($extensionMap)) {
	    /*
	     * This data lifted from Apache's mime.types listing.
	     */
	    $extensionMap = array('Z'	    => 'application/x-compress',
				  'ai'	    => 'application/postscript',
				  'aif'	    => 'audio/x-aiff',
				  'aifc'    => 'audio/x-aiff',
				  'aiff'    => 'audio/x-aiff',
				  'asc'	    => 'text/plain',
				  'au'	    => 'audio/basic',
				  'avi'	    => 'video/x-msvideo',
				  'bcpio'   => 'application/x-bcpio',
				  'bin'	    => 'application/octet-stream',
				  'bmp'	    => 'image/bmp',
				  'cdf'	    => 'application/x-netcdf',
				  'class'   => 'application/octet-stream',
				  'cpio'    => 'application/x-cpio',
				  'cpt'	    => 'application/mac-compactpro',
				  'csh'	    => 'application/x-csh',
				  'css'	    => 'text/css',
				  'dcr'	    => 'application/x-director',
				  'dir'	    => 'application/x-director',
				  'djv'	    => 'image/vnd.djvu',
				  'djvu'    => 'image/vnd.djvu',
				  'dll'	    => 'application/octet-stream',
				  'dms'	    => 'application/octet-stream',
				  'doc'	    => 'application/msword',
				  'dvi'	    => 'application/x-dvi',
				  'dxr'	    => 'application/x-director',
				  'eps'	    => 'application/postscript',
				  'etx'	    => 'text/x-setext',
				  'exe'	    => 'application/octet-stream',
				  'ez'	    => 'application/andrew-inset',
				  'gif'	    => 'image/gif',
				  'gtar'    => 'application/x-gtar',
				  'gz'	    => 'application/x-gzip',
				  'hdf'	    => 'application/x-hdf',
				  'hqx'	    => 'application/mac-binhex40',
				  'htm'	    => 'text/html',
				  'html'    => 'text/html',
				  'ice'	    => 'x-conference/x-cooltalk',
				  'ief'	    => 'image/ief',
				  'iges'    => 'model/iges',
				  'igs'	    => 'model/iges',
				  'jpe'	    => 'image/jpeg',
				  'jpeg'    => 'image/jpeg',
				  'jpg'	    => 'image/jpeg',
				  'js'	    => 'application/x-javascript',
				  'kar'	    => 'audio/midi',
				  'latex'   => 'application/x-latex',
				  'lha'	    => 'application/octet-stream',
				  'lzh'	    => 'application/octet-stream',
				  'm3u'	    => 'audio/x-mpegurl',
				  'man'	    => 'application/x-troff-man',
				  'me'	    => 'application/x-troff-me',
				  'mesh'    => 'model/mesh',
				  'mid'	    => 'audio/midi',
				  'midi'    => 'audio/midi',
				  'mif'	    => 'application/vnd.mif',
				  'mov'	    => 'video/quicktime',
				  'movie'   => 'video/x-sgi-movie',
				  'mp2'	    => 'audio/mpeg',
				  'mp3'	    => 'audio/mpeg',
				  'mpe'	    => 'video/mpeg',
				  'mpeg'    => 'video/mpeg',
				  'mpg'	    => 'video/mpeg',
				  'mpga'    => 'audio/mpeg',
				  'ms'	    => 'application/x-troff-ms',
				  'msh'	    => 'model/mesh',
				  'mxu'	    => 'video/vnd.mpegurl',
				  'nc'	    => 'application/x-netcdf',
				  'oda'	    => 'application/oda',
				  'pbm'	    => 'image/x-portable-bitmap',
				  'pdb'	    => 'chemical/x-pdb',
				  'pdf'	    => 'application/pdf',
				  'pgm'	    => 'image/x-portable-graymap',
				  'pgn'	    => 'application/x-chess-pgn',
				  'png'	    => 'image/png',
				  'pnm'	    => 'image/x-portable-anymap',
				  'ppm'	    => 'image/x-portable-pixmap',
				  'ppt'	    => 'application/vnd.ms-powerpoint',
				  'ps'	    => 'application/postscript',
				  'qt'	    => 'video/quicktime',
				  'ra'	    => 'audio/x-realaudio',
				  'ram'	    => 'audio/x-pn-realaudio',
				  'ras'	    => 'image/x-cmu-raster',
				  'rgb'	    => 'image/x-rgb',
				  'rm'	    => 'audio/x-pn-realaudio',
				  'roff'    => 'application/x-troff',
				  'rpm'	    => 'audio/x-pn-realaudio-plugin',
				  'rtf'	    => 'text/rtf',
				  'rtx'	    => 'text/richtext',
				  'sgm'	    => 'text/sgml',
				  'sgml'    => 'text/sgml',
				  'sh'	    => 'application/x-sh',
				  'shar'    => 'application/x-shar',
				  'silo'    => 'model/mesh',
				  'sit'	    => 'application/x-stuffit',
				  'skd'	    => 'application/x-koan',
				  'skm'	    => 'application/x-koan',
				  'skp'	    => 'application/x-koan',
				  'skt'	    => 'application/x-koan',
				  'smi'	    => 'application/smil',
				  'smil'    => 'application/smil',
				  'snd'	    => 'audio/basic',
				  'so'	    => 'application/octet-stream',
				  'spl'	    => 'application/x-futuresplash',
				  'src'	    => 'application/x-wais-source',
				  'sv4cpio' => 'application/x-sv4cpio',
				  'sv4crc'  => 'application/x-sv4crc',
				  'swf'	    => 'application/x-shockwave-flash',
				  't'	    => 'application/x-troff',
				  'tar'	    => 'application/x-tar',
				  'tcl'	    => 'application/x-tcl',
				  'tex'	    => 'application/x-tex',
				  'texi'    => 'application/x-texinfo',
				  'texinfo' => 'application/x-texinfo',
				  'tif'	    => 'image/tiff',
				  'tiff'    => 'image/tiff',
				  'tr'	    => 'application/x-troff',
				  'tsv'	    => 'text/tab-separated-values',
				  'txt'	    => 'text/plain',
				  'ustar'   => 'application/x-ustar',
				  'vcd'	    => 'application/x-cdlink',
				  'vrml'    => 'model/vrml',
				  'vsd'	    => 'application/vnd.visio',
				  'wav'	    => 'audio/x-wav',
				  'wbmp'    => 'image/vnd.wap.wbmp',
				  'wbxml'   => 'application/vnd.wap.wbxml',
				  'wml'	    => 'text/vnd.wap.wml',
				  'wmlc'    => 'application/vnd.wap.wmlc',
				  'wmls'    => 'text/vnd.wap.wmlscript',
				  'wmlsc'   => 'application/vnd.wap.wmlscriptc',
				  'wrl'	    => 'model/vrml',
				  'xbm'	    => 'image/x-xbitmap',
				  'xht'	    => 'application/xhtml+xml',
				  'xhtml'   => 'application/xhtml+xml',
				  'xls'	    => 'application/vnd.ms-excel',
				  'xml'	    => 'text/xml',
				  'xpm'	    => 'image/x-xpixmap',
				  'xsl'	    => 'text/xml',
				  'xwd'	    => 'image/x-xwindowdump',
				  'xyz'	    => 'chemical/x-xyz',
				  'zip'	    => 'application/zip'
				  );
	}

	if (empty($extensionMap[$tag])) {
	    return 'application/unknown';
	} else {
	    return $extensionMap[$tag];
	}
    }

    /**
     * Return a string of ? markers
     *
     * @param int the number of markers to return
     * @access private
     */
    function makeMarkers($count) {
	$markers = array();
	for ($i = 0; $i < $count; $i++) {
	    $markers[$i] = '?';
	}
	return join(', ', $markers);
    }

    /**
     * Execute a set of commands to perform an image operation
     *
     * @return array object GalleryStatus a status code
     *               array any resulting output
     * @access private
     */
    function exec($cmdArray) {
	global $gallery;
	list($ret, $platform) = $gallery->getPlatform();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Build up a platform-correct version of the command and arguments */
	$command = '';
	foreach ($cmdArray as $cmdAndArgs) {
	    if (strlen($command)) {
		$command .= ' | ';
	    }
	    
	    if (is_array($cmdAndArgs)) {
		$cmd = $cmdAndArgs[0];
		$args = array_slice($cmdAndArgs, 1);

		/* Add the platform-specific version of the command */
		$command .= $platform->executablePath($cmd);

		/* And then each argument */
		foreach ($args as $arg) {
		    /* Escape whitespace */
		    $arg = str_replace(' ', '\\ ', $arg);

		    $command .= ' ' . $arg;
		}
	    }
	}

	$results = array();
	$success = $platform->exec($command, $results);
	if ($success) {
	    $ret = GalleryStatus::success();
	} else {
	    $ret = GalleryStatus::error(ERROR_GRAPHICS_FAILURE,
					__FILE__, __LINE__);
	    $ret->wrap(__FILE__, __LINE__);
	}

	return array($ret, $results);
    }

    /**
     * Convert a filesystem path inside the gallery directory to a relative URL
     *
     *  ie /path/to/gallery/themes/classic/styles/style.css =>
     *             themes/classic/styles/style.css
     *
     * @param string path to a file in the gallery directory tree
     * @return string a relative url
     */
    function convertPathToRelativeUrl($path) {
	global $gallery;

	/* Factor the gallery code base out of the path */
	$dirbase = $gallery->getConfig('code.gallery.base');
	$relativePath = str_replace($dirbase, '', $path);

	/* Prepend the URL base */
	$urlBase = $gallery->getConfig('url.gallery.base');
	if (!empty($urlBase)) {
	    return $urlBase . '/' . $relativePath;
	}

	return $relativePath;
    }
}
?>
