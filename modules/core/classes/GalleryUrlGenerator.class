<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Url Generator
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryUrlGenerator {
    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**  
     * The base filename for the application
     *
     * @var string $_baseFile
     * @access private
     */
    var $_baseFile;

    /**
     * A registry of rewrite prefixes to their corresponding View names
     *
     * @var array $_viewPrefixRegistry
     * @access private
     */
    var $_viewPrefixRegistry;

    /**
     * The relative path between G2 request urls and the G2 basedir.
     * Should only be nonempty when G2 is embedded.
     *
     * @var string $_relativeG2Path
     * @private
     */
    var $_relativeG2Path;

    /**
     * The session key for the CMS application in which G2 is embedded.
     * Should only be nonempty when cookieless browsing is supported by CMS.
     *
     * @var string $_embedSessionString
     * @private
     */
    var $_embedSessionKey;

    /**
     * The session id value for the CMS application in which G2 is embedded.
     * Should only be nonempty when cookieless browsing is supported by CMS.
     *
     * @var string $_embedSessionString
     * @private
     */
    var $_embedSessionId;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Constructor
     *
     * @param string the base URL
     * @param string (optional) when embedded, relative path between G2 request urls and G2 basedir
     * @param string (optional) when embedded in CMS app that supports cookieless browsing,
     *                          key=value string for CMS session key and id
     */
    function GalleryUrlGenerator($baseFile, $relativeG2Path=null, $embedSessionString=null) {
	$this->_baseFile = $baseFile;
	$this->_relativeG2Path = $relativeG2Path;
	if (!empty($embedSessionString)) {
	    list ($this->_embedSessionKey, $this->_embedSessionId) =
		explode('=', $embedSessionString, 2);
	}
    }

    /**
     * Associate a prefix (eg "view") with a view (eg "core:ShowItem") so that when we
     * encounter a url like this:
     *
     *   http://example.com/gallery2/main.php/view/blah/blah/blah
     *
     * We know to pass it to the core:ShowItem view
     *
     * @param string the prefix
     * @param string the view name
     * @return object GalleryStatus a status code
     */
    function registerViewPrefix($prefix, $viewName) {
	if (isset($this->_viewPrefixRegistry[$prefix])) {
	    return GalleryStatus::error(ERROR_COLLISION, __FILE, __LINE__);
	}

	$this->_viewPrefixRegistry['forward'][$prefix] = $viewName;
	$this->_viewPrefixRegistry['reverse'][$viewName] = $prefix;
    }

    /**
     * Return the complete current URL
     *
     * @return string the current URL
     */
    function getCurrentUrl() {
	if (!empty($_SERVER['REQUEST_URI'])) {
	    $path = $_SERVER['REQUEST_URI'];
	} else if (!empty($_SERVER['SCRIPT_NAME'])) {
	    $path = $_SERVER['SCRIPT_NAME'];
	    if (!empty($_SERVER['PATH_INFO'])) {
		$path .= $_SERVER['PATH_INFO'];
	    }
	}

	return $this->makeUrl($path);
    }

    /**
     * Return the current server domain
     * @return string the host name
     */
    function getCurrentDomain() {
	if (isset($_SERVER['HTTP_X_FORWARDED_SERVER'])) {
	    return $_SERVER['HTTP_X_FORWARDED_SERVER'];
	} else {
	    return $_SERVER['HTTP_HOST'];
	}
    }

    /**
     * Add given path to current protocol/server/port to create full url
     * @param string the url path; leading slash will be added if missing
     * @return string the url
     */
    function makeUrl($path) {
	static $defaultPort;
	if (!isset($defaultPort)) {
	    $defaultPort = array('http' => 80, 'https' => 443);
	}

	$protocol = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https' : 'http';
	$domain = $this->getCurrentDomain();
	$port = $_SERVER['SERVER_PORT'];
	// Omit port if default for protocol or if HTTP_HOST already contains the port:
	if ($port == $defaultPort[$protocol] || strpos($domain, ':') !== false) {
	    $port = '';
	} else if (!empty($port)) {
	    $port = ':' . $port;
	}
	if (empty($path)) {
	    $path = '/';
	} else if ($path{0} != '/') {
	    $path = '/' . $path;
	}

	return sprintf('%s://%s%s%s', $protocol, $domain, $port, $path);
    }

    /**
     * Return the current URL's directory.  Eg, if the url is:
     *   http://example.com/gallery2/main.php
     *
     * Then we return:
     *   http://example.com/gallery2/
     *
     * @param boolean (optional) if true, ensure G2 base url is returned (different when embedded)
     * @return string the current URL directory
     */
    function getCurrentUrlDir($forceG2Base=false) {
	$url = $this->getCurrentUrl();

	/*
	 * Search for our short query strings, which contain information after the base file, eg:
	 *
	 *    http://example.com/gallery2/main.php/core:ShowView/foo=bar/...
	 *
	 * Extract everything up to but not including main.php:
	 *
	 *    http://example.com/gallery2/
	 */
	if (($i = strpos($url, $this->_baseFile)) !== false) {
	    $url = substr($url, 0, $i);
	}

	/*
	 * If requested, apply relativeG2Path setting to get G2 base url, eg:
	 *    http://example.com/cms/index.php?module=g2&g2_view=...
	 * to:
	 *    http://example.com/gallery2/
	 * where relativeG2Path is ../gallery2/
	 */
	if ($forceG2Base && !empty($this->_relativeG2Path)) {
	    $relativePath = $this->_relativeG2Path;
	    while (strncmp($relativePath, '../', 3) == 0) {
		$url = preg_replace('|/[^/]+/?$|', '/', $url);
		$relativePath = substr($relativePath, 3);
	    }
	    $url .= $relativePath;
	}

	return $url;
    }

    /**
     * Get cookie path that will encompass G2 (and CMS app if embedded)
     *
     * @return string path
     */
    function getCookiePath() {
	$urlComponents = parse_url($this->getCurrentUrlDir());
	$path = $urlComponents['path'];
	if (!empty($this->_relativeG2Path)) {
	    $relativePath = $this->_relativeG2Path;
	    while (strncmp($relativePath, '../', 3) == 0) {
		$path = preg_replace('|/[^/]+/?$|', '/', $path);
		$relativePath = substr($relativePath, 3);
	    }
	}
	if ($path{strlen($path)-1} != '/') {
	    $path .= '/';
	}
	return $path;
    }

    /**
     * Parse our current url since it may be in our compressed format
     *
     * @return array object GalleryStatus a status code
     *               string redirect url or null
     */
    function parseCurrentUrl() {
	$url = $this->getCurrentUrl();

	/* Ignore anything after the '?', as PHP will handle that */
	preg_match('/\?(.*)/', $url, $standardQueryString);
	$url = preg_replace('/\?.*/', '', $url);

	/* Search for data after our base file */
	$redirectUrl = null;
	if (preg_match('|' . preg_quote($this->_baseFile) . '(/.*)|', $url, $regs)) {
	    preg_match('|/(.*?)(/.*)|', $regs[1], $regs);
	    if (sizeof($regs) >= 3) {
		list ($prefix, $queryString) = array($regs[1], $regs[2]);

		if (empty($prefix)) {
		    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null);
		}

		if (empty($this->_viewPrefixRegistry['forward'][$prefix])) {
		    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
		}

		$viewName = $this->_viewPrefixRegistry['forward'][$prefix];
		list ($ret, $view) = GalleryView::loadView($viewName);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}

		list ($ret, $newQueryString) = $view->parseQueryString($queryString);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}

		/*
		 * If the query string was modified, calculate a new URL with the new query string.
		 * We'll pass that back up the chain and the caller can decide to redirect if it
		 * chooses.
		 */
		if (isset($newQueryString)) {
		    $redirectUrl = $this->getCurrentUrlDir() . $this->_baseFile;

		    /* Ditch the prefix if the new query string is empty */
		    if (!empty($newQueryString)) {
			$redirectUrl .= '/' . $prefix . $newQueryString;
		    }

		    /* Tag on the ?foo=bar standard stuff if there was any */
		    if (!empty($standardQueryString)) {
			$redirectUrl .= $standardQueryString[0];
		    }
		}

		/* Wire in the view */
		GalleryUtilities::putRequestVariable('view', $viewName);
	    }
	}

	return array(GalleryStatus::success(), $redirectUrl);
    }
    
    /**
     * Return a valid Gallery URL.
     *
     * @param array key/value pairs to be included in the URL
     * @param boolean (optional) set to true/false to force the session id to be in/not in
     *                the url; by default it is include when cookies are not in use
     */
    function generateUrl($params=array(), $forceSessionId=null) {
	global $gallery;

	$session =& $gallery->getSession();
	if ( (!isset($forceSessionId) && !($session->isUsingCookies())) ||
		(isset($forceSessionId) && $forceSessionId === true)) {
	    if (!empty($this->_embedSessionId)) {
		$params[$this->_embedSessionKey] = $this->_embedSessionId;
	    } else {
		$params[$session->getKey()] = $session->getId();
	    }
	}

	/* If the url specifies a full href, then let's use that */
	if (isset($params['href'])) {
	    $url = $params['href'];
	    unset($params['href']);

	    /* Prepend G2 base dir to all relative urls */
	    $components = parse_url($url);
	    if (!isset($components['host']) && (isset($components['path']) && $components['path'][0] != '/')) {
		/* It's a relative URL */
		$url = $this->getCurrentUrlDir(true) . $url;
	    }
	} else {
	    /* Else start with our regular URL */
	    $url = $this->getCurrentUrlDir() . $this->_baseFile;
	}

	/* Swap in the actual url for the 'return' placeholder, if necessary */
	if (isset($params['return'])) {
	    $params['return'] = $this->getCurrentUrl();

	    /*
	     * In very rare cases (like when you first access the app) it's possible to not be using cookies,
	     * but not have the session id in the url yet.  Detect that case and add the url here.
	     */
	    if (!($session->isUsingCookies())) {
		if (!empty($this->_embedSessionId)) {
		    $sessionKey = $this->_embedSessionKey;
		    $sessionId = $this->_embedSessionId;
		} else {
		    $sessionKey = $session->getKey();
		    $sessionId = $session->getId();
		}
		if (empty($_SERVER['QUERY_STRING']) || strpos($_SERVER['QUERY_STRING'], $sessionKey) === false) {
		    $params['return'] .= $this->buildQueryString(array($sessionKey => $sessionId));
		}
	    }

	    $params['return'] = urlencode($params['return']);
	}

	/* Escape all values */
	foreach (array_keys($params) as $key) {
	    $params[$key] = htmlentities($params[$key]);
	}

	list ($ret, $useShortUrls) =
		GalleryCoreApi::getPluginParameter('module', 'core', 'misc.useShortUrls');
	if (isset($params['forceShortUrls']) ||
	        ($ret->isSuccess() && $useShortUrls == 'true')) {
	    unset($params['forceShortUrls']);
	    
	    /* Give our view a chance to rewrite the query string */
	    $queryString = null;
	    if (isset($params['view'])) {
		$viewName = $params['view'];
		if (isset($this->_viewPrefixRegistry['reverse'][$viewName])) {
		    $prefix = $this->_viewPrefixRegistry['reverse'][$viewName];
		    list ($ret, $view) = GalleryView::loadView($viewName);
		    if ($ret->isError()) {
			/*
			 * Swallow this error.  It's unfortunate, but almost everything that calls this
			 * function is in the business of speaking right to the presentation layer (like
			 * the templating code) and isn't in a position to properly provide an error.
			 * Besides, we know that we have a working URL anyway, so if rewriting doesn't
			 * work just fall back on that.
			 */
		    } else {
			$rewritten = $view->rewriteQueryString($params);
			if (isset($rewritten)) {
			    $queryString = '/' . $prefix . $rewritten;
			}
		    }
		}
	    }
	}

	if (isset($queryString)) {
	    $url .= $queryString;
	} else if (!empty($params)) {
	    $url .= $this->buildQueryString($params, strpos($url, '?') !== false);
	}
	    
	return $url;
    }

    /**
     * Build a query string out of the given params
     *
     * @param array key value pairs (where keys are not prefixed by our form variable prefix)
     * @param boolean (optional) if true return value starts with & instead of ?
     * @return string the query string, prefixed with a '?' and using & as a separator
     */
    function buildQueryString($params, $append=false) {
	if (empty($params)) {
	    return '';
	}

	$args = array();
	foreach ($params as $key => $value) {
	    $args[] = GalleryUtilities::prefixFormVariable($key) . '=' . $value;
	}

	return ($append ? '&amp;' : '?') . join('&amp;', $args);
    }

    /**
     * Append parameters to a url using the G2 prefix and urlencoding the keys and values.
     *
     * @param string the original url
     * @param array key/value pairs to be appended
     * @return string the new url
     */
    function appendParamsToUrl($url, $params) {
	if (strpos($url, '?') === false) {
	    $url .= '?';
	} else {
	    $url .= '&';
	}

	$first = true;
	foreach ($params as $key => $value) {
	    if ($first) {
		$first = false;
	    } else {
		$url .= '&';
	    }
	    
	    $url .= sprintf('%s=%s', urlencode(GalleryUtilities::prefixFormVariable($key)),
				     urlencode($value));
	}

	return $url;
    }
}
?>
