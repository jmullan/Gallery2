<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Url Generator
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryUrlGenerator {
    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The base filename for the application
     *
     * @var string $_baseFile
     * @access private
     */
    var $_baseFile;

    /**
     * A registry of rewrite prefixes to their corresponding View names
     *
     * @var array $_viewPrefixRegistry
     * @access private
     */
    var $_viewPrefixRegistry;

    /**
     * The relative path between G2 request urls and the G2 basedir.
     * Should only be nonempty when G2 is embedded.
     *
     * @var string $_relativeG2Path
     * @private
     */
    var $_relativeG2Path;

    /**
     * The session key=value for the CMS application in which G2 is embedded.
     * Should only be nonempty when cookieless browsing is supported by CMS.
     *
     * @var string $_embedSessionString
     * @private
     */
    var $_embedSessionString;

    /**
     * The navigation id of the current URL
     */
    var $_navId = '';

    /*
     * ****************************************
     *              Static Methods
     * ****************************************
     */

    /**
     * Return the current server domain
     * @return string the host name
     * @static
     */
    function getCurrentDomain() {
	if (isset($_SERVER['HTTP_X_FORWARDED_SERVER'])) {
	    return $_SERVER['HTTP_X_FORWARDED_SERVER'];
	} else {
	    return $_SERVER['HTTP_HOST'];
	}
    }

    /**
     * Add given path to current protocol/server/port to create full url
     * @param string the url path; leading slash will be added if missing
     * @return string the url
     * @static
     */
    function makeUrl($path) {
	static $defaultPort;
	if (!isset($defaultPort)) {
	    $defaultPort = array('http' => 80, 'https' => 443);
	}

	$protocol = (isset($_SERVER['HTTPS']) && $_SERVER['HTTPS'] == 'on') ? 'https' : 'http';
	$domain = GalleryUrlGenerator::getCurrentDomain();
	if (empty($path)) {
	    $path = '/';
	} else if ($path{0} != '/') {
	    $path = '/' . $path;
	}

	return sprintf('%s://%s%s', $protocol, $domain, $path);
    }

    /**
     * Build a query string out of the given params
     *
     * @param array key value pairs (where keys are not prefixed by our form variable prefix)
     * @param boolean (optional) if true return value starts with &amp; instead of ?
     * @return string the query string, prefixed with ? or &amp; and using &amp; as a separator
     * @static
     */
    function buildQueryString($params, $append=false) {
	if (empty($params)) {
	    return '';
	}

	$args = array();
	foreach ($params as $key => $value) {
	    $args[] = GalleryUtilities::prefixFormVariable($key) . '=' . $value;
	}

	return ($append ? '&amp;' : '?') . implode('&amp;', $args);
    }

    /**
     * Append parameters to a url using the G2 prefix and urlencoding the keys and values.
     *
     * @param string the original url
     * @param array key/value pairs to be appended
     * @return string the new url
     * @static
     */
    function appendParamsToUrl($url, $params) {
	$first = true;
	foreach ($params as $key => $value) {
	    if ($first && strpos($url, '?') === false) {
		$url .= '?';
	    } else {
		$url .= '&amp;';
	    }
	    $first = false;

	    $url .= sprintf('%s=%s', urlencode(GalleryUtilities::prefixFormVariable($key)),
				     urlencode($value));
	}

	return $url;
    }

    /**
     * Get the "galleryId" from the current url.
     *
     * @return string "galleryId" for this site.
     * @static
     */
    function getGalleryId() {
	$urlGenerator = new GalleryUrlGenerator();
	$url = $urlGenerator->getCurrentUrl();
	return preg_replace('{^.*?://(.*?)/(main.php|(install|upgrade|lib/tools)/).*$}', '$1', $url);
    }

    /*
     * ****************************************
     *              Object Methods
     * ****************************************
     */

    /**
     * Initializer.  Configure the url generator with all the data it needs.
     *
     * @param string the base URL
     * @param string (optional) when embedded, relative path between G2 request urls and G2 basedir
     * @param string (optional) when embedded in CMS app that supports cookieless browsing,
     *                          key=value string for CMS session key and id
     */
    function init($baseFile, $relativeG2Path=null, $embedSessionString=null) {
	$this->_baseFile = $baseFile;
	$this->_relativeG2Path = $relativeG2Path;
	$this->_embedSessionString = $embedSessionString;

	if (!empty($this->_relativeG2Path) &&
		$this->_relativeG2Path{strlen($this->_relativeG2Path)-1} != '/') {
	    $this->_relativeG2Path .= '/';
	}
    }

    /**
     * Associate a prefix (eg "view") with a view (eg "core:ShowItem") so that when we
     * encounter a url like this:
     *
     *   http://example.com/gallery2/main.php/view/blah/blah/blah
     *
     * We know to pass it to the core:ShowItem view.  Deprecated prefixes will
     * be stored only in the forward map; ie, we'll parse deprecated prefixes
     * but won't generate urls using them.
     *
     * @param string the prefix
     * @param string the view name
     * @param bool optional deprecated prefix.
     * @return object GalleryStatus a status code
     */
    function registerViewPrefix($prefix, $viewName, $deprecated=false) {
	if (isset($this->_viewPrefixRegistry[$prefix])) {
	    return GalleryStatus::error(ERROR_COLLISION, __FILE, __LINE__);
	}

	$this->_viewPrefixRegistry['forward'][$prefix] = $viewName;
	if (!$deprecated) {
	    $this->_viewPrefixRegistry['reverse'][$viewName] = $prefix;
	}
    }

    /**
     * Return the complete current URL
     *
     * @return string the current URL
     */
    function getCurrentUrl() {
	if (!isset($this->_currentUrl)) {
	    if (!empty($_SERVER['REQUEST_URI'])) {
		$path = $_SERVER['REQUEST_URI'];
	    } else if (!empty($_SERVER['SCRIPT_NAME'])) {
		$path = $_SERVER['SCRIPT_NAME'];
		if (!empty($_SERVER['PATH_INFO']) && $_SERVER['PATH_INFO'] != $path) {
		    $path .= $_SERVER['PATH_INFO'];
		}
	    }

	    $this->_currentUrl = GalleryUrlGenerator::makeUrl($path);
	}

	return $this->_currentUrl;
    }

    /**
     * Return the current URL's directory.  Eg, if the url is:
     *   http://example.com/gallery2/main.php
     *
     * Then we return:
     *   http://example.com/gallery2/
     *
     * @param boolean (optional) if true, ensure G2 base url is returned (different when embedded)
     * @return string the current URL directory
     */
    function getCurrentUrlDir($forceG2Base=false) {
	if (isset($this->_currentUrlDir[$forceG2Base])) {
	    return $this->_currentUrlDir[$forceG2Base];
	}

	$url = $this->getCurrentUrl();

	/*
	 * Search for our short query strings, which contain information after the base file, eg:
	 *
	 *    http://example.com/gallery2/main.php/core:ShowView/foo=bar/...
	 *
	 * Extract everything up to but not including main.php:
	 *
	 *    http://example.com/gallery2/
	 */
	if (($i = strpos($url, $this->_baseFile)) !== false) {
	    $url = substr($url, 0, $i);
	}

	/*
	 * If requested, apply relativeG2Path setting to get G2 base url, eg:
	 *    http://example.com/cms/index.php?module=g2&g2_view=...
	 * to:
	 *    http://example.com/gallery2/
	 * where relativeG2Path is ../gallery2/
	 */
	if ($forceG2Base && !empty($this->_relativeG2Path)) {
	    $relativePath = $this->_relativeG2Path;
	    while (strncmp($relativePath, '../', 3) == 0) {
		$url = preg_replace('|/[^/]+/?$|', '/', $url);
		$relativePath = substr($relativePath, 3);
	    }
	    $url .= $relativePath;
	}

	$this->_currentUrlDir[$forceG2Base] = $url;
	return $url;
    }

    /**
     * Get cookie path that will encompass G2 (and CMS app if embedded)
     *
     * @return string path
     */
    function getCookiePath() {
	$urlComponents = parse_url($this->getCurrentUrlDir());
	$path = $urlComponents['path'];
	if (!empty($this->_relativeG2Path)) {
	    $relativePath = $this->_relativeG2Path;
	    while (strncmp($relativePath, '../', 3) == 0) {
		$path = preg_replace('|/[^/]+/?$|', '/', $path);
		$relativePath = substr($relativePath, 3);
	    }
	}
	if ($path{strlen($path)-1} != '/') {
	    $path .= '/';
	}

	return $path;
    }

    /**
     * Initializes the navigation branch
     *
     * If we came here with a 'return' set, we need to branch a new
     * navigation.
     * If we are just navigating through options in the same navigation
     * level, simply pass the navId along.
     * If we are coming back from a navigation, clean up our mess.
     * In other cases we simply have no navigation support.
     *
     * Note: This should be called as soon as we have access to our session
     * and the requestVariables, but before we start generating URLs with
     * generateUrl(). Currently it's called from parseCurrentUrl().
     *
     * @access private
     */
    function initNavigation() {
	global $gallery;
	$gallery->debug("Initializing navigation");
	list ($returnUrl, $returnName, $navId, $fromNavId) =
	    GalleryUtilities::getRequestVariables('return', 'returnName', 'navId', 'fromNavId');
	if (!empty($returnUrl)) {
	    /* Branch a new navigation */
	    $navData = array('returnUrl' => $returnUrl,
			     'returnName' => $returnName);
	    if (!empty($navId)) {
		$navData['returnNavId'] = $navId;
	    }
	    $session =& $gallery->getSession();
	    $this->_navId = $session->addToNavigation($navData);
	    $gallery->debug("Branched navigation: " . $this->_navId);
	} else {
	    if (!empty($fromNavId)) {
		/* We came back from a navigational branch. Delete it */
		$gallery->debug("Back from $fromNavId to $navId");
		$session =& $gallery->getSession();
		$session->jumpNavigation($fromNavId, $navId);
	    }
	    if (!empty($navId)) {
		/* Just continue in our current navigation level */
		$gallery->debug("Continuing navigation $navId");
		$this->_navId = $navId;
	    }
	}
    }

    /**
     * Check if we currently have a "back" link to where we came from
     *
     * @return boolean true if we can go "back"
     */
    function isNavigationBackPossible() {
	global $gallery;
	$session =& $gallery->getSession();
	if (empty($this->_navId)) {
	    return false;
	}
	$navData = $session->getNavigation($this->_navId);
	if (count($navData) > 0) {
	    return true;
	}
	return false;
    }

    /**
     * Get a list of navigation links to go back to where we came
     * from.
     *
     * @param integer set this to get links back to a certain depth
     * @return array of navigational links: array('url' => ...,
     *                                            'name' => 'Back to ...')
     */
    function getNavigationLinks($depth = null) {
	global $gallery;

	list ($ret, $core) = GalleryCoreApi::loadPlugin('module', 'core');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$session =& $gallery->getSession();
	if (empty($this->_navId)) {
	    return array(GalleryStatus::success(), array());
	}
	$navData = $session->getNavigation($this->_navId);
	$links = array();
	$i = 0;
	foreach ($navData as $navItem) {
	    $i++;
	    if ($depth != null && $i > $depth) {
		break;
	    }
	    $url = $navItem['returnUrl'];
	    $params = array('fromNavId' => $this->_navId);
	    if (isset($navItem['returnNavId'])) {
		$params['navId'] = $navItem['returnNavId'];
	    }
	    if (isset($navItem['returnName']) && !empty($navItem['returnName'])) {
		$name = $core->translate(array('text' => 'Back to %s',
					       'arg1' => $navItem['returnName']));
	    } else {
		$name = $core->translate('Back');
	    }
	    $url .= $this->buildQueryString($params, strpos($url, '?') !== false);
	    $links[] = array('url' => $url,
			     'name' => $name);
	}
	return array(GalleryStatus::success(), $links);
    }

    /**
     * Get the current navigation id
     *
     * @return string the navigation id
     */
    function getNavigationId() {
	return $this->_navId;
    }

    /**
     * Parse our current url since it may be in our compressed format
     *
     * @return array object GalleryStatus a status code
     *               string redirect url or null
     */
    function parseCurrentUrl() {
	$url = $this->getCurrentUrl();

	/* Start our navigation */
	$this->initNavigation();

	/* Ignore anything after the '?', as PHP will handle that */
	preg_match('/\?(.*)/', $url, $standardQueryString);
	$url = preg_replace('/\?.*/', '', $url);

	/* Search for data after our base file */
	$redirectUrl = null;
	if (preg_match('|' . preg_quote($this->_baseFile) . '(/.*)|', $url, $regs)) {
	    preg_match('|/(.*?)(/.*)|', $regs[1], $regs);
	    if (sizeof($regs) >= 3) {
		list ($prefix, $queryString) = array($regs[1], $regs[2]);

		if (empty($prefix)) {
		    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null);
		}

		if (empty($this->_viewPrefixRegistry['forward'][$prefix])) {
		    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__,
						      $prefix), null);
		}

		$viewName = $this->_viewPrefixRegistry['forward'][$prefix];
		list ($ret, $view) = GalleryView::loadView($viewName);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}

		list ($ret, $newQueryString) = $view->parseQueryString($queryString);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}

		/*
		 * If the query string was modified, calculate a new URL with the new query string.
		 * We'll pass that back up the chain and the caller can decide to redirect if it
		 * chooses.
		 */
		if (isset($newQueryString)) {
		    $redirectUrl = $this->getCurrentUrlDir() . $this->_baseFile;

		    /* Ditch the prefix if the new query string is empty */
		    if (!empty($newQueryString)) {
			$redirectUrl .= '/' . $prefix . $newQueryString;
		    }

		    /* Tag on the ?foo=bar standard stuff if there was any */
		    if (!empty($standardQueryString)) {
			$redirectUrl .= $standardQueryString[0];
		    }
		}

		/* Wire in the view */
		GalleryUtilities::putRequestVariable('view', $viewName);
	    }
	}

	return array(GalleryStatus::success(), $redirectUrl);
    }

    /**
     * Get an URL to return to the currently loaded view, stripping all
     * parameters that are of navigational nature
     *
     * @return string the URL
     */
    function getNavigationReturnUrl() {
	global $gallery;

	$formUrl = GalleryUtilities::getRequestVariables('formUrl');
	if (!empty($formUrl)) {
	    /*
	     * We don't really have an URL, because we are in a POST request.
	     * This is the last known URL when the form was originally rendered:
	     */
	    return $formUrl;
	}

	$url = $this->getCurrentUrl();
	if ($pos = strpos($url, '?')) {
	    /* We'll add the query params later */
	    $url = substr($url, 0, $pos + 1);
	}
	$urlVariables = GalleryUtilities::getUrlVariablesFiltered(
			array('return', 'returnName', 'navId', 'fromNavId'));
	$args = array();
	foreach ($urlVariables as $key => $value) {
	    $args[] = $key . '=' . $value;
	}
	$url .= implode('&amp;', $args);
	/*
	 * In very rare cases (like first access of the app) it's possible to not be using cookies,
	 * but not have the session id in the url yet.  Detect that case and add the url here.
	 */
	$session =& $gallery->getSession();
	if (!($session->isUsingCookies())) {
	    $sessionCheck = !empty($this->_embedSessionString)
				? $this->_embedSessionString
				: (GalleryUtilities::prefixFormVariable($session->getKey())
				   . '=' . $session->getId());
	    if (strpos($url, $sessionCheck) === false) {
		$url .= (substr($url, -1, 1) == '?' ? '' : '&amp;') . $sessionCheck;
	    }
	}
	return $url;
    }

    /**
     * Return a valid Gallery URL.
     *
     * @param array key/value pairs to be included in the URL
     * @param boolean (optional) set to true/false to force the session id to be in/not in
     *                the url; by default it is include when cookies are not in use
     */
    function generateUrl($params=array(), $forceSessionId=null) {
	global $gallery;

	$session =& $gallery->getSession();
	if ( (!isset($forceSessionId) && !($session->isUsingCookies())) ||
		(isset($forceSessionId) && $forceSessionId === true)) {
	    if (!empty($this->_embedSessionString)) {
		$sessionString = $this->_embedSessionString;
	    } else {
		$params[$session->getKey()] = $session->getId();
	    }
	}
	/* Force direct-g2 url for core:DownloadItem view, even if embedded: */
	if (isset($params['view']) && $params['view'] == 'core:DownloadItem'
		&& !isset($params['href'])) {
	    $params['href'] = 'main.php';
	    if (isset($sessionString)) {
		$sessionString = null;
		$params[$session->getKey()] = $session->getId();
	    }
	}

	/* If the url specifies a full href, then let's use that */
	if (isset($params['href'])) {
	    $url = $params['href'];
	    unset($params['href']);

	    /* Prepend G2 base dir to all relative urls */
	    $components = parse_url($url);
	    if (!isset($components['host']) && (isset($components['path']) && $components['path'][0] != '/')) {
		/* It's a relative URL.  Check for overrides */
		$override = sprintf('%s/local/%s', dirname($url), basename($url));
		$overrideRealPath = dirname($this->_baseFile) . '/' . $override;
		$platform = $gallery->getPlatform();
		if ($platform->file_exists($overrideRealPath)) {
		    $url = $override;
		}
		$url = $this->getCurrentUrlDir(true) . $url;
	    }
	} else {
	    /* Else start with our regular URL */
	    $components = parse_url($this->_baseFile);
	    if (isset($components['host'])) {
		$url = $this->_baseFile;
	    } else {
		$url = $this->getCurrentUrlDir() . $this->_baseFile;
	    }
	}

	/* Swap in the actual url for the 'return' placeholder, if necessary */
	if (isset($params['view'])) {
	    $targetView = $params['view'];
	} else {
	    /* Possibly a controller, but we don't know where it will redirect to */
	    $targetView = '';
	}
	$currentView = $gallery->getCurrentView();
	if ($currentView != $targetView && isset($params['return'])) {
	    /* This link changes the view and the source want us to remember
	     * it for back navigation
	     */
	    list ($ret, $view) = GalleryView::loadView($currentView);
	    if ($ret->isError()) {
		$viewDescription = '';
	    } else {
		list ($ret, $viewDescription) = $view->getViewDescription();
		if ($ret->isError()) {
		    $viewDescription = '';
		}
	    }
	    $params['returnName'] = $viewDescription;
	    $params['return'] = urlencode(str_replace('&amp;', '&', $this->getNavigationReturnUrl()));
	    $params['navId'] = $this->_navId;
	}
	if ((empty($currentView) || $currentView == $targetView || ! empty($params['controller']))
		&& !empty($this->_navId)) {
	    /* We are moving around in the same view, or we are redirecting to
	     * a controller, who knows where it will redirect to.
	     * Let's keep the navigation.
	     */
	    $params['navId'] = $this->_navId;
	}

	/* Escape all values */
	foreach (array_keys($params) as $key) {
	    $params[$key] = htmlentities($params[$key]);
	}

	list ($ret, $useShortUrls) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'misc.useShortUrls');
	if (isset($params['forceShortUrls']) || ($ret->isSuccess() && $useShortUrls == 'true')) {
	    unset($params['forceShortUrls']);

	    /* Give our view a chance to rewrite the query string */
	    $queryString = null;
	    if (isset($params['view'])) {
		$viewName = $params['view'];
		if (isset($this->_viewPrefixRegistry['reverse'][$viewName])) {
		    $prefix = $this->_viewPrefixRegistry['reverse'][$viewName];
		    list ($ret, $view) = GalleryView::loadView($viewName);
		    if ($ret->isError()) {
			/*
			 * Swallow this error.  It's unfortunate, but almost everything that calls
			 * this function is in the business of speaking right to the presentation
			 * layer (like the templating code) and isn't in a position to properly
			 * provide an error.  Besides, we know that we have a working URL anyway,
			 * so if rewriting doesn't work just fall back on that.
			 */
		    } else {
			$rewritten = $view->rewriteQueryString($params);
			if (isset($rewritten)) {
			    $queryString = '/' . $prefix . $rewritten;
			}
		    }
		}
	    }
	}

	if (isset($queryString)) {
	    $url .= $queryString;
	} else if (!empty($params)) {
	    $url .= $this->buildQueryString($params, strpos($url, '?') !== false);
	}
	if (isset($sessionString)) {
	    $url .= ((strpos($url, '?') === false) ? '?' : '&amp;') . $sessionString;
	}

	return $url;
    }
}
?>
