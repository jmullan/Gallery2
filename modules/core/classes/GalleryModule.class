<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Module meta-info container
 *
 * This is a container for information about a given module.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryModule {

    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The id of this module
     *
     * @var string _name
     * @access private
     */
    var $_id;

    /**
     * The name of this module
     *
     * @var string _name
     * @access private
     */
    var $_name;

    /**
     * The description of this module
     *
     * @var string _description
     * @access private
     */
    var $_description;

    /**
     * The version of this module
     *
     * @var string _version
     * @access private
     */
    var $_version;

    /**
     * The module group (optional)
     * Used to better organize site admin pages
     *
     * @var array('group'=>group, 'groupLabel'=>localized label) _group
     * @access private
     */
    var $_group;

    /**
     * This module's callbacks.  This is a pipe (|) delimited string containing
     * one or more of the following values:
     *   performFactoryRegistrations
     *   registerEventListeners
     *   getSiteAdminViews
     *   getItemAdminViews
     *   getUserAdminViews
     *   getSystemLinks
     *   loadSystemContent
     *   getItemLinks
     *   getItemSummaries
     *
     * eg: getItemAdminViews|getSystemLinks|getItemLinks
     *
     * @var string _callbacks
     * @access private
     */
    var $_callbacks;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Localize the given content
     *
     * @see Gallery::translate()
     *
     * @param mixed a single string, or an array of parameters
     * @return string the localized value
     */
    function translate($params) {
	global $gallery;

	if (!is_array($params)) {
	    $params = array('text' => $params);
	}

	$translator =& $gallery->getTranslator();
	list ($ret, $content) =
	    $translator->translateDomain('modules_' . $this->getId(), $params);
	if ($ret->isError()) {
	    if ($gallery->getDebug()) {
		$gallery->debug($ret->getAsHtml());
	    }
	    return 'Translation error';
	} else {
	    return $content;
	}
    }

    /**
     * Register any event listeners that this module requires.  Each module will get a chance to
     * register its event listeners before any events are posted.
     */
    function registerEventListeners() {
    }

    /**
     * The factory will call this method the first time its used to load up all
     * factory data that it requires.  Register all factory implementations for the
     * module here.
     */
    function performFactoryRegistrations() {
    }

    /**
     * Perform any upgrade tasks required at this point.  This method
     * is called if the module version in the module.inc does not match the
     * version number in the database.  The framework will upgrade database
     * tables as necessary, but it is the responsibility of the module to:
     *
     * 1. Register/unregister permissions
     * 2. Move or massage data as required by the upgrade
     *
     * This method will be called with a null version on an initial install.
     * @param string the current version (null if this is an initial install)
     * @return object GalleryStatus a status code
     * @access protected
     */
    function upgrade($currentVersion) {
	return GalleryStatus::success();
    }

    /**
     * Perform the module installation or upgrade, whatever is required.
     *
     * It will do the following:
     * 1. Get the current version of the module (if its already installed)
     * 2. Request that the storage subsystem install this module's database
     *    tables (which will also upgrade any tables that require it)
     * 3. Let the module perform any necessary upgrade tasks.
     * 4. Set the new module version into the database
     *
     * Modules should not need to override this method.  Instead they should
     * override the upgrade method and put all their module specific logic
     * there.
     *
     * @return object GalleryStatus a status code
     */
    function installOrUpgrade($bootstrap=false) {
	global $gallery;

	if ($bootstrap) {
	    /*
	     * If we're in bootstrap mode, then we may not even have a version
	     * table.  If we try to query it, we will cause our current
	     * transaction to abort on some databases.  So, just assume that
	     * there's no installed version.
	     */
	    $installedVersion = null;
	} else {
	    list ($ret, $installedVersion) = $this->getModuleParameter('_version');
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	if ($installedVersion != $this->getVersion()) {
	    /* The store requires configuration. */
	    $storage =& $gallery->getStorage();
	    $ret = $storage->configureStore($this->getId());
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    $ret = $this->upgrade($installedVersion);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    
	    $ret = $this->setModuleParameter('_version', $this->getVersion());
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    $ret = $this->setModuleParameter('_callbacks', $this->getCallbacks());
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}
	
	return GalleryStatus::success();
    }

    /**
     * Remove this module's plugin parameters and all of its database tables.
     *
     * @return object GalleryStatus a status code
     */
    function uninstall() {
	global $gallery;

	/* Find and remove all module permissions */
	$ret = GalleryCoreApi::unregisterModulePermissions($this->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Remove this plugin */
	$ret = GalleryCoreApi::removePlugin('module', $this->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}


	/* Remove all tables */
	$storage =& $gallery->getStorage();
	$ret = $storage->unconfigureStore($this->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	    
	return GalleryStatus::success();
    }

    /**
     * Activate this module
     *
     * @return array object GalleryStatus a status code
     *               array redirect info for error page (empty for success)
     */
    function activate() {
	global $gallery;

	/*
	 * Make sure that we don't need configuration before we allow
	 * activation.
	 */
	list ($ret, $needs) = $this->needsConfiguration();
        if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if ($needs) {
	    return array(GalleryStatus::error(ERROR_CONFIGURATION_REQUIRED, __FILE__, __LINE__), null);
	} else {
	    $ret = GalleryCoreApi::activatePlugin('module', $this->getId());
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    return array(GalleryStatus::success(), array());
	}
    }

    /**
     * Deactivate this module
     *
     * @return array object GalleryStatus a status code
     *               array redirect info for error page (empty for success)
     */
    function deactivate() {
	$ret = GalleryCoreApi::deactivatePlugin('module', $this->getId());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), array());
    }

    /**
     * Is this module active?
     *
     * @return array object GalleryStatus a status code
     *               boolean true if active
     */
    function isActive() {
	global $gallery;

	list($ret, $moduleStatus) = GalleryCoreApi::fetchPluginStatus('module');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (empty($moduleStatus[$this->getId()])) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__,
					      sprintf("No such module: %s", $this->getId())),
			 null);
	}

	return array(GalleryStatus::success(),
		     empty($moduleStatus[$this->getId()]['active']) ? false : true);
    }

    /**
     * Does this module require configuration before it can be activated?
     *
     * @return array object GalleryStatus a status code
     *               boolean
     */
    function needsConfiguration() {
	global $gallery;

	return array(GalleryStatus::success(), false);
    }

    /**
     * Is this module recommended to be installed/activated during the 
     * installer?
     * 
     * Default is false which is a security measure. Only recommend modules
     * that by default do not expose any sensitive data. For example, the
     * debug module shouldn't be recommended because it can show filesystem
     * paths. Also don't recommend installing modules that might change some
     * default gallery behaviour (e.g. the squarethumbs module)
     */
    function isRecommendedDuringInstall() {
	return false;
    }

    /**
     * Allow this module to autoconfigure itself.  It should only autoconfigure if it is
     * marked as needing configuration (see GalleryModule::needsConfiguration) and it should
     * do its best to choose a reasonable configuration.  Return true upon success,
     * even if nothing has to be done to get a successful configuration.  This method
     * should accept all the module's defaults wherever possible.
     *
     * @return array object GalleryStatus a status code
     *               boolean
     */
    function autoConfigure() {
	/* By default we can't auto configure */
	return array(GalleryStatus::success(), false);
    }

    /**
     * Get the name of the GalleryView containing the various site
     * administration views for this module.  Note that the text value is
     * localized since they will be displayed directly to the user.
     * Include group/groupLabel in data to override the values from getGroup().
     *
     * @return array object GalleryStatus a status code
     *               array( array('name' => name, 'view' => view,
     *                 [optional: 'group' => group, 'groupLabel' => label]), ...)
     */
    function getSiteAdminViews() {
	return array(GalleryStatus::success(), array());
    }

    /**
     * Get the list of GalleryViews containing the various item
     * administration views for this module.  The module should check
     * permissions and item type to determine which views are applicable for
     * the authenticated user.  As with getSiteAdminViews(), the view title
     * text must be localized.
     *
     * @param object GalleryItem an item
     * @return array object GalleryStatus a status code
     *               array( array('name' => name, 'view' => view), ...)
     */
    function getItemAdminViews($item) {
	return array(GalleryStatus::success(), array());
    }

    /**
     * Get the list of GalleryViews containing the various user administration
     * views for this module.  The module should check permissions and item
     * type to determine which views are applicable for the authenticated user.
     * As with getSiteAdminViews(), the view title text must be localized.
     *
     * @param object GalleryUser a user
     * @return array object GalleryStatus a status code
     *               array( array('name' => name, 'view' => view), ...)
     */
    function getUserAdminViews($user) {
	return array(GalleryStatus::success(), array());
    }

    /**
     * Get the name of the GalleryView containing the administration view
     * specifically for configuring this module.  It may be one that is also
     * listed in getSiteAdminViews().
     *
     * @return array string view name
     */
    function getConfigurationView() {
	return null;
    }

    /**
     * Return 0 or more system-specific links to an arbitrary module view.  Get
     * the name of the GalleryView containing the administration view
     * specifically for configuring this module.  It may be one that is also
     * listed in getSiteAdminViews().  As with getSiteAdminViews(), the view
     * title text must be localized.
     *
     * @return array object GalleryStatus a status code
     *               array(array('text' => 'localized text',
     *                           'params' => array(key => value, key => value))
     *                     ...)
     */
    function getSystemLinks() {
	return array(GalleryStatus::success(), array());
    }

    /**
     * Return system level content.  This is similar to system links, but it's
     * actually HTML content and not a link to a view.  It must be localized
     * since it will be displayed directly to the user.  This is useful for
     * things like the search module that want to embed a search box on every
     * page.
     *
     * Each module can provide one or more System Content blocks.
     *
     * @param object GalleryTemplate a template
     * @return array object GalleryStatus a status code
     *               array ('name' => the template file path, ...)
     */

    function loadSystemContent(&$template) {
	return array(GalleryStatus::success(), null);
    }

    /**
     * Return 0 or more item-specific links to an arbitrary module view.
     * These are links to item specific module views.  For example, the
     * comments module uses this to link to the "add comments" view.
     *
     * @param array object GalleryItem
     * @return array object GalleryStatus a status code
     *               array(itemId => array(array('text' => 'localized text',
     *                                           'params' => array(key => value, key => value))
     *                                     ...))
     */
    function getItemLinks($items) {
	return array(GalleryStatus::success(), array());
    }

    /**
     * Return module-specific summary content about the item
     *
     * @param array object GalleryItem
     * @return array object GalleryStatus a status code
     *               string HTML content
     */
    function getItemSummaries($items) {
	return array(GalleryStatus::success(), array());
    }

    /**
     * Return module-specific details content about the item This is localized
     * content specific to a given item.  You can use this to return in-depth
     * item content.  In theory it should be more detailed than the item
     * summaries.
     *
     * @param object GalleryTemplate a template
     * @param object GalleryItem
     * @return array object GalleryStatus a status code
     *               string path to template file to include
     */
    function loadItemDetails(&$template, $item) {
	return array(GalleryStatus::success(), null);
    }

    /**
     * @see Gallery::getModuleParameter()
     */
    function getModuleParameter($parameterName) {
	global $gallery;
	list ($ret, $value) =
	    GalleryCoreApi::getPluginParameter('module', $this->getId(), $parameterName);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $value);
    }

    /**
     * @see Gallery::setModuleParameter()
     */
    function setModuleParameter($parameterName, $parameterValue) {
	global $gallery;
	$ret = GalleryCoreApi::setPluginParameter('module', $this->getId(),
					    $parameterName, $parameterValue);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /* Getters and setters below */

    function setId($id) {
	$this->_id = $id;
    }

    function getId() {
	return $this->_id;
    }

    function setName($name) {
	$this->_name = $name;
    }

    function getName() {
	return $this->_name;
    }

    function setDescription($description) {
	$this->_description = $description;
    }

    function getDescription() {
	return $this->_description;
    }

    function setVersion($version) {
	$this->_version = $version;
    }

    function getVersion() {
	return $this->_version;
    }

    function setGroup($group, $groupLabel) {
	$this->_group = array('group' => $group, 'groupLabel' => $groupLabel);
    }

    function getGroup() {
	return $this->_group;
    }

    function getCallbacks() {
	return $this->_callbacks;
    }

    function setCallbacks($callbacks) {
	$this->_callbacks = $callbacks;
    }
}
?>
