<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Storage constants.
 */

/**
 * Integer type
 *
 * @constant STORAGE_TYPE_INTEGER
 */
define('STORAGE_TYPE_INTEGER', 0x00000001);

/**
 * String type
 *
 * @constant STORAGE_TYPE_STRING
 */
define('STORAGE_TYPE_STRING', 0x00000002);

/**
 * Text type
 *
 * @constant STORAGE_TYPE_TEXT
 */
define('STORAGE_TYPE_TEXT', 0x00000004);

/**
 * Text type
 *
 * @constant STORAGE_TYPE_BOOLEAN
 */
define('STORAGE_TYPE_BOOLEAN', 0x00000008);

/**
 * Timestamp type
 *
 * @constant STORAGE_TYPE_TIMESTAMP
 */
define('STORAGE_TYPE_TIMESTAMP', 0x00000010);

/**
 * ID type
 *
 * @constant STORAGE_TYPE_ID
 */
define('STORAGE_TYPE_ID', 0x00000020);

/**
 * Newly created flag
 *
 * @constant STORAGE_FLAG_NEWLY_CREATED
 */
define('STORAGE_FLAG_NEWLY_CREATED', 0x00000001);

/**
 * Deleted flag
 *
 * @constant STORAGE_FLAG_DELETED
 */
define('STORAGE_FLAG_DELETED', 0x00000002);

/**
 * Interface to the storage mechanism
 *
 * This object provides the hooks for saving and restoring objects in the persistent store.
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 * @abstract
 */
class GalleryStorage {

    /**
     * A cache of member info that we've discovered about various classes
     *
     * @var array $_entityInfoCache
     * @access private
     */
    var $_entityInfoCache;

    /**
     * A cache of classes that we've created in order to figure out their type
     *
     * @var array $_classTypeCache
     * @access private
     */
    var $_classTypeCache;

    /**
     * A cache of member info that we've discovered about various maps
     *
     * @var array $_mapInfoCache
     * @access private
     */
    var $_mapInfoCache;

    /**
     * The debugging flag
     *
     * @var boolean $_debug
     * @access private
     */
    var $_debug;

    /**
     * Constructor
     *
     */
    function GalleryStorage() {
	/* Initialize our Gallery map and class info caches */
	$this->_entityInfoCache = array();
	$this->_mapInfoCache = array();
    }

    /**
     * Do any initialization that is required by this storage type
     *
     * @return object GallerySatus a status code
     */
    function init() {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED,
				    __FILE__, __LINE__);
    }

    /**
     * Turn debugging on or off.
     */
    function setDebug($bool) {
	$this->_debug = (bool)$bool;
    }

    /**
     * Get the debug state
     */
    function getDebug() {
	return $this->_debug;
    }

    /**
     * Load the GalleryEntities with the ids specified
     *
     * @param mixed the ids (or id) of the GalleryEntities to load
     * @return array object GalleryStatus a status code,
     *               mixed one GalleryEntity or an array of GalleryEntities
     */
    function loadEntities($id) {
	return array(GalleryStatus::error(ERROR_UNIMPLEMENTED,
					  __FILE__, __LINE__),
		     null);
    }

    /**
     * Save the changes to the GalleryEntity.  
     *
     * @access public
     * @param object GalleryEntity the GalleryEntity to save
     * @return object GalleryStatus a status code
     */
    function saveEntity($object) {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED,
				    __FILE__, __LINE__);
    }

    /**
     * Delete the GalleryEntity.
     *
     * @access public
     * @param object GalleryEntity the GalleryEntity to delete
     * @return object GalleryStatus a status code
     */
    function deleteEntity($object) {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED,
				    __FILE__, __LINE__);
    }

    /**
     * Create a new GalleryEntity 
     *
     * @access public
     * @param object GalleryEntity the GalleryEntity to put the data in
     * @return object GalleryStatus a status code
     */
    function newEntity(&$object) {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED,
				    __FILE__, __LINE__);
    }

    /**
     * Refresh a new GalleryEntity
     *
     * Refresh a GalleryEntity from the database, if it has changed.
     * Return the new object.
     *
     * @access public
     * @param object GalleryEntity the object to refresh
     * @return array object GalleryStatus a status code,
     *               GalleryEntity the refreshed object
     */
    function refreshEntity($object) {
	return array(GalleryStatus::error(ERROR_UNIMPLEMENTED,
					  __FILE__, __LINE__),
		     null);
    }

    /**
     * Acquire read locks on the given items
     *
     * @access public
     * @param int timeout before giving up on the lock
     * @return array object GalleryStatus a status code
     *               object a GalleryLock instance
     */
    function acquireReadLock($ids, $timeout) {
	return array(GalleryStatus::error(ERROR_UNIMPLEMENTED,
					  __FILE__, __LINE__),
		     null);
    }

    /**
     * Acquire write locks on the given items
     *
     * @access public
     * @param int timeout before giving up on the lock
     * @return array object GalleryStatus a status code
     *               object a GalleryLock instance
     */
    function acquireWriteLock($ids, $timeout) {
	return array(GalleryStatus::error(ERROR_UNIMPLEMENTED,
					  __FILE__, __LINE__),
		     null);
    }

    /**
     * Release a lock
     *
     * @param object a GalleryLock instance
     */
    function releaseLock($lock) {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED,
				    __FILE__, __LINE__);
    }

    /**
     * Search the persistent store for the target values matching the given
     * criteria
     *
     * This is a flexible and powerful search mechanism.  You specify which
     * class members you wish to search for, how you want to search them, and
     * which class members you want returned in a very SQL like syntax
     *
     * @access public
     * @param array the search query
     * @param array any explicit data values required by the query
     * @return array object GalleryStatus a status code,
     *               array the result values
     */
    function search($query, $data=array()) {
	return array(GalleryStatus::error(ERROR_UNIMPLEMENTED,
					  __FILE__, __LINE__),
		     null);
    }
    
    /**
     * Add a new entry to a map
     *
     * @param object the map we're working on
     * @param array an associative array of data about the entry
     * @return object GalleryStatus a status code
     */
    function addMapEntry($map, $entry) {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED,
				    __FILE__, __LINE__);
    }

    /**
     * Remove an entry from a map
     *
     * @param object the map we're working on
     * @param array an associative array of data about the entry
     * @return object GalleryStatus a status code
     */
    function removeMapEntry($map, $entry) {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED,
				    __FILE__, __LINE__);
    }

    /**
     * Update an entry in this map
     *
     * @param array the entry to match
     * @param array the values to change
     * @return object GalleryStatus a status code
     */
    function updateMapEntry($map, $match, $change) {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED,
				    __FILE__, __LINE__);
    }

    /**
     * Test to see if our authentication information for this GalleryStorage is
     * valid.
     *
     * @return object GalleryStatus a status code
     */
    function testAuthentication() {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED,
				    __FILE__, __LINE__);
    }

    /**
     * Create the persistent store for this strategy.
     *
     * @return object GalleryStatus a status code
     */
    function createStore() {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED,
				    __FILE__, __LINE__);
    }
    
    /**
     * Configure the persistent store for this strategy, for the given module.
     *
     * @return object GalleryStatus a status code
     */
    function configureStore($moduleName) {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED,
				    __FILE__, __LINE__);
    }
    
    /**
     * Remove the persistent store for this strategy.
     *
     * @return object GalleryStatus a status code
     */
    function removeStore() {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED,
				    __FILE__, __LINE__);
    }
    
    /**
     * Describe all the members of a entity
     *
     * @param string a class name
     * @access protected
     * @return array object GalleryStatus a status code
     *               member => info associative array
     */
    function _describeEntityMembers($entityName) {
	global $gallery;

	if (empty($this->_entityInfoCache[$entityName])) {
	    list ($ret, $entity) = $gallery->newEntity($entityName);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    $this->_entityInfoCache[$entityName] = $entity->getPersistentMemberInfo();
	}

	return array(GalleryStatus::success(),
		     $this->_entityInfoCache[$entityName]);
    }

    /**
     * Describe all the members of a map
     *
     * @param string a class name
     * @return array member name => member type
     * @access protected
     */
    function _describeMapMembers($mapName) {

	if (empty($this->_mapInfoCache[$mapName])) {
	    eval("\$info = $mapName::getMapInfo();");
	    $this->_mapInfoCache[$mapName] = $info;
	}

	return $this->_mapInfoCache[$mapName];
    }

    /**
     * Identify this class as an entity or a map
     *
     * @param string the name of a class
     * @return array object GalleryStatus a status code
     *               string 'entity' or 'map'
     * @access protected
     */
    function _getClassType($className) {
	global $gallery;

	if (!isset($this->_classTypeCache[$className])) {
	    if (!class_exists($className)) {
		$array = $gallery->lookupRegistry('GalleryEntity.' . $className);
		if (empty($array)) {
		    $gallery->debug("Unknown class type: $className");
		    return array(GalleryStatus::error(ERROR_BAD_PARAMETER,
						      __FILE__, __LINE__),
				 null);
		}

		$platform = $gallery->getPlatform();

		if (!$platform->file_exists($array[0])) {
		    $gallery->debug("Class file missing: $array[0]");
		    return array(GalleryStatus::error(ERROR_BAD_PARAMETER,
						      __FILE__, __LINE__),
				 null);
		}
		
		require_once($array[0]);
		if (!class_exists($className)) {
		    $gallery->debug("Class $className not defined in file $array[0]");
		    return array(GalleryStatus::error(ERROR_BAD_PARAMETER,
						      __FILE__, __LINE__),
				 null);
		}
	    }
	    
	    $this->_classTypeCache[$className] = new $className;
	}

	if (method_exists($this->_classTypeCache[$className], 'getPersistentMemberInfo')) {
	    $type = 'entity';
	} else {
	    $type = 'map';
	}
	return array(GalleryStatus::success(), $type);
    }
    
    /**
     * Start tracing
     *
     * This method is for use by GalleryStorage subclasses only.  If Gallery is
     * in debug, this method will begin storing all output and routing it into
     * Gallery's debug system
     *
     * @access protected
     */
    function _traceStart() {
	global $gallery;
	if ($gallery->getDebug()) {
	    ob_start();
	}
    }

    /**
     * Stop tracing
     *
     * This method is for use by GalleryStorage subclasses only.  If Gallery is
     * in debug, this will method will stop tracing.
     */
    function _traceStop() {
	global $gallery;
	if ($gallery->getDebug()) {
	    $buf = ob_get_contents();
	    ob_end_clean();
	    
	    $gallery->debug($buf);
	}
    }
}
?>
