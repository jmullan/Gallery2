<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/* Load the parent class */
require_once(dirname(__FILE__) . '/GalleryDerivative.class');

/**
 * A DataContainer for images
 *
 * A container for a single image.  This image may or may not be
 * cacheable (depending on whether or not it's a derivative image).
 *
 * @g2 <class-name>GalleryDerivativeImage</class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 * @g2 <requires-id/>
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class GalleryDerivativeImage_core extends GalleryDerivative {

    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The width of the image.
     *
     * @g2 <member>
     * @g2   <member-name>width</member-name>
     * @g2   <member-type>INTEGER</member-type>
     * @g2 </member>
     *
     * @var int $_width
     * @access private
     */
    var $_width;

    /**
     * The height of the image.
     *
     * @g2 <member>
     * @g2   <member-name>height</member-name>
     * @g2   <member-type>INTEGER</member-type>
     * @g2 </member>
     *
     * @var int $_height
     * @access private
     */
    var $_height;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Create a new GalleryDerivativeImage
     *
     * @param int the id of the parent GalleryItem
     * @param int the type of derivative image
     * @return object GalleryStatus a status code
     */
    function create($parentId, $derivativeType) {
	global $gallery;

	if ($derivativeType != DERIVATIVE_TYPE_IMAGE_THUMBNAIL &&
	        $derivativeType != DERIVATIVE_TYPE_IMAGE_RESIZE &&
	        $derivativeType != DERIVATIVE_TYPE_IMAGE_PREFERRED) {
	    $gallery->debug("Unknown derivative type: $derivativeType");
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/* We can't have more than one THUMBNAIL or PREFERRED */
	if ($derivativeType == DERIVATIVE_TYPE_IMAGE_THUMBNAIL ||
	    $derivativeType == DERIVATIVE_TYPE_IMAGE_PREFERRED) {
	    list($ret, $searchResults) =
		$gallery->search(array('select' => 'COUNT([GalleryChildEntity::id])',
				       'where' => ('[GalleryChildEntity::parentId]=? AND ' .
						   '[GalleryDerivative::derivativeType]=?')),
			     array($parentId, $derivativeType));
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    
	    $result = $searchResults->nextResult();
	    if ($result[0] > 0) {
		return GalleryStatus::error(ERROR_COLLISION,
					    __FILE__, __LINE__);
	    }
	}

	$ret = parent::create($parentId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Save our derivative type */
	$this->setDerivativeType($derivativeType);

	return GalleryStatus::success();
    }

    /**
     * Rebuild the cache.
     *
     * Only applicable if isDerative() returns true.  The commands
     * this item understands follow this EBNF grammar:
     *
     * COMMAND   = <OPERATION> | <OPERATION> ; <COMMAND>
     * OPERATION = ROTATE | SCALE | RESIZE | CROP
     * ROTATE    = "rotate" ("-90" | "180" | "90")
     * CROP      = "crop" NUMBER NUMBER NUMBER NUMBER
     * RESIZE    = "resize" NUMBER NUMBER 
     * SCALE     = "scale" NUMBER
     * 
     * @access public
     * @return object GalleryStatus a status code
     */
    function rebuildCache() {
	global $gallery;
	$ret = parent::rebuildCache();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Load the source */
	$sourceId = $this->getDerivativeSourceId();
	list($ret, $source) = $gallery->loadEntitiesById($sourceId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* If the source is a derivative, make sure the it's current */
	if (is_subclass_of($source, 'GalleryDerivative')) {
	    list ($ret, $isCurrent) = $source->isCacheCurrent();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    if (!$isCurrent) {
		$ret = $source->rebuildCache();
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	}
	
	/* Get the path of the source for the next operation */
	list($ret, $sourcePath) = $source->fetchPath();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Figure out our target path */
	list($ret, $destPath) = $this->fetchPath();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	list($ret, $graphics) = $gallery->getGraphics();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Now apply our derivative commands to create the cache file */
	$commands = split(';', $this->getDerivativeCommands());
	foreach ($commands as $command) {
	    $pieces = split(' ', $command);
	    switch (array_shift($pieces)) {
	    case 'rotate':
		if (sizeof($pieces) != 1) {
		    return GalleryStatus::error(ERROR_BAD_PARAMETER,
						__FILE__, __LINE__);
		}
		
		$ret = $graphics->rotateImage($sourcePath,
					      $destPath,
					      $pieces[0]);
		break;

	    case 'crop':
		if (sizeof($pieces) != 4) {
		    return GalleryStatus::error(ERROR_BAD_PARAMETER,
						__FILE__, __LINE__);
		}
		
		$ret = $graphics->cropImage($sourcePath,
					    $destPath,
					    $pieces[0],
					    $pieces[1],
					    $pieces[2],
					    $pieces[3]);
		break;

	    case 'resize':
		if (sizeof($pieces) != 2) {
		    return GalleryStatus::error(ERROR_BAD_PARAMETER,
						__FILE__, __LINE__);
		}
		
		$ret = $graphics->resizeImage($sourcePath,
					      $destPath,
					      $pieces[0],
					      $pieces[1]);
		break;

	    case 'scale':
		if (sizeof($pieces) != 1) {
		    return GalleryStatus::error(ERROR_BAD_PARAMETER,
						__FILE__, __LINE__);
		}
		
		$ret = $graphics->scaleImage($sourcePath,
					     $destPath,
					     $pieces[0]);
		break;

	    default:
		return GalleryStatus::error(ERROR_BAD_PARAMETER,
					    __FILE__, __LINE__);
	    }

	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    /*
	     * After the first operation, the source for the next operation is the
	     * same file as the original.
	     */
	    $sourcePath = $destPath;
	}

	$platform = $gallery->getPlatform();
	
	/* Get the size of the file */
	if ($platform->file_exists($destPath)) {
	    $size = $platform->filesize($destPath);
	} else {
	    $size = -1;
	}
	
	/*
	 * If the actual size differs from the database, update the
	 * item.
	 */
	if ($size != $this->getDerivativeSize()) {
	    $this->setDerivativeSize($size);
	}

	/*
	 * If we don't have any dimensions, find them out here.
	 */
	if ($this->getWidth() == 0 || $this->getHeight() == 0) {
	    list ($ret, $width, $height) =
		$graphics->getImageDimensions($destPath, $this->getDerivativeMimeType());
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    $this->setWidth($width);
	    $this->setHeight($height);
	}

	/*
	 * Save our changes.  If we fail to update the database then don't
	 * worry about it.
	 */
	if ($this->isModified()) {
	    list ($ret, $lockId) = $gallery->acquireWriteLock($this->getId(), 1);
	    if ($ret->isSuccess()) {
		$ret = $this->save();
		$gallery->releaseLocks($lockId);
	    }
	}

	return GalleryStatus::success();
    }

    /**
     * Break this derivative's dependencies
     *
     * This is used when the object's derivativeSource gets deleted
     *
     * @return object GalleryStatus a status code
     */
    function breakDerivativeDependency() {
	$ret = parent::breakDerivativeDependency();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* We've got no dimensions any more */
	$this->setWidth(0);
	$this->setHeight(0);

	return GalleryStatus::success();
    }
}

include(dirname(__FILE__) . '/interfaces/GalleryDerivativeImage.inc');
?>
