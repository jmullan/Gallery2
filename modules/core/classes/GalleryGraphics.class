<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Resize function
 *
 * @constant IMAGE_FUNCTION_RESIZE
 */
define('IMAGE_FUNCTION_RESIZE', 0x00000001);

/**
 * Scale function
 *
 * @constant IMAGE_FUNCTION_SCALE
 */
define('IMAGE_FUNCTION_SCALE', 0x00000002);

/**
 * Rotate function
 *
 * @constant IMAGE_FUNCTION_ROTATE
 */
define('IMAGE_FUNCTION_ROTATE', 0x00000004);

/**
 * IMAGE_FUNCTION_CROP
 *
 * @constant IMAGE_FUNCTION_CROP
 */
define('IMAGE_FUNCTION_CROP', 0x00000008);

/**
 * IMAGE_FUNCTION_PROPERTIES
 *
 * @constant IMAGE_FUNCTION_PROPERTIES
 */
define('IMAGE_FUNCTION_PROPERTIES', 0x00000008);


/**
 * A toolkit for manipulating images
 *
 * This class defines the API for image toolkits.  Subclasses should
 * implement this for a specific image toolkit, such as NetPBM or
 * ImageMagick.
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class GalleryGraphics {
    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The functions supported by this toolkit
     *
     * @var int $_supportedFunctions
     * @access private
     */
    var $_supportedFunctions = array();

    /**
     * The mime types supported by this toolkit
     *
     * @var array $_supportedMimeTypes
     * @access private
     */
    var $_supportedMimeTypes = array();

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Get the list of supported mime types
     *
     * Get the list of supported file types that this toolkit can
     * support.
     *
     * @access public
     * @return array mime types (eg "image/jpeg", "image/png")
     */
    function getSupportedMimeTypes() {
	return array_keys($this->_supportedMimeTypes);
    }

    /**
     * Is this mime type supported?
     *
     * @access public
     * @param string a mime type (eg "image/jpeg", "image/png")
     * @return bool true if the type given is supported 
     */
    function isSupportedMimeType($mimeType) {
	return isset($this->_supportedMimeTypes[strtolower($mimeType)]);
    }

    /**
     * Get a list of functions that this toolkit supports
     *
     * Not all toolkits support all functions.  GD for example, may not support
     * rotation.
     *
     * @access public
     * @return int a bitmask of IMAGE_FUNCTION constants
     */
    function getSupportedFunctions() {
	return $this->_supportedFunctions;
    }

    /**
     * Is this function supported?
     *
     * @param int a IMAGE_FUNCTION flag
     * @return bool true if yes, false if no.
     */
    function isSupportedFunction($flag) {
	return (boolean)($this->_supportedFunctions & $flag);
    }

    /**
     * Calculate the dimensions of the image file
     *
     * Calculate the dimensions of the image file
     * 
     * @access public
     * @param string a mime type
     * @param string a file name
     * @param string an optional mime type hint
     * @return array object GalleryStatus a status code,
     *               int the image width, int the image height
     */
    function getImageDimensions($mimeType, $filename, $mimeType=false) {
	return array(GalleryStatus::error(ERROR_UNIMPLEMENTED,
					  __FILE__, __LINE__),
		     null, null);
    }

    /**
     * Resize the image to the target size specified
     *
     * Resize the image located at sourceFilename and write the results in      
     * destFilename.  Resize the image to the dimensions provided, ignoring
     * changes to the aspect ratio.
     *	
     * @access public
     * @param string a mime type
     * @param string the source file name
     * @param string the destination file name (it will be overwritten if it exists)
     * @param string int the target width
     * @param string int the target height
     * @return object GalleryStatus a status code
     */
    function resizeImage($mimeType, $sourceFilename, $destFilename, $width, $height) {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__);
    }
		
    /**
     * Scale the image to the target size specified
     *
     * Resize the image located at sourceFilename and write the results in      
     * destFilename.  Scale the image such that it fits within the bounding
     * box specified by $targetSize x $targetSize, while maintaining the
     * aspect ratio.
     *	
     * @access public
     * @param string a mime type
     * @param string the source file name
     * @param string the destination file name (it will be overwritten if it exists)
     * @param string int the target size
     * @return object GalleryStatus a status code
     */
    function scaleImage($mimeType, $sourceFilename, $destFilename, $targetSize) {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__);
    }
		
    /**
     * Rotate the image by the degrees specified
     *
     * Rotate the image located at sourceFilename and write the results in      
     * destFilename.
     *	
     * @access public
     * @param string a mime type
     * @param string the source file name
     * @param string the destination file name (it will be overwritten if it exists)
     * @param string int the degrees to be rotated (one of -90, 180, 90)
     * @return object GalleryStatus a status code
     */
    function rotateImage($mimeType, $sourceFilename, $destFilename, $degrees) {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__);
    }
		
    /**
     * Crop the image by the position and dimensions specified
     *
     * Crop the image located at sourceFilename and write the results in 
     * destFilename.  The upper left corner of the subsection is
     * at the x, y coordinate provided and the lower right is
     * x+width, y+height.
     *	
     * @access public
     * @param string a mime type
     * @param string the source file name
     * @param string the destination file name (it will be overwritten if it exists)
     * @param int x-axis origin
     * @param int y-axis origin
     * @param int width of crop rectangle
     * @param int height of crop rectangle
     * @return object GalleryStatus a status code
     */
    function cropImage($mimeType, $sourceFilename, $destFilename, $x, $y, $width, $height) {
	return GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__);
    }

    /**
     * Is this image valid?
     *
     * Is this image valid?  Can it be handled by this toolkit?
     * 
     * @access public
     * @param string a mime type
     * @param string the image file name
     * @return array object a status code
     *               boolean true if the filename represents an image file
     */
    function isValidImage($mimeType, $filename) {
	return array(GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__),
		     null);
    }
}
?>
