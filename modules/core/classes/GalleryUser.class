<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Representation of a single user
 * 
 * This class is the container for information about Gallery     
 * users.  Each instance of User contains a unique user id. It   
 * must be implemented by a class that has a persistent store for
 * the relevant user data.
 *
 * @gallery metainfo 1.0
 * 
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

class GalleryUser extends GalleryNucleus {
	
    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The User's username
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_STRING
     * @gallery flag STORAGE_MODIFIER_SMALL
     *
     * @var string $_username
     * @access private
     */
    var $_username;

    /**
     * The User's full name
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_STRING
     * @gallery flag STORAGE_MODIFIER_MEDIUM
     *
     * @var string $_fullname
     * @access private
     */
    var $_fullname;

    /**
     * The User's password in a hashed form.
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_STRING
     * @gallery flag STORAGE_MODIFIER_SMALL
     *
     * @var string $_password
     * @access private
     */
    var $_password;

    /**
     * The User's email address.
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_STRING
     * @gallery flag STORAGE_MODIFIER_MEDIUM
     *
     * @var string $_email
     * @access private
     */
    var $_email;

    /**
     * Is the user a Gallery admininstrator?
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_BOOLEAN
     *
     * @var boolean $_isAdmin
     * @access private
     */
    var $_isAdmin;

    /**
     * The set of groups this user belongs to
     *
     * @gallery persistent
     * @gallery flag STORAGE_TYPE_MAP
     * @gallery flag STORAGE_TYPE_INTEGER
     *
     * @var object GalleryList $_groups
     * @access private
     */
    var $_groups;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Constructor
     *
     * Create a new blank instance, and register any members that need to
     * persist in our storage.
     *
     * @access public
     * @param string the id of an object to be loaded
     */
    function GalleryUser() {
	$this->GalleryNucleus();
    }

    /**
     * Create a new instance of this GalleryUser in the persistent store
     *
     * @return object GalleryStatus a status code
     */
    function create() {

	/* GalleryUser's have no parent */
	$null = null;
	return parent::create($null);
    }

    /**
     * Is the password provided correct?
     *
     * @param string a plaintext password
     * @return boolean true if the password is correct
     */
    function isCorrectPassword($password) {
	return !strcmp(md5($password), $this->getPassword());
    }

    /**
     * Change the user's password to the new value provided.
     *
     * @param string a plaintext password
     */
    function changePassword($newPassword) {
	$this->setPassword(md5($newPassword));
    }

    /**
     * Add this user to the group id specified.
     *
     * @param object GalleryGroup the group instance
     */
    function addToGroup(&$group) {
	$groups =& $this->getGroups();
	$groups->set($group->getId(), 1);

	$users =& $group->getUsers();
	$users->set($this->getId(), 1);
    }

    /**
     * Add this user to the group id specified.
     *
     * @param object GalleryGroup the group instance
     */
    function removeFromGroup($group) {
	$groups =& $this->getGroups();
	$groups->remove($group->getId());

	$users =& $group->getUsers();
	$users->remove($this->getId());
    }

    /* BEGIN: Accessor Block.  DO NOT MODIFY! */
    
    /**
     * Return the meta class information about this class
     *
     * @return array member => array(type, class)
     */
    function getMetaInfo() {
        $meta = parent::getMetaInfo();
        $meta['members']['username'] = array(
            'class' => 'GalleryUser',
            'type' => STORAGE_TYPE_STRING |
                      STORAGE_MODIFIER_SMALL);
        $meta['members']['isAdmin'] = array(
            'class' => 'GalleryUser',
            'type' => STORAGE_TYPE_BOOLEAN);
        $meta['members']['fullname'] = array(
            'class' => 'GalleryUser',
            'type' => STORAGE_TYPE_STRING |
                      STORAGE_MODIFIER_MEDIUM);
        $meta['members']['password'] = array(
            'class' => 'GalleryUser',
            'type' => STORAGE_TYPE_STRING |
                      STORAGE_MODIFIER_SMALL);
        $meta['members']['email'] = array(
            'class' => 'GalleryUser',
            'type' => STORAGE_TYPE_STRING |
                      STORAGE_MODIFIER_MEDIUM);
        $meta['members']['groups'] = array(
            'class' => 'GalleryUser',
            'type' => STORAGE_TYPE_MAP |
                      STORAGE_TYPE_INTEGER);
        $meta['version'] = array('major' => 1, 'minor' => 0);
    
        return $meta;
    }
    
    /**
     * Set the value of email
     * 
     * @param string the new value for email
     * @access public
     */
    function setEmail($value) {
        assert('isset($value)');
        $this->_email = $value;
        $this->setModifiedFlag('email', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of email
     * 
     * @access public
     * @return string the current value of email
     */
    function getEmail() {
        if (!isset($this->_email)) {
            return null;
        }
        return $this->_email;
    }
    
    /**
     * Set the value of fullname
     * 
     * @param string the new value for fullname
     * @access public
     */
    function setFullname($value) {
        assert('isset($value)');
        $this->_fullname = $value;
        $this->setModifiedFlag('fullname', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of fullname
     * 
     * @access public
     * @return string the current value of fullname
     */
    function getFullname() {
        if (!isset($this->_fullname)) {
            return null;
        }
        return $this->_fullname;
    }
    
    /**
     * Get a reference to the groups object
     * 
     * @access public
     * @return object GalleryMap the groups instance
     */
    function &getGroups() {
        if (!($this->getLoadedFlag('groups'))) {
            global $gallery;
            $storage = $gallery->getStorage();
            $this->_groups = new GalleryMap();
            $this->_groups->setParentInfo($this, 'groups');
            $storage->loadMember($this, 'groups', $this->_groups);
        }
        return $this->_groups;
    }
    
    /**
     * Set the value of isAdmin
     * 
     * @param bool the new value for isAdmin
     * @access public
     */
    function setIsAdmin($value) {
        assert('isset($value)');
        if (empty($value)) {
            $value = 0;
        } else {
            $value = 1;
        }
        $this->_isAdmin = $value;
        $this->setModifiedFlag('isAdmin', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of isAdmin
     * 
     * @access public
     * @return bool the current value of isAdmin
     */
    function getIsAdmin() {
        if (!isset($this->_isAdmin)) {
            return null;
        }
        return $this->_isAdmin;
    }
    
    /**
     * Set the value of password
     * 
     * @param string the new value for password
     * @access public
     */
    function setPassword($value) {
        assert('isset($value)');
        $this->_password = $value;
        $this->setModifiedFlag('password', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of password
     * 
     * @access public
     * @return string the current value of password
     */
    function getPassword() {
        if (!isset($this->_password)) {
            return null;
        }
        return $this->_password;
    }
    
    /**
     * Set the value of username
     * 
     * @param string the new value for username
     * @access public
     */
    function setUsername($value) {
        assert('isset($value)');
        $this->_username = $value;
        $this->setModifiedFlag('username', MEMBER_MODIFIED);
    }
    
    /**
     * Get the value of username
     * 
     * @access public
     * @return string the current value of username
     */
    function getUsername() {
        if (!isset($this->_username)) {
            return null;
        }
        return $this->_username;
    }
    
    
    /* END: Accessor Block.  DO NOT MODIFY! */
}
?>
