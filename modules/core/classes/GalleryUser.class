<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Representation of a single user
 * 
 * This class is the container for information about Gallery     
 * users.  Each instance of User contains a unique user id. It   
 * must be implemented by a class that has a persistent store for
 * the relevant user data.
 *
 * @g2 <class-name>GalleryUser</class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 * @g2 <requires-id/>
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

class GalleryUser_core extends GalleryEntity {
	
    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The User's username
     *
     * @g2 <member>
     * @g2   <member-name>username</member-name>
     * @g2   <member-type>STRING</member-type>
     * @g2   <member-size>SMALL</member-size>
     * @g2   <indexed/>
     * @g2   <unique/>
     * @g2   <required/>
     * @g2 </member>
     *
     * @var string $_username
     * @access private
     */
    var $_username;

    /**
     * The User's full name
     *
     * @g2 <member>
     * @g2   <member-name>fullname</member-name>
     * @g2   <member-type>STRING</member-type>
     * @g2   <member-size>MEDIUM</member-size>
     * @g2 </member>
     *
     * @var string $_fullname
     * @access private
     */
    var $_fullname;

    /**
     * The User's password in a hashed form.
     *
     * @g2 <member>
     * @g2   <member-name>password</member-name>
     * @g2   <member-type>STRING</member-type>
     * @g2   <member-size>SMALL</member-size>
     * @g2 </member>
     *
     * @var string $_password
     * @access private
     */
    var $_password;

    /**
     * The User's email address.
     *
     * @g2 <member>
     * @g2   <member-name>email</member-name>
     * @g2   <member-type>STRING</member-type>
     * @g2   <member-size>MEDIUM</member-size>
     * @g2   <unique/>
     * @g2 </member>
     *
     * @var string $_email
     * @access private
     */
    var $_email;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Create a new instance of this user in the persistent store
     *
     * @return object GalleryStatus a status code
     */
    function create($username) {
	global $gallery;

	/* Check to see if we have a collision */
	list($ret, $results) =
	    $gallery->search(array('select' => 'COUNT([GalleryUser::id])',
				   'where' => ('[GalleryUser::username]=?')),
			     array($username));

	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$result = $results->nextResult();
	if ($result[0] > 0) {
	    return GalleryStatus::error(ERROR_COLLISION,
					__FILE__, __LINE__);
	}
	
	/* We don't have a parent, so pass in null */
	$ret = parent::create(null);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	$this->setUsername($username);
	return GalleryStatus::success();
    }

    /**
     * Is the password provided correct?
     *
     * @param string a plaintext password
     * @return boolean true if the password is correct
     */
    function isCorrectPassword($password) {
	return !strcmp(md5($password), $this->getPassword());
    }

    /**
     * Change the user's password to the new value provided.
     *
     * @param string a plaintext password
     */
    function changePassword($newPassword) {
	$this->setPassword(md5($newPassword));
    }

    /**
     * Return a map of usernames => userids
     *
     * You can specify how many usernames to list, and where the windows is in
     * the list of all users.
     *
     * @param int the number of usernames desired
     * @param int the start of the range
     */
    function getUsernames($count=null, $start=null, $offset=null) {
	global $gallery;

	return $gallery->search(
	    array('select' => '[GalleryUser::id] [GalleryUser::userName]',
		  'limit' => array('count' => $count,
				   'offset' => $offset)));
    }

    /**
     * Save the changes to this GalleryUser
     *
     * Do some bookkeeping, like adding the user to the all user and admin
     * groups.
     *
     * @access public
     * @return object GalleryStatus a status code
     */
    function save() {
	global $gallery;

	if ($this->testPersistentFlag(STORAGE_FLAG_NEWLY_CREATED)) {
	    $newlyCreated = 1;
	} else {
	    $newlyCreated = 0;
	}

	$ret = parent::save();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if ($newlyCreated) {
	    /* Add her to the all user group */
	    $ret = GalleryUserGroupMap::addUserToGroup($this->getId(),
                $gallery->getConfig('core.id.allUserGroup'));
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	return GalleryStatus::success();
    }

    /**
     * Delete this GalleryUser
     *
     * Do some bookkeeping, like removing the user from all groups.
     *
     * @access public
     * @return object GalleryStatus a status code
     */
    function delete() {
	global $gallery;

	$ret = parent::delete();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$ret = GalleryUserGroupMap::removeUser($this->getId());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }
}

include(dirname(__FILE__) . '/interfaces/GalleryUser.inc');
?>
