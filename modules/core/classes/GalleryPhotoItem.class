<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Load the parent class
 */
require_once(dirname(__FILE__) . '/GalleryDataItem.class');

/**
 * A subclass of DataItem for containing Photos
 *
 * A GalleryItem whose source is an image.  It contains no image   
 * information itself, but contains several ImageContainer
 * versions of the original.
 *
 * @g2 <class-name>GalleryPhotoItem</class-name>
 * @g2 <parent-class-name>GalleryDataItem</parent-class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 * @g2 <requires-id/>
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryPhotoItem_core extends GalleryDataItem {

    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The width this image.
     *
     * @g2 <member>
     * @g2   <member-name>width</member-name>
     * @g2   <member-type>INTEGER</member-type>
     * @g2 </member>
     *
     * @var int $_width
     * @access private
     */
    var $_width;

    /**
     * The height this image.
     *
     * @g2 <member>
     * @g2   <member-name>height</member-name>
     * @g2   <member-type>INTEGER</member-type>
     * @g2 </member>
     *
     * @var int $_height
     * @access private
     */
    var $_height;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * @see GalleryDataItem::canBeViewedInline()
     */
    function canBeViewedInline() {
	return true;
    }
    
    /**
     * Create a new GalleryPhotoItem from an image file
     *
     * @param int the id of the parent GalleryItem
     * @param string the path to the source image
     * @param string the mime type
     * @param string the desired name of the new item
     * @return object GalleryStatus a status code
     */
    function create($parentId, $imageFileName, $mimeType, $targetName=null) {
	global $gallery;

	$platform = $gallery->getPlatform();

	/* Validate the input filename */
	if (empty($imageFileName)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	if (!$platform->file_exists($imageFileName)) {
	    return GalleryStatus::error(ERROR_BAD_PATH,
					__FILE__, __LINE__);
	}

	list ($ret, $toolkit) =
	    GalleryToolkitHelper::getToolkitByProperty($mimeType, 'dimensions');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if (isset($toolkit)) {
	    list ($ret, $dimensions) =
		$toolkit->getProperty($mimeType, 'dimensions', $imageFileName);
	    if ($ret->isError()) {

		/*
		 * If we can't get the dimensions, it's probably a bad image.
		 * Or our graphics code is broken.  Hard to tell which at this point.
		 */
		$ret->addErrorCode(ERROR_BAD_DATA_TYPE);
		return $ret->wrap(__FILE__, __LINE__);
	    }
	} else {
	    $dimensions = array(0, 0);
	}

	/* Create our data item */
	$ret = parent::create($parentId, $imageFileName,
			      $mimeType, $targetName);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$this->setWidth($dimensions[0]);
	$this->setHeight($dimensions[1]);

	return GalleryStatus::success();
    }

    /**
     * @see GalleryDataItem::rescan()
     */
    function rescan() {
	global $gallery;
	
	$ret = parent::rescan();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list ($ret, $path) = $this->fetchPath();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list ($ret, $toolkit) =
	    GalleryToolkitHelper::getToolkitByProperty($mimeType, 'dimensions');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if (isset($toolkit)) {
	    list ($ret, $dimensions) =
		$toolkit->getProperty($mimeType, 'dimensions', $path);
	    if ($ret->isError()) {

		/*
		 * If we can't get the dimensions, it's probably a bad image.
		 * Or our graphics code is broken.  Hard to tell which at this point.
		 */
		$ret->addErrorCode(ERROR_BAD_DATA_TYPE);
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    $this->setWidth($dimensions[0]);
	    $this->setHeight($dimensions[1]);
	}

	return GalleryStatus::success();
    }

    /**
     * @see GalleryItem::itemTypeName
     */
    function itemTypeName() {
	global $gallery;
	return $gallery->i18n('Photo');
    }
}

include(dirname(__FILE__) . '/interfaces/GalleryPhotoItem.inc');
?>
