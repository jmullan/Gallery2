<?php
/*
 * $RCSfile
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Utility class for caching data
 *
 * Very useful in the case where retrieving or building data sets is expensive,
 * and the data doesn't change during the lifetime of the request.  This class
 * serves as a hash table where any data class can store and retrieve cached
 * data.
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryDataCache {

    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * Our data cache
     *
     * @var array
     * @access private
     */
    var $_cache = array();
    
    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Constructor
     */
    function GalleryDataCache() {
	$this->_cache = array();
    }

    /**
     * Get the singleton of this class
     *
     * @return object GalleryDataCache
     * @access private
     * @staticvar GalleryDataCache $galleryDataCache The only DataCache that we will need
     * @static
     */
    function &_singleton() {
	static $galleryDataCache;
	if (empty($galleryDataCache)) {
	    $galleryDataCache = new GalleryDataCache();
	}

	return $galleryDataCache;
    }

    /**
     * Store data in the cache
     *
     * You must provide a unique key.  Existing keys are overwritten.
     *
     * @param string the key
     * @param mixed the data
     * @static
     */
    function put($key, $data) {
	    
	/* Delegate to the singleton */
	if (empty($this) || get_class($this) != 'gallerydatacache') {
	    $galleryDataCache =& GalleryDataCache::_singleton();
	    return $galleryDataCache->put($key, $data);
	}

	$this->_cache[$key] = $data;
    }

    /**
     * Retrieve data from the cache
     *
     * @param string the key
     * @return mixed the cached data
     * @static
     */
    function get($key) {
	global $gallery;

	/* Delegate to the singleton */
	if (empty($this) || get_class($this) != 'gallerydatacache') {
	    $galleryDataCache =& GalleryDataCache::_singleton();
	    return $galleryDataCache->get($key);
	}

	return $this->_cache[$key];
    }

    /**
     * Does the cache contain the key specified?
     *
     * @param string the function/method name
     * @return boolean true if the cache contains the key given
     * @static
     */
    function containsKey($key) {
	global $gallery;

	/* Delegate to the singleton */
	if (empty($this) || get_class($this) != 'gallerydatacache') {
	    $galleryDataCache =& GalleryDataCache::_singleton();
	    return $galleryDataCache->containsKey($key);
	}

	return isset($this->_cache[$key]);
    }

    /**
     * Empty the cache
     *
     * @static
     */
    function reset() {
	/* Delegate to the singleton */
	if (empty($this) || get_class($this) != 'gallerydatacache') {
	    $galleryDataCache =& GalleryDataCache::_singleton();
	    return $galleryDataCache->reset();
	}

	$this->_cache = array();
    }
}
?>
