<?php
/*
 * $RCSfile
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Representation of the many-to-many relationship between users and groups
 *
 * @g2 <class-name>GalleryPermissionMap</class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 *
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

class GalleryPermissionMap_core {

    /**
     * @g2 <map>
     * @g2   <member>
     * @g2     <member-name>itemId</member-name>
     * @g2     <member-type>INTEGER</member-type>
     * @g2     <member-size>MEDIUM</member-size>
     * @g2     <indexed/>
     * @g2   </member>
     * @g2   <member>
     * @g2     <member-name>userId</member-name>
     * @g2     <member-type>INTEGER</member-type>
     * @g2     <member-size>MEDIUM</member-size>
     * @g2     <indexed/>
     * @g2   </member>
     * @g2   <member>
     * @g2     <member-name>groupId</member-name>
     * @g2     <member-type>INTEGER</member-type>
     * @g2     <member-size>MEDIUM</member-size>
     * @g2     <indexed/>
     * @g2   </member>
     * @g2   <member>
     * @g2     <member-name>permission</member-name>
     * @g2     <member-type>INTEGER</member-type>
     * @g2     <member-size>LARGE</member-size>
     * @g2   </member>
     * @g2 </map>
     */
    
    /**
     * Add the given itemid, userid, permission mapping
     *
     * @param int the id of the GalleryGroup
     * @param array userid => permission
     * @return object GalleryStatus a status code
     */
    function addUserPermission($itemId, $userId, $permission) {
	$ret = GalleryPermissionMap::_addPermission($itemId, $userId, 0, $permission);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	return GalleryStatus::success();
    }
	
    /**
     * Add the given itemid, userid, permission mapping
     *
     * @param int the id of the GalleryGroup
     * @param array userid => permission
     * @return object GalleryStatus a status code
     */
    function addGroupPermission($itemId, $groupId, $permission) {
	$ret = GalleryPermissionMap::_addPermission($itemId, 0, $groupId, $permission);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	return GalleryStatus::success();
    }

    /**
     * Add the given itemId, userId, groupId, permission mapping
     *
     * @param int the id of the GalleryItem
     * @param int the id of the GalleryUser
     * @param int the userid of the GalleryGroup
     * @param int the permission id
     * @return object GalleryStatus a status code
     * @access private
     */
    function _addPermission($itemId, $userId, $groupId, $permission) {
	global $gallery;
	if (empty($itemId) || !isset($userId) || !isset($groupId) || empty($permission)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/* Convert the permission to its bits */
	list($ret, $addBits) = GalleryPermissionSetMap::convertIdsToBits($permission);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Figure out what the current bits are */
	list ($ret, $currentBitsTable) =
	    GalleryPermissionMap::_fetchPermissionBitsForItem($itemId, $userId, $groupId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Figure out if we had any bits to begin with */
	if (isset($currentBitsTable[$itemId])) {
	    $needToAddEntry = 0;
	    $currentBits = $currentBitsTable[$itemId];
	} else {
	    $needToAddEntry = 1;
	    $currentBits = 0;
	}

	$newBits = $currentBits | $addBits;
	
	if ($needToAddEntry) {
	    /* Add a new entry in our map to reflect this change. */
	    $ret = GalleryPermissionMap::addMapEntry(array('itemId' => $itemId,
							   'userId' => $userId,
							   'groupId' => $groupId,
							   'permission' => $newBits));
	} else {
	    /* Update the current entry in our map to reflect this change. */
	    $ret = GalleryPermissionMap::updateMapEntry(array('itemId' => $itemId,
							      'userId' => $userId,
							      'groupId' => $groupId),
							array('permission' => $newBits));
	}
						     
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	return GalleryStatus::success();
    }

    /**
     * Remove the given itemid, userid, permission mapping
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     */
    function removeUserPermission($itemId, $userId, $permission) {
	$ret = GalleryPermissionMap::_removePermission($itemId, $userId, 0, $permission);
	
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Remove the given itemid, userid, permission mapping
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     */
    function removeGroupPermission($itemId, $groupId, $permission) {
	$ret = GalleryPermissionMap::_removePermission($itemId, 0, $groupId, $permission);
	
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Remove the given itemId, userId, groupId, permission mapping
     *
     * @param int the id of the GalleryItem
     * @param int the id of the GalleryUser
     * @param int the userid of the GalleryGroup
     * @param int the permission id
     * @return object GalleryStatus a status code
     * @access private
     */
    function _removePermission($itemId, $userId, $groupId, $permission) {
	global $gallery;
	if (empty($itemId) || !isset($userId) || !isset($groupId) || empty($permission)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/* Convert the permission to its bits */
	list($ret, $removeBits) = GalleryPermissionSetMap::convertIdsToBits($permission);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Figure out what the current bits are */
	list ($ret, $currentBitsTable)  =
	    GalleryPermissionMap::_fetchPermissionBitsForItem($itemId, $userId, $groupId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if (!isset($currentBitsTable[$itemId])) {
	    $gallery->debug("Tried to remove a non-existant permission!");
	    return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__);
	}

	$currentBits = $currentBitsTable[$itemId];
	$newBits = $currentBits & ~$removeBits;
	
	if ($newBits == 0) {
	    /* Remove the map entry; there are no bits left! */
	    $ret = GalleryPermissionMap::removeMapEntry(array('itemId' => $itemId,
							      'userId' => $userId,
							      'groupId' => $groupId));
	} else {
	    /* Update the current entry in our map to reflect this change. */
	    $ret = GalleryPermissionMap::updateMapEntry(array('itemId' => $itemId,
							      'userId' => $userId,
							      'groupId' => $groupId),
							array('permission' => $newBits));
	}
						     
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	return GalleryStatus::success();
    }

    /**
     * Remove all permissions for the given itemid
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     */
    function removeItemPermissions($itemId) {
	global $gallery;
	if (empty($itemId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/*
	 * Remove all relationships for this item from our map.
	 */
	$ret = GalleryPermissionMap::removeMapEntry(array('itemId' => $itemId));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Return a list of permissions for the given item id
     *
     * @param int the id of the item
     * @return array object GalleryStatus a status code
     *               array array('userId' => ...,
     *                           'groupId' => ...,
     *                           'permission' => ...)
     */
    function fetchAllPermissionsForItem($itemId) {
	global $gallery;

	if (empty($itemId)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER,
					      __FILE__, __LINE__), null);
	}
	
	list($ret, $searchResults) =
	    $gallery->search(array('select' => ('[GalleryPermissionMap::userId], ' .
						'[GalleryPermissionMap::groupId], ' .
						'[GalleryPermissionMap::permission] '),
				   'where' => '[GalleryPermissionMap::itemId] = ?'),
			     array($itemId));

	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$data = array();
	while ($result = $searchResults->nextResult()) {
	    list ($ret, $permissions) = GalleryPermissionSetMap::convertBitsToIds($result[2]);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    foreach ($permissions as $permission) {
		$data[] = array('userId' => $result[0],
				'groupId' => $result[1],
				'permission' => $permission['id']);
	    }
	}
	return array($ret, $data);
    }

    /**
     * Return a list of permissions for the given items
     *
     * @param array int GalleryItem ids
     * @param array a set of user ids
     * @param array a set of group ids
     * @return array object GalleryStatus a status code
     *               array (id => array(array(permission.id => 1, ...), ...)
     */
    function fetchPermissionsForItems($itemIds, $userIds, $groupIds) {
	global $gallery;

	if (!is_array($itemIds) || empty($itemIds)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER,
					      __FILE__, __LINE__), null);
	}

	$itemIdMarkers = GalleryUtilities::makeMarkers(sizeof($itemIds));
	$userIdMarkers = GalleryUtilities::makeMarkers(sizeof($userIds));
	$groupIdMarkers = GalleryUtilities::makeMarkers(sizeof($groupIds));

	list($ret, $searchResults) =
	    $gallery->search(array('select' => ('[GalleryPermissionMap::permission], ' .
						'[GalleryPermissionMap::itemId]'),
				   'where' => ('[GalleryPermissionMap::itemId] IN (' . $itemIdMarkers . ') ' .
					       ' AND ([GalleryPermissionMap::userId] IN (' . $userIdMarkers . ') ' .
					       ' OR [GalleryPermissionMap::groupId] IN (' . $groupIdMarkers . '))')),
			     array_merge($itemIds, $userIds, $groupIds));

	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$bitsTable = array();
	while ($result = $searchResults->nextResult()) {
	    if (!isset($data[$result[1]])) {
		$bitsTable[$result[1]] = $result[0];
	    } else {
		$bitsTAble[$result[1]] |= $result[0];
	    }
	}

	$data = array();
	foreach ($bitsTable as $itemId => $itemBits) {
	    list ($ret, $permissionTable) = GalleryPermissionSetMap::convertBitsToIds($itemBits);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    foreach ($permissionTable as $entry) {
		$data[$itemId][$entry['id']] = 1;
	    }
	}

	return array($ret, $data);
    }

    /**
     * Return a list of permissions for the given items
     *
     * @param array int GalleryItem ids
     * @param array a set of user ids
     * @param array a set of group ids
     * @return array object GalleryStatus a status code
     *               array (id => array(array(permission.id => 1, ...), ...)
     * @access private
     */
    function _fetchPermissionBitsForItem($itemId, $userId, $groupId) {
	global $gallery;

	if (empty($itemId) || (empty($userId) && empty($groupId))) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER,
					      __FILE__, __LINE__), null);
	}

	list($ret, $searchResults) =
	    $gallery->search(array('select' => ('[GalleryPermissionMap::itemId], ' .
						'[GalleryPermissionMap::permission]'),
				   'where' => ('[GalleryPermissionMap::itemId] = ? ' .
					       ' AND [GalleryPermissionMap::userId] = ? ' .
					       ' AND [GalleryPermissionMap::groupId] = ?')),
			     array_merge($itemId, $userId, $groupId));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$data = array();
	while ($result = $searchResults->nextResult()) {
	    $data[$result[0]] = (int)$result[1];
	}
	return array($ret, $data);
    }
    
    /**
     * Copy a set of permissions from one id to another
     *
     * @param int the id of the target item
     * @param int the id of the source item
     * @return object GalleryStatus a status code
     */
    function copyPermissions($itemId, $fromId) {
	global $gallery;

	if (empty($itemId) || empty($fromId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	list($ret, $searchResults) =
	    $gallery->search(array('select' => ('[GalleryPermissionMap::userId], ' .
						'[GalleryPermissionMap::groupId], ' .
						'[GalleryPermissionMap::permission] '),
				   'where' => '[GalleryPermissionMap::itemId] = ?'),
			     array($fromId));

	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$data = array();
	while ($result = $searchResults->nextResult()) {
	    $ret = GalleryPermissionMap::addMapEntry(array('userId' => $result[0],
							   'groupId' => $result[1],
							   'permission' => $result[2],
							   'itemId' => $itemId));
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	return GalleryStatus::success();
    }

    /**
     * Does the user/group combo have the specific permission for the target item?
     *
     * @param int the id of the target item
     * @param array int user ids
     * @param array int group ids
     * @param array string target permissions
     * @return array object GalleryStatus a status code
     *               boolean true if yes
     */
    function hasPermission($itemId, $userIds, $groupIds, $permission) {
	global $gallery;

	if (!isset($permission)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER,
					      __FILE__, __LINE__),
			 null);
	}

	$where = '[GalleryPermissionMap::itemId] = ? ';
	$data = array($itemId);
	
	if (!empty($userIds)) {
	    $userClause = '[GalleryPermissionMap::userId] IN (' .
		GalleryUtilities::makeMarkers($userIds) .
		') ';
	}

	if (!empty($groupIds)) {
	    $groupClause = '[GalleryPermissionMap::groupId] IN (' .
		GalleryUtilities::makeMarkers($groupIds) .
		') ';
	}

	$where .= 'AND (';
	if (!empty($userClause) && !empty($groupClause)) {
	    $where .= '(' . $userClause . ' OR ' . $groupClause . ')';
	    $data = array_merge($data, $userIds, $groupIds);
	} else if (!empty($userClause)) {
	    $where .= $userClause;
	    $data = array_merge($data, $userIds);
	} else {
	    $where .= $groupClause;
	    $data = array_merge($data, $groupIds);
	}

	list ($ret, $bits) = GalleryPermissionSetMap::convertIdsToBits($permission);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$where .= 'AND ([GalleryPermissionMap::permission] & ? > 0)';
	$data[] = $bits;
	$where .= ')';

	list($ret, $searchResults) =
	    $gallery->search(array('select' => '[GalleryPermissionMap::itemId]',
				   'where' => $where,
				   'limit' => array('count' => 1)),
			     $data);

	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), false);
	}

	return array(GalleryStatus::success(),
		     $searchResults->resultCount() ? true : false);
    }
}

include(dirname(__FILE__) . '/interfaces/GalleryPermissionMap.inc');
?>