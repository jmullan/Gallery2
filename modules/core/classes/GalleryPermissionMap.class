<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Representation of the many-to-many relationship between users and groups
 *
 * @g2 <class-name>GalleryPermissionMap</class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

class GalleryPermissionMap_core {

    /**
     * @g2 <map>
     * @g2   <member>
     * @g2     <member-name>itemId</member-name>
     * @g2     <member-type>INTEGER</member-type>
     * @g2     <member-size>MEDIUM</member-size>
     * @g2     <indexed/>
     * @g2   </member>
     * @g2   <member>
     * @g2     <member-name>userId</member-name>
     * @g2     <member-type>INTEGER</member-type>
     * @g2     <member-size>MEDIUM</member-size>
     * @g2     <indexed/>
     * @g2   </member>
     * @g2   <member>
     * @g2     <member-name>groupId</member-name>
     * @g2     <member-type>INTEGER</member-type>
     * @g2     <member-size>MEDIUM</member-size>
     * @g2     <indexed/>
     * @g2   </member>
     * @g2   <member>
     * @g2     <member-name>permission</member-name>
     * @g2     <member-type>STRING</member-type>
     * @g2     <member-size>SMALL</member-size>
     * @g2   </member>
     * @g2 </map>
     */
    
    /**
     * Add the given itemid, userid, permission mapping
     *
     * @param int the id of the GalleryGroup
     * @param array userid => permission
     * @return object GalleryStatus a status code
     */
    function addUserPermission($itemId, $userId, $permission) {
	global $gallery;
	if (empty($itemId) || empty($userId) || empty($permission)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/* Add a new entry in our map to represent this relationship. */
	$ret = GalleryPermissionMap::addMapEntry(array('itemId' => $itemId,
						       'userId' => $userId,
						       'permission' => $permission));
						     
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	return GalleryStatus::success();
    }

    /**
     * Add the given itemid, userid, permission mapping
     *
     * @param int the id of the GalleryGroup
     * @param array userid => permission
     * @return object GalleryStatus a status code
     */
    function addGroupPermission($itemId, $groupId, $permission) {
	global $gallery;
	if (empty($itemId) || empty($groupId) || empty($permission)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/* Add a new entry in our map to represent this relationship. */
	$ret = GalleryPermissionMap::addMapEntry(array('itemId' => $itemId,
						       'userId' => 0,
						       'groupId' => $groupId,
						       'permission' => $permission));
						     
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	return GalleryStatus::success();
    }

    /**
     * Remove the given itemid, userid, permission mapping
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     */
    function removeUserPermission($itemId, $userId, $permission) {
	global $gallery;
	if (empty($itemId) || empty($userId) || empty($permission)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/*
	 * Remove this relationship from our map.
	 */
	$ret = GalleryPermissionMap::removeMapEntry(array('itemId' => $itemId,
							  'userId' => $userId,
							  'groupId' => 0, 
							  'permission' => $permission));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Remove the given itemid, userid, permission mapping
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     */
    function removeGroupPermission($itemId, $groupId, $permission) {
	global $gallery;
	if (empty($itemId) || empty($groupId) || empty($permission)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/*
	 * Remove this relationship from our map.
	 */
	$ret = GalleryPermissionMap::removeMapEntry(array('itemId' => $itemId,
							  'groupId' => $groupId,
							  'permission' => $permission));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Remove all permissions for the given itemid
     *
     * @param int the id of the GalleryGroup
     * @return object GalleryStatus a status code
     */
    function removePermissions($itemId) {
	global $gallery;
	if (empty($itemId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/*
	 * Remove all relationships for this item from our map.
	 */
	$ret = GalleryPermissionMap::removeMapEntry(array('itemId' => $itemId));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Return a list of permissions for the given item id
     *
     * @param int the id of the item
     * @return array object GalleryStatus a status code
     *               array group ids
     */
    function fetchPermissionsForItem($itemId) {
	global $gallery;

	if (empty($itemId)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER,
					      __FILE__, __LINE__), null);
	}
	
	list($ret, $searchResults) =
	    $gallery->search(array('select' => ('[GalleryPermissionMap::userId], ' .
						'[GalleryPermissionMap::groupId], ' .
						'[GalleryPermissionMap::permission] '),
				   'where' => '[GalleryPermissionMap::itemId] = ?'),
			     array($itemId));

	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if ($searchResults->resultCount() == 0) {
	    return null;
	}

	$data = array();
	while ($result = $searchResults->nextResult()) {
	    $data[] = array('userId' => $result[0],
			    'groupId' => $result[1],
			    'permission' => $result[2]);
	}
	return array($ret, $data);
    }

    /**
     * Copy a set of permissions from one id to another
     *
     * @param int the id of the target item
     * @param int the id of the source item
     * @return object GalleryStatus a status code
     */
    function copyPermissions($itemId, $fromId) {
	global $gallery;

	if (empty($itemId) || empty($fromId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	list ($ret, $permissions) =
	    GalleryPermissionMap::fetchPermissionsForItem($fromId);

	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	foreach ($permissions as $entry) {
	    $entry = array_merge($entry, array('itemId' => $itemId));
	    $ret = GalleryPermissionMap::addMapEntry($entry);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	return GalleryStatus::success();
    }
}

include(dirname(__FILE__) . '/interfaces/GalleryPermissionMap.inc');
?>