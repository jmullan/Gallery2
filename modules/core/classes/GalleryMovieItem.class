<?php
/*
 * $RCSfile: GalleryMovieItem.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.39 $ $Date: 2005/08/23 03:49:03 $
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Load the parent class
 */
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryDataItem.class');

/**
 * A subclass of DataItem for containing Movies
 *
 * A GalleryItem whose source is a movie of some kind (like an MPEG
 * or an AVI)
 *
 * @g2 <class-name>GalleryMovieItem</class-name>
 * @g2 <parent-class-name>GalleryDataItem</parent-class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 * @g2 <requires-id/>
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryMovieItem_core extends GalleryDataItem {

    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The width of this movie.
     *
     * @g2 <member>
     * @g2   <member-name>width</member-name>
     * @g2   <member-type>INTEGER</member-type>
     * @g2   <linked/>
     * @g2 </member>
     *
     * @var int $_width
     * @access private
     */
    var $_width;

    /**
     * The height of this movie.
     *
     * @g2 <member>
     * @g2   <member-name>height</member-name>
     * @g2   <member-type>INTEGER</member-type>
     * @g2   <linked/>
     * @g2 </member>
     *
     * @var int $_height
     * @access private
     */
    var $_height;

    /**
     * The duration of the movie in seconds
     *
     * @g2 <member>
     * @g2   <member-name>duration</member-name>
     * @g2   <member-type>INTEGER</member-type>
     * @g2   <linked/>
     * @g2 </member>
     *
     * @var int $_width
     * @access private
     */
    var $_duration;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * @see GalleryDataItem::canBeViewedInline()
     */
    function canBeViewedInline() {
	$mimeType = $this->getMimeType();
	/* The mimeTypes listed here should provide a render() output */
	$canBeViewedInline = array(
	    'video/quicktime',
	    'video/mpeg',
	    'video/x-msvideo',
	    'video/x-ms-wmv',
	);
	return ($this->getWidth() != 0 && $this->getHeight() != 0
		&& in_array($mimeType, $canBeViewedInline));
    }

    /**
     * Create a new GalleryMovieItem from a video file
     *
     * @param int the id of the parent GalleryItem
     * @param string the path to the source video
     * @param string the mime type
     * @param string the desired name of the new item
     * @param boolean (optional) a boolean true if we should symlink instead
     *        of copy (default is false).
     * @return object GalleryStatus a status code
     */
    function create($parentId, $videoFileName, $mimeType, $targetName=null, $symlink=false) {
	global $gallery;
	$platform = $gallery->getPlatform();

	/* Validate the input filename */
	if (empty($videoFileName)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
	}

	if (!$platform->file_exists($videoFileName)) {
	    return GalleryStatus::error(ERROR_BAD_PATH, __FILE__, __LINE__);
	}

	/* Create our data item */
	$ret = parent::create($parentId, $videoFileName, $mimeType, $targetName, $symlink);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Default to empty dimensions */
	$this->setWidth(0);
	$this->setHeight(0);
	$this->setDuration(0);

	/* We're linkable */
	$this->setIsLinkable(true);

	/* Detect our dimensions, if possible */
	$ret = $this->rescan();
	if ($ret->isError()) {
	    /* Cleanup our datafile on failure */
	    list ($ret2, $path) = $this->fetchPath();
	    if ($ret2->isSuccess()) {
		@$platform->unlink($path);
	    }
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * @see GalleryDataItem::rescan()
     */
    function rescan() {
	global $gallery;

	$ret = parent::rescan();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list ($ret, $path) = $this->fetchPath();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$mimeType = $this->getMimeType();
	list ($ret, $toolkit) =
	    GalleryCoreApi::getToolkitByProperty($mimeType, 'dimensions-and-duration');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if (isset($toolkit)) {
	    list ($ret, $dimensions) =
		$toolkit->getProperty($mimeType, 'dimensions-and-duration', $path);
	    if ($ret->isError()) {

		/*
		 * If we can't get the dimensions, it's probably a bad movie.
		 * Or our graphics code is broken.  Hard to tell which at this point.
		 */
		$ret->addErrorCode(ERROR_BAD_DATA_TYPE);
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    $this->setWidth($dimensions[0]);
	    $this->setHeight($dimensions[1]);
	    $this->setDuration(round($dimensions[2]));
	}

	return GalleryStatus::success();
    }

    /**
     * @see GalleryEntity::itemTypeName
     */
    function itemTypeName($localized = true) {
	global $gallery;
	if ($localized) {
	    list ($ret, $core) = GalleryCoreApi::loadPlugin('module', 'core');
	    if (! $ret->isError()) {
		return array($core->translate('Movie'), $core->translate('movie'));
	    }
	}
	return array('Movie', 'movie');
    }

    /**
     * @see GalleryDataItem::render
     */
    function render($format, $params) {
	global $gallery;

	$fallback = trim(preg_replace("/[\r\n]/", '', $params['fallback']));

	switch($format) {
	case 'HTML':
	    $urlGenerator =& $gallery->getUrlGenerator();
	    $src = $urlGenerator->generateUrl(array('view' => 'core.DownloadItem',
						    'itemId' => $this->getId(),
						    'serialNumber' => $this->getSerialNumber()));

	    list ($width, $height) = array($this->getWidth(), $this->getHeight());
	    switch($this->getMimeType()) {
	    case 'video/quicktime':
		return sprintf(
		'<object classid="clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B"
			 codebase="http://www.apple.com/qtactivex/qtplugin.cab"
			 width="%s" height="%s" id="%s"%s>
			   <param name="src" value="%s"/>
			   <param name="controller" value="true"/>
			   <param name="autoplay" value="true"/>
			   <param name="loop" value="false"/>
			   <embed src="%s" width="%s" height="%s" type="%s"
				  pluginspage="http://www.apple.com/quicktime/download/"
				  controller="true" autoplay="true" loop="false"/>
			   <noembed>%s</noembed>
		 </object>',

		$width, $height + 16,
		!empty($params['id']) ? $params['id'] : 'movie',
		!empty($params['class']) ? ' class="' . $params['class'] . '"' : '',
		$src, $src,
		$width, $height + 16,
		$this->getMimeType(),
		$fallback);

	    case 'video/mpeg':
	    case 'video/x-msvideo':
	    case 'video/x-ms-wmv':
		return sprintf(
		'<object classid="CLSID:05589FA1-C356-11CE-BF01-00AA0055595A"
			 width="%s" height="%s" id="%s"%s>
			   <param name="ShowDisplay" value="0"/>
			   <param name="ShowControls" value="1"/>
			   <param name="AutoStart" value="1"/>
			   <param name="AutoRewind" value="-1"/>
			   <param name="Volume" value="0"/>
			   <param name="FileName" value="%s"/>
			   <embed src="%s" width="%s" height="%s" type="%s"
				  controller="true" autoplay="true" loop="false"/>
			   <noembed>%s</noembed>
		 </object>',

		$width, $height + 50,
		!empty($params['id']) ? $params['id'] : 'movie',
		!empty($params['class']) ? ' class="' . $params['class'] . '"' : '',
		$src, $src,
		$width, $height + 50,
		$this->getMimeType(),
		$fallback);

	    default:
		return $fallback;
	    }

	default:
	    return null;
	}
    }
}

include(dirname(__FILE__) . '/interfaces/GalleryMovieItem.inc');
?>
