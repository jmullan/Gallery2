<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 *
 * @package GalleryCore
 * @subpackage Classes
 */
class GalleryItemAttributesHelper_advanced {
    /**
     * Rebalance the order weights associated with this item's children.
     * When this method is complete, the child item ids should still have the
     * same order as they have now, but their order weights should be spaced
     * out to exactly the spacing value specified in the arguments.
     *
     * @param int the parent id
     * @param int the order spacing
     */
    function rebalanceChildOrderWeights($parentItemId, $spacing=1000) {
	global $gallery;

	list ($ret, $parentItem) = GalleryCoreApi::loadEntitiesById($parentItemId);
	if ($ret->isError()) {
 	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	list ($ret, $ids) = GalleryCoreApi::fetchChildItemIdsIgnorePermissions($parentItem);
	if ($ret->isError()) {
 	    return $ret->wrap(__FILE__, __LINE__);
	}

	$current = $spacing;
	foreach ($ids as $id) {
	    $gallery->guaranteeTimeLimit(5);
	    $ret = GalleryItemAttributesHelper_advanced::setOrderWeight($id, $current);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $current += $spacing;
	}

	return GalleryStatus::success();
    }

    /**
     * Fetch the highest or lowest weight of all children
     * @param int the parent item id
     * @param int the direction (HIGHER_WEIGHT, LOWER_WEIGHT)
     * @return int a weight
     */
    function fetchExtremeChildWeight($itemId, $direction) {
	global $gallery;

	if ($direction == LOWER_WEIGHT) {
	    $aggregate = 'MIN';
	} else {
	    $aggregate = 'MAX';
	}
	
	$query = '
        SELECT
          ' . $aggregate . '([GalleryItemAttributesMap::orderWeight])
        FROM
          [GalleryItemAttributesMap], [GalleryChildEntity]
        WHERE
          [GalleryChildEntity::id] = [GalleryItemAttributesMap::itemId]
          AND
          [GalleryChildEntity::parentId] = ?
        ';
	list ($ret, $searchResults) = $gallery->search($query, array($itemId));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$result = $searchResults->nextResult();
	if (isset($result[0])) {
	    $weight = (int)$result[0];
	} else {
	    $weight = 0;
	}
			 
	return array(GalleryStatus::success(), $weight);
    }

    /**
     * Fetch the weight of the next peer in line (higher or lower, as specified)
     *
     * @param int the item id
     * @param int the direction (HIGHER_WEIGHT, LOWER_WEIGHT)
     * @return int a weight
     */
    function fetchNextWeight($itemId, $direction) {
	global $gallery;

	if ($direction == LOWER_WEIGHT) {
	    $aggregate = 'MAX';
	    $comparison = '<';
	} else {
	    $aggregate = 'MIN';
	    $comparison = '>';
	}
	
	$query = '
        SELECT
          ' . $aggregate . '([GalleryItemAttributesMap=2::orderWeight])
        FROM
          [GalleryItemAttributesMap=1], [GalleryItemAttributesMap=2],
          [GalleryChildEntity=1], [GalleryChildEntity=2]
        WHERE
          [GalleryChildEntity=1::id] = ?
          AND
          [GalleryChildEntity=1::parentId] = [GalleryChildEntity=2::parentId]
          AND
          [GalleryChildEntity=1::id] = [GalleryItemAttributesMap=1::itemId]
          AND
          [GalleryChildEntity=2::id] = [GalleryItemAttributesMap=2::itemId]
          AND
          [GalleryItemAttributesMap=2::orderWeight] ' .
		$comparison . ' [GalleryItemAttributesMap=1::orderWeight]
        ';
	list ($ret, $searchResults) = $gallery->search($query, array($itemId));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$result = $searchResults->nextResult();
	if (isset($result[0])) {
	    $weight = (int)$result[0];
	} else {
	    $weight = null;
	}
			 
	return array(GalleryStatus::success(), $weight);
    }

    /**
     * Update the view count for this item id
     * @param int the item id
     * @param int the new count
     */
    function setViewCount($itemId, $count) {
	require_once(dirname(__FILE__) . '/../GalleryItemAttributesMap.class');
	$ret = GalleryItemAttributesMap::updateMapEntry(array('itemId' => $itemId),
							array('viewCount' => $count));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Set the parent id sequence for an item id
     *
     * @param int id the item id
     * @param array the parent sequence (ids)
     * @return object GalleryStatus a status code
     */
    function setParentSequence($itemId, $parentSequence) {
	if (empty($parentSequence)) {
	    $parentSequence = '';
	} else {
	    $parentSequence = join('/', $parentSequence) . '/';
	}
	
	require_once(dirname(__FILE__) . '/../GalleryItemAttributesMap.class');
	$ret = GalleryItemAttributesMap::updateMapEntry(array('itemId' => $itemId),
							array('parentSequence' => $parentSequence));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Create a new set of attributes for an item
     * @param int the item id
     * @param array the sequence of parent ids
     */
    function createItemAttributes($itemId, $parentSequence) {
	if (empty($parentSequence)) {
	    $parentSequence = '';
	} else {
	    $parentSequence = join('/', $parentSequence) . '/';
	}
	require_once(dirname(__FILE__) . '/../GalleryItemAttributesMap.class');
	$ret = GalleryItemAttributesMap::addMapEntry(array('itemId' => $itemId,
							   'viewCount' => 0,
							   'orderWeight' => 0,
							   'parentSequence' => $parentSequence));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	return GalleryStatus::success();
    }

    /**
     * Remove the attributes for the given item
     * @param int the item id
     */
    function removeItemAttributes($itemId) {
	require_once(dirname(__FILE__) . '/../GalleryItemAttributesMap.class');
	$ret = GalleryItemAttributesMap::removeMapEntry(array('itemId' => $itemId));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Set the order weight for an item id
     * @param int the item id
     * @param int the new order weight
     */
    function setOrderWeight($itemId, $orderWeight) {
	require_once(dirname(__FILE__) . '/../GalleryItemAttributesMap.class');
	$ret = GalleryItemAttributesMap::updateMapEntry(array('itemId' => $itemId),
							array('orderWeight' => $orderWeight));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Get the view count for this item id
     * @param int the item id
     */
    function fetchViewCount($itemId) {
	require_once(dirname(__FILE__) . '/../GalleryItemAttributesMap.class');
	list ($ret, $viewCounts) = GalleryItemAttributesHelper_medium::fetchViewCounts(array($itemId));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $viewCounts[$itemId]);
    }

    /**
     * Update all items containing the source parent sequence to the new parent sequence
     *
     * @param int id the item id
     * @param array the parent sequence (ids)
     * @return object GalleryStatus a status code
     */
    function updateParentSequence($oldParentSequence, $newParentSequence) {
	global $gallery;

	$oldParentSequence = join('/', $oldParentSequence) . '/';
	$newParentSequence = join('/', $newParentSequence) . '/';
	
	$storage = $gallery->getStorage();
	list ($ret, $newSequenceSql) = $storage->getFunctionSql('CONCAT',
            array('?',
		  sprintf('SUBSTRING([GalleryItemAttributesMap::parentSequence], %d)',
			  strlen($oldParentSequence) + 1)));

	require_once(dirname(__FILE__) . '/../GalleryItemAttributesMap.class');
	$ret = GalleryItemAttributesMap::updateMapEntry(
	     array('parentSequence' => array('LIKE ?', $oldParentSequence . '%')),
             array('parentSequence' => array('=' . $newSequenceSql, $newParentSequence)));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }
}
?>
