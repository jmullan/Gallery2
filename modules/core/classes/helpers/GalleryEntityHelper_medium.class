<?php
/*
 * $RCSfile: GalleryEntityHelper_medium.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.13 $ $Date: 2006/01/14 02:21:41 $
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Helper class for GalleryEntities
 *
 * @package GalleryCore
 * @subpackage Helpers
 * @abstract
 */
class GalleryEntityHelper_medium {

    /**
     * Delete the entity with the given id
     *
     * @param int the id of a GalleryEntity to delete
     * @return object GalleryStatus a status code
     * @static
     */
    function deleteEntityById($id) {
	if (empty($id)) {
	    return GalleryCoreApi::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
	}
	$lockIds = array();

	/* Don't write lock it if it's already locked somewhere else */
	if (!GalleryCoreApi::isWriteLocked($id)) {
	    list ($ret, $lockIds[]) = GalleryCoreApi::acquireWriteLock($id);
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	list ($ret, $entity) = GalleryEntityHelper_simple::loadEntitiesById($id);
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if (GalleryUtilities::isA($entity, 'GalleryChildEntity')) {
	    list ($ret, $lockIds[]) = GalleryCoreApi::acquireReadLockParents($id);
	    if ($ret) {
		GalleryCoreApi::releaseLocks($lockIds);
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	/* If this item has links to it, make one of those links the master */
	list ($ret, $linkedIds) = GalleryEntityHelper_medium::fetchEntitiesLinkedTo($id);
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if (!empty($linkedIds)) {
	    /* Lock all of the linked items */
	    list ($ret, $lockIds[]) = GalleryCoreApi::acquireWriteLock($linkedIds);
	    if ($ret) {
		GalleryCoreApi::releaseLocks($lockIds);
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    /* Make the first link the master, and point the rest at it */
	    list ($ret, $linkedEntities) = GalleryEntityHelper_simple::loadEntitiesById($linkedIds);
	    if ($ret) {
		GalleryCoreApi::releaseLocks($lockIds);
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    $ret = $linkedEntities[0]->detachLink();
	    if ($ret) {
		GalleryCoreApi::releaseLocks($lockIds);
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    $ret = $linkedEntities[0]->save();
	    if ($ret) {
		GalleryCoreApi::releaseLocks($lockIds);
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    for ($i = 1; $i < sizeof($linkedEntities); $i++) {
		$linkedEntities[$i]->setLinkId($linkedEntities[0]->getId());
		$linkedEntities[$i]->setLinkedEntity($linkedEntities[0]);
		$ret = $linkedEntities[$i]->save();
		if ($ret) {
		    GalleryCoreApi::releaseLocks($lockIds);
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }

	    /* Remap any derivatives sourced from old-master to new-master */
	    $ret = GalleryCoreApi::remapSourceIds($id, $linkedEntities[0]->getId());
	    if ($ret) {
		GalleryCoreApi::releaseLocks($lockIds);
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	$ret = $entity->delete();
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockIds);
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$ret = GalleryCoreApi::releaseLocks($lockIds);
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return null;
    }

    /**
     * Fetch the ids of the entities linked to the target entity
     *
     * @param int the target entity id
     * @return array object GalleryStatus a status code
     *               array entity ids
     * @static
     */
    function fetchEntitiesLinkedTo($targetId) {
	global $gallery;

	$query = '
	SELECT
	  [GalleryEntity::id]
	FROM
	  [GalleryEntity]
	WHERE
	  [GalleryEntity::linkId] = ?
	ORDER BY
	  [GalleryEntity::id] ASC
	';
	$storage =& $gallery->getStorage();
	list ($ret, $searchResults) = $gallery->search($query, array((int)$targetId));
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$linkedIds = array();
	while ($result = $searchResults->nextResult()) {
	    $linkedIds[] = $result[0];
	}

	return array(null, $linkedIds);
    }

    /**
     * Remove onLoadHandlers from all entities
     *
     * @param array of factory impl ids
     * @return object GalleryStatus a status code
     * @static
     */
    function removeOnLoadHandlers($handlerIds) {
	global $gallery;

	$query = 'SELECT [GalleryEntity::id] FROM [GalleryEntity]
		  WHERE [GalleryEntity::onLoadHandlers] LIKE ?';
	$i = 0;
	foreach ($handlerIds as $handlerId) {
	    list ($ret, $results) = $gallery->search($query, array("%|$handlerId|%"));
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    while ($result = $results->nextResult()) {
		if ($i++ % 10 == 0) {
		    $gallery->guaranteeTimeLimit(5);
		}
		$id = (int)$result[0];
		list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($id);
		if ($ret) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		list ($ret, $entity) = GalleryCoreApi::loadEntitiesById($id);
		if ($ret) {
		    GalleryCoreApi::releaseLocks($lockId);
		    return $ret->wrap(__FILE__, __LINE__);
		}
		$entity->removeOnLoadHandler($handlerId);
		$ret = $entity->save();
		if ($ret) {
		    GalleryCoreApi::releaseLocks($lockId);
		    return $ret->wrap(__FILE__, __LINE__);
		}
		$ret = GalleryCoreApi::releaseLocks($lockId);
		if ($ret) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	}

	return null;
    }

    /**
     * Set modification timestamp for the given entity id to the current time.
     *
     * @param int the entity id
     * @return object GalleryStatus a status code
     * @static
     */
    function updateModificationTimestamp($entityId) {
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($entityId);
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	list ($ret, $entity) = GalleryCoreApi::loadEntitiesById($entityId);
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockId);
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$entity->setModificationTimestamp(time());
	$ret = $entity->save();
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockId);
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return null;
    }
    
    /**
     * Delete the fast download file for a specific entity
     *
     *  @param int id of a GalleryEntity
     */
    function deleteFastDownloadFileById($entityId) {
	global $gallery;

	$fastDownloadFilePath = GalleryDataCache::getCachePath(
	    array('type' => 'fast-download', 'itemId' => $entityId));
	$platform =& $gallery->getPlatform();
	if ($platform->file_exists($fastDownloadFilePath)) {
	    $platform->unlink($fastDownloadFilePath);
	}
    }

    /**
     * Create a small PHP file containing all the information we need to send
     * a data item or derivative to the browser.
     *
     * @param GalleryDataItem or GalleryDerivative object
     * @param bool force this to run, even inside the unit test framework
     *
     * @return object GalleryStatus a status code
     */
    function createFastDownloadFile($entity, $runEvenInUnitTest=false) {
	global $gallery;

	/* Disable this for unit tests, for now */
	if (!$runEvenInUnitTest && class_exists('GalleryTestCase')) {
	    return null;
	}

	/* Make sure this derivative is publicly viewable */
	list ($ret, $anonymousUserId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.anonymousUser');
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$hasPermission = false;
	$requiredPermission = null;
	$itemIdForPermissions = $entity->getId();

	if (GalleryUtilities::isA($entity, 'GalleryDerivative')) {
	    switch ($entity->getDerivativeType()) {
	    case DERIVATIVE_TYPE_IMAGE_THUMBNAIL:
		$requiredPermission = 'core.view';
		break;
		
	    case DERIVATIVE_TYPE_IMAGE_RESIZE:
		$requiredPermission = 'core.viewResizes';
		break;
		
	    case DERIVATIVE_TYPE_IMAGE_PREFERRED:
		$requiredPermission = 'core.viewSource';
		break;
	    }
	    $itemIdForPermissions = $entity->getParentId();
	} else if (GalleryUtilities::isA($entity, 'GalleryDataItem')) {
	    $requiredPermission = 'core.viewSource';
	}
	
	if ($requiredPermission) {
	    list ($ret, $hasPermission) = GalleryCoreApi::hasItemPermission(
		$itemIdForPermissions, $requiredPermission, $anonymousUserId);
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	if ($hasPermission) {
	    /* Write the fast download file */
	    list ($ret, $pseudoFileName) = GalleryUtilities::getPseudoFileName($entity);
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    /*
	     * Notice: To build the relative path, we assume that the cache and the albums folder
	     * are both in the subdirectory-tree of gallery.data.base
	     */
	    $platform =& $gallery->getPlatform();
	    $slash = $platform->getDirectorySeparator();
	    if (GalleryUtilities::isA($entity, 'GalleryDerivative')) {
		$fullPath = GalleryDataCache::getCachePath(
		    array('type' => 'derivative', 'itemId' => $entity->getId()));
	    } else {
		list ($ret, $fullPath) = $entity->fetchPath();
		if ($ret) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	    $relativePath = str_replace($gallery->getConfig('data.gallery.base'), '', $fullPath);
	    
	    $stats = $platform->stat($fullPath);
	    $contentLength = $stats[7];
	    $lastModified = GalleryUtilities::getHttpDate($stats[9]);

	    $fastDownloadFilePath = GalleryDataCache::getCachePath(
		array('type' => 'fast-download', 'itemId' => $entity->getId()));
	    $buf = sprintf('<?php function GalleryFastDownload() { ' .
			   'return $GLOBALS[\'gallery\']->fastDownload(\'%s\', \'%s\', ' .
			   '\'%s\', \'%s\', %d);} ?>',
			   $relativePath, $pseudoFileName, $lastModified,
			   $entity->getMimeType(), $contentLength);
	    $platform->atomicWrite($fastDownloadFilePath, $buf);
	}

	return null;
    }
}
?>
