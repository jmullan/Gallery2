<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Helper class for GalleryItems
 *
 * @package GalleryCore
 * @subpackage Helpers
 * @abstract
 */
class GalleryItemHelper_advanced {
    
    /**
     * Remove the specific item/key pair
     *
     * @param int the id of the GalleryItem
     * @return object GalleryStatus a status code
     * @static
     */
    function removeProperty($itemId, $key) {
	global $gallery;
	if (empty($itemId) || empty($key)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/*
	 * Remove this relationship from our groups table.
	 */
	$ret = GalleryItemPropertiesMap::removeMapEntry(
	    array('itemId' => $itemId, 'key' => $key));
	
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Change the specific item/key pair
     *
     * @param int the id of the GalleryItem
     * @param string the name of the property
     * @param string the value of the proprety
     * @return object GalleryStatus a status code
     * @static
     */
    function setProperty($itemId, $key, $value) {
	global $gallery;
	if (empty($itemId) || empty($key) || empty($value)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/*
	 * Remove this item/key from the map, and add the new one.
	 */
	$ret = GalleryItemPropertiesMap::removeMapEntry(
	    array('itemId' => $itemId, 'key' => $key));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$ret = GalleryItemPropertiesMap::addMapEntry(
	    array('itemId' => $itemId, 'key' => $key, 'value' => $value));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Remove all properties for the given item id
     *
     * @param int the id of the GalleryItem
     * @return object GalleryStatus a status code
     * @static
     */
    function removeProperties($itemId) {
	global $gallery;
	if (empty($itemId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/*
	 * Remove this relationship from our groups table.
	 */
	require_once(dirname(__FILE__) . '/../GalleryItemPropertiesMap.class');
	$ret = GalleryItemPropertiesMap::removeMapEntry(
	    array('itemId' => $itemId));
	
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    /**
     * Return a list of all the property keys for this item
     *
     * @return array object GalleryStatus a status code
     *               array property keys
     * @static
     */
    function fetchPropertyKeys($itemId) {
	global $gallery;

	if (empty($itemId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	$query = '
        SELECT
          [GalleryItemPropertiesMap::key]
        FROM
          [GalleryItemPropertiesMap]
        WHERE
          [GalleryItemPropertiesMap::itemId] = ?
        ';

	list ($ret, $searchResults) = $gallery->search($query, array($itemId));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$data = array();
	while ($result = $searchResults->nextResult()) {
	    $data[] = $result[0];
	}
	return array(GalleryStatus::success(), $data);
    }

    /**
     * Get the value for a specific property
     *
     * @param int the id of the GalleryItem
     * @param string the desired key
     * @return array object GalleryStatus a status code
     *               string value
     * @static
     */
    function fetchProperty($itemId, $key) {
	global $gallery;

	if (empty($itemId) || empty($key)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER,
					      __FILE__, __LINE__),
			 null);
	}

	$query = '
        SELECT
          [GalleryItemPropertiesMap::value]
        FROM
          [GalleryItemPropertiesMap]
        WHERE
          [GalleryItemPropertiesMap::itemId] = ?
          AND
          [GalleryItemPropertiesMap::key] = ?
        ';

	list ($ret, $searchResults) =
	    $gallery->search($query, array($itemId, $key));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if ($searchResults->resultCount() == 0) {
	    $result = null;
	}

	$result = $searchResults->nextResult();
	$result = $result[0];
	
	return array(GalleryStatus::success(), $result);
    }

    /**
     * Get all the key/values for a specific GalleryItem
     *
     * @param int the id of the GalleryItem
     * @return array object GalleryStatus a status code
     *               array key => value pairs
     * @static
     */
    function fetchAllProperties($itemId) {
	global $gallery;

	if (empty($itemId)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	$query = '
        SELECT
          [GalleryItemPropertiesMap::key],
          [GalleryItemPropertiesMap::value]
        FROM
          [GalleryItemPropertiesMap]
        WHERE
          [GalleryItemPropertiesMap::itemId] = ?
        ';

	list ($ret, $searchResults) = $gallery->search($query, array($itemId));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if ($searchResults->resultCount() == 0) {
	    return null;
	}

	$data = array();
	while ($result = $searchResults->nextResult()) {
	    $data[$result[0]] = $result[1];
	}
	return array(GalleryStatus::success(), $data);
    }


    /**
     * Fetch the breakdown of descendents for a given item.  Note: this call is more expensive than
     * GalleryCoreApi::fetchDescendentCounts(), so use that version where possible.
     *
     * @param int the item id
     * @return array object GalleryStatus a status code
     *               array(id => array('GalleryAlbumItem' => ##,
     *                                 'GalleryDataItem' => ##),
     *                     id => array('GalleryAlbumItem' => ##,
     *                                 'GalleryDataItem' => ##))
     * @static
     */
    function fetchItemizedDescendentCounts($itemIds) {
	global $gallery;

	list ($ret, $permissionBits) = GalleryCoreApi::convertPermissionIdsToBits(array('core.view'));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$storage = $gallery->getStorage();
	$markers = GalleryUtilities::makeMarkers($itemIds);

	list ($ret, $concat) =
	    $storage->getFunctionSql('CONCAT',
				     array('[GalleryItemAttributesMap=1::parentSequence]', 
					   '[GalleryItemAttributesMap=1::itemId]',
					   '\'%\''));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	$query = sprintf('
        SELECT
          [GalleryItemAttributesMap=1::itemId],
          COUNT(DISTINCT([GalleryAlbumItem::id])),
          COUNT(DISTINCT([GalleryDataItem::id]))
        FROM
          [GalleryItemAttributesMap=1],
          [GalleryItemAttributesMap=2]
            LEFT JOIN [GalleryAlbumItem] ON [GalleryItemAttributesMap=2::itemId] = [GalleryAlbumItem::id]
            LEFT JOIN [GalleryDataItem] ON [GalleryItemAttributesMap=2::itemId] = [GalleryDataItem::id],
          [GalleryUserGroupMap],
          [GalleryPermissionMap]
        WHERE
          [GalleryItemAttributesMap=1::itemId] IN (%s)
          AND
          [GalleryItemAttributesMap=2::parentSequence] LIKE %s
          AND
          [GalleryItemAttributesMap=2::itemId] = [GalleryPermissionMap::itemId]
          AND
          ([GalleryPermissionMap::userId] = ?
           OR
           ([GalleryUserGroupMap::userId] = ?
            AND
            [GalleryPermissionMap::groupId] = [GalleryUserGroupMap::groupId]))
          AND
          [GalleryPermissionMap::permission] & ? > ?
          GROUP BY
          [GalleryItemAttributesMap=1::itemId]
        ', $markers, $concat);

	$data = $itemIds;
	$data[] = $gallery->getActiveUserId();
	$data[] = $gallery->getActiveUserId();
	$data[] = $storage->convertIntToBits($permissionBits);
	$data[] = $storage->convertIntToBits(0);

	list ($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$counts = array();
	while ($result = $searchResults->nextResult()) {
	    $counts[$result[0]] = array('GalleryAlbumItem' => $result[1],
					'GalleryDataItem' => $result[2]);
	}
	
	return array(GalleryStatus::success(), $counts);
    }
}
?>
