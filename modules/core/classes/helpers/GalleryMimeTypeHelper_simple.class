<?php
/*
 * $RCSfile: GalleryMimeTypeHelper_simple.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.8 $ $Date: 2005/08/26 19:14:22 $
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * A collection of useful mime type related utilities
 *
 * @package GalleryCore
 * @subpackage Classes
 */
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryMimeTypeMap.class');

class GalleryMimeTypeHelper_simple {

    /**
     * Convert a file extension to a mime type
     *
     * @param string a file extension
     * @return array object GalleryStatus a status code
     *               string a mime type (application/unknown if no known mapping)
     * @static
     */
    function convertExtensionToMime($extension) {
	list ($ret, $mimeData) = GalleryMimeTypeHelper_simple::_getMimeData();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$extension = strtolower($extension);
	return array(GalleryStatus::success(),
		     isset($mimeData['by-extension'][$extension])
			 ? $mimeData['by-extension'][$extension] : 'application/unknown');
    }

    /**
     * Convert a mime type to a file extension
     *
     * @param string a mime type
     * @return array object GalleryStatus a status code
     *               array of file extensions (empty array if no known mapping)
     * @static
     */
    function convertMimeToExtensions($mimeType) {
	list ($ret, $mimeData) = GalleryMimeTypeHelper_simple::_getMimeData();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$mimeType = strtolower($mimeType);
	return array(GalleryStatus::success(),
		     isset($mimeData['by-mimetype'][$mimeType])
			 ? $mimeData['by-mimetype'][$mimeType]['exts'] : array());
    }

    /**
     * Figure out the file's mime type
     *
     * Eg, "foo.jpg" returns "image/jpeg"
     *
     * @param string the filename
     * @return array object GalleryStatus a status code
     *               string a mime type (application/unknown if no known extension)
     * @static
     */
    function getMimeType($filename) {
	list ($base, $extension) = GalleryUtilities::getFileNameComponents($filename);
	list ($ret, $mimeType) = GalleryMimeTypeHelper_simple::convertExtensionToMime($extension);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $mimeType);
    }

    /**
     * Return true if the given mime type is viewble in a web browser
     *
     * @param string the mime type
     * @return array object GalleryStatus a status code
     *               boolean
     */
    function isViewableMimeType($mimeType) {
	list ($ret, $mimeData) = GalleryMimeTypeHelper_simple::_getMimeData();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(),
		     isset($mimeData['by-mimetype'][$mimeType])
			 ? $mimeData['by-mimetype'][$mimeType]['viewable'] : false);
    }

    /**
     * Get all mime type data
     *
     * @return array object GalleryStatus a status code
     *               array('by-extension' => array(string extension => string mime type),
     *                     'by-mimetype' => array(string mime => array('exts' => array of strings,
     *                                                                 'viewable' => boolean)))
     * @access private
     * @static
     */
    function &_getMimeData() {
	$mimeData =& GalleryMimeTypeHelper_simple::_getSingleton();
	if (empty($mimeData)) {
	    $cacheParams = array('type' => 'module', 'id' => '_all',
				 'itemId' => 'GalleryMimeTypeHelper_mimeData');
	    $cached = GalleryDataCache::getFromDisk($cacheParams);
	    if (isset($cached)) {
		$mimeData = $cached;
	    } else {
		global $gallery;
		$query = '
		SELECT
		    [GalleryMimeTypeMap::extension],
		    [GalleryMimeTypeMap::mimeType],
		    [GalleryMimeTypeMap::viewable]
		FROM
		    [GalleryMimeTypeMap]
		';
		list ($ret, $searchResults) = $gallery->search($query);
		if ($ret->isError()) {
		    $ret = array($ret->wrap(__FILE__, __LINE__), null);
		    return $ret;
		}

		$mimeData = array('by-extension' => array(), 'by-mimetype' => array());
		while ($result = $searchResults->nextResult()) {
		    $mimeData['by-extension'][$result[0]] = $result[1];
		    if (!isset($mimeData['by-mimetype'][$result[1]])) {
			$mimeData['by-mimetype'][$result[1]] =
			    array('exts' => array($result[0]), 'viewable' => (boolean)$result[2]);
		    } else {
			$mimeData['by-mimetype'][$result[1]]['exts'][] = $result[0];
			$mimeData['by-mimetype'][$result[1]]['viewable'] |= (boolean)$result[2];
		    }
		}
		GalleryDataCache::putToDisk($cacheParams, $mimeData);
	    }
	}
	$ret = array(GalleryStatus::success(), &$mimeData);
	return $ret;
    }

    /**
     * Singleton that can be cleared.
     * @access private
     * @staticvar array $mimeData
     * @static
     */
    function &_getSingleton() {
	static $mimeData = array();
	return $mimeData;
    }

    /**
     * Clear cached mime type data
     *
     * @access private
     * @static
     */
    function _deleteCache() {
	GalleryDataCache::removeFromDisk(array('type' => 'module', 'id' => '_all',
					       'itemId' => 'GalleryMimeTypeHelper_mimeData'));
	$mimeData =& GalleryMimeTypeHelper_simple::_getSingleton();
	$mimeData = array();
    }
}
?>
