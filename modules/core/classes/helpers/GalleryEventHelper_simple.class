<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Gallery event helper.
 * @package GalleryCore
 * @subpackage Helpers
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision$
 * @static
 */
class GalleryEventHelper_simple {

    /**
     * @see GalleryCoreApi::newEvent
     */
    function newEvent($eventName) {
	GalleryCoreApi::requireOnce('modules/core/classes/GalleryEvent.class');
	$event = new GalleryEvent();
	$event->setEventName($eventName);
	return $event;
    }

    /**
     * @see GalleryCoreApi::postEvent
     */
    function postEvent($event) {
	list ($ret, $eventListeners) = GalleryCoreApi::getAllFactoryImplementationIdsWithHint(
	    'GalleryEventListener', $event->getEventName());
	if ($ret) {
	    return array($ret, null);
	}

	$eventResults = array();
	foreach ($eventListeners as $implId => $className) {
	    list ($ret, $eventListener) = GalleryCoreApi::newFactoryInstance(
		'GalleryEventListener', $className);
	    if ($ret) {
		return array($ret, null);
	    }

	    list ($ret, $eventResults[]) = $eventListener->handleEvent($event);
	    if ($ret) {
		return array($ret, null);
	    }
	    if (!isset($eventResults[count($eventResults) - 1])) {
	    	array_pop($eventResults);
	    }
	}

	/** @todo Remove the following on next major API bump */

	/*
	 * Can't check isset($allListeners) because registerEventListener might be called before
	 * postEvent
	 */
	static $allListenersRegistered;
	if (!isset($allListenersRegistered)) {
	    list ($ret, $moduleStatus) = GalleryCoreApi::fetchPluginStatus('module');
	    if ($ret) {
		return array($ret, null);
	    }

	    foreach ($moduleStatus as $moduleId => $status) {
		if (empty($status['active']) || !in_array('registerEventListeners',
			explode('|', $status['callbacks']))) {
		    continue;
		}

		/*
		 * Ignore version mismatch here because we don't want event propagation during
		 * upgrade to lead the plugin framework to deactivate plugins, which will in turn
		 * post more events.  All we want is to ignore plugins which aren't current, which
		 * we do below.
		 */
		list ($ret, $module) = GalleryCoreApi::loadPlugin('module', $moduleId, true);
		if ($ret) {
		    return array($ret, null);
		}
		if (!GalleryCoreApi::isPluginCompatibleWithApis($module)) {
		    continue;
		}

		$ret = $module->registerEventListeners();
		if ($ret) {
		    return array($ret, null);
		}
	    }

	    $allListenersRegistered = true;
	}

	$allListeners =& GalleryEventHelper_simple::_getEventListeners();
	if (!empty($allListeners[$event->getEventName()])) {
	    foreach ($allListeners[$event->getEventName()] as $eventListener) {
		list ($ret, $data) = $eventListener->handleEvent($event);
		if ($ret) {
		    return array($ret, null);
		}
		if (isset($data)) {
		    $eventResults[] = $data;
		}
	    }
	}

	return array(null, $eventResults);
    }

    /** @todo Remove the following on next major API bump */

    /**
     * Static array of registered event listeners.
     * @return array
     * @access private
     */
    function &_getEventListeners() {
	static $allListeners;
	return $allListeners;
    }

    /**
     * @see GalleryCoreApi::registerEventListener
     */
    function registerEventListener($eventName, &$eventListener, $disableForTests=null) {
	if (!empty($disableForTests) && class_exists('GalleryTestCase')) {
	    return null;
	}

	$allListeners =& GalleryEventHelper_simple::_getEventListeners();
	$allListeners[$eventName][] =& $eventListener;

	return null;
    }
}
?>
