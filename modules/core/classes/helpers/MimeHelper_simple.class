<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * A collection of useful mime type related utilities
 *
 * @package GalleryCore
 * @subpackage Helpers
 * @static
 */
class MimeHelper_simple {
    /**
     * Return a singleton copy of a map of file extensions to mime types
     *
     * @return array
     * @access private
     * @static
     * @staticvar array extensionMap Maps file extentions to equivalent MIME-types
     */
    function &_getExtensionMap() {
	static $extensionMap;

	if (!isset($extensionMap)) {
	    /* This data was lifted from Apache's mime.types listing. */
	    $extensionMap['forward'] = array(
		'z' => 'application/x-compress',
		'ai' => 'application/postscript',
		'aif' => 'audio/x-aiff',
		'aifc' => 'audio/x-aiff',
		'aiff' => 'audio/x-aiff',
		'asc' => 'text/plain',
		'au' => 'audio/basic',
		'avi' => 'video/x-msvideo',
		'bcpio' => 'application/x-bcpio',
		'bin' => 'application/octet-stream',
		'bmp' => 'image/bmp',
		'cdf' => 'application/x-netcdf',
		'class' => 'application/octet-stream',
		'cpio' => 'application/x-cpio',
		'cpt' => 'application/mac-compactpro',
		'csh' => 'application/x-csh',
		'css' => 'text/css',
		'dcr' => 'application/x-director',
		'dir' => 'application/x-director',
		'djv' => 'image/vnd.djvu',
		'djvu' => 'image/vnd.djvu',
		'dll' => 'application/octet-stream',
		'dms' => 'application/octet-stream',
		'doc' => 'application/msword',
		'dvi' => 'application/x-dvi',
		'dxr' => 'application/x-director',
		'eps' => 'application/postscript',
		'etx' => 'text/x-setext',
		'exe' => 'application/octet-stream',
		'ez' => 'application/andrew-inset',
		'gif' => 'image/gif',
		'gtar' => 'application/x-gtar',
		'gz' => 'application/x-gzip',
		'hdf' => 'application/x-hdf',
		'hqx' => 'application/mac-binhex40',
		'htm' => 'text/html',
		'html' => 'text/html',
		'ice' => 'x-conference/x-cooltalk',
		'ief' => 'image/ief',
		'iges' => 'model/iges',
		'igs' => 'model/iges',
		'jpe' => 'image/jpeg',
		'jpeg' => 'image/jpeg',
		'jpg' => 'image/jpeg',
		'js' => 'application/x-javascript',
		'kar' => 'audio/midi',
		'latex' => 'application/x-latex',
		'lha' => 'application/octet-stream',
		'lzh' => 'application/octet-stream',
		'm3u' => 'audio/x-mpegurl',
		'man' => 'application/x-troff-man',
		'me' => 'application/x-troff-me',
		'mesh' => 'model/mesh',
		'mid' => 'audio/midi',
		'midi' => 'audio/midi',
		'mif' => 'application/vnd.mif',
		'mov' => 'video/quicktime',
		'movie' => 'video/x-sgi-movie',
		'mp2' => 'audio/mpeg',
		'mp3' => 'audio/mpeg',
		'mpe' => 'video/mpeg',
		'mpeg' => 'video/mpeg',
		'mpg' => 'video/mpeg',
		'mpga' => 'audio/mpeg',
		'ms' => 'application/x-troff-ms',
		'msh' => 'model/mesh',
		'mxu' => 'video/vnd.mpegurl',
		'nc' => 'application/x-netcdf',
		'oda' => 'application/oda',
		'pbm' => 'image/x-portable-bitmap',
		'pdb' => 'chemical/x-pdb',
		'pdf' => 'application/pdf',
		'pgm' => 'image/x-portable-graymap',
		'pgn' => 'application/x-chess-pgn',
		'png' => 'image/png',
		'pnm' => 'image/x-portable-anymap',
		'ppm' => 'image/x-portable-pixmap',
		'ppt' => 'application/vnd.ms-powerpoint',
		'ps' => 'application/postscript',
		'qt' => 'video/quicktime',
		'ra' => 'audio/x-realaudio',
		'ram' => 'audio/x-pn-realaudio',
		'ras' => 'image/x-cmu-raster',
		'rgb' => 'image/x-rgb',
		'rm' => 'audio/x-pn-realaudio',
		'roff' => 'application/x-troff',
		'rpm' => 'audio/x-pn-realaudio-plugin',
		'rtf' => 'text/rtf',
		'rtx' => 'text/richtext',
		'sgm' => 'text/sgml',
		'sgml' => 'text/sgml',
		'sh' => 'application/x-sh',
		'shar' => 'application/x-shar',
		'silo' => 'model/mesh',
		'sit' => 'application/x-stuffit',
		'skd' => 'application/x-koan',
		'skm' => 'application/x-koan',
		'skp' => 'application/x-koan',
		'skt' => 'application/x-koan',
		'smi' => 'application/smil',
		'smil' => 'application/smil',
		'snd' => 'audio/basic',
		'so' => 'application/octet-stream',
		'spl' => 'application/x-futuresplash',
		'src' => 'application/x-wais-source',
		'sv4cpio' => 'application/x-sv4cpio',
		'sv4crc' => 'application/x-sv4crc',
		'svg' => 'image/svg+xml',
		'swf' => 'application/x-shockwave-flash',
		't' => 'application/x-troff',
		'tar' => 'application/x-tar',
		'tcl' => 'application/x-tcl',
		'tex' => 'application/x-tex',
		'texi' => 'application/x-texinfo',
		'texinfo' => 'application/x-texinfo',
		'tif' => 'image/tiff',
		'tiff' => 'image/tiff',
		'tr' => 'application/x-troff',
		'tsv' => 'text/tab-separated-values',
		'txt' => 'text/plain',
		'ustar' => 'application/x-ustar',
		'vcd' => 'application/x-cdlink',
		'vrml' => 'model/vrml',
		'vsd' => 'application/vnd.visio',
		'wav' => 'audio/x-wav',
		'wbmp' => 'image/vnd.wap.wbmp',
		'wbxml' => 'application/vnd.wap.wbxml',
		'wml' => 'text/vnd.wap.wml',
		'wmlc' => 'application/vnd.wap.wmlc',
		'wmls' => 'text/vnd.wap.wmlscript',
		'wmlsc' => 'application/vnd.wap.wmlscriptc',
		'wrl' => 'model/vrml',
		'xbm' => 'image/x-xbitmap',
		'xht' => 'application/xhtml+xml',
		'xhtml' => 'application/xhtml+xml',
		'xls' => 'application/vnd.ms-excel',
		'xml' => 'text/xml',
		'xpm' => 'image/x-xpixmap',
		'xsl' => 'text/xml',
		'xwd' => 'image/x-xwindowdump',
		'xyz' => 'chemical/x-xyz',
		'zip' => 'application/zip'
		);

	    /* And some of my own additions */
	    /* From support.microsoft.com/support/kb/articles/Q284/0/94.ASP */
	    $extensionMap['forward']['asf'] = 'video/x-ms-asf';
	    $extensionMap['forward']['wmv'] = 'video/x-ms-wmv';
	    $extensionMap['forward']['wma'] = 'audio/x-ms-wma';

	    /* JPEG 2000: From RFC 3745: http://www.faqs.org/rfcs/rfc3745.html */
	    $extensionMap['forward']['jp2'] = 'image/jp2';
	    $extensionMap['forward']['jpg2'] = 'image/jp2';
	    $extensionMap['forward']['jpf'] = 'image/jpx';
	    $extensionMap['forward']['jpx'] = 'image/jpx';
	    $extensionMap['forward']['mj2'] = 'video/mj2';
	    $extensionMap['forward']['mjp2'] = 'video/mj2';
	    $extensionMap['forward']['jpm'] = 'image/jpm';
	    $extensionMap['forward']['jpgm'] = 'image/jpgm';

	    $extensionMap['reverse'] = array_flip($extensionMap['forward']);

	    $mimeMap = array();
	    foreach ($extensionMap['forward'] as $ext => $mime) {
		if (!isset($mimeMap[$mime])) {
		    $mimeMap[$mime] = array();
		}
		$mimeMap[$mime][] = $ext;
	    }
	    $extensionMap['reverseToArray'] = $mimeMap;
	}

	return $extensionMap;
    }

    /**
     * Convert a file extension to a mime type
     *
     * @param string a file extension
     * @return string a mime type
     * @static
     */
    function convertExtensionToMime($extension) {
	$extensionMap =& MimeHelper_simple::_getExtensionMap();

	$extension = strtolower($extension);
	if (empty($extensionMap['forward'][$extension])) {
	    return 'application/unknown';
	} else {
	    return $extensionMap['forward'][$extension];
	}
    }

    /**
     * Convert a mime type to a file extension
     *
     * @param string a mime type
     * @return string a file extension
     * @static
     */
    function convertMimeToExtension($mimeType) {
	$extensionMap =& MimeHelper_simple::_getExtensionMap();

	$mimeType = strtolower($mimeType);
	if (empty($extensionMap['reverse'][$mimeType])) {
	    return null;
	} else {
	    return $extensionMap['reverse'][$mimeType];
	}
    }

    /**
     * Return mime types and applicable file extensions
     *
     * @return array (string mime type => array(string extension))
     * @static
     */
    function getMimeTypeMap() {
	$extensionMap =& MimeHelper_simple::_getExtensionMap();
	return $extensionMap['reverseToArray'];
    }

    /**
     * Figure out the file's mime type
     *
     * Eg, "foo.jpg" returns "image/jpeg"
     *
     * @param string the filename
     * @return string the mime type
     * @static
     */
    function getMimeType($filename) {
	list ($base, $extension) = GalleryUtilities::getFileNameComponents($filename);
	return MimeHelper_simple::convertExtensionToMime($extension);
    }

    /**
     * Return true if the given mime type is viewble in a web browser
     *
     * @param string the mime type
     * @return true or false
     */
    function isViewableMimeType($mimeType) {
	static $viewableMimeTypes;

	if (!isset($viewableMimeTypes)) {
	    $viewableMimeTypes = array('image/jpeg' => 1,
				       'image/pjpeg' => 1,
				       'image/gif' => 1,
				       'image/png' => 1);
	}

	return isset($viewableMimeTypes[$mimeType]);
    }
}
?>
