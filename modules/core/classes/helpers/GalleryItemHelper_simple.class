<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Helper class for GalleryItems
 *
 * @package GalleryCore
 * @subpackage Helpers
 * @abstract
 */
class GalleryItemHelper_simple {

    /**
     * Return the correct layout for this item
     *
     * @param object GalleryItem
     * @return array object GalleryStatus a status code
     *               object GalleryLayout a layout instance
     * @static
     */
    function fetchLayout($item) {
	global $gallery;

	/* Find the right layout for this item */
	if (GalleryUtilities::isA($item, 'GalleryAlbumItem')) {
	    $layoutId = $item->getLayout();
	} else {
	    list ($ret, $parent) = GalleryCoreApi::loadEntitiesById($item->getParentId());
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    $layoutId = $parent->getLayout();
	}

	if (empty($layoutId)) {
	    list ($ret, $layoutId) = GalleryCoreApi::getPluginParameter('module', 'core', 'default.layout');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	/* Load the correct layout */
	if (empty($layoutId)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null);
	}

	list ($ret, $layout) = GalleryCoreApi::loadPlugin('layout', $layoutId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $layout);
    }

    /**
     * Return the number of children for the items specified, that are visible to the
     * user specified.
     *
     * @access public
     * @param array item ids
     * @return array object GalleryStatus a status code
     *               int a count
     * @static
     */
    function fetchChildCounts($itemIds) {
	global $gallery;
	$storage =& $gallery->getStorage();

	if (empty($itemIds)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__),
			 null);
	}

	$counts = $missing = array();
	foreach ($itemIds as $itemId) {
	    $cacheKey = "GalleryItemHelper::fetchChildCounts($itemId)";
	    if (GalleryDataCache::containsKey($cacheKey)) {
		$counts[$itemId] = GalleryDataCache::get($cacheKey);
	    } else {
		$missing[] = $itemId;
	    }
	}

	if (empty($missing)) {
	    return array(GalleryStatus::success(), $counts);
	}

	list ($ret, $permissionBits) = GalleryCoreApi::convertPermissionIdsToBits('core.view');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$markers = GalleryUtilities::makeMarkers(count($missing));

	list ($ret, $groupIds) = GalleryCoreApi::fetchGroupsForUser($gallery->getActiveUserId());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$groupIds = array_keys($groupIds);
	$groupIdMarkers = GalleryUtilities::makeMarkers($groupIds);
	list ($ret, $andPermission) = $storage->getFunctionSql('BITAND',
						array('[GalleryPermissionMap::permission]', '?'));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$query = '
        SELECT
          [GalleryChildEntity::parentId], COUNT(DISTINCT [GalleryChildEntity::id])
        FROM
          [GalleryChildEntity], [GalleryPermissionMap]
        WHERE
          [GalleryChildEntity::parentId] IN (' . $markers . ')
          AND
          [GalleryPermissionMap::itemId] = [GalleryChildEntity::id]
          AND
          ([GalleryPermissionMap::userId] = ?
           OR
           [GalleryPermissionMap::groupId] IN (' . $groupIdMarkers . '))
          AND
        ' . $andPermission . ' > ?
        GROUP BY
          [GalleryChildEntity::parentId]
        ';
	$data = $missing;
	$data[] = $gallery->getActiveUserId();
	array_splice($data, sizeof($data), 0, $groupIds);
	$data[] = $storage->convertIntToBits($permissionBits);
	$data[] = $storage->convertIntToBits(0);

	list ($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	while ($result = $searchResults->nextResult()) {
	    $counts[$result[0]] = $result[1];
	    GalleryDataCache::put('GalleryItemHelper::fetchChildCounts(' . $result[0] . ')',
				  $result[1]);
	}

	return array(GalleryStatus::success(), $counts);
    }

    /**
     * Get any descendent counts that we can from the cache, and then failing that recalculate them using
     * fetchUncachedDescendentCounts and cache the new values
     *
     *
     * @param int the item ids
     * @return array object GalleryStatus a status code
     *               array(id => ##, id => ##)
     * @static
     */
    function fetchDescendentCounts($itemIds) {
	global $gallery;
	$activeUserId = $gallery->getActiveUserId();

	require_once(dirname(__FILE__) . '/../GalleryDescendentCountsMap.class');
	$query = sprintf('
         SELECT
           [GalleryDescendentCountsMap::itemId], [GalleryDescendentCountsMap::descendentCount]
         FROM
           [GalleryDescendentCountsMap]
         WHERE
           [GalleryDescendentCountsMap::userId] = ?
           AND
           [GalleryDescendentCountsMap::itemId] IN (%s)
        ', GalleryUtilities::makeMarkers(sizeof($itemIds)));
	$storage =& $gallery->getStorage();

	$data = array();
	$data[] = $activeUserId;
	array_splice($data, sizeof($data), 0, $itemIds);

	list ($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$counts = array();
	while ($result = $searchResults->nextResult()) {
	    $counts[$result[0]] = $result[1];
	}

	/* Now we have all the results that were cached.  Get the rest */
	$remaining = array();
	foreach ($itemIds as $itemId) {
	    if (!isset($counts[$itemId])) {
		$remaining[] = $itemId;
	    }
	}

	if (!empty($remaining)) {
	    list ($ret, $results) = GalleryItemHelper_simple::fetchUncachedDescendentCounts($remaining);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    /* Update the cache */
	    foreach ($results as $itemId => $count) {
		$ret = GalleryDescendentCountsMap::addMapEntry(array('userId' => $activeUserId,
								     'itemId' => $itemId,
								     'descendentCount' => $count));
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
	    }

	    /* Merge the results together.  Array_merge() renumbers numerical indices so we can't use it */
	    foreach ($results as $key => $value) {
		$counts[$key] = $value;
	    }
	}

	return array(GalleryStatus::success(), $counts);
    }

    /**
     * Fetch the number of descendents for a given item
     *
     * @param int the item id
     * @return array object GalleryStatus a status code
     *               array(id => ##, id => ##)
     * @static
     */
    function fetchUncachedDescendentCounts($itemIds) {
	global $gallery;

	list ($ret, $permissionBits) = GalleryCoreApi::convertPermissionIdsToBits(array('core.view'));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $groupIds) = GalleryCoreApi::fetchGroupsForUser($gallery->getActiveUserId());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$groupIds = array_keys($groupIds);
	$groupIdMarkers = GalleryUtilities::makeMarkers(sizeof($groupIds));

	$storage =& $gallery->getStorage();
	$markers = GalleryUtilities::makeMarkers(sizeof($itemIds));
	list ($ret, $andPermission) = $storage->getFunctionSql('BITAND',
						array('[GalleryPermissionMap::permission]', '?'));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $concat) =
	    $storage->getFunctionSql('CONCAT',
				     array('[GalleryItemAttributesMap=1::parentSequence]',
					   '[GalleryItemAttributesMap=1::itemId]',
					   '\'/%\''));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$query = sprintf('
        SELECT
          [GalleryItemAttributesMap=1::itemId],
          COUNT(DISTINCT [GalleryItemAttributesMap=2::itemId])
        FROM
          [GalleryItemAttributesMap=1],
          [GalleryItemAttributesMap=2],
          [GalleryPermissionMap]
        WHERE
          [GalleryItemAttributesMap=1::itemId] IN (%s)
          AND
          [GalleryItemAttributesMap=2::parentSequence] LIKE %s
          AND
          [GalleryItemAttributesMap=2::itemId] = [GalleryPermissionMap::itemId]
          AND
          ([GalleryPermissionMap::userId] = ?
           OR
           [GalleryPermissionMap::groupId] IN (' . $groupIdMarkers . '))
          AND
        ' . $andPermission . ' > ?
          GROUP BY
          [GalleryItemAttributesMap=1::itemId]
        ', $markers, $concat);

	$data = $itemIds;
	$data[] = $gallery->getActiveUserId();
	array_splice($data, sizeof($data), 0, $groupIds);
	$data[] = $storage->convertIntToBits($permissionBits);
	$data[] = $storage->convertIntToBits(0);

	list ($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$counts = array();
	while ($result = $searchResults->nextResult()) {
	    $counts[$result[0]] = $result[1];
	}

	return array(GalleryStatus::success(), $counts);
    }

    /**
     * Return the number of of items that match the given type and have the
     * given permission (defaults to 'core.view')
     *
     * @access public
     * @param string an item type (eg, 'GalleryAlbumItem')
     * @return array object GalleryStatus a status code
     *               int a count
     * @static
     */
    function fetchItemIdCount($itemType, $permission='core.view') {
	global $gallery;

	if (empty($itemType)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__),
			 null);
	}

	$cacheKey = "GalleryItemHelper::fetchItemIdCount($itemType, $permission)";
	if (GalleryDataCache::containsKey($cacheKey)) {
	    $count = GalleryDataCache::get($cacheKey);
	} else {
	    list ($ret, $permissionBits) =
		GalleryCoreApi::convertPermissionIdsToBits(array($permission));
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    list ($ret, $groupIds) = GalleryCoreApi::fetchGroupsForUser($gallery->getActiveUserId());
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    $storage =& $gallery->getStorage();
	    $groupIds = array_keys($groupIds);
	    $groupIdMarkers = GalleryUtilities::makeMarkers($groupIds);
	    list ($ret, $andPermission) = $storage->getFunctionSql('BITAND',
					      array('[GalleryPermissionMap::permission]', '?'));
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    $query = '
            SELECT
              COUNT(DISTINCT [GalleryItem::id])
            FROM
              [GalleryEntity], [GalleryItem], [GalleryPermissionMap]
            WHERE
              [GalleryEntity::entityType] = ?
              AND
              [GalleryItem::id] = [GalleryEntity::id]
              AND
              [GalleryPermissionMap::itemId] = [GalleryEntity::id]
              AND
              ([GalleryPermissionMap::userId] = ?
               OR
               [GalleryPermissionMap::groupId] IN (' . $groupIdMarkers . '))
              AND
            ' . $andPermission . ' = ?';
	    $data = array();
	    $data[] = $itemType;
	    $data[] = $gallery->getActiveUserId();
	    array_splice($data, sizeof($data), 0, $groupIds);
	    $data[] = $storage->convertIntToBits($permissionBits);
	    $data[] = $storage->convertIntToBits($permissionBits);

	    list ($ret, $searchResults) = $gallery->search($query, $data);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    if ($searchResults->resultCount() != 1) {
		return array(GalleryStatus::error(ERROR_STORAGE_FAILURE, __FILE__, __LINE__), null);
	    }

	    $result = $searchResults->nextResult();
	    $count = (int)$result[0];

	    GalleryDataCache::put($cacheKey, $count);
	}

	return array(GalleryStatus::success(), $count);
    }
}
?>
