<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Helper class for GalleryItems
 *
 * @package GalleryCore
 * @subpackage Helpers
 * @abstract
 */
class GalleryItemHelper_simple {
    
    /**
     * Return the correct layout for this item
     *
     * @param object GalleryItem
     * @return array object GalleryStatus a status code
     *               object GalleryLayout a layout instance
     * @static
     */
    function fetchLayout($item) {
	global $gallery;
	
	/* Find the right layout for this item */
	if (GalleryUtilities::isA($item, 'GalleryAlbumItem')) {
	    $layoutId = $item->getLayout();
	} else {
	    list ($ret, $parent) = GalleryCoreApi::loadEntitiesById($item->getParentId());
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null, null);
	    }

	    $layoutId = $parent->getLayout();
	}
	
	if (empty($layoutId)) {
	    list ($ret, $layoutId) = GalleryCoreApi::getPluginParameter('module', 'core', 'default.layout');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null, null);
	    }
	}

	/* Load the correct layout */
	if (empty($layoutId)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null);
	}

	list ($ret, $layout) = GalleryCoreApi::loadPlugin('layout', $layoutId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $layout);
    }

    /**
     * Return the number of children for the items specified, that are visible to the
     * user specified.
     *
     * @access public
     * @param array item ids
     * @return array object GalleryStatus a status code
     *               int a count
     * @static
     */
    function fetchChildCounts($itemIds) {
	global $gallery;

	if (empty($itemIds)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__),
			 null);
	}

	$storage = $gallery->getStorage();

	list ($ret, $permissionBits) = GalleryCoreApi::convertPermissionIdsToBits('core.view');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$markers = GalleryUtilities::makeMarkers(sizeof($itemIds));

	$query = '
        SELECT
          [GalleryChildEntity::parentId], COUNT(DISTINCT([GalleryChildEntity::id]))
        FROM
          [GalleryChildEntity], [GalleryUserGroupMap], [GalleryPermissionMap]
        WHERE
          [GalleryChildEntity::parentId] IN (' . $markers . ') 
          AND
          [GalleryPermissionMap::itemId] = [GalleryChildEntity::id]
          AND
          ([GalleryPermissionMap::userId] = ?
           OR
           ([GalleryUserGroupMap::userId] = ?
            AND
            [GalleryPermissionMap::groupId] = [GalleryUserGroupMap::groupId]))
          AND
          [GalleryPermissionMap::permission] & ? > ?
        GROUP BY
          [GalleryChildEntity::parentId]
        ';
	$data = $itemIds;
	$data[] = $gallery->getActiveUserId();
	$data[] = $gallery->getActiveUserId();
	$data[] = $storage->convertIntToBits($permissionBits);
	$data[] = $storage->convertIntToBits(0);

	list ($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$counts = array();
	while ($result = $searchResults->nextResult()) {
	    $counts[$result[0]] = $result[1];
	}

	return array(GalleryStatus::success(), $counts);
    }

    /**
     * Fetch the number of descendents for a given item
     *
     * @param int the item id
     * @return array object GalleryStatus a status code
     *               array(id => ##, id => ##)
     * @static
     */
    function fetchDescendentCounts($itemIds) {
	global $gallery;

	list ($ret, $permissionBits) = GalleryCoreApi::convertPermissionIdsToBits(array('core.view'));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$storage = $gallery->getStorage();
	$markers = GalleryUtilities::makeMarkers($itemIds);

	list ($ret, $concat) =
	    $storage->getFunctionSql('CONCAT',
				     array('[GalleryItemAttributesMap=1::parentSequence]', 
					   '[GalleryItemAttributesMap=1::itemId]',
					   '\'%\''));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	$query = sprintf('
        SELECT
          [GalleryItemAttributesMap=1::itemId],
          COUNT(DISTINCT([GalleryItemAttributesMap=2::itemId]))
        FROM
          [GalleryItemAttributesMap=1],
          [GalleryItemAttributesMap=2],
          [GalleryUserGroupMap],
          [GalleryPermissionMap]
        WHERE
          [GalleryItemAttributesMap=1::itemId] IN (%s)
          AND
          [GalleryItemAttributesMap=2::parentSequence] LIKE %s
          AND
          [GalleryItemAttributesMap=2::itemId] = [GalleryPermissionMap::itemId]
          AND
          ([GalleryPermissionMap::userId] = ?
           OR
           ([GalleryUserGroupMap::userId] = ?
            AND
            [GalleryPermissionMap::groupId] = [GalleryUserGroupMap::groupId]))
          AND
          [GalleryPermissionMap::permission] & ? > ?
          GROUP BY
          [GalleryItemAttributesMap=1::itemId]
        ', $markers, $concat);

	$data = $itemIds;
	$data[] = $gallery->getActiveUserId();
	$data[] = $gallery->getActiveUserId();
	$data[] = $storage->convertIntToBits($permissionBits);
	$data[] = $storage->convertIntToBits(0);

	list ($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$counts = array();
	while ($result = $searchResults->nextResult()) {
	    $counts[$result[0]] = $result[1];
	}
	
	return array(GalleryStatus::success(), $counts);
    }

    /**
     * Return the number of of items that match the given type and have the
     * given permission (defaults to 'core.view')
     *
     * @access public
     * @param string an item type (eg, 'GalleryAlbumItem')
     * @return array object GalleryStatus a status code
     *               int a count
     * @static
     */
    function fetchItemIdCount($itemType, $permission='core.view') {
	global $gallery;

	if (empty($itemType)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__),
			 null);
	}

	$cacheKey = "GalleryItemHelper::fetchItemIdCount($itemType, $permission)";
	if (GalleryDataCache::containsKey($cacheKey)) {
	    $count = GalleryDataCache::get($cacheKey);
	} else {
	    list ($ret, $permissionBits) =
		GalleryCoreApi::convertPermissionIdsToBits(array($permission));
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    $storage = $gallery->getStorage();
	    $query = '
            SELECT
              COUNT(DISTINCT([GalleryItem::id]))
            FROM
              [GalleryEntity], [GalleryItem], [GalleryUserGroupMap], [GalleryPermissionMap]
            WHERE
              [GalleryEntity::entityType] = ?
              AND
              [GalleryItem::id] = [GalleryEntity::id]
              AND
              [GalleryPermissionMap::itemId] = [GalleryEntity::id]
              AND
              ([GalleryPermissionMap::userId] = ?
               OR
               ([GalleryUserGroupMap::userId] = ?
                AND
                [GalleryPermissionMap::groupId] = [GalleryUserGroupMap::groupId]))
              AND
              [GalleryPermissionMap::permission] & ? = ?
            ';
	    $data = array();
	    $data[] = $itemType;
	    $data[] = $gallery->getActiveUserId();
	    $data[] = $gallery->getActiveUserId();
	    $data[] = $storage->convertIntToBits($permissionBits);
	    $data[] = $storage->convertIntToBits($permissionBits);
	    
	    list ($ret, $searchResults) = $gallery->search($query, $data);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    
	    if ($searchResults->resultCount() != 1) {
		return array(GalleryStatus::error(ERROR_STORAGE_FAILURE, __FILE__, __LINE__), false);
	    }
	    
	    $result = $searchResults->nextResult();
	    $count = (int)$result[0];

	    GalleryDataCache::put($cacheKey, $count);
	} 

	return array(GalleryStatus::success(), $count);
    }
}
?>