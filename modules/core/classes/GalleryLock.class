<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Interface to the locking mechanism
 *
 * This object provides the hooks for locking GalleryNucleus objects
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class GalleryLock {

    /**
     * Do we have a lock or not?
     *
     * @var boolean _isLockAcquired
     * @access private
     */
    var $_isLockAcquired;

    /**
     * Constructor
     */
    function GalleryLock() {
	$this->_isLockAcquired = false;
    }

    /**
     * Lock a set of objects
     * 
     * Lock a set of objects such that:
     * o There will never be deadlocks
     * o There will never be locks left hanging
     *
     * @access public
     * @abstract
     * @param array an array of GalleryNucleus objects
     * @param integer how long we should wait to acquire locks
     * @return object GalleryLock an instance of GalleryLock that holds the locks
     */
    function acquire($timeout) {
	global $gallery;
	list($ret, $storage) = $gallery->getStorage();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$ret = $storage->acquireLock($timeout);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$this->_isLockAcquired = true;

	/*
	 * Register a reference to this object with the release routine.  If we
	 * don't use a reference, then the release method will get called on an
	 * old copy of this instance and we'll wind up unlocking multiple times
	 * (not fatal, but annoying).
	 */
	register_shutdown_function(array(&$this, 'release'));

	return GalleryStatus::success();
    }

    /**
     * Have we acquired a lock of any kind?
     *
     * @return boolean true if locked
     */
    function isLocked() {
	return $this->_isLockAcquired;
    }

    /**
     * Release all locks
     * 
     * Release whatever locks this instance is holding
     *
     * @access public
     * @return object GalleryStatus a status code
     */
    function release() {
	global $gallery;
	
	if (!$this->_isLockAcquired) {
	    return GalleryStatus::success();
	}

	list($ret, $storage) = $gallery->getStorage();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$ret = $storage->releaseLock();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$this->_isLockAcquired = null;
	$this->_lockId = null;

	return GalleryStatus::success();
    }
}
?>
