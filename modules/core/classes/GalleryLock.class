<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Read lock type
 *
 * @constant LOCK_READ
 */
define('LOCK_READ', 1);

/**
 * Write lock type
 *
 * @constant LOCK_WRITE
 */
define('LOCK_WRITE', 2);

/**
 * Interface to the locking mechanism
 *
 * This object provides the hooks for locking GalleryEntity objects
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class GalleryLock {

    /**
     * Do we have a lock or not?
     *
     * @var boolean _isLockAcquired
     * @access private
     */
    var $_isLockAcquired;

    /**
     * My lock id
     *
     * @var int _lockId
     * @access private
     */
    var $_lockId;

    /**
     * Ids of other locks that have been merged into this one
     *
     * @var int _slavedLockIds
     * @access private
     */
    var $_slavedLockIds;

    /**
     * The ids of the entities that are held by this lock
     *
     * @var array int _entityIds
     * @access private
     */
    var $_entityIds;

    /**
     * The type of this lock (read or write)
     *
     * @var int _lockType
     * @access private
     */
    var $_lockType;

    /**
     * Constructor
     */
    function GalleryLock() {
	$this->_isLockAcquired = false;
	$this->_entityIds = null;
	$this->_lockId = null;
	$this->_lockType = null;
    }

    /**
     * Specify the lock id, and the set of ids are now held with this lock
     *
     * This should only ever get called by the GalleryStorage strategy
     * 
     * @access public
     * @param integer the lock id
     * @param integer the lock type
     * @param array the ids of the entities that are locked
     */
    function acquireLock($lockId, $lockType, $entityIds) {
	$this->_lockId = $lockId;
	$this->_lockType = $lockType;
	$this->_entityIds = $entityIds;
	$this->_isLockAcquired = true;
	$this->_slavedLockIds = array();
    }

    /**
     * Have we acquired a lock of any kind?
     *
     * @return boolean true if locked
     */
    function isLocked() {
	return $this->_isLockAcquired;
    }

    /**
     * Get the lock id
     *
     * @return integer the lock id
     */
    function getId() {
	return $this->_lockId;
    }

    /**
     * Get the lock id and all slaved lock ids
     *
     * @return array integer lock ids
     */
    function getAllIds() {
	return array_merge(array($this->_lockId), $this->_slavedLockIds);
    }

    /**
     * What kind of lock are we holding?
     *
     * @return integer the lock type
     */
    function getLockType() {
	return $this->_lockType;
    }

    /**
     * What do we have locked?
     *
     * @return integer the lock type
     */
    function getEntityIds() {
	return $this->_entityIds;
    }

    /**
     * Have we acquired a lock of any kind?
     *
     * @return boolean true if locked
     */
    function isLocked() {
	return $this->_isLockAcquired;
    }

    /**
     * Merge another lock's data into our own
     *
     * @return object GalleryStatus a status code
     */
    function merge(&$otherLock) {
	if (!$otherLock->isLocked()) {
	    return GalleryStatus::success();
	}
	
	if ($otherLock->_lockType != $this->_lockType) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER,
					__FILE__, __LINE__);
	}

	/* Grab the other lock's data */
	$this->_entityIds = array_merge($this->_entityIds, $otherLock->_entityIds);
	$this->_slavedLockIds = array_merge($this->_slavedLockIds, $otherLock->getAllIds());

	/* Deactivate the other lock */
	$otherLock->_isLockAcquired = false;
	$otherLock->_entityIds = null;

	return GalleryStatus::success();
    }

    /**
     * Release all locks
     * 
     * Release whatever locks this instance is holding
     *
     * @access public
     * @return object GalleryStatus a status code
     */
    function release() {
	global $gallery;
	
	if (!$this->_isLockAcquired) {
	    return GalleryStatus::success();
	}

	$reply =& $gallery->getStorage();
	$ret = $reply[0];
	$storage =& $reply[1];
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$ret = $storage->releaseLock($this);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$this->_isLockAcquired = null;
	$this->_lockId = null;
	$this->_lockType = null;
	$this->_entityIds = null;

	return GalleryStatus::success();
    }
}
?>
