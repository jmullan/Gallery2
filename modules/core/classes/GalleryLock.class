<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2002 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Interface to the locking mechanism
 *
 * This object provides the hooks for locking GalleryNucleus objects
 *
 * @version $Id$
 * @package GalleryCore
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class GalleryLock {

    /**
     * List of currently acquired locks
     *
     * @var array $_lockList 
     */
    var $_lockList;

    /**
     * Do we have a lock or not?
     *
     * @var boolean _isLockAcquired
     */
    var $_isLockAcquired;

    /**
     * Do we have a world lock or not?
     *
     * @var boolean _isWorldLock
     */
    var $_isWorldLock;

    /**
     * The internal id of this lock
     */
    var $_lockId;

    /**
     * Constructor
     */
    function GalleryLock() {
	$this->_isLockAcquired = false;
	$this->_isWorldLock = false;
    }

    /**
     * Lock a set of objects
     * 
     * Lock a set of objects such that:
     * o There will never be deadlocks
     * o There will never be locks left hanging
     *
     * @access public
     * @abstract
     * @param array an array of GalleryNucleus objects
     * @param integer how long we should wait to acquire locks
     * @return object GalleryLock an instance of GalleryLock that holds the locks
     */
    function lock($ids, $timeout) {
	global $gallery;
	$storage = $gallery->getStorage();

	list($ret, $this->_lockId) = $storage->acquireLock($ids, $timeout);
	if ($ret->isError()) {
	    return $ret;
	}

	$this->_lockList = $ids;
	$this->_isLockAcquired = true;

	if (sizeof($ids) == 0) {
	    $this->_isWorldLock = true;
	}

	/*
	 * Register a reference to this object with the unlock routine.  If we
	 * don't use a reference, then the unlock method will get called on an
	 * old copy of this lock and we'll wind up unlocking multiple times
	 * (not fatal, but annoying).
	 */
	register_shutdown_function(array(&$this, 'unlock'));

	return GalleryStatus::success();
    }

    /**
     * Have we acquired a lock of any kind?
     *
     * @return boolean true if locked
     */
    function isLocked() {
	return $this->_isLockAcquired;
    }

    /**
     * Are these GalleryNucleus' locked?
     *
     * @param array an array of GalleryNucleus ids
     * @return boolean true if locked
     */
    function isIdLocked($ids) {
	assert('!empty($ids)');

	if (!$this->_isLockAcquired) {
	    return false;
	}

	if ($this->_isWorldLock) {
	    return true;
	}

	foreach ($ids as $id) {
	    if (!in_array($id, $this->_lockList)) {
		return false;
	    }
	}

	return true;
    }

    /**
     * Have we acquired a world lock?
     *
     * @return bool true if the world is locked
     */
    function isWorldLocked() {
	if (!$this->_isLockAcquired) {
	    return false;
	}

	if ($this->_isWorldLock) {
	    return true;
	}

	return false;
    }

    /**
     * Release all locks
     * 
     * Release whatever locks this instance is holding
     *
     * @access public
     * @return object GalleryStatus a status code
     */
    function unlock() {
	if (!$this->_isLockAcquired) {
	    return GalleryStatus::success();
	}

	global $gallery;
	$storage = $gallery->getStorage();
	$ret = $storage->releaseLock($this->_lockId, $this->_isWorldLock);
	if ($ret->isError()) {
	    return $ret;
	}

	$this->_isLockAcquired = null;
	$this->_isWorldLock = null;
	$this->_lockId = null;
	$this->_lockList = null;

	return GalleryStatus::success();
    }
}
?>
