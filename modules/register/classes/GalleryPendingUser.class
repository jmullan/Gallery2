<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Slefregistration
 * @author Sebastian Eichner <mailsp@sebastian-eichner.de>
 */

/**
 * Load the parent class
 */
require_once(dirname(__FILE__) . '/../../core/classes/GalleryEntity.class');

/**
 * Load required classes
 */
require_once(dirname(__FILE__). '/../../core/classes/GallerySmarty.class');
 
/**
 * Representation of a single pending self-registered user
 * (not yet a valid GalleryUser)
 * 
 * This class is the container for information about Gallery     
 * users.  Each instance of User contains a unique user id. It   
 * must be implemented by a class that has a persistent store for
 * the relevant user data.
 *
 * @g2 <class-name>GalleryPendingUser</class-name>
 * @g2 <parent-class-name>GalleryEntity</parent-class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 * @g2 <requires-id/>
 *
 * @package Selfregistration
 * @subpackage Classes
 */
class GalleryPendingUser_core extends GalleryEntity {
	
    /*
     * ****************************************
     *                 Members
     * ****************************************
     */

    /**
     * The User's username
     *
     * @g2 <member>
     * @g2   <member-name>userName</member-name>
     * @g2   <member-type>STRING</member-type>
     * @g2   <member-size>SMALL</member-size>
     * @g2   <unique/>
     * @g2   <required/>
     * @g2 </member>
     *
     * @var string $_userName
     * @access private
     */
    var $_userName;

    /**
     * The User's full name
     *
     * @g2 <member>
     * @g2   <member-name>fullName</member-name>
     * @g2   <member-type>STRING</member-type>
     * @g2   <member-size>MEDIUM</member-size>
     * @g2 </member>
     *
     * @var string $_fullName
     * @access private
     */
    var $_fullName;

    /**
     * The User's password in a hashed form.
     *
     * @g2 <member>
     * @g2   <member-name>hashedPassword</member-name>
     * @g2   <member-type>STRING</member-type>
     * @g2   <member-size>SMALL</member-size>
     * @g2 </member>
     *
     * @var string $_hashedPassword
     * @access private
     */
    var $_hashedPassword;

    /**
     * The User's email address.
     *
     * @g2 <member>
     * @g2   <member-name>email</member-name>
     * @g2   <member-type>STRING</member-type>
     * @g2   <member-size>MEDIUM</member-size>
     * @g2 </member>
     *
     * @var string $_email
     * @access private
     */
    var $_email;

    /**
     * The User's language preference
     *
     * @g2 <member>
     * @g2   <member-name>language</member-name>
     * @g2   <member-type>STRING</member-type>
     * @g2   <member-size>MEDIUM</member-size>
     * @g2 </member>
     *
     * @var string $_language
     * @access private
     */
    var $_language;

    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * Create a new instance of this user in the persistent store
     *
     * @return object GalleryStatus a status code
     */
    function create($userName) {
	global $gallery;

	// first check for a collision in the pending users table
	$query = '
        SELECT
          [GalleryPendingUser::id]
        FROM
          [GalleryPendingUser]
        WHERE
          [GalleryPendingUser::userName] = ?
        ';

	/* Check to see if we have a collision */
	list($ret, $results) =
	    $gallery->search($query, array($userName),
			     array('limit' => array('count' => 1)));

	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$result = $results->nextResult();
	if ($result[0] > 0) {
	    return GalleryStatus::error(ERROR_COLLISION,
					__FILE__, __LINE__);
	}
	
	
	// then check for a collision in the real user table
	$query = '
        SELECT
          [GalleryUser::id]
        FROM
          [GalleryUser]
        WHERE
          [GalleryUser::userName] = ?
        ';

	/* Check to see if we have a collision */
	list($ret, $results) =
	    $gallery->search($query, array($userName),
			     array('limit' => array('count' => 1)));

	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$result = $results->nextResult();
	if ($result[0] > 0) {
	    return GalleryStatus::error(ERROR_COLLISION,
					__FILE__, __LINE__);
	}
	
	
	// okay, we don't have any collisions, so go on
	$ret = parent::create();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	
	$this->setUserName($userName);
	return GalleryStatus::success();
    }

    /**
     * Is the password provided correct?
     *
     * @param string a plaintext password
     * @return boolean true if the password is correct
     */
    function isCorrectPassword($password) {
	return !strcmp(md5($password), $this->getHashedPassword());
    }

    /**
     * Change the user's password to the new value provided.
     *
     * @param string a plaintext password
     */
    function changePassword($newPassword) {
	$this->setHashedPassword(md5($newPassword));
    }

    /**
     * Save the changes to this GalleryUser
     *
     * @access public
     * @return object GalleryStatus a status code
     */
    function save() {
	global $gallery;

	if ($this->testPersistentFlag(STORAGE_FLAG_NEWLY_CREATED)) {
	    $newlyCreated = 1;
	} else {
	    $newlyCreated = 0;
	}

	$ret = parent::save();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Delete this GalleryPendingUser
     *
     * @access public
     * @return object GalleryStatus a status code
     */
    function delete() {
	global $gallery;

	$ret = parent::delete();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

	/**
	 * Send an email with a confirmation link
	 *
	 * @access public
	 * @return object GalleryStatus a status code
	 */
	function sendConfirmationEMail() {
		global $gallery;
		
		$generator =& $gallery->getUrlGenerator();
		$confirmationUrl = $generator->generateUrl(
				array(
					'view' => 'core:UserAdmin',
					'subview' => 'selfregistration:ConfirmRegistration',
					'username' => $this->getUserName(),
					'controller' => 'selfregistration:ConfirmRegistration',
					));
		/* it seems that spaces in the username are not translated to %20, so do it here */
		/* otherwise mail clients will certainly put a line break there */
		$confirmationUrl = str_replace(" ", "%20", $confirmationUrl);
		
		$baseUrl = $generator->generateUrl();
				
		$smarty = new GallerySmarty();
		
		/* Compiled templates go here */
	    $smarty->compile_dir = $gallery->getConfig('data.smarty.templates_c');

	    /* Don't let Smarty change the error reporting level */
	    $smarty->error_reporting = error_reporting();
	    
		$smarty->assign('name', $this->getFullName());
		$smarty->assign('username', $this->getUserName());
		$smarty->assign('confirmationUrl', $confirmationUrl);
		$smarty->assign('baseUrl', $baseUrl);
		
		
		list($ret, $sEmailText) = $smarty->fetch(dirname(__FILE__).'/../templates/SmartyConfirmationEMail.tpl');
		if ($ret->isError()) {
	    	return $ret->wrap(__FILE__, __LINE__);
		}
		
		$subject = 'Account activation';
		$from = 'info@localhost';
		
		/* check if sending emails is disabled */
		list($ret, $reallySend) = GalleryCoreApi::getPluginParameter('module', 'selfregistration', 'reallysend');
		if ($ret->isError()) {
	    	return $ret->wrap(__FILE__, __LINE__);
		}
		
		if ($reallySend=='true')
			$succ = mail($this->getEmail(), $subject, $sEmailText, "From: $from");
		else 
			$succ = true;
		if (!$succ)
			return GalleryStatus::error(ERROR_UNKNOWN, __FILE__, __LINE__, 'Could not send confirmation mail to '. $this->getEmail());
			
		return GalleryStatus::success();
	}
	
	function createGalleryUser() {
		list ($ret, $user) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryUser');
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}

		if (!isset($user)) {
		    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__),
				 null);
		}
		
		$ret = $user->create($this->getUserName());
	    if ($ret->isError()) {
			return array($ret->wrap(__FILE__, __LINE__), null);
	    }

		/* copy all values to the new "real" user */
	    $user->setEmail($this->getEmail());
	    $user->setFullName($this->getFullName());
	    $user->setLanguage($this->getLanguage());
	    $user->setHashedPassword($this->getHashedPassword());
	
	    $ret = $user->save();
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
		
		/* notify gallery event system */
		$eventName = "GalleryPendingUser::createGalleryUser";
		$event = GalleryCoreApi::newEvent($eventName);
		$event->setEntity($this);
		$ret = GalleryCoreApi::postEvent($event);
		if ($ret->isError()) {
		    return  $ret->wrap(__FILE__, __LINE__);
		}
		return GalleryStatus::success();
	}

}

include(dirname(__FILE__) . '/interfaces/GalleryPendingUser.inc');
?>
