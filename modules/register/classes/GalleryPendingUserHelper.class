<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package SelfRegistration
 * @author Sebastian Eichner <mailsp@sebastian-eichner.de>
 */

/**
 * A helper class for GalleryPendingUsers
 *
 * Utility functions useful in managing GalleryPendingUsers
 *
 * @package SelfRegistration
 * @subpackage Classes
 */
class GalleryPendingUserHelper {
	
    /**
     * Return the GalleryPendingUser specified by the username
     *
     * @param string the username
     * @return array object GalleryStatus a status code
     *               object GalleryPendingUser a pending user
     * @static
     */
    function fetchPendingUserByUserName($userName) {
	global $gallery;

        $query = '
        SELECT
          [GalleryPendingUser::id]
        FROM
          [GalleryPendingUser]
        WHERE
          [GalleryPendingUser::userName] = ?
        ';
	list ($ret, $searchResults) = $gallery->search($query, array($userName));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if ($searchResults->resultCount() == 0) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	} else {
	    $result = $searchResults->nextResult();
	    $id = $result[0];
	    list ($ret, $user) = GalleryCoreApi::loadEntitiesById($id);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    return array(GalleryStatus::success(), $user);
	}
    }

    /**
     * Send an email with a confirmation link
     *
     * @param object GalleryPendingUser
     * @return object GalleryStatus a status code
     * @static
     */
    function sendConfirmationEmail(&$pendingUser) {
	GalleryCoreApi::requireOnce(dirname(__FILE__). '/../../core/classes/GallerySmarty.class');
	global $gallery;

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'register');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list($ret, $params) = GalleryCoreApi::fetchAllPluginParameters('module', 'register');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* check if sending emails is disabled */
	if ($params['reallysend'] != 'true') {
	    return GalleryStatus::success();
	}

	$generator =& $gallery->getUrlGenerator();
	$confirmationUrl = $generator->generateUrl(
			 array( 'view' => 'core:UserAdmin',
				'subview' => 'register:ConfirmRegistration',
				'username' => $pendingUser->getUserName(),
				'controller' => 'register:ConfirmRegistration' ));
	/* it seems that spaces in the username are not translated to %20, so do it here */
	/* otherwise mail clients will certainly put a line break there */
	$confirmationUrl = str_replace(" ", "%20", $confirmationUrl);

	$baseUrl = $generator->generateUrl();
	$smarty = new GallerySmarty();

	/* Compiled templates go here */
	$smarty->compile_dir = $gallery->getConfig('data.smarty.templates_c');

	/* Don't let Smarty change the error reporting level */
	$smarty->error_reporting = error_reporting();

	$smarty->assign('name', $pendingUser->getFullName());
	$smarty->assign('username', $pendingUser->getUserName());
	$smarty->assign('confirmationUrl', $confirmationUrl);
	$smarty->assign('baseUrl', $baseUrl);

	list($ret, $sEmailText) =
	    $smarty->fetch(dirname(__FILE__).'/../templates/SmartyConfirmationEmail.tpl');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$subject = $module->translate($params['subject']);
	$from = $params['from'];

	$succ = mail($pendingUser->getEmail(), $subject, $sEmailText, "From: $from");

	if (!$succ) {
	    return GalleryStatus::error(ERROR_UNKNOWN, __FILE__, __LINE__,
		'Could not send confirmation mail to ' . $pendingUser->getEmail());
	}

	return GalleryStatus::success();
    }

    /**
     * Create GalleryUser from GalleryPendingUser
     *
     * @param object GalleryPendingUser
     * @param boolean if true delete the GalleryPendingUser
     * @return object GalleryStatus a status code
     * @static
     */
    function createGalleryUser(&$pendingUser, $delete=true) {
	list ($ret, $user) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryUser');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if (!isset($user)) {
	    return GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__);
	}

	$ret = $user->create($pendingUser->getUserName());
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* copy all values to the new "real" user */
	$user->setEmail($pendingUser->getEmail());
	$user->setFullName($pendingUser->getFullName());
	$user->setLanguage($pendingUser->getLanguage());
	$user->setHashedPassword($pendingUser->getHashedPassword());

	$ret = $user->save();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* notify gallery event system */
	$eventName = "GalleryPendingUser::createGalleryUser";
	$event = GalleryCoreApi::newEvent($eventName);
	$event->setEntity($pendingUser);
	$ret = GalleryCoreApi::postEvent($event);
	if ($ret->isError()) {
	    return  $ret->wrap(__FILE__, __LINE__);
	}

	if ($delete) {
	    list($ret, $lock) = GalleryCoreApi::acquireWriteLock(array($pendingUser->getId()));
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    $ret = $pendingUser->delete();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    $ret = GalleryCoreApi::releaseLocks($lock);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	return GalleryStatus::success();
    }
}
?>
