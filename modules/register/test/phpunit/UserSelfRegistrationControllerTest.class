<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Selfregistration
 * @subpackage PHPUnit
 * @author Sebastian Eichner <mailsp@sebastian-eichner.de>
 */

/**
 * require necessary classes
 */
 require_once( dirname(__FILE__). '/../../classes/helpers/GalleryPendingUserHelper_medium.class');
 
/**
 * UserSelfregistration controller tests
 * @package Selfregistration
 * @subpackage PHPUnit
 */
class UserSelfregistrationControllerTest extends GalleryControllerTestCase {

    function UserSelfregistrationControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'selfregistration:UserSelfregistration');
    }
    
    function setUp() {
    	global $gallery;
    	
    	/* store settings */
    	$this->_params = array();
		foreach( array('emailconfirmation', 'reallysend') as $key) {
    		list($ret, $value) = GalleryCoreApi::getPluginParameter('module', 'selfregistration', $key);
    		if ($ret->isError())
    			return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
    		
    		$this->_params[$key] = $value;
		}
   
//    	/* store active user */
//    	$this->_activeUserId = $gallery->getActiveUserId();
//   	
//    	list($ret, $guestId) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.anonymousUser');
//    	if ($ret->isError())
//    		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
//    	
//    	/* become guest */
//    	$gallery->setActiveUserId( $guestId );
//    	
    	parent::setUp();
    	
    }
    
    function tearDown() {
    	global $gallery;
		/* restore parameters */
		foreach( array('emailconfirmation', 'reallysend') as $key) {
    		$ret = GalleryCoreApi::setPluginParameter('module', 'selfregistration', $key, $this->_params[$key]);
    		if ($ret->isError())
    			return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
//
//    	$gallery->setActiveUserId($this->_activeUserId);
//    	
    	parent::tearDown();
    }
    
    function testCancel() {
    	global $gallery;
		GalleryUtilities::putRequestVariable('form[action][cancel]', 1);
		$results = $this->handleRequest();
		$this->assertEquals(array('redirect' => array('view' => 'core:UserAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

	    function testRegisterWithAutomaticActivationUser() {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'selfregistration', 'emailconfirmation', 'false');
    	if ($ret->isError()) 
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    	
		$userName = 'user-selfreg'.rand();
		GalleryUtilities::putRequestVariable('form[action][create]', 1);
		GalleryUtilities::putRequestVariable('form[userName]', $userName);
		GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
		GalleryUtilities::putRequestVariable('form[email]', 'email');
		GalleryUtilities::putRequestVariable('form[language]', 'language');
		GalleryUtilities::putRequestVariable('form[password1]', 'password');
		GalleryUtilities::putRequestVariable('form[password2]', 'password');
		
		$results = $this->handleRequest();
		$this->assertEquals(array('redirect' => array('view' => 'core:UserAdmin',
		      'subView' => 'selfregistration:SelfregistrationSuccess'),
		  'status' => array('activatedUser' => $userName),
		  'error' => array()),
		    $results,
		    'Failed to register user with automatic activation');
		
		/* the newly registered user is a real user by now */
		list ($ret, $user) = GalleryCoreApi::fetchUserByUserName($userName);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		$this->assertEquals(GalleryUtilities::isA($user, 'GalleryUser'), true);
		
		$ret = $this->_deleteUser($user);
		if ($ret!=null && $ret->isError())
			return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
    }
    
//	    function testRegisterWithEMailActivation() {
//	    $ret = GalleryCoreApi::setPluginParameter('module', 'selfregistration', 'emailconfirmation', 'true');
//    	if ($ret->isError()) 
//		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
//
//	    $ret = GalleryCoreApi::setPluginParameter('module', 'selfregistration', 'reallysend', 'false');
//    	if ($ret->isError()) 
//		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
//	    	
//		$userName = 'user-'.rand();
//		GalleryUtilities::putRequestVariable('form[action][create]', 1);
//		GalleryUtilities::putRequestVariable('form[userName]', $userName);
//		GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
//		GalleryUtilities::putRequestVariable('form[email]', 'email');
//		GalleryUtilities::putRequestVariable('form[language]', 'language');
//		GalleryUtilities::putRequestVariable('form[password1]', 'password');
//		GalleryUtilities::putRequestVariable('form[password2]', 'password');
//		
//		$results = $this->handleRequest();
//		$this->assertEquals(array('redirect' => array('view' => 'core:UserAdmin',
//		      'subView' => 'selfregistration:SelfregistrationSuccess'),
//		  'status' => array('registeredUser' => $userName),
//		  'error' => array()),
//		    $results,
//		    'Failed to register user with email activation');
//		
//		/* make sure the pending user exists */
//		list($ret, $user) = GalleryPendingUser::fetchPendingUserByUserName($userName);
//		if ($ret->isError()) 
//		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
//		
//		/* the newly registered user is a real user by now */
//		list ($ret, $user) = GalleryCoreApi::fetchUserByUserName($userName);
//		if ($ret->isError()) {
//		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
//		}
//		$this->assertEquals(GalleryUtilities::isA($user, 'GalleryUser'), true);
//		
//		$this->_deleteUser($userName);
//    }
//    
    function testMissingInputs() {
	GalleryUtilities::putRequestVariable('form[action][create]', 1);

	/* Create one user */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:UserAdmin',
						      'subView' => 'selfregistration:UserSelfregistration'),
				  'status' => array(),
				  'error' => array('form[error][userName][missing]',
						   'form[error][email][missing]',
						   'form[error][password1][missing]',
						   'form[error][password2][missing]')),
			    $results);
    }

    function testPasswordMismatch() {
	$userName = 'user-selfreg' . rand();

	/* Create one user */
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $userName);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'email');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	GalleryUtilities::putRequestVariable('form[password1]', 'passwordRight');
	GalleryUtilities::putRequestVariable('form[password2]', 'passwordWrong');
	
	$results = $this->handleRequest();

	$this->assertEquals(array('delegate' => array('view' => 'core:UserAdmin',
						      'subView' => 'selfregistration:UserSelfregistration'),
				  'status' => array(),
				  'error' => array('form[error][password2][mismatch]')),
			    $results);
    }

    function testCreateDuplicatePendingUser() {
	$userName = 'user-selfreg' . rand();

    $ret = GalleryCoreApi::setPluginParameter('module', 'selfregistration', 'emailconfirmation', 'true');
	if ($ret->isError()) 
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));

    $ret = GalleryCoreApi::setPluginParameter('module', 'selfregistration', 'reallysend', 'false');
	if ($ret->isError()) 
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));


	/* Create one user */
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $userName);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'email');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	GalleryUtilities::putRequestVariable('form[password1]', 'password');
	GalleryUtilities::putRequestVariable('form[password2]', 'password');
	
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:UserAdmin',
						      'subView' => 'selfregistration:SelfregistrationSuccess'),
				  'status' => array('registeredUser' => $userName),
				  'error' => array()),
			    $results,
			    'Failed to create first pending user');


	/* Create a second user with the same name */
	/* fails because we have the existing pending user */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:UserAdmin',
						      'subView' => 'selfregistration:UserSelfregistration'),
				  'status' => array(),
				  'error' => array('form[error][userName][exists]')),
			    $results);
	
	$this->_deletePendingUser($userName);
    }


    function testCreateDuplicateUser() {
	$userName = 'user-selfreg' . rand();

    $ret = GalleryCoreApi::setPluginParameter('module', 'selfregistration', 'emailconfirmation', 'false');
	if ($ret->isError()) 
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));


	/* Create one user */
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $userName);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'email');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	GalleryUtilities::putRequestVariable('form[password1]', 'password');
	GalleryUtilities::putRequestVariable('form[password2]', 'password');
	
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:UserAdmin',
						      'subView' => 'selfregistration:SelfregistrationSuccess'),
				  'status' => array('activatedUser' => $userName),
				  'error' => array()),
			    $results,
			    'Failed to create first user');


	/* Create a second user with the same name */
	/* fails because we have the existing  user */
	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:UserAdmin',
						      'subView' => 'selfregistration:UserSelfregistration'),
				  'status' => array(),
				  'error' => array('form[error][userName][exists]')),
			    $results);
	
	
	/* find userid */
	list($ret, $user) = GalleryCoreApi::fetchUserByUserName($userName);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$ret = $this->_deleteUser($user);
	if ($ret!=null && $ret->isError())
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
    }
    
    

    function _deletePendingUser($userName) {
	global $gallery;
	
	list ($ret, $user) = GalleryPendingUserHelper_medium::fetchPendingUserByUserName($userName);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::deleteEntityById($user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

}
?>
