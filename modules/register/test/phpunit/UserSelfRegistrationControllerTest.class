<?php
/*
 * $RCSfile: UserSelfRegistrationControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.14 $ $Date: 2005/08/23 03:49:52 $
 * @package SelfRegistration
 * @subpackage PHPUnit
 * @author Sebastian Eichner <mailsp@sebastian-eichner.de>
 */

GalleryCoreApi::relativeRequireOnce('modules/register/classes/GalleryPendingUserHelper.class');
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryValidationPlugin.class');

/**
 * UserSelfRegistration controller tests
 * @package SelfRegistration
 * @subpackage PHPUnit
 */
class UserSelfRegistrationControllerTest extends GalleryControllerTestCase {

    function UserSelfRegistrationControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'register.UserSelfRegistration');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	$ret = $this->_markPluginParametersForCleanup('module', 'register');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::setPluginParameter('module', 'register', 'emailadmins', '0');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testCancel() {
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testRegisterWithAutomaticActivation() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'register', 'confirmation', 'auto');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$userName = 'user-selfreg' . rand();
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $userName);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'email@test.com');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	GalleryUtilities::putRequestVariable('form[password1]', 'password');
	GalleryUtilities::putRequestVariable('form[password2]', 'password');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
				      'subView' => 'register.SelfRegistrationSuccess'),
		'status' => array('activatedUser' => $userName),
		'error' => array()),
	    $results,
	    'Failed to register user with automatic activation');

	/* the newly registered user is a real user by now */
	list ($ret, $user) = GalleryCoreApi::fetchUserByUserName($userName);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(GalleryUtilities::isA($user, 'GalleryUser'), true);

	$this->_markForCleanup($user);
    }

    function testRegisterWithEMailActivation() {
	global $gallery;
	$ret = GalleryCoreApi::setPluginParameter('module', 'register', 'confirmation', 'email');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$userName = 'user-' . rand();
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $userName);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'email@test.com');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	GalleryUtilities::putRequestVariable('form[password1]', 'password');
	GalleryUtilities::putRequestVariable('form[password2]', 'password');

	$savePlatform = $gallery->getPlatform();
	$gallery->_platform = new RegisterDummyPlatform($savePlatform, $this);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
	      'subView' => 'register.SelfRegistrationSuccess'),
	  'status' => array('registeredUser' => $userName),
	  'error' => array()),
	    $results,
	    'Failed to register user with email activation');

	$gallery->_platform = $savePlatform;

	/* make sure the pending user exists */
	list($ret, $user) = GalleryPendingUserHelper::fetchPendingUserByUserName($userName);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user);
    }

    function testUsernameWithEntity() {
	/* Make sure emails sent out don't include text like &amp; */
	global $gallery;
	$ret = GalleryCoreApi::setPluginParameter('module', 'register', 'confirmation', 'email');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$userName = $entitizedName = 'test < & > ' . rand();
	GalleryUtilities::sanitizeInputValues($entitizedName);

	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $userName);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'email@test.com');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	GalleryUtilities::putRequestVariable('form[password1]', 'password');
	GalleryUtilities::putRequestVariable('form[password2]', 'password');

	$savePlatform = $gallery->getPlatform();
	$gallery->_platform = new RegisterDummyPlatform($savePlatform, $this);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
	      'subView' => 'register.SelfRegistrationSuccess'),
	  'status' => array('registeredUser' => $entitizedName),
	  'error' => array()),
	    $results,
	    'Failed to register user with email activation');

	$gallery->_platform = $savePlatform;

	/* make sure the pending user exists */
	list($ret, $user) = GalleryPendingUserHelper::fetchPendingUserByUserName($entitizedName);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user);

	/* verify un-entitized username was used in email */
	/* the confirm link should also use unentitized(but urlencoded) value; not verified here */
	$this->assert(strpos($this->_emailBody, $userName) !== false,
		      'Email body should have unentitized username: ' . $this->_emailBody);
    }

    function testMissingInputs() {
	GalleryUtilities::putRequestVariable('form[action][create]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin',
				      'subView' => 'register.UserSelfRegistration'),
		  'status' => array(),
		  'error' => array('form[error][userName][missing]',
				   'form[error][email][missing]',
				   'form[error][password1][missing]',
				   'form[error][password2][missing]',
				   'form[error][fullName][missing]')),
	    $results);
    }

    function testInvalidEmail() {
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', 'user-selfreg' . rand());
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'bad!email@test.com');
	GalleryUtilities::putRequestVariable('form[password1]', 'pass');
	GalleryUtilities::putRequestVariable('form[password2]', 'pass');

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin',
				      'subView' => 'register.UserSelfRegistration'),
		  'status' => array(),
		  'error' => array('form[error][email][invalid]')),
	    $results);
    }

    function testPasswordMismatch() {
	$userName = 'user-selfreg' . rand();

	/* Create one user */
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $userName);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'email@test.com');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	GalleryUtilities::putRequestVariable('form[password1]', 'passwordRight');
	GalleryUtilities::putRequestVariable('form[password2]', 'passwordWrong');

	$results = $this->handleRequest();

	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin',
				      'subView' => 'register.UserSelfRegistration'),
		  'status' => array(),
		  'error' => array('form[error][password2][mismatch]')),
	    $results);
    }

    function testCreateDuplicatePendingUser() {
	$userName = 'user-selfreg' . rand();

	$ret = GalleryCoreApi::setPluginParameter('module', 'register', 'confirmation', 'admin');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create one user */
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $userName);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'email@test.com');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	GalleryUtilities::putRequestVariable('form[password1]', 'password');
	GalleryUtilities::putRequestVariable('form[password2]', 'password');

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('redirect' => array('view' => 'core.UserAdmin',
				      'subView' => 'register.SelfRegistrationSuccess'),
		  'status' => array('registeredUserNoEmail' => $userName),
		  'error' => array()),
	    $results,
	    'Failed to create first pending user');

	/* Create a second user with the same name */
	/* fails because we have the existing pending user */
	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin',
				      'subView' => 'register.UserSelfRegistration'),
		  'status' => array(),
		  'error' => array('form[error][userName][exists]')),
	    $results, 'Create duplicate');

	list ($ret, $user) = GalleryPendingUserHelper::fetchPendingUserByUserName($userName);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user);
    }

    function testCreateDuplicateUser() {
	$userName = 'user-selfreg' . rand();

	$ret = GalleryCoreApi::setPluginParameter('module', 'register', 'confirmation', 'auto');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create one user */
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $userName);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'email@test.com');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	GalleryUtilities::putRequestVariable('form[password1]', 'password');
	GalleryUtilities::putRequestVariable('form[password2]', 'password');

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('redirect' => array('view' => 'core.UserAdmin',
				      'subView' => 'register.SelfRegistrationSuccess'),
		  'status' => array('activatedUser' => $userName),
		  'error' => array()),
	    $results,
	    'Failed to create first user');

	/* Create a second user with the same name */
	/* fails because we have the existing  user */
	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin',
				      'subView' => 'register.UserSelfRegistration'),
		  'status' => array(),
		  'error' => array('form[error][userName][exists]')),
	    $results, 'Create duplicate');

	/* find userid */
	list($ret, $user) = GalleryCoreApi::fetchUserByUserName($userName);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$this->_markForCleanup($user);
    }

    /**
     * Two plugins both returning errors.  The first plugin returns a false 'continue',
     * so we should only see the first error in the form return
     */
    function testPlugins1() {
	$userName = 'user-selfreg' . rand();
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $userName);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'email@test.com');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	GalleryUtilities::putRequestVariable('form[password1]', 'password');
	GalleryUtilities::putRequestVariable('form[password2]', 'password');

	$plugin1 = new UserSelfRegistrationControllerTestPlugin();
	$plugin1->setErrors(array('form[error][UserSelfRegistrationControllerTestPlugin1][anError]'));
	$plugin1->setContinue(false);

	$plugin2 = new UserSelfRegistrationControllerTestPlugin();
	$plugin2->setErrors(array('form[error][UserSelfRegistrationControllerTestPlugin2][anError]'));
	$plugin2->setContinue(true);
	$this->_controller->setPluginInstances(array($plugin1, $plugin2));

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin', 'subView' => 'register.UserSelfRegistration'),
		  'status' => array(),
		  'error' => array('form[error][UserSelfRegistrationControllerTestPlugin1][anError]')),
	    $results);
    }

    /**
     * Two plugins returning errors
     */
    function testPlugins2() {
	$userName = 'user-selfreg' . rand();
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $userName);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'email@test.com');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	GalleryUtilities::putRequestVariable('form[password1]', 'password');
	GalleryUtilities::putRequestVariable('form[password2]', 'password');

	$plugin1 = new UserSelfRegistrationControllerTestPlugin();
	$plugin1->setErrors(array('form[error][UserSelfRegistrationControllerTestPlugin1][anError]'));
	$plugin1->setContinue(true);

	$plugin2 = new UserSelfRegistrationControllerTestPlugin();
	$plugin2->setErrors(array('form[error][UserSelfRegistrationControllerTestPlugin2][anError]'));
	$plugin2->setContinue(false);
	$this->_controller->setPluginInstances(array($plugin1, $plugin2));

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('delegate' => array('view' => 'core.UserAdmin', 'subView' => 'register.UserSelfRegistration'),
		  'status' => array(),
		  'error' => array('form[error][UserSelfRegistrationControllerTestPlugin1][anError]',
				   'form[error][UserSelfRegistrationControllerTestPlugin2][anError]')),
	    $results);
    }

    /**
     * No plugin errors - user is created successfully
     */
    function testPlugins3() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'register', 'confirmation', 'auto');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$userName = 'user-selfreg' . rand();
	GalleryUtilities::putRequestVariable('form[action][create]', 1);
	GalleryUtilities::putRequestVariable('form[userName]', $userName);
	GalleryUtilities::putRequestVariable('form[fullName]', 'full name');
	GalleryUtilities::putRequestVariable('form[email]', 'email@test.com');
	GalleryUtilities::putRequestVariable('form[language]', 'language');
	GalleryUtilities::putRequestVariable('form[password1]', 'password');
	GalleryUtilities::putRequestVariable('form[password2]', 'password');

	$plugin = new UserSelfRegistrationControllerTestPlugin();
	$plugin->setErrors(array());
	$plugin->setContinue(true);

	$this->_controller->setPluginInstances(array($plugin));

	$results = $this->handleRequest();
	$this->assertEquals(
	    array('redirect' => array('view' => 'core.UserAdmin',
				      'subView' => 'register.SelfRegistrationSuccess'),
		  'status' => array('activatedUser' => $userName),
		  'error' => array()),
	    $results);

	/* find userid */
	list($ret, $user) = GalleryCoreApi::fetchUserByUserName($userName);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$this->_markForCleanup($user);
    }
}

/**
 * @package SelfRegistration
 * @subpackage PHPUnit
 */
class RegisterDummyPlatform {
    function RegisterDummyPlatform($platform, &$test) {
	$this->_platform = $platform;
	$this->_test =& $test;
    }

    function mail($to, $subject, $body, $headers=null) {
	/* Don't actually send email */
	$this->_test->_emailBody = $body;
	return true;
    }

    function realpath($file) {
	return $this->_platform->realpath($file);
    }

    function getDirectorySeparator() {
	return $this->_platform->getDirectorySeparator();
    }

    function file_exists($filename) {
	return $this->_platform->file_exists($filename);
    }

    function is_dir($filename) {
	return $this->_platform->is_dir($filename);
    }

    function is_writeable($filename) {
	return $this->_platform->is_writeable($filename);
    }

    function stat($filename) {
	return $this->_platform->stat($filename);
    }

    function mkdir($path) {
	return $this->_platform->mkdir($path);
    }

    function fopen($filename, $mode, $use_include_path=0) {
	return $this->_platform->fopen($filename, $mode, $use_include_path);
    }

    function recursiveRmdir($dirname) {
	return $this->_platform->recursiveRmdir($dirname);
    }

    function fclose($handle) {
	return $this->_platform->fclose($handle);
    }
}


/**
 * Mock ValidationPlugin
 */
class UserSelfRegistrationControllerTestPlugin extends ValidationPlugin {
    function setContinue($continue) {
	$this->_continue = $continue;
    }

    function setErrors($errors) {
	$this->_errors = $errors;
    }

    function performValidation(&$form) {
	return array(GalleryStatus::success(), $this->_errors, $this->_continue);
    }
}

?>
