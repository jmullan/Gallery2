<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Selfregistration
 * @subpackage PHPUnit
 * @author Sebastian Eichner <mailsp@sebastian-eichner.de>
 */


/**
 * Tests the controller for administration of the selfregistration module 
 *
 * @package Panorama
 * @subpackage PHPUnit
 */
class AdminSelfregistrationControllerTest extends GalleryControllerTestCase {

	var $paramNames;
	
    function AdminSelfregistrationControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'selfregistration:AdminSelfregistration');

	$this->paramNames = array('emailconfirmation', 'subject', 'from', 'reallysend');
    
    }

    function setUp() {
	parent::setUp();

	foreach ( $this->paramNames as $key) {
	    list ($ret, $value) = GalleryCoreApi::getPluginParameter('module', 'selfregistration', $key);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $params[$key] = (string) $value;
	}
	$this->_params =& $params;

    }

    function tearDown() {
	foreach ($this->paramNames as $key) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'selfregistration', $key, $this->_params[$key]);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	parent::tearDown();
    }

    function testAdminSelfregistrationControllerSave() {

	GalleryUtilities::putRequestVariable('form[emailconfirmation]', 'true');
	GalleryUtilities::putRequestVariable('form[from]', 'tester@nobody.org');
	GalleryUtilities::putRequestVariable('form[subject]', 'Testmail');
	GalleryUtilities::putRequestVariable('form[action][save]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('return' => 1,
						'redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'selfregistration:AdminSelfregistration'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);
    
    GalleryDataCache::reset();

	$valueMap = array('emailconfirmation'=>'true',
		'from' => 'tester@nobody.org',
		'subject' => 'Testmail',
		);
	foreach ($valueMap as $key => $expectedValue) {
	    list ($ret, $realValue) = GalleryCoreApi::getPluginParameter('module', 'selfregistration', $key);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals($expectedValue, $realValue, "value mismatch for $key");
	}
    
    
    }
    
    



}
?>
