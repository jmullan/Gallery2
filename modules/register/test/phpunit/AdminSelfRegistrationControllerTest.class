<?php
/*
 * $RCSfile: AdminSelfRegistrationControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.14 $ $Date: 2006/01/13 03:39:49 $
 * @package SelfRegistration
 * @subpackage PHPUnit
 * @author Sebastian Eichner <mailsp@sebastian-eichner.de>, Alan Harder <alan.harder@sun.com>
 */


/**
 * Tests the controller for administration of the selfregistration module
 *
 * @package SelfRegistration
 * @subpackage PHPUnit
 */
class AdminSelfRegistrationControllerTest extends GalleryControllerTestCase {

    var $paramNames;

    function AdminSelfRegistrationControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'register.AdminSelfRegistration');
    }

    function setUp() {
	parent::setUp();

	$ret = $this->_markPluginParametersForCleanup('module', 'register');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	// Create a pending user..
	list ($ret, $pendingUser) =
	    GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryPendingUser');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = $pendingUser->create('testuser_' . rand(1000, 1000000));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = $pendingUser->save();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_pendingUser =& $pendingUser;
    }

    function tearDown() {
	if (isset($this->_pendingUser)) {
	    $ret = GalleryCoreApi::deleteEntityById($this->_pendingUser->getId());
	    if ($ret) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	parent::tearDown();
    }

    function testAdminSelfRegistrationControllerSave() {

	GalleryUtilities::putRequestVariable('form[confirmation]', 'email');
	GalleryUtilities::putRequestVariable('form[from]', 'tester@nobody.org');
	GalleryUtilities::putRequestVariable('form[subject]', 'Testmail');
	GalleryUtilities::putRequestVariable('form[adminsubject]', 'Testmail');
	GalleryUtilities::putRequestVariable('form[action][save]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(
		array(	'redirect' => array('view' => 'core.SiteAdmin',
					    'subView' => 'register.AdminSelfRegistration'),
			'status' => array('saved' => 1),
			'error' => array()),
		$results);

	GalleryDataCache::reset();

	$valueMap = array('confirmation'=>'email',
		'from' => 'tester@nobody.org',
		'subject' => 'Testmail',
		'adminsubject' => 'Testmail',
		'emailadmins' => '0',
	);
	foreach ($valueMap as $key => $expectedValue) {
	    list ($ret, $realValue) =
		GalleryCoreApi::getPluginParameter('module', 'register', $key);
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals($expectedValue, $realValue, "value mismatch for $key");
	}
    }

    function testAdminSelfRegistrationControllerActivate() {

	GalleryUtilities::putRequestVariable('form[userId]', $this->_pendingUser->getId());
	GalleryUtilities::putRequestVariable('form[action][activate]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(
		array(	'redirect' => array('view' => 'core.SiteAdmin',
					    'subView' => 'register.AdminSelfRegistration'),
			'status' => array('activated' => $this->_pendingUser->getUserName()),
			'error' => array()),
		$results);

	$ret = $this->_verifyMissing($this->_pendingUser->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$username = $this->_pendingUser->getUserName();
	$this->_pendingUser = null;

	list ($ret, $user) = GalleryCoreApi::fetchUserByUsername($username);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_pendingUser = $user;
    }

    function testAdminSelfRegistrationControllerDelete() {

	GalleryUtilities::putRequestVariable('form[userId]', $this->_pendingUser->getId());
	GalleryUtilities::putRequestVariable('form[action][delete]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(
		array(	'redirect' => array('view' => 'core.SiteAdmin',
					    'subView' => 'register.AdminSelfRegistration'),
			'status' => array('deleted' => $this->_pendingUser->getUserName()),
			'error' => array()),
		$results);

	$ret = $this->_verifyMissing($this->_pendingUser->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_pendingUser = null;
    }

    function testHelperMethods() {
	GalleryCoreApi::requireOnce(
	    'modules/register/classes/GalleryPendingUserHelper.class');
	list ($ret, $count) = GalleryPendingUserHelper::fetchUserCount();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($count > 0, 'User count');
	list ($ret, $count) = GalleryPendingUserHelper::fetchUserCount('testuser');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($count > 0, 'User count with filter');

	list ($ret, $data) = GalleryPendingUserHelper::fetchUserData(3, 0);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!empty($data), 'User data');

	list ($ret, $data) = GalleryPendingUserHelper::fetchUserData(3, 0, 'testuser');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!empty($data), 'User data with filter');
    }
}
?>
