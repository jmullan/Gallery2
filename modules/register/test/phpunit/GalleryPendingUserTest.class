<?php
/*
 * $RCSfile: GalleryPendingUserTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.8 $ $Date: 2005/08/23 03:49:52 $
 * @package SelfRegistration
 * @subpackage PHPUnit
 * @author Sebastian Eichner <mailsp@sebastian-eichner.de>
 */

/**
 * require necessary files
 */
GalleryCoreApi::relativeRequireOnce('modules/register/classes/GalleryPendingUserHelper.class');

/**
 * Test PendingUser functionality
 *
 * @package SelfRegistration
 * @subpackage PHPUnit
 *
 */
class GalleryPendingUserTest extends GalleryTestCase {

    function GalleryPendingUserTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
    	global $gallery;

	$ret = $this->_markPluginParametersForCleanup('module', 'register');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::setUp();
    }

    function testPendingUserCreation() {
	global $gallery;

	/* Create a new pending user */
	list ($ret, $user) = $this->_createRandomPendingUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryDataCache::reset();

	/* Verify it */
	$ret = $this->_verifyEntity($user);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete it */
	$ret = $this->_deleteAndVerifyEntity($user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function _createRandomPendingUser() {
	list ($ret, $user) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryPendingUser');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!isset($user)) {
	    return array( GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	}

	$username = 'testuser_' . rand(1000, 1000000);

	$ret = $user->create($username);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$ret = $user->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list($ret, $user) = GalleryPendingUserHelper::fetchPendingUserByUserName($username);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array( GalleryStatus::success(), $user);
    }
}
?>
