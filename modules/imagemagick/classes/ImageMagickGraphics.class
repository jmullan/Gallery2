<?php
/*
 * $RCSfile
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/* Load required classes */
require_once(dirname(__FILE__) . '/../../core/classes/GalleryGraphics.class');

/**
 * A ImageMagick version of GalleryGraphics
 *
 * This class implements the GalleryGraphics API using ImageMagick.
 *
 * @version $Revision$ $Date$
 * @package ImageMagickGraphics
 * @author Vallimar <vallimar@sexorcisto.net>
 * @author Bharat Mediratta <bharat@menalto.com>
 */
class ImageMagickGraphics extends GalleryGraphics {
    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    function ImageMagickGraphics() {
	/* Configure our support */
	$this->_supportedFunctions = (IMAGE_FUNCTION_RESIZE |
				      IMAGE_FUNCTION_SCALE |
				      IMAGE_FUNCTION_ROTATE |
				      IMAGE_FUNCTION_CROP |
				      IMAGE_FUNCTION_PROPERTIES);

	/* Supported mime types */
	$this->_supportedMimeTypes['image/jpeg'] = 1;
	$this->_supportedMimeTypes['image/pjpeg'] = 1;
	$this->_supportedMimeTypes['image/gif'] = 1;
	$this->_supportedMimeTypes['image/png'] = 1;
    }

    /**
     * @see GalleryGraphics::getImageDimensions()
     */
    function getImageDimensions($mimeType, $filename) {

	/*
	 * Run it through PHP first, it's faster and more portable.  Suppress
	 * output, though, since this may run afoul of open_basedir.  If it
	 * does, then it'll return false and we can use ImageMagick.
	 */
	$ret = @getimagesize($filename);
	if (($ret != false) &&
	    (($ret[0] > 1) && ($ret[1] > 1))) {
	    return array(GalleryStatus::success(), $ret[0], $ret[1]);
	}

	list($ret, $output) =
	    $this->_exec(array($this->_imageMagickCmd('identify'),
			       $filename));

	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	foreach ($output as $line) {
	    if (ereg('([0-9]+)x([0-9]+)', $line, $regs)) {
		return array(GalleryStatus::success(), $regs[1], $regs[2]);
	    }
	}

	return array(GalleryStatus::error(ERROR_GRAPHICS_FAILURE,
					  __FILE__, __LINE__),
		     null, null);
    }

    /**
     * @see GalleryGraphics::resizeImage()
     */
    function resizeImage($mimeType, $sourceFilename, $destFilename, $width, $height) {
	if (!$this->isSupportedFunction(IMAGE_FUNCTION_RESIZE)) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION,
					__FILE__, __LINE__);
	}

	return $this->_transformImage($mimeType,
				      array('-geometry', $width .'x'. $height),
				      $sourceFilename,
				      $destFilename);
    }

    /**
     * @see GalleryGraphics::scaleImage()
     */
    function scaleImage($mimeType, $sourceFilename, $destFilename, $targetSize) {
	if (!$this->isSupportedFunction(IMAGE_FUNCTION_SCALE)) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION,
					__FILE__, __LINE__);
	}
	
	return $this->_transformImage($mimeType,
				      array('-scale', $targetSize .'x'. $targetSize),
				      $sourceFilename,
				      $destFilename);
    }
		
    /**
     * @see GalleryGraphics::rotateImage()
     */
    function rotateImage($mimeType, $sourceFilename, $destFilename, $degrees) {
	if (!$this->isSupportedFunction(IMAGE_FUNCTION_ROTATE)) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION,
					__FILE__, __LINE__);
	}
	
	return $this->_transformImage($mimeType,
				      array('-rotate', $degrees),
				      $sourceFilename,
				      $destFilename);
    }
		
    /**
     * @see GalleryGraphics::cropImage()
     */
    function cropImage($mimeType, $sourceFilename, $destFilename, $x, $y, $width, $height) {
	if (!$this->isSupportedFunction(IMAGE_FUNCTION_CROP)) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION,
					__FILE__, __LINE__);
	}
	
	$mimeType = GalleryUtilities::getMimeType($filename);
	return $this->_transformImage($mimeType,
				      array('-crop', $width . 'x' . $height .
					    '+' . $x . '+' . $y),
				      $sourceFilename,
				      $destFilename);
    }

    /**
     * @see GalleryGraphics::isValidImage()
     */
    function isValidImage($mimeType, $filename) {

	/* Test validity by getting image dimensions */
	list($ret, $width, $height) = $this->getImageDimensions($mimeType, $filename);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* 0x0 image is also invalid */
	if ($width == 0 && $height == 0) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), true);
    }

    /**
     * Do the given transform on the source image 
     *
     * @param string the command to execute
     * @param string the path to a source file
     * @param string the path to a destination file
     * @return object GalleryStatus a status code
     */
    function _transformImage($mimeType, $args, $sourceFilename, $destFilename) {
	global $gallery;

	/* Get a temp file name and figure out our convert-from-pnm command */
	$tmpDir = $gallery->getConfig('data.gallery.tmp');
	$tmpFilename = tempnam($tmpDir, 'imgk_');
	if (empty($tmpFilename)) {
	    /* This can happen if the $tmpDir path is bad */
	    return GalleryStatus::error(ERROR_BAD_PATH,
					__FILE__, __LINE__);
	}

	$command = array($this->_imageMagickCmd('convert'));

	list ($ret, $jpegQuality) =
	    $gallery->getModuleParameter('imagemagick', 'jpegQuality');
	if ($ret->isError()) {
	    @$platform->unlink($tmpFilename);
	    return $ret->wrap(__FILE__, __LINE__);
	}
	    
	switch($mimeType) {
	case 'image/png'  :
	case 'image/jpeg' :
	    $command[] = '-quality';
	    $command[] = $jpegQuality;
	    break;
	}

	/* Do the conversion */
	$command = array_merge($command, $args);
	$command[] = $sourceFilename;
	$command[] = $tmpFilename;
	list($ret, $output) = $this->_exec($command);

	if ($ret->isError()) {
	    @$platform->unlink($tmpFilename);
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$platform = $gallery->getPlatform();
	$success = $platform->rename($tmpFilename, $destFilename);
	@$platform->unlink($tmpFilename);
	if (!$success) {
	    $gallery->debug("Failed renaming $tmpFilename -> $destFilename");
	    return GalleryStatus::error(ERROR_PLATFORM_FAILURE,
					__FILE__, __LINE__);
	} else {
	    return GalleryStatus::success();
	}
    }

    /**
     * Return the full path to the ImageMagick command
     *
     * @access private
     * @param string an ImageMagick command (eg. "convert")
     */
    function _imageMagickCmd($cmd) {
	global $gallery;

	$platform = $gallery->getPlatform();
	list ($ret, $imageMagickPath) =
	    $gallery->getModuleParameter('imagemagick', 'path');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return $imageMagickPath . $cmd;
    }
		
    /**
     * Execute the command.  Flatten the command array first.
     *
     * @see GalleryUtilities::exec
     */
    function _exec($command) {
	global $gallery;

	$platform = $gallery->getPlatform();
	list ($success, $results) = $platform->exec(array($command));
	if (!$success) {
	    return array(GalleryStatus::error(ERROR_GRAPHICS_FAILURE,
					      __FILE__, __LINE__),
			 null);
	}

	return array(GalleryStatus::success(), $results);
    }	
}
?>
