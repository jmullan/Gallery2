<?php
/*
 * $RCSfile
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package ImageMagick
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * A helper class for the GalleryImageMagickToolkit class
 *
 * @package ImageMagick
 * @subpackage Classes
 */
class ImageMagickToolkitHelper {

    /**
     * Figure out what operations and properties are supported by the
     * ImageMagickToolkit and return them.
     *
     * @return object GalleryStatus a status code
     *         array('operations' => ...
     *               'properties' => ...)
     * @static
     */
    function getOperationsAndProperties() {
	global $gallery;

	list ($ret, $mimeTypes) = ImageMagickToolkitHelper::discoverMimeTypes();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/*
	 * -------------------- Operations --------------------
	 */

	/* Scale */
	$operations['scale']['params'][] = array('type' => 'int',
						 'description' => $gallery->i18n('target size'), 
						 'default' => 200);
	$operations['scale']['description'] = $gallery->i18n('Scale the image to the target size'); 
	$operations['scale']['mimeTypes'] = $mimeTypes;

	/* Thumbnail is an alias for scale */
	$operations['thumbnail'] = $operations['scale'];

	/* Resize */
	$operations['resize']['params'][] = array('type' => 'int',
						  'description' => $gallery->i18n('target width'), 
						  'default' => 200);
	$operations['resize']['params'][] = array('type' => 'int',
						  'description' => $gallery->i18n('target height'), 
						  'default' => 200);
	$operations['resize']['description'] = $gallery->i18n('Resize the image to the target dimensions'); 
	$operations['resize']['mimeTypes'] = $mimeTypes;

	/* Rotate */
	$operations['rotate']['params'][] = array('type' => 'int',
						  'description' => $gallery->i18n('rotation degrees'), 
						  'default' => 90);
	$operations['rotate']['description'] = $gallery->i18n('Rotate the image'); 
	$operations['rotate']['mimeTypes'] = $mimeTypes;
	
	/* Crop */
	$operations['crop']['params'][] = array('type' => 'int',
						'description' => $gallery->i18n('left edge'), 
						'default' => 0);
	$operations['crop']['params'][] = array('type' => 'int',
						'description' => $gallery->i18n('top edge'), 
						'default' => 0);
	$operations['crop']['params'][] = array('type' => 'int',
						'description' => $gallery->i18n('width'), 
						'default' => 0);
	$operations['crop']['params'][] = array('type' => 'int',
						'description' => $gallery->i18n('height'), 
						'default' => 0);
	$operations['crop']['description'] = $gallery->i18n('Crop the image'); 
	$operations['crop']['mimeTypes'] = $mimeTypes;

	/*
	 * -------------------- Properties --------------------
	 */

	/* Dimensions */
	$properties['dimensions']['type'] = 'int,int';
	$properties['dimensions']['description'] = $gallery->i18n('Get the width and height of the image'); 
	$properties['dimensions']['mimeTypes'] = $mimeTypes;

	return array(GalleryStatus::success(), array('operations' => $operations,
						     'properties' => $properties));
    }

    /**
     * Find out which mime types our ImageMagick installation supports.
     *
     * This is done by trying to run 'identify' on a couple of sample images.
     *
     * @param string [optional] path to the ImageMagick we are testing, 
     *	       if not given, use the 'imagemagick.path' module parameter
     * @return array object GalleryStatus
     *	       array supported mime-types
     */
    function discoverMimeTypes($imageMagickPath=null) {
	global $gallery;

	if (empty($imageMagickPath)) {
	    list ($ret, $imageMagickPath) =
		$gallery->getModuleParameter('imagemagick', 'path');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    if (empty($imageMagickPath)) {
		return array(GalleryStatus::error(ERROR_MISSING_VALUE,
						  __FILE__, __LINE__),
			     null);
	    }
	}

	$command = array($imageMagickPath . 'identify',
			 dirname(__FILE__) . '/../test/images/test.gif',
			 dirname(__FILE__) . '/../test/images/test.jpg',
			 dirname(__FILE__) . '/../test/images/test.png',
			 dirname(__FILE__) . '/../test/images/test.tif',
			);

	$platform = $gallery->getPlatform();
	list ($success, $results) = $platform->exec(array($command));
	if (!$success) {
	    return array(GalleryStatus::error(ERROR_TOOLKIT_FAILURE,
					      __FILE__, __LINE__),
			 null);
	}

	foreach ($results as $resultLine) {
	    if (ereg('GIF.*PseudoClass', $resultLine)) {
		$mimeTypes[] = 'image/gif';
	    } elseif (ereg('JPEG.*DirectClass', $resultLine)) {
		$mimeTypes[] = 'image/jpeg';
		$mimeTypes[] = 'image/pjpeg';
	    } elseif (ereg('PNG.*DirectClass', $resultLine)) {
		$mimeTypes[] = 'image/png';
	    } elseif (ereg('TIFF.*DirectClass', $resultLine)) {
		$mimeTypes[] = 'image/tiff';
	    }
	}
	$mimeTypes = array_values(array_unique($mimeTypes));

	return array(GalleryStatus::success(), $mimeTypes);
    }

    /**
     * Test if the given path has a working set of ImageMagick binaries.
     *
     * This is done by trying to run 'identify' on a sample image.
     *
     * @param string path to the ImageMagick we are testing
     * @return array object GalleryStatus general status of tests
     *	       array ('name' => string: the name of the binary,
     *		      'success' => boolean: test successfull?
     *		      'message' => string: the error message, in case of 
     *				   IMAGEMAGIC_TEST_ERROR
     *		     )
     * @static
     */
    function testBinaries($imageMagickPath) {
	global $gallery;

	$platform = $gallery->getPlatform();
	/*
	 * If the path is not restricted by open_basedir, then verify that it's
	 * legal.  Else just hope that it's valid and use it.
	 */
	if (!$platform->isRestrictedByOpenBasedir($imageMagickPath)) { 
	    if (! $platform->file_exists($imageMagickPath)
		|| ! $platform->is_dir($imageMagickPath) ) {
		return array(GalleryStatus::error(ERROR_BAD_PATH,
						  __FILE__, __LINE__),
			     null);
	    }
	}

	/* We need to translate some strings */
	list($ret, $module) = $gallery->loadModule('imagemagick');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* What do we want to test */
	$binaries = array('identify', 'convert');

	/* Test each binary */
	$testArray = array();
	foreach ($binaries as $binary) {
	    switch ($binary) {
	    case 'identify':
		$command = array($imageMagickPath . 'identify',
				 dirname(__FILE__) . '/../test/images/test.gif'
				);
		list ($success, $results) = $platform->exec(array($command));
		if (!$success) {
		    @$platform->unlink($tmpFilename);
		    $testArray[] = array('name' => 'identify',
					 'success' => false,
					 'message' => array_merge($module->translate('Problem executing binary:'),
								  $results)
					 );
		} elseif (! ereg('GIF.*PseudoClass', join(',', $results))) {
		    $testArray[] = array('name' => 'identify',
					 'success' => false,
					 'message' => array_merge($module->translate('Binary output:'),
								  $results)
					 );
		} else {
		    $testArray[] = array('name' => 'identify',
					 'success' => true);
		}
		break;
	    case 'convert':
		/* We will try to scale a gif using the 'convert' binary */

		$tmpDir = $gallery->getConfig('data.gallery.tmp');
		$tmpFilename = tempnam($tmpDir, 'imgk_');
		if (empty($tmpFilename)) {
		    /* This can happen if the $tmpDir path is bad */
		    $gallery->debug('Could not create tmp file in \'' . $tmpDir . '\'');
		    return array(GalleryStatus::error(ERROR_BAD_PATH,
						      __FILE__, __LINE__),
				 null);
		}
		$command = array($imageMagickPath . 'convert',
				 '-scale', '200x200',
				 dirname(__FILE__) . '/../test/images/test.gif',
				 $tmpFilename
				);
		list ($success, $results) = $platform->exec(array($command));
		if (!$success) {
		    $testArray[] = array('name' => 'convert',
					 'success' => false,
					 'message' => array_merge($module->translate('Problem executing binary:'),
								  $results)
					);
		} elseif (join('', $results) != '') {
		    /*
		     * 'convert' normaly doesn't say anything: if it does,
		     * it was an error message
		     */
		    $testArray[] = array('name' => 'convert',
					 'success' => false,
					 'message' => array_merge($module->translate('Binary output:'),
								  $results)
					 );
		} else {
		    $testArray[] = array('name' => 'convert',
					 'success' => true);
		}
		@$platform->unlink($tmpFilename);
		break;
	    default:
		return array(GalleryStatus::error(ERROR_BAD_PARAMETER,
						  __FILE__, __LINE__),
			     null);
		break;
	    }
	}

	return array(GalleryStatus::success(),
		     $testArray
		     );
    }
}
?>
