<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package ImageMagick
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * A helper class for the GalleryImageMagickToolkit class
 *
 * @package ImageMagick
 * @subpackage Classes
 */
class ImageMagickToolkitHelper {

    /**
     * Figure out what operations and properties are supported by the
     * ImageMagickToolkit and return them.
     *
     * @return object GalleryStatus a status code
     *         array('operations' => ...
     *               'properties' => ...)
     * @static
     */
    function getOperationsAndProperties() {
	global $gallery;

	list ($ret, $mimeTypes) = ImageMagickToolkitHelper::discoverMimeTypes();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/*
	 * -------------------- Operations --------------------
	 */

	/*
	 * TIFF, SVG aren't viewable inline.  Ok, SVG is, but we can't count on it because it
	 * requires a special viewer.  So provide a means to convert it to a JPEG.
	 */
	$convertToJpegMimeTypes = array_intersect(array('image/tiff', 'image/svg+xml'),
						  $mimeTypes);
	if (!empty($convertToJpegMimeTypes)) {
	    $operations['convert-to-image/jpeg']['params'] = array();
	    $operations['convert-to-image/jpeg']['description'] = $gallery->i18n('Convert to a JPEG'); 
	    $operations['convert-to-image/jpeg']['mimeTypes'] = $convertToJpegMimeTypes;
	    $operations['convert-to-image/jpeg']['outputMimeType'] = 'image/jpeg';
	}

	/* Scale */
	$operations['scale']['params'][] = array('type' => 'int',
						 'description' => $gallery->i18n('target size'));
	$operations['scale']['description'] = $gallery->i18n('Scale the image to the target size'); 
	$operations['scale']['mimeTypes'] = $mimeTypes;

	/* Thumbnail is an alias for scale */
	$operations['thumbnail'] = $operations['scale'];

	/* Resize */
	$operations['resize']['params'][] = array('type' => 'int',
						  'description' => $gallery->i18n('target width'));
	$operations['resize']['params'][] = array('type' => 'int',
						  'description' => $gallery->i18n('target height'));
	$operations['resize']['description'] = $gallery->i18n('Resize the image to the target dimensions'); 
	$operations['resize']['mimeTypes'] = $mimeTypes;

	/* Rotate */
	$operations['rotate']['params'][] = array('type' => 'int',
						  'description' => $gallery->i18n('rotation degrees'));
	$operations['rotate']['description'] = $gallery->i18n('Rotate the image'); 
	$operations['rotate']['mimeTypes'] = $mimeTypes;
	
	/* Crop */
	$operations['crop']['params'][] = array('type' => 'int',
						'description' => $gallery->i18n('left edge'));
	$operations['crop']['params'][] = array('type' => 'int',
						'description' => $gallery->i18n('top edge'));
	$operations['crop']['params'][] = array('type' => 'int',
						'description' => $gallery->i18n('width'));
	$operations['crop']['params'][] = array('type' => 'int',
						'description' => $gallery->i18n('height'));
	$operations['crop']['description'] = $gallery->i18n('Crop the image'); 
	$operations['crop']['mimeTypes'] = $mimeTypes;

	/*
	 * -------------------- Properties --------------------
	 */

	/* Dimensions */
	$properties['dimensions']['type'] = 'int,int';
	$properties['dimensions']['description'] = $gallery->i18n('Get the width and height of the image'); 
	$properties['dimensions']['mimeTypes'] = $mimeTypes;

	return array(GalleryStatus::success(), array('operations' => $operations,
						     'properties' => $properties));
    }

    /**
     * Find out which mime types our ImageMagick installation supports.
     *
     * This is done by trying to run 'identify' on a couple of sample images.
     *
     * @param string [optional] path to the ImageMagick we are testing, 
     *	       if not given, use the 'imagemagick.path' module parameter
     * @return array object GalleryStatus
     *	       array supported mime-types
     * @static
     */
    function discoverMimeTypes($imageMagickPath=null) {
	global $gallery;

	if (empty($imageMagickPath)) {
	    list ($ret, $imageMagickPath) = GalleryCoreApi::getPluginParameter('module', 'imagemagick', 'path');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    if (empty($imageMagickPath)) {
		return array(GalleryStatus::error(ERROR_MISSING_VALUE, __FILE__, __LINE__), null);
	    }
	}

	$tests = array();
	$tests[] = array('mime' => array('image/gif'), 'file' => 'test.gif', 'expected' => '(GIF.*PseudoClass|PseudoClass.*GIF)');
	$tests[] = array('mime' => array('image/jpeg', 'image/pjpeg'), 'file' => 'test.jpg', 'expected' => 'JPEG.*DirectClass');
	$tests[] = array('mime' => array('image/png'), 'file' => 'test.png', 'expected' => 'PNG.*DirectClass');
	$tests[] = array('mime' => array('image/tiff'), 'file' => 'test.tif', 'expected' => 'TIFF.*(Pseudo|Direct)Class');
	$tests[] = array('mime' => array('image/svg+xml'), 'file' => 'test.svg', 'expected' => 'SVG.*DirectClass');
	
	$platform = $gallery->getPlatform();
	$slash = $platform->getDirectorySeparator();
	$dataPath = dirname(__FILE__) . "${slash}..${slash}test${slash}data${slash}";

	$successCount = 0;
	foreach ($tests as $test) {
	    $command = array($imageMagickPath . 'identify', $dataPath . $test['file']);
	    list ($success, $results) = $platform->exec(array($command));
	    
	    $successCount += $success;
	    if ($success) {
		foreach ($results as $resultLine) {
		    if (ereg($test['expected'], $resultLine)) {
			foreach ($test['mime'] as $type) {
			    $mimeTypes[$type] = 1;
			}
		    }
		}
	    }
	}

	if ($successCount == 0) {
	    return array(GalleryStatus::error(ERROR_TOOLKIT_FAILURE, __FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), array_keys($mimeTypes));
    }

    /**
     * Test if the given path has a working set of ImageMagick binaries.
     *
     * This is done by trying to run 'identify' on a sample image.
     *
     * @param string path to the ImageMagick we are testing
     * @return array object GalleryStatus general status of tests
     *	       array ('name' => string: the name of the binary,
     *		      'success' => boolean: test successfull?
     *		      'message' => string: the error message, in case of 
     *				   IMAGEMAGIC_TEST_ERROR
     *		     )
     * @static
     */
    function testBinaries($imageMagickPath) {
	global $gallery;

	$platform = $gallery->getPlatform();
	/*
	 * If the path is not restricted by open_basedir, then verify that it's
	 * legal.  Else just hope that it's valid and use it.
	 */
	if (!$platform->isRestrictedByOpenBasedir($imageMagickPath)) { 
	    if (! $platform->file_exists($imageMagickPath)
		|| ! $platform->is_dir($imageMagickPath) ) {
		return array(GalleryStatus::error(ERROR_BAD_PATH,
						  __FILE__, __LINE__),
			     null);
	    }
	}

	/* We need to translate some strings */
	list($ret, $module) = GalleryCoreApi::loadPlugin('module', 'imagemagick');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* What do we want to test */
	$binaries = array('identify', 'convert');

	$slash = $platform->getDirectorySeparator();
	$dataPath = dirname(__FILE__) . "${slash}..${slash}test${slash}data${slash}";

	/* Test each binary */
	$testArray = array();
	foreach ($binaries as $binary) {
	    switch ($binary) {
	    case 'identify':
	        $fullPath = $imageMagickPath . 'identify';
	        if (GalleryUtilities::isA($platform, 'WinNtPlatform')) {
		    $fullPath .= '.exe';
		}

		if (!$platform->isRestrictedByOpenBasedir($fullPath) && !$platform->file_exists($fullPath)) {
		    $success = false;
		    $results = array('File does not exist');
		} else {
		    $command = array($fullPath, $dataPath . 'test.gif');
		    list ($success, $results) = $platform->exec(array($command));
		}
	    
		if (!$success) {
		    $testArray[] = array('name' => 'identify',
					 'success' => false,
					 'message' => array_merge(array($module->translate('Problem executing binary:')),
								  $results)
					 );
		} elseif (! ereg('(GIF.*PseudoClass|PseudoClass.*GIF)', join(',', $results))) {
		    $testArray[] = array('name' => 'identify',
					 'success' => false,
					 'message' => array_merge(array($module->translate('Binary output:')),
								  $results)
					 );
		} else {
		    $testArray[] = array('name' => 'identify',
					 'success' => true);
		}
		break;
	    case 'convert':
		/* We will try to scale a gif using the 'convert' binary */

	        $fullPath = $imageMagickPath . 'convert';
	        if (GalleryUtilities::isA($platform, 'WinNtPlatform')) {
		    $fullPath .= '.exe';
		}
		$tmpDir = $gallery->getConfig('data.gallery.tmp');
		$tmpFilename = $platform->tempnam($tmpDir, 'imgk_');
		if (empty($tmpFilename)) {
		    /* This can happen if the $tmpDir path is bad */
		    return array(GalleryStatus::error(ERROR_BAD_PATH, __FILE__, __LINE__,
						      "Could not create tmp file in '$tmpDir'"),
				 null);
		}

		if (!$platform->isRestrictedByOpenBasedir($fullPath) && !$platform->file_exists($fullPath)) {
		    $success = false;
		    $results = array('File does not exist');
		} else {
		    $command = array($fullPath,
				     '-scale', '200x200',
				     $dataPath . 'test.gif',
				     $tmpFilename
				     );
		    list ($success, $results) = $platform->exec(array($command));
		}

		if (!$success) {
		    $testArray[] = array('name' => 'convert',
					 'success' => false,
					 'message' => array_merge(array($module->translate('Problem executing binary:')),
								  $results)
					);
		} elseif (join('', $results) != '') {
		    /*
		     * 'convert' normaly doesn't say anything: if it does,
		     * it was an error message
		     */
		    $testArray[] = array('name' => 'convert',
					 'success' => false,
					 'message' => array_merge(array($module->translate('Binary output:')),
								  $results)
					 );
		} else {
		    $testArray[] = array('name' => 'convert',
					 'success' => true);
		}
		@$platform->unlink($tmpFilename);
		break;
	    default:
		return array(GalleryStatus::error(ERROR_BAD_PARAMETER,
						  __FILE__, __LINE__),
			     null);
		break;
	    }
	}


	return array(GalleryStatus::success(), $testArray);
    }
}
?>
