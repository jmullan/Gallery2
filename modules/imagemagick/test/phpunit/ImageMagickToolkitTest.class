<?php
/*
 * $RCSfile: ImageMagickToolkitTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.56 $ $Date: 2005/08/23 03:49:45 $
 * @package ImageMagick
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Required classes
 */
GalleryCoreApi::relativeRequireOnce('modules/imagemagick/classes/ImageMagickToolkitHelper.class');
GalleryCoreApi::relativeRequireOnce('modules/imagemagick/classes/ImageMagickToolkit.class');

/**
 * Test ImageMagickToolkit functionality
 *
 * @package ImageMagick
 * @subpackage PHPUnit
 */
class ImageMagickToolkitTest extends GalleryTestCase {

    /*
     * The array with environment information, from ImEnvironments.inc
     */
    var $_environments = array();

    /*
     * The current environment array item we are processing
     */
    var $_currentEnvironment = array();

    /*
     * Information about files in our pseudo-platform.
     * Better would be to store the files information in the Platform, but
     * since Gallery::getPlatform() will return a copy of the platform, we
     * cannot keep them there.
     */
    var $_files = array();

    function ImageMagickToolkitTest($methodName) {
	$this->GalleryTestCase($methodName);

	/* Load our environments */
	include(dirname(__FILE__) . '/ImEnvironments.inc');
	$this->_environments = $imEnvironment;
    }

    /**
     *
     */
    function setUp() {
	global $gallery;

	parent::setUp();

	$gallery->_platform =& new ImageMagickToolkitTestPlatform($gallery->getPlatform(),
								  $this->_files);

	$ret = $this->_markPluginParametersForCleanup('module', 'imagemagick');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Reset to the defaults -- tearDown will undo this */
	foreach (array('jpegQuality' => 75) as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'imagemagick', $key, $value);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	/* Get a toolkit to work with */
	$this->_toolkit =& new ImageMagickToolkit();
    }

    /**
     * Prepare to emulate a different version of IM/GM
     *
     * @param array the array item of the environment
     * @access private
     */
    function _setEnvironment($environment) {
	global $gallery;

	$environment['path'] = '/' . $environment['name'] . $environment['version'] . '/';

	$ret = GalleryCoreApi::setPluginParameter('module', 'imagemagick',
						  'path', $environment['path']);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_currentEnvironment = $environment;
	$gallery->_platform->setEnvironment($environment);

	$ret = ImageMagickToolkitHelper::savePlatformParameters();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	return true;
    }

    function _envName() {
	return $this->_currentEnvironment['name'] . ' ' . $this->_currentEnvironment['version'];
    }

    /**
     * Helper to test a certain operation
     *
     * @param string
     * @param string
     * @param string filename
     * @param string filename
     * @param array indexed array
     * @param array assoc-array with paramName=>paramValue
     *
     * @access private
     * @return object GalleryStatus
     */
    function _testOperation($mimeType, $operation, $src, $dst, $params, $namedParams,
			    $quality=null) {
	list ($ret, $outputMimeType) =
	    $this->_toolkit->performOperation($mimeType, $operation,
					      $src, $dst, $params);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$expected = $this->_currentEnvironment['operations'][$operation];

	if (in_array($mimeType, array('image/tiff', 'application/pdf', 'application/postscript'))) {
	    if ($operation == 'select-page') {
		$src .= '[' . ($params[0] - 1) . ']';
	    } else {
		$src .= '[0]';
	    }
	} else if  ($mimeType == 'image/gif') {
	    foreach (array_keys($expected) as $key) {
		if (is_int($i = array_search('%src%', $expected[$key]))) {
		    $expected[$key][$i] = '-deconstruct';
		}
		array_unshift($expected[$key], '-coalesce', '%src%');
	    }
	}

	$search = array('|%src%|', '|%dst%|');
	$replace = array($src, $dst);
	foreach ($namedParams as $key => $value) {
	    $search[] = sprintf('|%%%s%%|', $key);
	    $replace[] = $value;
	}
	foreach (array_keys($expected) as $key) {
	    $expected[$key] = preg_replace($search, $replace, $expected[$key]);
	}

	if ($outputMimeType == 'image/jpeg' || $outputMimeType == 'image/png') {
	    if (!isset($quality)) {
		$quality = '75';
	    }
	    foreach (array_keys($expected) as $key) {
		$expected[$key] = array_merge(array('-quality', $quality), $expected[$key]);
	    }
	}

	$this->assertEquals($expected, $this->_files[$dst]['operation'],
	    $this->_currentEnvironment['path'] . " $operation " . implode(' ', $params));

	return GalleryStatus::success();
    }

    function testPerformOperations() {
	global $gallery;
	foreach ($this->_environments as $environment) {
	    $this->_setEnvironment($environment);

	    $ret = $this->_testOperation('image/gif', 'thumbnail',
					 'test[1000x1000].gif', 'output.gif',
					 array(100),
					 array('width' => 100, 'height' => 100));
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $ret = $this->_testOperation('image/jpeg', 'thumbnail',
					 'test[1000x1000].jpg', 'output.jpg',
					 array(100),
					 array('width' => 100, 'height' => 100));
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $ret = $this->_testOperation('image/tiff', 'rotate',
					 'test.tiff', 'output.tiff',
					 array(90), array('angle' => 90));
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $ret = $this->_testOperation('image/bmp', 'rotate',
					 'test.bmp', 'output.bmp',
					 array(180), array('angle' => 180));
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $ret = $this->_testOperation('image/png', 'crop',
					 'test[640x480].png', 'output.png',
					 array('24.667', '23.5', '51.375', '52'),
					 array('width' => '329', 'height' => '250',
					       'x' => '158', 'y' => '113'));
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $ret = $this->_testOperation('image/gif', 'convert-to-image/png',
					 'test.gif', 'output.png',
					 array(), array());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $ret = $this->_testOperation('application/pdf', 'select-page',
					 'test.pdf', 'output.pdf',
					 array('2'), array());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    /* Test a basic composite operation (top right corner) */
	    $dataDir = $gallery->getConfig('data.gallery.base');
	    $ret = $this->_testOperation('image/png', 'composite',
					 'test.png',   /* composite */
					 'output.png', /* composited */
					 array('image.gif', /* image */
					       'image/gif', /* mimeType */
					       5, 5, /* image width, height */
					       'top-right', /* alignment type */
					       0, 0),  /* image alignment (unused w/ 'top-right') */
					 array('image' => $dataDir . 'image.gif',
					       'width' => '50',
					       'height' => '50',
					       'x' => '45',
					       'y' => '0'));
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    /* Test another composite with out of range params that should get corrected */
	    $ret = $this->_testOperation('image/png', 'composite',
					 'test.png',   /* composite */
					 'output.png', /* composited */
					 array('image.gif', /* image */
					       'image/gif', /* mimeType */
					       50, 50, /* image width, height */
					       'manual', /* alignment type */
					       151, 151), /* image alignment x, y */
					 array('image' => $dataDir . 'image.gif',
					       'width' => '50',
					       'height' => '50',
					       'x' => '0',
					       'y' => '0'));
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    /* Test compress */
	    $this->_files['compressMe.jpg']['size'] = 250 << 10;
	    $gallery->_platform->_counter = 2;
	    $ret = $this->_testOperation('image/jpeg', 'compress',
					 'compressMe.jpg', 'compressed.jpg',
					 array(150),
					 array(), 58);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    if (in_array('image/jpeg-cmyk', $environment['mimeTypes'])) {
		$ret = $this->_testOperation('image/jpeg-cmyk', 'convert-to-image/jpeg',
					     'cmyk.jpg', 'rgb.jpg',
					     array(), array());
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
	    }

	    list ($ret, $mimeType) =
		$this->_toolkit->performOperation('image/png', 'BOGUS',
						  'BOGUS',
						  'BOGUS',
						  array('BOGUS'));

	    $this->assert($ret->getErrorCode() & ERROR_UNSUPPORTED_OPERATION, 'bad op');

	}
    }

    function testPngQuality() {
	global $gallery;
	$ret = GalleryCoreApi::setPluginParameter('module', 'imagemagick', 'jpegQuality', 94);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	foreach ($this->_environments as $environment) {
	    $this->_setEnvironment($environment);

	    /*
	     * Make sure that PNG quality uses only the compression, not the filter
	     * so our quality level (94) becomes compression (9) and filter (4).  We
	     * change that in the toolkit to compression (9) and filter (5) for a result
	     * of 95.  When we implement PNG quality correctly, we should change this back.
	     */
	    $ret = $this->_testOperation('image/png', 'rotate',
					 'qualityTestIn.png', 'qualityTestOut.png',
					 array(90), array('angle' => 90), 95);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
    }

    /**
     * Ensure multiple "convert" operations in sequence only makes one exec call.  Perform a
     * thumbnail followed by a crop.  This is not a commonly performed sequence; normally we do the
     * crop first, however that causes problems with some versions of ImageMagick, and this still
     * serves as a good test for our sequences.
     */
    function testOperationSequence() {
	global $gallery;
	$gallery->_platform->_copyOk = true;

	foreach ($this->_environments as $environment) {
	    $this->_setEnvironment($environment);
	    $context = array('next.toolkit' => $this->_toolkit, 'next.operation' => 'crop');

	    list ($ret, $outputMimeType, $context) =
		$this->_toolkit->performOperation('image/png', 'thumbnail',
						  'test[640x480].png', 'outputTmp.png',
						  array('150'), $context);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->assertEquals(array(), $this->_files, 'no exec yet ' . $this->_envName());
	    $context['next.toolkit'] = null;
	    $context['next.operation'] = null;
	    $this->assertEquals(array('next.toolkit' => null, 'next.operation' => null,
				      'width' => 150, 'height' => 113,
				      'imagemagick.transform' => array_merge(
					  array('-size', '150x150',
						'-geometry', '150x150'),
					  $environment['removeMetaDataSwitch']),
				      'imagemagick.mime' => 'image/png'),
				$context, 'context after thumbnail ' . $this->_envName());

	    list ($ret, $outputMimeType, $context) =
		$this->_toolkit->performOperation('image/png', 'crop',
						  'outputTmp.png', 'output.png',
						  array('24.667', '23.5', '51.375', '52'),
						  $context);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->assertEquals(
		array_merge(
		    array('-quality', 75,
			  '-geometry', '150x150'),
		    $environment['removeMetaDataSwitch'],
		    array('-crop', '77x59+37+27'),
		    array('outputTmp.png', 'output.png')),
		$this->_files['output.png']['operation']['convert'], 'output ' . $this->_envName());
	    $this->assertEquals(array('next.toolkit' => null, 'next.operation' => null,
				      'width' => 77, 'height' => 59),
				$context, 'context at end ' . $this->_envName());

	    unset($this->_files['output.png']);
	}
    }

    /**
     * Some versions of ImageMagick bomb if you do a -crop followed by a -geometry.  See the
     * comment in the mock platform for more details.  So make sure that these are NOT done in a
     * single operation.
     */
    function testOperationSequenceCropAndGeometrySeparate() {
	global $gallery;
	$gallery->_platform->_copyOk = true;

	foreach ($this->_environments as $environment) {
	    $this->_setEnvironment($environment);
	    $context = array('next.toolkit' => $this->_toolkit, 'next.operation' => 'thumbnail');

	    list ($ret, $outputMimeType, $context) =
		$this->_toolkit->performOperation('image/png', 'crop',
						  'test[640x480].png', 'output1.png',
						  array('24.667', '23.5', '51.375', '52'),
						  $context);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->assertEquals(
		array_merge(
		    array('-quality', 75, '-crop', '329x250+158+113'),
		    array('test[640x480].png', 'output1.png')),
		$this->_files['output1.png']['operation']['convert'], 'output ' . $this->_envName());
	    $this->assertEquals(array('next.toolkit' => $this->_toolkit,
				      'next.operation' => 'thumbnail',
				      'width' => 329, 'height' => 250),
				$context, 'context after crop ' . $this->_envName());

	    $context['next.toolkit'] = null;
	    $context['next.operation'] = null;

	    list ($ret, $outputMimeType, $context) =
		$this->_toolkit->performOperation('image/png', 'thumbnail',
						  'output1.png', 'output.png',
						  array('150'), $context);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->assertEquals(
		array_merge(
		    array('-quality', 75, '-size', '150x150', '-geometry', '150x150'),
		    $environment['removeMetaDataSwitch'],
		    array('output1.png', 'output.png')),
		$this->_files['output.png']['operation']['convert'], 'output ' . $this->_envName());
	    $this->assertEquals(array('next.toolkit' => null, 'next.operation' => null,
				      'width' => 150, 'height' => 114),
				$context, 'context at end ' . $this->_envName());

	    unset($this->_files['output1.png']);
	    unset($this->_files['output.png']);
	}
    }

    /**
     * Ensure queued operations that affect image size are taken into account
     * for subsequent operations..
     */
    function testOperationSequenceSizeChange() {
	global $gallery;
	$gallery->_platform->_copyOk = true;

	foreach ($this->_environments as $environment) {
	    $this->_setEnvironment($environment);
	    $context = array('next.toolkit' => $this->_toolkit, 'next.operation' => 'rotate',
			     'width' => 640, 'height' => 480);

	    list ($ret, $outputMimeType, $context) =
		$this->_toolkit->performOperation('image/png', 'resize',
						  'test.png', 'output.png',
						  array('320', '240'),
						  $context);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->assertEquals(array(), $this->_files, 'no exec yet ' . $this->_envName());
	    $this->assertEquals(array('next.toolkit' => $this->_toolkit,
				      'next.operation' => 'rotate',
				      'width' => 320, 'height' => 240,
				      'imagemagick.transform' => array(
					  '-size', '320x240',
					  '-geometry', '320x240'
					  ),
				      'imagemagick.mime' => 'image/png'),
				$context, 'context after scale ' . $this->_envName());
	    $context['next.operation'] = 'thumbnail';

	    list ($ret, $outputMimeType, $context) =
		$this->_toolkit->performOperation('image/png', 'rotate',
						  'output.png', 'output.png',
						  array('90'), $context);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $context['next.toolkit'] = null;
	    $context['next.operation'] = null;
	    $this->assertEquals(array(), $this->_files, 'still no exec ' . $this->_envName());
	    $this->assertEquals(array('next.toolkit' => null, 'next.operation' => null,
				      'width' => 240, 'height' => 320,
				      'imagemagick.transform' =>
					    array('-geometry', '320x240', '-rotate', '90'),
				      'imagemagick.mime' => 'image/png'),
				$context, 'context after rotate ' . $this->_envName());

	    list ($ret, $outputMimeType, $context) =
		$this->_toolkit->performOperation('image/png', 'thumbnail',
						  'output.png', 'output.png',
						  array('150'), $context);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->assertEquals(array_merge(
		array('-quality', '75',
		      '-geometry', '320x240',
		      '-rotate', '90',
		      '-geometry', '150x150'),
		$environment['removeMetaDataSwitch'],
		array('output.png', 'output.png')),
		$this->_files['output.png']['operation']['convert'], 'output ' . $this->_envName());
	    $this->assertEquals(array('next.toolkit' => null, 'next.operation' => null,
				      'width' => 113, 'height' => 150),
				$context, 'context at end ' . $this->_envName());

	    unset($this->_files['output.png']);
	}
    }

    /* Ensure queued operations handle change of mime type correctly */
    function testOperationSequenceMimeChange() {
	global $gallery;
	$gallery->_platform->_copyOk = true;

	foreach ($this->_environments as $environment) {
	    $this->_setEnvironment($environment);
	    $context = array('next.toolkit' => $this->_toolkit, 'next.operation' => 'thumbnail');

	    list ($ret, $outputMimeType, $context) =
		$this->_toolkit->performOperation('application/pdf', 'convert-to-image/jpeg',
						  'test.pdf', 'TEMPFILE', array(), $context);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $context['next.toolkit'] = null;
	    $context['next.operation'] = null;
	    $this->assertEquals(array(), $this->_files, 'no exec yet ' . $this->_envName());
	    $this->assertEquals(array('next.toolkit' => null, 'next.operation' => null,
				      'width' => '612', 'height' => '792',
				      'imagemagick.transform' => array(),
				      'imagemagick.mime' => 'application/pdf'),
				$context, 'context after convert ' . $this->_envName());
	    $this->assertEquals('image/jpeg', $outputMimeType, 'jpeg ' . $this->_envName());

	    list ($ret, $outputMimeType, $context) =
		$this->_toolkit->performOperation('image/jpeg', 'thumbnail',
						  'TEMPFILE', 'output.jpg',
						  array('150'), $context);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->assertEquals(array_merge(
		array('-quality', '75', '-size', '150x150', '-geometry', '150x150'),
		$environment['removeMetaDataSwitch'],
		array('TEMPFILE[0]', 'jpeg:output.jpg')),
		$this->_files['output.jpg']['operation']['convert'], 'output ' . $this->_envName());
	    $this->assertEquals(array('next.toolkit' => null, 'next.operation' => null,
				      'width' => 116, 'height' => 150),
				$context, 'context at end ' . $this->_envName());

	    unset($this->_files['output.jpg']);
	}
    }


    function testGetProperties() {
	foreach ($this->_environments as $environment) {
	    $this->_setEnvironment($environment);

	    list ($ret, $results) =
		$this->_toolkit->getProperty('image/gif', 'dimensions', 'test[10x20].gif');
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(array(10, 20), $results, 'dimensions ' . $this->_envName());

	    list ($ret, $results) =
		$this->_toolkit->getProperty('application/pdf', 'page-count', 'test.pdf');
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(array(2), $results, 'page-count ' . $this->_envName());

	    if (in_array('image/jpeg-cmyk', $environment['mimeTypes'])) {
		list ($ret, $results) =
		    $this->_toolkit->getProperty('image/jpeg', 'colorspace', 'cmyk.jpg');
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		$this->assertEquals(array('CMYK'), $results, 'colorspace ' . $this->_envName());
	    }

	    list ($ret, $results) =
		$this->_toolkit->getProperty('image/gif', 'BOGUS', 'BOGUS');
	    $this->assert($ret->getErrorCode() & ERROR_UNIMPLEMENTED,
			  'bad op ' . $this->_envName());
	}
    }

    function testMergeOperations() {
	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('crop', array(1, 2, 3, 4), 'crop', array(3, 4, 5, 6));
	$this->assert($success);
	$this->assertEquals('crop', $operation);
	$this->assertEquals(array(3, 4, 5, 6), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('resize', array(1, 2), 'resize', array(3, 4));
	$this->assert($success);
	$this->assertEquals('resize', $operation);
	$this->assertEquals(array(3, 4), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('thumbnail', array(1, 2), 'resize', array(3, 4));
	$this->assert($success);
	$this->assertEquals('resize', $operation);
	$this->assertEquals(array(3, 4), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('thumbnail', array(1, 2), 'thumbnail', array(3, 4));
	$this->assert($success);
	$this->assertEquals('thumbnail', $operation);
	$this->assertEquals(array(3, 4), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('scale', array(1, 2), 'thumbnail', array(3, 4));
	$this->assert($success);
	$this->assertEquals('thumbnail', $operation);
	$this->assertEquals(array(3, 4), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(90), 'rotate', array(90));
	$this->assert($success);
	$this->assertEquals('rotate', $operation);
	$this->assertEquals(array(180), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(90), 'rotate', array(-90));
	$this->assert($success);
	$this->assertEquals(null, $operation);
	$this->assertEquals(null, $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(270), 'rotate', array(180));
	$this->assert($success);
	$this->assertEquals('rotate', $operation);
	$this->assertEquals(array(90), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(90), 'rotate', array(-180));
	$this->assert($success);
	$this->assertEquals('rotate', $operation);
	$this->assertEquals(array(-90), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(90), 'rotate', array(180));
	$this->assert($success);
	$this->assertEquals('rotate', $operation);
	$this->assertEquals(array(-90), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(270), 'rotate', array(90));
	$this->assert($success);
	$this->assertEquals(null, $operation);
	$this->assertEquals(null, $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('crop', array(1, 2, 3, 4), 'thumbnail', array(3, 4));
	$this->assert(!$success);
    }

    function testDiscoverMimeTypes() {
	foreach ($this->_environments as $environment) {
	    $this->_setEnvironment($environment);

	    list ($ret, $results) =
		ImageMagickToolkitHelper::discoverMimeTypes($this->_currentEnvironment['path']);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals($environment['mimeTypes'], $results);
	}
    }

    function testGetOperationsAndProperties() {
	foreach ($this->_environments as $environment) {
	    $this->_setEnvironment($environment);

	    list ($ret, $results) = ImageMagickToolkitHelper::getOperationsAndProperties();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $canConvert = array();
	    foreach (array('image/jpeg', 'image/png', 'image/gif', 'image/tiff', 'image/jp2')
		     as $mimeType) {
		if (is_int($i = array_search($mimeType, $environment['mimeTypes']))) {
		    $convertTo = array_merge(
			$environment['mimeTypes'], array('image/x-portable-pixmap'));
		    array_splice($convertTo, $i, 1);
		    $canConvert['convert-to-' . $mimeType] = array(
			'params' => array(),
			'description' => 'Convert to ' . $mimeType,
			'mimeTypes' => $convertTo,
			'outputMimeType' => $mimeType);
		}
	    }
	    $wantToPage = array('image/tiff', 'application/pdf',
				'application/postscript', 'application/photoshop');
	    $canPage = array_intersect($wantToPage, $environment['mimeTypes']);
	    $qualityMimeTypes = array_intersect(array('image/jpeg', 'image/png'),
						$environment['mimeTypes']);

	    $this->assertEquals(array_merge($canConvert, array(
		'scale' => array(
		    'params' => array(
			array(
			    'type' => 'int',
			    'description' => 'target width'),
			array(
			    'type' => 'int',
			    'description' => '(optional) target height, defaults to same as width')
		    ),
		    'description' => 'Scale the image to the target size, maintain aspect ratio',
		    'mimeTypes' => $environment['mimeTypes'],
		),
		'thumbnail' => array(
		    'params' => array(
			array(
			    'type' => 'int',
			    'description' => 'target width'),
			array(
			    'type' => 'int',
			    'description' => '(optional) target height, defaults to same as width')
		    ),
		    'description' => 'Scale the image to the target size, maintain aspect ratio',
		    'mimeTypes' => $environment['mimeTypes'],
		),
		'resize' => array(
		    'params' => array(
			array(
			    'type' => 'int',
			    'description' => 'target width'),
			array(
			    'type' => 'int',
			    'description' => 'target height')
		    ),
		    'description' => 'Resize the image to the target dimensions',
		    'mimeTypes' => $environment['mimeTypes'],
		),
		'rotate' => array(
		    'params' => array(
			array(
			    'type' => 'int',
			    'description' => 'rotation degrees')
		    ),
		    'description' => 'Rotate the image',
		    'mimeTypes' => $environment['mimeTypes'],
		),
		'crop' => array(
		    'params' => array(
			array(
			    'type' => 'float',
			    'description' => 'left edge %'),
			array(
			    'type' => 'float',
			    'description' => 'top edge %'),
			array(
			    'type' => 'float',
			    'description' => 'width %'),
			array(
			    'type' => 'float',
			    'description' => 'height %')
		    ),
		    'description' => 'Crop the image',
		    'mimeTypes' => $environment['mimeTypes'],
		),
		'composite' => array(
		    'params' => array(
			array(
			    'type' => 'string',
			    'description' => 'overlay path'),
			array(
			    'type' => 'string',
			    'description' => 'overlay mime type'),
			array(
			    'type' => 'int',
			    'description' => 'overlay width'),
			array(
			    'type' => 'int',
			    'description' => 'overlay height'),
			array(
			    'type' => 'string',
			    'description' => 'alignment type'),
			array(
			    'type' => 'int',
			    'description' => 'alignment x %'),
			array(
			    'type' => 'int',
			    'description' => 'alignment y %'),
		    ),
		    'description' => 'Overlay source image with a second one',
		    'mimeTypes' => $environment['mimeTypes'],
		),
		'select-page' => array(
		    'params' => array(
			array(
			    'type' => 'int',
			    'description' => 'page number'),
		    ),
		    'description' => 'Select a single page from a multi-page file',
		    'mimeTypes' => $canPage,
		),
		'compress' => array(
		    'params' => array(
			array(
			    'type' => 'int',
			    'description' => 'target size in kb')
		    ),
		    'description' => 'Reduce image quality to reach target file size',
		    'mimeTypes' => $qualityMimeTypes
		),
	    )), $results['operations'], $this->_envName());

	    $properties = array(
		'dimensions' => array(
		    'type' => 'int,int',
		    'description' => 'Get the width and height of the image',
		    'mimeTypes' => array_merge(
			$environment['mimeTypes'], array('image/x-portable-pixmap'))
		),
		'page-count' => array(
		    'type' => 'int',
		    'description' => 'Get the number of pages',
		    'mimeTypes' => $canPage
		),
	    );
	    if (in_array('image/jpeg-cmyk', $environment['mimeTypes'])) {
		$properties['colorspace'] = array(
		    'type' => 'string',
		    'description' => 'Get the colorspace of the image',
		    'mimeTypes' => array('image/jpeg', 'image/tiff')
		);
	    }
	    $this->assertEquals($properties, $results['properties'], $this->_envName());
	}
    }

    function testBinaries() {
	foreach ($this->_environments as $environment) {
	    $this->_setEnvironment($environment);

	    list ($ret, $results) =
		ImageMagickToolkitHelper::testBinaries($this->_currentEnvironment['path']);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $wanted = array('identify', 'convert', 'combine', 'composite');
	    $expected = array();
	    foreach ($wanted as $binary) {
		if (in_array($binary, $this->_currentEnvironment['binaries'])) {
		    $expected[] = array('name' => $binary, 'success' => true);
		}
	    }

	    $this->assertEquals($expected, $results);
	}

	list ($ret, $results) = ImageMagickToolkitHelper::testBinaries('/bogusPath');
	$this->assert($ret->getErrorCode() & ERROR_BAD_PATH);
    }
}

/**
 * Test platform
 *
 * @package ImageMagick
 * @subpackage PHPUnit
 */
class ImageMagickToolkitTestPlatform {

    var $_environment = array();
    var $_files;

    function ImageMagickToolkitTestPlatform($originalPlatform, &$files) {
	$this->_platform = $originalPlatform;
	$this->_files =& $files;
    }

    function setEnvironment($environment) {
	$this->_environment = $environment;
    }

    function exec($cmd) {
	list ($ret, $imageMagickPath) =
	    GalleryCoreApi::getPluginParameter('module', 'imagemagick', 'path');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$firstCmd = $cmd[0];
	if ($this->_environment['binary'] != '') {
	    if (basename($firstCmd[0]) != $this->_environment['binary']) {
		return array(0, array('unprepared for exec()'));
	    }
	    array_shift($firstCmd);
	}

	$output = array();
	$status = false;

	$binary = array_shift($firstCmd);
	$binary = basename($binary);
	if ($binary == 'identify') {
	    $file = basename(array_shift($firstCmd));
	    $data = $this->_environment['identify'];
	    if ($file == '-format' && count($firstCmd) >= 2) {
		/* Cmd to identify colorspace */
		$data = $data['-format'];
		$file = basename($firstCmd[1]);
		if (isset($this->_files[$file]['operation']['convert'][0]) &&
			$this->_files[$file]['operation']['convert'][0] == '-colorspace') {
		    $file = 'rgb_file';
		}
	    }
	    if (isset($data[$file])) {
		$output = split("\n", $data[$file]);
	    } else {
		$output = split("\n", $this->_environment['identify']['UNKNOWN']);
	    }
	    $status = true;
	} else if (($binary == 'convert' && in_array('convert', $this->_environment['binaries']))
		   || ($binary == 'composite' && in_array('composite',
							  $this->_environment['binaries']))
		   || ($binary == 'combine' && in_array('combine',
							$this->_environment['binaries'])) ) {
	    $params = array_slice($firstCmd, 0);
	    $src = basename($firstCmd[count($firstCmd) - 2]);
	    $dst = basename($firstCmd[count($firstCmd) - 1]);
	    if (preg_match('#(.*):(.*)$#', $dst, $matches)) {
		/* Format 'jpeg:filename.jpg' */
		$dst = $matches[2];
	    }
	    if ($src == 'testProfile.jpg') {
		/* ImageMagickToolkitHelper is testing our removeMetaDataSwitch */
		$params = array_slice($firstCmd, 0, count($firstCmd) - 2);
		if ($this->_environment['removeMetaDataSwitch'] == $params) {
		    $this->_files[$dst] = array('size' => 50000);
		} else {
		    $this->_files[$dst] = array('size' => 0);
		}
		$output = array();
		$status = true;
	    } else {
		/*
		 * ImageMagick 6.1.6 has a bug where if you do -crop followed by -geometry it
		 * gets confused about the size of the image and the -geometry check applies
		 * to the original dimensions, instead of the new, cropped dimensions.  This
		 * can result it in it returning "convert: geometry does not contain image"
		 * and a 0x0 pixel image.
		 *
		 * I haven't verified that 6.1.3 does this also, but since we don't have a
		 * 6.1.6 ImEnvironment yet, I'll credit this bug to 6.1.3 for now.
		 */
		if ($this->_environment['version'] == '6.1.3' &&
		    preg_match('/crop.*geometry/', join(' ', $params))) {
		    /*
		     * Note: This doesn't exactly simulate what IM does.  It will continue like
		     * everything is normal.  We just force the test to fail for now.
		     */
		    $output = array('convert: geometry does not contain image');
		    $status = false;
		    print 'Error: invalid -crop followed by -geometry in same convert command!';
		} else {
		    /*
		     * Remember how we converted from $src to $dst, so we can compare it later
		     * with what we really wanted
		     */
		    $this->_files[$dst] = array('operation' => array($binary => $params));
		    $output = array();
		    $status = true;
		}
	    }
	}

	if ($status) {
	    return array(1, $output);
	}
	echo $this->_environment['path'] . ": ERROR exec()ing:<pre>";
	print_r($cmd);
	echo "</pre>\n";
	return array(0, array('unprepared for exec()'));
    }

    function rename($oldName, $newName) {
	$oldBase = basename($oldName);
	$newBase = basename($newName);
	if (isset($this->_files[$oldBase])) {
	    $this->_files[$newBase] = $this->_files[$oldBase];
	    if (isset($this->_files[$newBase]['operation'])) {
		foreach (array_keys($this->_files[$newBase]['operation']) as $operation) {
		    $count = count($this->_files[$newBase]['operation'][$operation]);
		    $val = $this->_files[$newBase]['operation'][$operation][$count - 1];
		    if (preg_match('/^(jpeg|png):/', $val, $regs)) {
			$val = $regs[1] . ':' . $newName;
		    } else {
			$val = $newName;
		    }
		    $this->_files[$newBase]['operation'][$operation][$count - 1] = $val;
		}
	    }
	    unset($this->_files[$oldBase]);
	    return true;
	}
	echo $this->_environment['path'] . ": rename($oldName, $newName)<br>\n";
	return false;
    }

    function isRestrictedByOpenBaseDir($path) {
	/* echo $this->_environment['path'] . ": isRestrictedByOpenBaseDir($path)<br>\n"; */
	return false;
    }

    function file_exists($path) {
	if ($path == $this->_environment['path']) {
	    return true;
	}
	$dirName = dirname($path) . '/';
	$baseName = basename($path);
	if ($dirName == $this->_environment['path']) {
	    if ($this->_environment['binary'] != '' && $baseName == $this->_environment['binary']) {
		return true;
	    }
	    if ($this->_environment['binary'] == ''
		    && in_array($baseName, $this->_environment['binaries']) ) {
		return true;
	    }
	}
	/*echo $this->_environment['path'] . ": file_exists($path)<br>\n"; */
	return false;
    }

    function is_dir($path) {
	if ($path == $this->_environment['path']) {
	    return true;
	}
	/* echo $this->_environment['path'] . ": is_dir($path)<br>\n"; */
	return false;
    }

    function is_executable($file) {
	$dirName = dirname($file) . '/';
	$baseName = basename($file);
	if ($dirName == $this->_environment['path']) {
	    if ($this->_environment['binary'] != '' && $baseName == $this->_environment['binary']) {
		return true;
	    }
	    if ($this->_environment['binary'] == ''
		    && in_array($baseName, $this->_environment['binaries']) ) {
		return true;
	    }
	}

	echo $this->_environment['path'] . ": is_executable($file)<br>\n";
	return false;
    }

    function copy($file1, $file2) {
	if (isset($this->_copyOk)) {
	    return 1;
	}
	echo $this->_environment['path'] . ": copy($file1, $file2)<br>\n";
    }

    function filesize($file) {
	$basename = basename($file);
	if ($basename == 'testProfile.jpg') {
	    return 100000;
	}
	if ($basename == 'compressed.jpg') {
	    switch ($this->_counter--) {
	    case 2:
		return 200 << 10;
	    case 1:
		return 100 << 10;
	    case 0:
		return 150 << 10;
	    }
	}
	if (isset($this->_files[$basename]['size'])) {
	    return $this->_files[$basename]['size'];
	}
	echo $this->_environment['path'] . ": filesize($file)<br>\n";
	return 0;
    }

    function tempnam($dir, $prefix) {
	$fileName = $dir . $prefix . md5(rand());
	$this->_files[basename($fileName)] = 'temp';
	/*echo $this->_environment['path'] . ": tempnam($dir, $prefix) = $fileName<br>\n"; */
	return $fileName;
    }

    function unlink($path) {
	$baseName = basename($path);
	if (isset($this->_files[$baseName])) {
	    unset($this->_files[$baseName]);
	    return true;
	}
	echo $this->_environment['path'] . ": unlink($path)<br>\n";
	return false;
    }

    function getimagesize($path) {
	$basename = basename($path);
	if (preg_match('#\[(\d+)x(\d+)\]#', $basename, $matches)) {
	    $result = array($matches[1], $matches[2], 1,
			    sprintf('height="%d" width="%d"', $matches[1], $matches[2]));
	} else {
	    /*echo $this->_environment['path'] . ": getimagesize($path)<br>\n"; */
	    $result = false;
	}

	return $result;
    }

    function getDirectorySeparator() {
	return $this->_platform->getDirectorySeparator();
    }

    function realpath($path) {
	return $this->_platform->realpath($path);
    }

    function chdir($path) {
	return true;
    }

    function getcwd() {
	return '/tmp';
    }
}
?>
