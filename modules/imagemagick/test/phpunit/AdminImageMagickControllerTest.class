<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Comment
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * AdminImageMagick controller tests
 */
class AdminImageMagickControllerTest extends GalleryControllerTestCase {

    function AdminImageMagickControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'imagemagick:AdminImageMagick');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	list ($ret, $this->_saveParameters['path']) =
	    $gallery->getModuleParameter('imagemagick', 'path');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	list ($ret, $this->_saveParameters['jpegQuality']) =
	    $gallery->getModuleParameter('imagemagick', 'jpegQuality');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_platform = $gallery->getPlatform();
	$gallery->_platform = new AdminImageMagickControllerTestPlatform();
    }

    function tearDown() {
	global $gallery;
	parent::tearDown();

	$gallery->_platform = $this->_platform;
	
	$ret = $gallery->setModuleParameter('imagemagick', 'path', $this->_saveParameters['path']);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$ret = $gallery->setModuleParameter('imagemagick', 'jpegQuality', $this->_saveParameters['jpegQuality']);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testSaveGoodPath() {
	global $gallery;

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form.action.save', 1);
	GalleryUtilities::putRequestVariable('form.path', '/validPath/');
	GalleryUtilities::putRequestVariable('form.jpegQuality', '12');
	GalleryUtilities::putRequestVariable('return.view', 'target');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertRedirect(array('view' => 'target'), $results);

	/* Verify the settings went in properly */
	$this->assertEquals(array(GalleryStatus::success(), '/validPath/'),
			    $gallery->getModuleParameter('imagemagick', 'path'));
	$this->assertEquals(array(GalleryStatus::success(), '12'),
			    $gallery->getModuleParameter('imagemagick', 'jpegQuality'));
    }

    function testCancel() {
	global $gallery;

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form.action.cancel', 1);
	GalleryUtilities::putRequestVariable('return.view', 'target');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertRedirect(array('view' => 'target'), $results);
    }
    
    function testSaveTestErrorPath() {
	global $gallery;

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form.action.save', 1);
	GalleryUtilities::putRequestVariable('form.path', '/validPathBadBinaries/');
	GalleryUtilities::putRequestVariable('form.jpegQuality', '12');
	GalleryUtilities::putRequestVariable('return.view', 'target');

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:SiteAdmin'), $results);
	$this->assertEquals('imagemagick:AdminImageMagick', GalleryUtilities::getRequestVariables('subView'));
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.path.testError'), 'testError error missing');
    }

    function testSaveBadPath() {
	global $gallery;

	/* Use valid inputs */
	GalleryUtilities::putRequestVariable('form.action.save', 1);
	GalleryUtilities::putRequestVariable('form.path', '/invalidPath/');
	GalleryUtilities::putRequestVariable('form.jpegQuality', '12');
	GalleryUtilities::putRequestVariable('return.view', 'target');

	/* Perform the request and verify that we failed */
	$results = $this->handleRequest();
	$this->assertEquals(array('view' => 'core:SiteAdmin'), $results);
	$this->assertEquals('imagemagick:AdminImageMagick', GalleryUtilities::getRequestVariables('subView'));
	$this->assert(GalleryUtilities::hasRequestVariable('form.error.path.badPath'), 'badPath error missing');
    }
}

class AdminImageMagickControllerTestPlatform {
    function getDirectorySeparator() {
	return '/';
    }

    function file_exists($path) {
	switch ($path) {
	case '/validPath/':
	case '/validPathBadBinaries/':
	    return true;
	}
	
	return false;
    }

    function is_dir($dir) {
	switch ($dir) {
	case '/validPath/':
	case '/validPathBadBinaries/':
	    return true;
	}
	
	return false;
    }

    function unlink($args) {
	// do nothing
    }

    function isRestrictedByOpenBaseDir($path) {
	return false;
    }

    function exec($args) {
	switch ($args[0][0]) {
	case '/validPath/identify':
	    return array(1, array('test.gif GIF 50x50+0+0 PseudoClass 8c 8-bit 232.0 0.000u 0:01'));
	    
	case '/validPath/convert':
	    return array(1, array());

	default:
	    return array(0, null);
	}
    }
}
?>
