<?php
/*
 * $RCSfile: CaptchaValidationPluginTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.3 $ $Date: 2006/01/30 22:52:14 $
 * @package Captcha
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Test Captcha validation plugin
 *
 * @package Captcha
 * @subpackage PHPUnit
 */
class CaptchaValidationPluginTest extends GalleryTestCase {
    function CaptchaValidationPluginTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	list ($ret, $this->_plugin) = GalleryCoreApi::newFactoryInstance('GalleryValidationPlugin',
									 'CaptchaValidationPlugin');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($this->_plugin), 'init plugin');

	$this->_session =& $gallery->getSession();
	$this->_saveSessionCount = $this->_session->get('captcha.failedAttempts');
	$this->_session->put('captcha.failedAttempts', 0);
	$this->_session->put('captcha.key', 1234);

	$ret = $this->_markPluginParametersForCleanup('module', 'captcha');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'captcha', 'failedAttemptThreshold', 0);
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_form = array();
    }

    function tearDown() {
	global $gallery;
	$session =& $gallery->getSession();
	if (isset($this->_saveSessionCount)) {
	    $session->put('captcha.failedAttempts', $this->_saveSessionCount);
	} else {
	    $session->remove('captcha.failedAttempts');
	}
	$ret = GalleryCoreApi::removePluginParameter('module', 'captcha',
						     'failCount-captcha.UnitTest');
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	parent::tearDown();
    }

    function testLoadTemplateDefault() {
	/* With no options, level defaults to HIGH */
	$result = $this->_plugin->loadTemplate($this->_form);
	$this->assertEquals(
		array(null, 'modules/captcha/templates/CaptchaValidationPlugin.tpl',
			    'modules_captcha'),
		$result);
    }

    function testLoadTemplateHigh() {
	$result = $this->_plugin->loadTemplate($this->_form, array('level' => 'HIGH'));
	$this->assertEquals(
		array(null, 'modules/captcha/templates/CaptchaValidationPlugin.tpl',
			    'modules_captcha'),
		$result);
	$this->assertEquals(array(), $this->_form);
    }

    function testLoadTemplateMedium() {
	$result = $this->_plugin->loadTemplate($this->_form,
		array('level' => 'MEDIUM', 'key' => 'captcha.UnitTest'));
	$this->assertEquals(array(null, null, null), $result);

	$ret = GalleryCoreApi::setPluginParameter('module', 'captcha',
						  'failCount-captcha.UnitTest', 3);
	if ($ret) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$result = $this->_plugin->loadTemplate($this->_form,
		array('level' => 'MEDIUM', 'key' => 'captcha.UnitTest'));
	$this->assertEquals(
		array(null, 'modules/captcha/templates/CaptchaValidationPlugin.tpl',
			    'modules_captcha'),
		$result);
	$this->assertEquals(array(), $this->_form);
    }

    function testLoadTemplateLow() {
	global $gallery;
	$result = $this->_plugin->loadTemplate($this->_form, array('level' => 'LOW'));
	$this->assertEquals(array(null, null, null), $result);

	$session =& $gallery->getSession();
	$session->put('captcha.failedAttempts', 3);

	$result = $this->_plugin->loadTemplate($this->_form, array('level' => 'LOW'));
	$this->assertEquals(
		array(null, 'modules/captcha/templates/CaptchaValidationPlugin.tpl',
			    'modules_captcha'),
		$result);
	$this->assertEquals(array(), $this->_form);
    }

    function testValidateMissingCode() {
	/* With no options, level defaults to HIGH */
	$result = $this->_plugin->performValidation($this->_form);
	$this->assertEquals(array(null, array('form[error][CaptchaValidationPlugin][missing]'),
					false),
			    $result);
    }

    function testValidateHigh() {
	/* Test with HIGH level */
	$this->_form['CaptchaValidationPlugin']['word'] = '1234';
	$result = $this->_plugin->performValidation($this->_form, array('level' => 'HIGH'));
	$this->assertEquals(array(null, array(), true), $result, 'pass');

	$this->_form['CaptchaValidationPlugin']['word'] = '4321';
	$result = $this->_plugin->performValidation($this->_form, array('level' => 'HIGH'));
	$this->assertEquals(array(null, array('form[error][CaptchaValidationPlugin][invalid]'),
					false),
			    $result, 'fail');
    }

    function testValidateMedium() {
	/* First call doesn't check given code, just increments fail count */
	$this->_form['CaptchaValidationPlugin']['word'] = '4321';
	$result = $this->_plugin->performValidation($this->_form,
		array('level' => 'MEDIUM', 'key' => 'captcha.UnitTest', 'pass' => false));
	$this->assertEquals(array(null, array(), true), $result, 1);

	list ($ret, $count) =
	    GalleryCoreApi::getPluginParameter('module', 'captcha', 'failCount-captcha.UnitTest');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, (int)$count, 'failure count 1');

	/* Now we've exceeded the failure threshold and code is checked */
	$result = $this->_plugin->performValidation($this->_form,
		array('level' => 'MEDIUM', 'key' => 'captcha.UnitTest', 'pass' => true));
	$this->assertEquals(array(null, array('form[error][CaptchaValidationPlugin][invalid]'),
					false),
			    $result, 2);

	/* Failure count not reset when captcha validation failed */
	list ($ret, $count) =
	    GalleryCoreApi::getPluginParameter('module', 'captcha', 'failCount-captcha.UnitTest');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1, (int)$count, 'failure count 2');

	/* Successful validation but invalid entry */
	$this->_form['CaptchaValidationPlugin']['word'] = '1234';
	$result = $this->_plugin->performValidation($this->_form,
		array('level' => 'MEDIUM', 'key' => 'captcha.UnitTest', 'pass' => false));
	$this->assertEquals(array(null, array(), true), $result, 3);

	list ($ret, $count) =
	    GalleryCoreApi::getPluginParameter('module', 'captcha', 'failCount-captcha.UnitTest');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(2, (int)$count, 'failure count 3');

	/* Now success, failure count is cleared */
	$result = $this->_plugin->performValidation($this->_form,
		array('level' => 'MEDIUM', 'key' => 'captcha.UnitTest', 'pass' => true));
	$this->assertEquals(array(null, array(), true), $result, 4);

	list ($ret, $count) =
	    GalleryCoreApi::getPluginParameter('module', 'captcha', 'failCount-captcha.UnitTest');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(null, $count, 'failure count 4');
    }

    function testValidateLow() {
	global $gallery;
	$session =& $gallery->getSession();

	/* First call doesn't check given code, just increments fail count */
	$this->_form['CaptchaValidationPlugin']['word'] = '4321';
	$result = $this->_plugin->performValidation($this->_form,
		array('level' => 'LOW', 'pass' => false));
	$this->assertEquals(array(null, array(), true), $result);

	$this->assertEquals(1, (int)$session->get('captcha.failedAttempts'), 'failure count');

	/* Now we've exceeded the failure threshold and code is checked */
	$result = $this->_plugin->performValidation($this->_form,
		array('level' => 'LOW', 'pass' => true));
	$this->assertEquals(array(null, array('form[error][CaptchaValidationPlugin][invalid]'),
					false),
			    $result);
    }
}
?>
