<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package UserAlbum
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * UserAlbumSiteAdmin controller tests
 *
 * @package UserAlbum
 * @subpackage PHPUnit
 */
class UserAlbumSiteAdminControllerTest extends GalleryControllerTestCase {

    function UserAlbumSiteAdminControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'useralbum:UserAlbumSiteAdmin');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_param) = GalleryCoreApi::fetchAllPluginParameters('module', 'useralbum');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	// Create random album to test assignment
        list ($ret, $this->_parentAlbum) = $this->_createRandomAlbum($this->_getRootId());
        if ($ret->isError()) {
            print $ret->getAsHtml();
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

    }

    function tearDown() {
	foreach ($this->_param as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'useralbum', $key, $value);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
        if (isset($this->_parentAlbum)) {
            $ret = GalleryCoreApi::deleteEntityById($this->_parentAlbum->_id);
            if ($ret->isError()) {
                print $ret->getAsHtml();
                return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
            }
        }
	parent::tearDown();
    }

    function testUserAlbumSiteAdminControllerReset() {

	GalleryUtilities::putRequestVariable('form[action][reset]', '1');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('return' => 1,
				  'redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'useralbum:UserAlbumSiteAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testUserAlbumSiteAdminControllerSave() {

	GalleryUtilities::putRequestVariable('form[action][save]', '1');
	GalleryUtilities::putRequestVariable('form[view]', 'allusers');
	GalleryUtilities::putRequestVariable('form[fullSize]', '0');
	GalleryUtilities::putRequestVariable('form[targetLocation]', $this->_getRootId());

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('return' => 1,
				  'redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'useralbum:UserAlbumSiteAdmin'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	// Verify the information in the DB
	list ($ret, $verifyParams) = GalleryCoreApi::fetchAllPluginParameters('module', 'useralbum');
	$this->assertEquals(array('fullSize' => '0',
				'targetLocation' => $this->_getRootId(),
				'version' => $verifyParams['version'], // We didn't change the version
				'view' => 'allusers'),
			    $verifyParams, 
			    "Verify DB Data");
    }
}
?>
