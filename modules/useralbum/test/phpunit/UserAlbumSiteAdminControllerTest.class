<?php
/*
 * $RCSfile: UserAlbumSiteAdminControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.14 $ $Date: 2005/08/23 03:49:57 $
 * @package UserAlbum
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * UserAlbumSiteAdmin controller tests
 *
 * @package UserAlbum
 * @subpackage PHPUnit
 */
class UserAlbumSiteAdminControllerTest extends GalleryControllerTestCase {

    function UserAlbumSiteAdminControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'useralbum.UserAlbumSiteAdmin');
    }

    function setUp() {
	parent::setUp();

	$ret = $this->_markPluginParametersForCleanup('module', 'useralbum');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Create random album to test assignment */
	list ($ret, $this->_parentAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_parentAlbum);
    }

    function testUserAlbumSiteAdminControllerReset() {

	GalleryUtilities::putRequestVariable('form[action][reset]', '1');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'useralbum.UserAlbumSiteAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testUserAlbumSiteAdminControllerSave() {

	GalleryUtilities::putRequestVariable('form[action][save]', '1');
	GalleryUtilities::putRequestVariable('form[create]', 'immediate');
	GalleryUtilities::putRequestVariable('form[view]', 'allusers');
	GalleryUtilities::putRequestVariable('form[fullSize]', '0');
	GalleryUtilities::putRequestVariable('form[targetLocation]', $this->_getRootId());
	GalleryUtilities::putRequestVariable('form[homeLink]', 'on');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'useralbum.UserAlbumSiteAdmin'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	/* Verify the information in the DB */
	list ($ret, $verifyParams) = GalleryCoreApi::fetchAllPluginParameters('module', 'useralbum');
	foreach ($verifyParams as $key => $value) {
	    if ($key[0] == '_') {
		unset($verifyParams[$key]);
	    }
	}
	$this->assertEquals(array('create' => 'immediate',
				  'view' => 'allusers',
				  'fullSize' => '0',
				  'targetLocation' => $this->_getRootId(),
				  'loginRedirect' => '0',
				  'homeLink' => '1',
				  ),
			    $verifyParams,
			    'Verify DB Data');
    }
}
?>
