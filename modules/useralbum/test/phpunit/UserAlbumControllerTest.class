<?php
/*
 * $RCSfile: UserAlbumControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.12 $ $Date: 2005/08/23 03:49:57 $
 * @package UserAlbum
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * UserAlbum controller tests
 *
 * @package UserAlbum
 * @subpackage PHPUnit
 */
class UserAlbumControllerTest extends GalleryControllerTestCase {

    function UserAlbumControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'useralbum.UserAlbum');
    }

    function setUp() {
	parent::setUp();

	$ret = $this->_markPluginParametersForCleanup('module', 'useralbum');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $targetAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($targetAlbum);

	$ret = GalleryCoreApi::setPluginParameter(
	    'module', 'useralbum', 'targetLocation', $targetAlbum->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_userWithAlbum) = $this->_createRandomUser();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_userWithAlbum);

	GalleryCoreApi::relativeRequireOnce('modules/useralbum/classes/UserAlbumHelper.class');
	$ret = UserAlbumHelper::createUserAlbum($this->_userWithAlbum);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $this->_userAlbumId) = GalleryCoreApi::getPluginParameter(
	    'module', 'useralbum', 'albumId', $this->_userWithAlbum->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_userWithoutAlbum) = $this->_createRandomUser();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_userWithoutAlbum);
    }

    function testExistingAlbum() {
	global $gallery;
	$gallery->setActiveUser($this->_userWithAlbum);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ShowItem',
						      'itemId' => $this->_userAlbumId),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testCreateAlbumOnAccess() {
	global $gallery;
	$gallery->setActiveUser($this->_userWithoutAlbum);

	/* Disable OnAccess creation and test to verify that album is not created */
	$ret = GalleryCoreApi::setPluginParameter('module', 'useralbum', 'create', 'immediate');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$results = $this->handleRequest();

	list ($ret, $albumId) = GalleryCoreApi::getPluginParameter(
	    'module', 'useralbum', 'albumId', $this->_userWithoutAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(empty($albumId), 'Album should not have been created');

	$this->assertEquals(array('delegate' => array('view' => 'core.ShowItem',
						      'itemId' => $albumId),
				  'status' => array(),
				  'error' => array()),
			    $results);

	/* Enable OnAccess creation and test to verify that album is created */
	$ret = GalleryCoreApi::setPluginParameter('module', 'useralbum', 'create', 'access');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$results = $this->handleRequest();

	list ($ret, $albumId) = GalleryCoreApi::getPluginParameter(
	    'module', 'useralbum', 'albumId', $this->_userWithoutAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($albumId), 'Album was not created');

	$this->assertEquals(array('delegate' => array('view' => 'core.ShowItem',
						      'itemId' => $albumId),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testUserIdParameter() {
	GalleryUtilities::putRequestVariable('userId', $this->_userWithAlbum->getId());

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.ShowItem',
						      'itemId' => $this->_userAlbumId),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testNotForAnonymous() {
	global $gallery;
	list ($ret, $anonymousUserId) = GalleryCoreApi::getPluginParameter(
	    'module', 'core', 'id.anonymousUser');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $anonymousUser) = GalleryCoreApi::loadEntitiesById($anonymousUserId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$gallery->setActiveUser($anonymousUser);

	$this->handleRequest(ERROR_PERMISSION_DENIED);
    }

    function testSystemLinks() {
	global $gallery;

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'useralbum');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::setPluginParameter('module', 'useralbum', 'homeLink', 1);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create-on-access mode.. should get link whether or not album already exists */
	$ret = GalleryCoreApi::setPluginParameter('module', 'useralbum', 'create', 'access');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Anonymous should never see link */
	$this->_becomeGuestUser();
	list($ret, $links) = $module->getSystemLinks();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), $links, 'anonymous should not get link');

	$gallery->setActiveUser($this->_userWithAlbum);
	$albumLink['YourAlbum'] = array('text' => $module->translate('Your Album'),
	    'params' => array('view' => 'core.ShowItem', 'itemId' => $this->_userAlbumId));

	list($ret, $links) = $module->getSystemLinks();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($albumLink, $links, 'Link not displayed "on access" with album');

	$gallery->setActiveUser($this->_userWithoutAlbum);
	$createLink['YourAlbum'] = array('text' => $module->translate('Your Album'),
	    'params' => array('controller' => 'useralbum.UserAlbum'));

	list($ret, $links) = $module->getSystemLinks();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($createLink, $links, 'Link not displayed "on access" without album');

	/* Create-when-user-created mode.. should only get link if album already exists */
	$ret = GalleryCoreApi::setPluginParameter('module', 'useralbum', 'create', 'immediate');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $links) = $module->getSystemLinks();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), $links, 'Link displayed "immediate" without album');

	$gallery->setActiveUser($this->_userWithAlbum);

	list($ret, $links) = $module->getSystemLinks();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($albumLink, $links, 'Link not displayed "immediate" with album');

	/* User with album should not get a link with homeLink off */
	$ret = GalleryCoreApi::setPluginParameter('module', 'useralbum', 'homeLink', 0);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $links) = $module->getSystemLinks();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), $links, 'Link displayed, but homeLink off');
    }

    function testUserAlbumTitle() {
	/* Check that album title is set from user fullname, or username if no fullname */
	list ($ret, $album) = GalleryCoreApi::loadEntitiesById($this->_userAlbumId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($this->_userWithAlbum->getFullName(), $album->getTitle(), 'fullname');

	list ($ret, $lockId) =
	    GalleryCoreApi::acquireWriteLock(array($this->_userWithoutAlbum->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_userWithoutAlbum->setFullName('');
	$this->_userWithoutAlbum->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = UserAlbumHelper::createUserAlbum($this->_userWithoutAlbum);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $albumId) = GalleryCoreApi::getPluginParameter(
	    'module', 'useralbum', 'albumId', $this->_userWithoutAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $album) = GalleryCoreApi::loadEntitiesById($albumId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals($this->_userWithoutAlbum->getUserName(),
			    $album->getTitle(), 'username');
    }
}
?>
