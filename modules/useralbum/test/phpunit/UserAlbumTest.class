<?php
/*
 * $RCSfile: UserAlbumTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.16 $ $Date: 2005/08/23 03:49:57 $
 * @package UserAlbum
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Test UserAlbum functionality
 *
 * @package UserAlbum
 * @subpackage PHPUnit
 */
class UserAlbumTest extends GalleryTestCase {

    function UserAlbumTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	/* Enable event listener (normally disabled for unit tests) */
	$this->_registerTestEventListener('GalleryEntity::save', new UserAlbumModule());

	$ret = $this->_markPluginParametersForCleanup('module', 'useralbum');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::setPluginParameter('module', 'useralbum', 'create', 'immediate');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'useralbum', 'view', 'allusers');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'useralbum', 'fullSize', '0');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_parentAlbum) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_parentAlbum);

	$ret = GalleryCoreApi::setPluginParameter('module', 'useralbum',
						  'targetLocation', $this->_parentAlbum->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::setPluginParameter('module', 'useralbum', 'loginRedirect', '1');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::setPluginParameter('module', 'useralbum', 'homeLink', '1');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_allUserGroupId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.allUserGroup');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testUserAlbum() {
	global $gallery;

	/* Create new user.. */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user);

	/* Retrieve the parent album's logical path */
	list($ret, $parentPath) = $this->_parentAlbum->fetchLogicalPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify user's album was created.. */
	list ($ret, $albumId) =
	    GalleryCoreApi::fetchItemIdByPath($parentPath . '/' . $user->getUserName());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $album) = GalleryCoreApi::loadEntitiesById($albumId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(GalleryUtilities::isA($album, 'GalleryAlbumItem'), 'album');
	$this->assertEquals($user->getId(), $album->getOwnerId(), 'owner');

	/* Verify permissions.. */
	list ($ret, $permissions) = GalleryCoreApi::fetchAllPermissionsForItem($albumId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$seenViewResizes = false;
	$seenViewSource = false;
	foreach ($permissions as $perm) {
	    if ($perm == array('userId' => 0, 'groupId' => $this->_allUserGroupId,
			       'permission' => 'core.viewResizes')) {
		$seenViewResizes = true;
	    } else if ($perm == array('userId' => 0, 'groupId' => $this->_allUserGroupId,
				      'permission' => 'core.viewSource')) {
		$seenViewSource = true;
	    }
	}
	$this->assert($seenViewResizes, sprintf('missing view resizes for all users: %d',
						 $this->_allUserGroupId));
	$this->assert(!$seenViewSource, sprintf('unexpected view source for all users: %d',
						$this->_allUserGroupId));

	/* Create a subalbum.. */
	list ($ret, $subalbum) =
	    $this->_createRandomAlbum($albumId, array('ownerId' => $user->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify login redirect.. */
	$event = GalleryCoreApi::newEvent('Gallery::Login');
	$event->setEntity($user);
	list ($ret, $result) = GalleryCoreApi::postEvent($event);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(array('controller' => 'useralbum.UserAlbum')),
			    $result, 'login redirect');

	$ret = GalleryCoreApi::setPluginParameter('module', 'useralbum', 'loginRedirect', '0');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify no login redirect.. */
	$event = GalleryCoreApi::newEvent('Gallery::Login');
	$event->setEntity($user);
	list ($ret, $result) = GalleryCoreApi::postEvent($event);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), $result, 'no login redirect');

	/* Verify system link.. */
	$gallery->setActiveUser($user);
	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'useralbum');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $links) = $module->getSystemLinks();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('YourAlbum' => array('text' => $module->translate('Your Album'),
			      'params' => array('view' => 'core.ShowItem', 'itemId' => $albumId))),
			    $links, 'system link');

	$ret = GalleryCoreApi::setPluginParameter('module', 'useralbum', 'homeLink', '0');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify no system link.. */
	list ($ret, $links) = $module->getSystemLinks();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), $links, 'no system link');
    }

    function testUserAlbumDeleteTarget() {
	list ($ret, $album) = $this->_createRandomAlbum($this->_parentAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::setPluginParameter('module', 'useralbum',
						  'targetLocation', $album->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::deleteEntityById($album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $targetLocation) =
	    GalleryCoreApi::getPluginParameter('module', 'useralbum', 'targetLocation');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $rootAlbum) =
		GalleryCoreApi::getPluginParameter('module', 'core', 'id.rootAlbum');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert($targetLocation == $rootAlbum,
		      'useralbum.targetLocation should equal core.id.rootAlbum');
    }

    function testUserAlbumDeleteUserAlbum() {
	/*
	 *  Verify that when an album is deleted, references to that album are
	 *  removed from the PluginParameterMap
	 */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user);

	list ($ret, $userAlbum) = GalleryCoreApi::getPluginParameter('module', 'useralbum',
								     'albumId', $user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!empty($userAlbum), 'User should have valid album');

	$ret = GalleryCoreApi::deleteEntityById($userAlbum);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $userAlbum) = GalleryCoreApi::getPluginParameter('module', 'useralbum',
								     'albumId', $user->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!isset($userAlbum), 'User album should be empty');
    }

    function testUserAlbumCollision() {
	$userString = 'useralbum-' . rand();
	$userName = 'testuser-' . $userString;

	/* Create album that will collide.. */
	list ($ret, $album) = $this->_createRandomAlbum($this->_parentAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = $album->rename($userName);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $parentPath) = $this->_parentAlbum->fetchLogicalPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create new user.. */
	list ($ret, $user) = $this->_createRandomUser($userString);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($user);

	/* Verify user's album was created with uniquified path.. */
	list ($ret, $albumId) =
	    GalleryCoreApi::fetchItemIdByPath($parentPath . '/' . $user->getUserName() . '_');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $album) = GalleryCoreApi::loadEntitiesById($albumId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(GalleryUtilities::isA($album, 'GalleryAlbumItem'), 'album');
	$this->assertEquals($user->getId(), $album->getOwnerId(), 'owner');
    }
}
?>
