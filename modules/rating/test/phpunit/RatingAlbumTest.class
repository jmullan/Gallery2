<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Rating
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Test RatingAlbum view
 *
 * @package Rating
 * @subpackage PHPUnit
 */
class RatingAlbumTest extends GalleryTestCase {

    function RatingAlbumTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp();
	GalleryCoreApi::requireOnce('modules/rating/classes/RatingHelper.class');

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$this->_markForCleanup($this->_album);

	for ($i = 1; $i <= 3; $i++) {
	    list ($ret, $this->_items[$i]) = $this->_createRandomDataItem($this->_album->getId());
	    if ($ret) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret);
	    }
	    list ($ret) = RatingHelper::rateItem($this->_items[$i]->getId(), 5 - $i,
						 $gallery->getActiveUserId());
	    if ($ret) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret);
	    }
	}

	list ($ret, $this->_view) = GalleryView::loadView('rating.RatingAlbum');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	GalleryCoreApi::requireOnce('modules/core/classes/GalleryTemplate.class');
	$this->_template =
	    new GalleryTemplate(dirname(dirname(dirname(dirname(dirname(__FILE__))))));

	$ret = $this->_markPluginParametersForCleanup('module', 'rating');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	foreach (array('minLimit' => '2.25', 'orderBy' => 'RatingSortOrder') as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'rating', $key, $value);
	    if ($ret) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret);
	    }
	}
    }

    function testLoadThemeAndSettingsForAlbum() {
	GalleryUtilities::putRequestVariable('limit', '4');

	list ($ret, $theme, $params, $item) = $this->_view->loadThemeAndParameters();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assert(GalleryUtilities::isA($theme, 'GalleryTheme'), 'theme');
	$this->assert(is_array($params), 'theme settings');
	$this->assert(GalleryUtilities::isA($item, 'GalleryDynamicAlbum'), 'item');
	$this->assert(!isset($item->parent), 'item parent');
    }

    function testLoadThemeAndSettingsForItem() {
	GalleryUtilities::putRequestVariable('limit', '3.6');
	GalleryUtilities::putRequestVariable('itemId', $this->_items[1]->getId());

	list ($ret, $theme, $params, $item) = $this->_view->loadThemeAndParameters();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assert(GalleryUtilities::isA($theme, 'GalleryTheme'), 'theme');
	$this->assert(is_array($params), 'theme settings');
	$this->assert(GalleryUtilities::isA($item, 'GalleryDataItem'), 'item');
	$this->assert(isset($item->parent), 'item parent');
	$this->assert(GalleryUtilities::isA($item->parent, 'GalleryDynamicAlbum'), 'parent type');
	$this->assertEquals(array('RatingAlbumView', 'getChildIds'),
			    $item->parent->getChildrenFunction, 'get children function');
    }

    function testLoadTemplateForAlbum() {
	global $gallery;
	$theme =& $this->_template->getVariableByReference('theme');
	$theme['actingUserId'] = $gallery->getActiveUserId();

	GalleryUtilities::putRequestVariable('limit', '3.45');

	list ($ret, $result) = $this->_view->loadTemplate($this->_template, $form = array());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(array('view' => 'rating.RatingAlbum', 'limit' => '3.45'),
			    $theme['pageUrl'], 'page url');
	$this->assert(in_array($this->_items[1]->getId(), $theme['allChildIds']), 'item 1');
	$this->assert(!in_array($this->_items[2]->getId(), $theme['allChildIds']), 'item 2');
	$this->assert(!in_array($this->_items[3]->getId(), $theme['allChildIds']), 'item 3');
    }

    function testLoadTemplateForItem() {
	list ($ret, $count) = GalleryCoreApi::fetchItemViewCount($this->_items[2]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals(0, $count, 'count before');

	GalleryUtilities::putRequestVariable('limit', '3');
	GalleryUtilities::putRequestVariable('itemId', $this->_items[2]->getId());

	list ($ret, $result) = $this->_view->loadTemplate($this->_template, $form = array());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$theme =& $this->_template->getVariableByReference('theme');
	$this->assertEquals(array('view' => 'rating.RatingAlbum', 'limit' => '3'),
			    $theme['pageUrl'], 'page url');

	list ($ret, $count) = GalleryCoreApi::fetchItemViewCount($this->_items[2]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals(1, $count, 'count after');
    }

    function testLoadTemplateForItemNoPermission() {
	$ret = GalleryCoreApi::removeItemPermissions($this->_items[1]->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	GalleryUtilities::putRequestVariable('limit', '4');
	GalleryUtilities::putRequestVariable('itemId', $this->_items[1]->getId());

	list ($ret, $result) = $this->_view->loadTemplate($this->_template, $form = array());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ShowItem', 'itemId' => $this->_getRootId())),
	    $result, 'redirect');
    }

    function testLimitTooLow() {
	GalleryUtilities::putRequestVariable('limit', '1.5');

	list ($ret, $result) = $this->_view->loadTemplate($this->_template, $form = array());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(
	    array('redirect' => array('view' => 'rating.RatingAlbum', 'limit' => '2.25')),
	    $result, 'redirect');
    }
}
?>
