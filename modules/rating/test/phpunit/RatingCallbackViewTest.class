<?php
/*
 * $RCSfile: RatingCallbackViewTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.2 $ $Date: 2006/01/10 04:41:54 $
 * @package Rating
 * @subpackage PHPUnit
 * @author Don Seiler <don@seiler.us>
 */

GalleryCoreApi::requireOnce('modules/rating/RatingCallback.inc');

/**
 * Test RatingCallback functionality
 *
 * @package Rating
 * @subpackage PHPUnit
 */
class RatingCallbackViewTest extends GalleryTestCase {

    function RatingCallbackViewTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	$this->_userId = $gallery->getActiveUserId();

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_album->getId(),
		'image/test', array(), __FILE__, 'GalleryPhotoItem');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_module) = GalleryCoreApi::loadPlugin('module', 'rating');
	if ($ret || !isset($this->_module)) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_view) = GalleryView::loadView('rating.RatingCallback');
	if ($ret || !isset($this->_view)) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

    }

    function testRenderImmediate() {
	$rating = rand(1, 5);

	GalleryUtilities::putRequestVariable('command', 'rate');
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('rating', $rating);

	ob_start();
	$ret = $this->_view->renderImmediate(array(), array());
	if ($ret) {
	    ob_end_clean();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$results = explode("\n", ob_get_contents());
	ob_end_clean();

	/* Item id */
	$this->assertEquals($this->_item->getId(), (int)$results[0]);

	/* New average rating */
	$this->assertEquals($rating, (int)$results[1]);

	/* User rating */
	$this->assertEquals($rating, (int)$results[3]);

	/* Vote count */
	$this->assertEquals(1, (int)$results[2]);
    }

    function testNoRatingPermissions() {
	$rating = rand(1, 5);

	GalleryUtilities::putRequestVariable('command', 'rate');
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('rating', $rating);

	ob_start();
	$ret = $this->_view->renderImmediate(array(), array());
	if ($ret) {
	    ob_end_clean();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$results = explode("\n", ob_get_contents());
	ob_end_clean();

	/* Item id */
	$this->assertEquals($this->_item->getId(), (int)$results[0]);

	/* New average rating */
	$this->assertEquals($rating, (int)$results[1], 'Seed average rating is incorrect.');

	/* User rating */
	$this->assertEquals($rating, (int)$results[3], 'Seed user rating is incorrect.');

	/* Vote count */
	$this->assertEquals(1, (int)$results[2], 'Seed vote count is incorrect.');

	/* Remove all permissions */
	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_item->getId(), $this->_userId, 'rating.view');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$newRating = rand(1, 5);

	GalleryUtilities::putRequestVariable('command', 'rate');
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('rating', $newRating);

	ob_start();
	$ret = $this->_view->renderImmediate(array(), array());
	if ($ret) {
	    ob_end_clean();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$results = explode("\n", ob_get_contents());
	ob_end_clean();

	/* Should be empty */
	$this->assert(empty($results[0]), 'Results not empty.'); 

	/* Nothing should be returned past first line */
	$this->assert(!isset($results[1]));
    }

    function testRatingPermissions() {
	$rating = rand(1, 5);

	GalleryUtilities::putRequestVariable('command', 'rate');
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('rating', $rating);

	ob_start();
	$ret = $this->_view->renderImmediate(array(), array());
	if ($ret) {
	    ob_end_clean();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$results = explode("\n", ob_get_contents());
	ob_end_clean();

	/* Item id */
	$this->assertEquals($this->_item->getId(), (int)$results[0]);

	/* New average rating */
	$this->assertEquals($rating, (int)$results[1], 'Seed average rating is incorrect.');

	/* User rating */
	$this->assertEquals($rating, (int)$results[3], 'Seed user rating is incorrect.');

	/* Vote count */
	$this->assertEquals(1, (int)$results[2], 'Seed vote count is incorrect.');

	/* Remove all permissions */
	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_item->getId(), $this->_userId, 'rating.view');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_item->getId(), $this->_userId, 'rating.add');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$newRating = rand(1, 5);

	GalleryUtilities::putRequestVariable('command', 'rate');
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());
	GalleryUtilities::putRequestVariable('rating', $newRating);

	ob_start();
	$ret = $this->_view->renderImmediate(array(), array());
	if ($ret) {
	    ob_end_clean();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$results = explode("\n", ob_get_contents());
	ob_end_clean();

	/* Item id */
	$this->assertEquals($this->_item->getId(), (int)$results[0]);

	/* New average rating */
	$this->assertEquals($newRating, (int)$results[1], 'Average rating is incorrect.');

	/* User rating */
	$this->assertEquals($newRating, (int)$results[3], 'User rating is incorrect.');

	/* Vote count (should be same since duplicate user votes ignored) */
	$this->assertEquals(1, (int)$results[2], 'Vote count is incorrect.');
    }

}
?>
