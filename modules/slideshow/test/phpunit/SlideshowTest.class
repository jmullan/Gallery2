<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Slideshow
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Test Slideshow functionality
 *
 * @package Slideshow
 * @subpackage PHPUnit
 *
 */
class SlideshowTest extends GalleryTestCase {

    function SlideshowTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    /**
     * Create an album for testing
     */
    function setUp() {
	parent::setUp();
	global $gallery;

	// Create a new subalbum and give AllUser group only core.view
	list ($ret, $album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $allUsersGroupId) =
	    $gallery->getModuleParameter('core', 'id.allUserGroup');
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryPermissionMap::removeMapEntry(
	    array('itemId' => $album->getId(), 'groupId' => $allUsersGroupId));
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryPermissionMap::addGroupPermission(
	    $album->getId(), $allUsersGroupId, 'core.view');
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	// Add some photos, with these derivatives:
	// 1:thumb  2:resize/thumb  3:resizes/thumb
	// 4:preferred/thumb 5:preferred/resize/thumb 6:preferred/resizes/thumb
	// 7:none  8:resize  9:preferred  10:preferred/resize
	$photoSizes = array(array('T'), array('R','T'), array('R','R2','T'),
	    array('P','T'), array('P','R','T'), array('P','R','R2','T'),
	    array(), array('R'), array('P'), array('P','R'));
	list ($ret, $lockId) = $gallery->acquireReadLock($album->getId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$photoData = array();
	$prefix = dirname(__FILE__).'/../../../core/test/data/test';
	for ($i = 0; $i < 10; $i++) {
	    list ($ret, $photoDatum) = $this->_addPhoto($album->getId(),
		  $prefix . (($i%4)+1) . '.gif', $i + 1, $photoSizes[$i]);
	    if ($ret->isError()) {
		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $photoData[] = $photoDatum;
	}
	$ret = $gallery->releaseLocks($lockId);

	list ($ret, $guestId) =
	    $gallery->getModuleParameter('core', 'id.anonymousUser');
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $module) = $gallery->loadModule('slideshow');
	if ($ret->isError() || empty($module)) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $view) = GalleryView::loadView('slideshow:Slideshow');
	if ($ret->isError() || empty($view)) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_album = $album;
	$this->_photoData = $photoData;
	$this->_view = $view;
	$this->_allUsersGroupId = $allUsersGroupId;
	$this->_adminId = $gallery->getActiveUserId();
	$this->_guestId = $guestId;
    }

    function _addPhoto($parentId, $imagePath, $index, $sizes) {
	list ($ret, $photo) =
	    GalleryFactory::newInstance('GalleryEntity', 'GalleryPhotoItem');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$ret = $photo->create($parentId, $imagePath,
			      GalleryUtilities::getMimeType($imagePath),
			      'testitem_' . time() . '.gif');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$photo->setTitle("Item #$index");
	$photo->setSummary("Summary $index");
	$photo->setDescription("Description $index");
	$ret = $photo->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$idData = array('id' => $photo->getId());
	if (in_array('P', $sizes)) {
	    // add preferred image, by rotating
	    list ($ret, $derivative) = GalleryFactory::newInstance(
		'GalleryEntity', 'GalleryDerivativeImage');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    $ret = $derivative->create($photo->getId(),
				       DERIVATIVE_TYPE_IMAGE_PREFERRED);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    $derivative->setDerivativeSourceId($photo->getId());
	    $derivative->setDerivativeMimeType($photo->getMimeType());
	    $ret = $derivative->mergeOperation('rotate', array(90));
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    $ret = $derivative->save();
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    $idData['preferred'] = $derivative->getId();
	}
	if (in_array('T', $sizes)) {
	    // add thumbnail
	    list ($ret, $idData['thumbnail']) = $this->_addDerivative($photo,
		'thumbnail', DERIVATIVE_TYPE_IMAGE_THUMBNAIL, 'thumbnail|150');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}
	if (in_array('R', $sizes)) {
	    // add one resize
	    list ($ret, $idData['resize']) = $this->_addDerivative($photo,
		'scale', DERIVATIVE_TYPE_IMAGE_RESIZE, 'scale|300');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}
	if (in_array('R2', $sizes)) {
	    // add another resize
	    list ($ret, $idData['resizes']) = $this->_addDerivative($photo,
		'scale', DERIVATIVE_TYPE_IMAGE_RESIZE, 'scale|600');
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}
	return array(GalleryStatus::success(), $idData);
    }

    function _addDerivative($photo, $toolkitType,
			    $derivativeType, $derivativeOperation) {
	list ($ret, $toolkit, $outputMimeType) =
	    GalleryToolkitHelper::getToolkitByOperation(
				  $photo->getMimeType(), $toolkitType);
	if ($ret->isError() || !isset($toolkit)) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list ($ret, $derivative) = GalleryFactory::newInstance(
				   'GalleryEntity', 'GalleryDerivativeImage');
	if ($ret->isError() || !isset($derivative)) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$ret = $derivative->create($photo->getId(), $derivativeType);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$derivative->setDerivativeSourceId($photo->getId());
	$derivative->setDerivativeOperations($derivativeOperation);
	$derivative->setDerivativeMimeType($outputMimeType);
	$ret = $derivative->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $derivative->getId());
    }

    /**
     * Delete the album that was used for testing
     */
    function tearDown() {
	global $gallery;
	$ret = $gallery->deleteEntityById($this->_album->getId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	parent::tearDown();
    }

    function _runTest($expectedResults) {
	global $gallery;
	$gallery->setActiveUserId($this->_guestId);
	list ($ret, $slideData) = $this->_view->buildSlideshow($this->_album);
	$this->assert(!$ret->isError() && isset($slideData),
	    'Generate slideshow data<br>' . $ret->getAsHtml());
	$this->assertEquals(count($expectedResults), count($slideData),
	    'Slideshow data size');
	$slideIds = array();
	foreach ($slideData as $slide) {
	    foreach (array('id','sourceId','sourceSerial') as $attribute) {
		$this->assert(isset($slide[$attribute]),
		    "Slideshow item missing $attribute attribute");
	    }
	    $this->assert(isset($expectedResults[$slide['id']]),
			  "Slide id " . $slide['id'] . " not expected");
	    // Verify source for this slide comes from expected derivative..
	    if (isset($expectedResults[$slide['id']]) &&
		isset($slide['sourceId'])) {
		$this->assertEquals(
		    $expectedResults[$slide['id']], $slide['sourceId'],
		    'Slide ' . $slide['id'] .  ' sourced from wrong id<br>' .
		    var_export($this->_photoData, TRUE));
	    }
	    $slideIds[] = $slide['id'];
	}
	$this->assertEquals(count($expectedResults),
	    count(array_intersect(array_keys($expectedResults), $slideIds)),
	    "Slideshow doesn't contain correct set of photo ids");
	$gallery->setActiveUserId($this->_adminId);
    }


    function testView() {
	// First test, only core.view permission:
	// see thumbnails (4 of the 10 have none)
	$this->_runTest(array(
	    $this->_photoData[0]['id'] => $this->_photoData[0]['thumbnail'],
	    $this->_photoData[1]['id'] => $this->_photoData[1]['thumbnail'],
	    $this->_photoData[2]['id'] => $this->_photoData[2]['thumbnail'],
	    $this->_photoData[3]['id'] => $this->_photoData[3]['thumbnail'],
	    $this->_photoData[4]['id'] => $this->_photoData[4]['thumbnail'],
	    $this->_photoData[5]['id'] => $this->_photoData[5]['thumbnail']));
    }

    function testViewResizes() {
	// core.viewResize permission:
	// see resize if available, thumb otherwise (2 have neither)
	$ret = GalleryPermissionMap::addGroupPermission(
			$this->_album->getId(), $this->_allUsersGroupId,
			'core.viewResizes', TRUE);
	$this->assert(!$ret->isError(), "Set viewResizes permission");
	$this->_runTest(array(
	    $this->_photoData[0]['id'] => $this->_photoData[0]['thumbnail'],
	    $this->_photoData[1]['id'] => $this->_photoData[1]['resize'],
	    $this->_photoData[2]['id'] => $this->_photoData[2]['resize'],
	    $this->_photoData[3]['id'] => $this->_photoData[3]['thumbnail'],
	    $this->_photoData[4]['id'] => $this->_photoData[4]['resize'],
	    $this->_photoData[5]['id'] => $this->_photoData[5]['resize'],
	    $this->_photoData[7]['id'] => $this->_photoData[7]['resize'],
	    $this->_photoData[9]['id'] => $this->_photoData[9]['resize']));
    }

    function testViewSource() {
	// core.viewSource permission: see full/preferred
	$ret = GalleryPermissionMap::removeGroupPermission(
			$this->_album->getId(), $this->_allUsersGroupId,
			'core.viewResizes', TRUE);
	$this->assert(!$ret->isError(), "Remove viewResizes permission");
	$ret = GalleryPermissionMap::addGroupPermission(
			$this->_album->getId(), $this->_allUsersGroupId,
			'core.viewSource', TRUE);
	$this->assert(!$ret->isError(), "Set viewSource permission");
	$this->_runTest(array(
	    $this->_photoData[0]['id'] => $this->_photoData[0]['id'],
	    $this->_photoData[1]['id'] => $this->_photoData[1]['id'],
	    $this->_photoData[2]['id'] => $this->_photoData[2]['id'],
	    $this->_photoData[3]['id'] => $this->_photoData[3]['preferred'],
	    $this->_photoData[4]['id'] => $this->_photoData[4]['preferred'],
	    $this->_photoData[5]['id'] => $this->_photoData[5]['preferred'],
	    $this->_photoData[6]['id'] => $this->_photoData[6]['id'],
	    $this->_photoData[7]['id'] => $this->_photoData[7]['id'],
	    $this->_photoData[8]['id'] => $this->_photoData[8]['preferred'],
	    $this->_photoData[9]['id'] => $this->_photoData[9]['preferred']));
    }

    function testViewAll() {
	// core.viewAll permission:
	// see resize if available, full/preferred otherwise
	$ret = GalleryPermissionMap::addGroupPermission(
			$this->_album->getId(), $this->_allUsersGroupId,
			'core.viewAll', TRUE);
	$this->assert(!$ret->isError(), "Set viewAll permission");
	$this->_runTest(array(
	    $this->_photoData[0]['id'] => $this->_photoData[0]['id'],
	    $this->_photoData[1]['id'] => $this->_photoData[1]['resize'],
	    $this->_photoData[2]['id'] => $this->_photoData[2]['resize'],
	    $this->_photoData[3]['id'] => $this->_photoData[3]['preferred'],
	    $this->_photoData[4]['id'] => $this->_photoData[4]['resize'],
	    $this->_photoData[5]['id'] => $this->_photoData[5]['resize'],
	    $this->_photoData[6]['id'] => $this->_photoData[6]['id'],
	    $this->_photoData[7]['id'] => $this->_photoData[7]['resize'],
	    $this->_photoData[8]['id'] => $this->_photoData[8]['preferred'],
	    $this->_photoData[9]['id'] => $this->_photoData[9]['resize']));
    }

    // test with links?
}

?>
