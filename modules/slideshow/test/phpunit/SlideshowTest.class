<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Slideshow
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Test Slideshow functionality
 *
 * @package Slideshow
 * @subpackage PHPUnit
 *
 */
class SlideshowTest extends GalleryTestCase {

    function SlideshowTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    /**
     *
     */
    function setUp() {
	parent::setUp();
	global $gallery;

	// Create a new subalbum and give AllUser group only core.view
	list ($ret, $album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $allUsersGroupId) =
	    $gallery->getModuleParameter('core', 'id.allUserGroup');
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryPermissionMap::removeMapEntry(
	    array('itemId' => $album->getId(), 'groupId' => $allUsersGroupId));
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryPermissionMap::addGroupPermission(
	    $album->getId(), $allUsersGroupId, 'core.view');
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	// Add some photos
	list ($ret, $lockId) = $gallery->acquireReadLock($album->getId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$photoIds = array();
	$prefix = dirname(__FILE__).'/../../../core/test/data/test';
	for ($i = 1; $i <= 4; $i++) {
	    list ($ret, $photoId) =
		$this->_addPhoto($album->getId(), "$prefix$i.gif", $i,
				 $allUsersGroupId, 'core.viewAll');
	    if ($ret->isError()) {
		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $photoIds[] = $photoId;
	}
	$ret = $gallery->releaseLocks($lockId);

	// Switch to anonymous user (parent::teardown will switch back)
	list ($ret, $guestId) =
	    $gallery->getModuleParameter('core', 'id.anonymousUser');
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$gallery->setActiveUserId($guestId);

	$this->_album = $album;
	$this->_photoIds = $photoIds;
    }

    function _addPhoto($parentId, $imagePath, $index, $groupId, $permission) {
	list ($ret, $photo) =
	    GalleryFactory::newInstance('GalleryEntity', 'GalleryPhotoItem');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$ret = $photo->create($parentId, $imagePath,
			      GalleryUtilities::getMimeType($imagePath),
			      'testitem_' . time() . '.gif');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$photo->setTitle("Item #$index");
	$photo->setSummary("Summary $index");
	$photo->setDescription("Description $index");
	$ret = $photo->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	// set permission
	$ret = GalleryPermissionMap::addGroupPermission(
			  $photo->getId(), $groupId, $permission);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	// add thumbnail
	list ($ret, $toolkit, $thumbMimeType) =
	    GalleryToolkitHelper::getToolkitByOperation(
				  $photo->getMimeType(), 'thumbnail');
	if ($ret->isError() || !isset($toolkit)) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list ($ret, $thumb) = GalleryFactory::newInstance(
				  'GalleryEntity', 'GalleryDerivativeImage');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$ret = $thumb->create($photo->getId(),
			      DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$thumb->setDerivativeSourceId($photo->getId());
	$thumb->setDerivativeOperations('thumbnail|150');
	$thumb->setDerivativeMimeType($thumbMimeType);
	$ret = $thumb->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $photo->getId());
    }

    /**
     *
     */
    function tearDown() {
	global $gallery;
	$ret = $gallery->deleteEntityById($this->_album->getId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	parent::tearDown();
    }

    function testSlideshow() {
	global $gallery;
	list ($ret, $module) = $gallery->loadModule('slideshow');
	$this->assert(!$ret->isError() && !empty($module), 'Load module');
	$this->assertEquals('1.0', $module->getVersion(), 'Module version');
	list ($ret, $view) = GalleryView::loadView('slideshow:Slideshow');
	$this->assert(!$ret->isError() && !empty($view), 'Load view');

	list ($ret, $slideData) = $view->buildSlideshow($this->_album);
	$this->assert(
	    !$ret->isError() && isset($slideData) && count($slideData) == 4,
	    'Generate slideshow data');
	$slideIds = array();
	for ($i = 0; $i < 4; $i++) {
	    $this->assert(isset($slideData[$i]), "Slideshow item $i missing");
	    foreach (array('id','src','href') as $attribute) {
		$this->assert(isset($slideData[$i][$attribute]),
		    "Slideshow item $i - missing $attribute attribute");
	    }
	    $slideIds[] = $slideData[$i]['id'];
	}
	$this->assert(count(array_intersect($this->_photoIds, $slideIds)) == 4,
	    "Slideshow doesn't contain correct set of photo ids");

	// Want a test album with all combinations of these item sizes:
	// full+thumb, full+resize+thumb, full+resizes+thumb, full+resize, full
	// with these view permissions:
	// none, view, view+viewResize, view+viewSource, viewAll
	// ..assert which items should be in slideshow(and which size)
    }

}

?>
