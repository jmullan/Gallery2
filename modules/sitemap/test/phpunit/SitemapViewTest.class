<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Sitemap
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

GalleryCoreApi::requireOnce('modules/sitemap/Sitemap.inc');

/**
 * Test Sitemap output
 *
 * @package Sitemap
 * @subpackage PHPUnit
 */
class SitemapViewTest extends GalleryTestCase {

    function SitemapViewTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;

	parent::setUp();

	$gallery->_phpVm = new SitemapViewTestVm();

	/* Create something to map */
	list ($ret, $this->_root) = $this->_createRandomAlbum(
	    $this->_getRootId(), array('modificationTimestamp' => 123456789));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$this->_markForCleanup($this->_root);

	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $this->_item[$i]) = $this->_createRandomDataItem($this->_root->getId());
	    if ($ret) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret);
	    }
	}

	$this->_view = new SiteMapView();

	$gallery->_urlGenerator = new SitemapViewTestUrlGenerator();
    }

    function testRenderSitemap() {
	global $gallery;
	$platform =& $gallery->getPlatform();

	ob_start();
	$ret = $this->_view->renderSitemap($this->_root->getId());
	if ($ret) {
	    ob_end_clean();
	    return $this->failWithStatus($ret);
	}

	$results = ob_get_contents();
	ob_end_clean();

	$expected =
	    "Header: Content-type: application/xhtml+xml\n" .
	    "<?xml version='1.0' encoding='UTF-8'?>\n" .
	    "<urlset xmlns=\"http://www.google.com/schemas/sitemap/0.84\" " .
	    "xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" " .
	    "xsi:schemaLocation=\"http://www.google.com/schemas/sitemap/0.84 " .
	    "http://www.google.com/schemas/sitemap/0.84/sitemap.xsd\">\n" .
	    sprintf(
		"<url><loc>url:%d</loc><lastmod>2009-02-13T23:31:30+00:00</lastmod></url>\n",
		$this->_root->getId()) .
	    sprintf(
		"<url><loc>url:%d</loc><lastmod>2009-02-13T23:31:30+00:00</lastmod></url>\n",
		$this->_item[0]->getId()) .
	    sprintf(
		"<url><loc>url:%d</loc><lastmod>2009-02-13T23:31:30+00:00</lastmod></url>\n",
		$this->_item[1]->getId()) .
	    sprintf(
		"<url><loc>url:%d</loc><lastmod>2009-02-13T23:31:30+00:00</lastmod></url>\n",
		$this->_item[2]->getId()) .
	    "</urlset>";

	$this->assertEquals(split("\n", $expected),
			    split("\n", $results));
    }

    function _listing($entity) {
	return '';
    }
}

class SitemapViewTestUrlGenerator {
    function generateUrl($params) {
	return sprintf('url:%d', $params['itemId']);
    }
}

GalleryCoreApi::requireOnce('modules/core/classes/GalleryPhpVm.class');

class SitemapViewTestVm extends GalleryPhpVm {
    function header($string) {
	print "Header: $string\n";
    }

    function time() {
	return 1234567890;
    }
}
?>
