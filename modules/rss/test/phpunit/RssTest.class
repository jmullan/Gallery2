<?php
/*
 * $RCSfile: RssTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.1 $ $Date: 2006/02/09 09:47:58 $
 * @package Rss
 * @subpackage PHPUnit
 * @author Pierre-Luc Paour
 */

GalleryCoreApi::requireOnce('modules/rss/classes/RssMapHelper.class');

/**
 * Test Rss functionality
 *
 * @package Rss
 * @subpackage PHPUnit
 *
 */
class RssTest extends GalleryTestCase {

    var $_feedsToDelete;

    function RssTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	$this->_feedsToDelete = array();

	$ret = $this->_markPluginParametersForCleanup('module', 'rss');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	parent::tearDown();

	if (!empty($this->_feedsToDelete)) {
	    foreach ($this->_feedsToDelete as $name) {
		$ret = RssMapHelper::deleteFeed($name);
		if ($ret) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
	    }
	}
    }

    function testDeleteItem() {
	/* The event listener is deactivated during unit tests, register it */
	GalleryCoreApi::registerEventListener('GalleryEntity::delete', new RssModule());

	/* create an album */
	list ($ret, $album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* create a test feed */
	$name = 'test'.rand();
	$params = array('itemId' => $album->getId());
	$ret = RssMapHelper::createFeed($name, $params);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete album: deletes sub-item and aliases */
	$ret = GalleryCoreApi::deleteEntityById($album->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* check that the feed has been deleted */
	list($ret, $feed) = RssMapHelper::fetchFeed($name);
	/* we expect an error */
	$this->assert($ret);
	$this->assert($ret->getErrorCode(), ERROR_MISSING_OBJECT);
    }
}
?>
