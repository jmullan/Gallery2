<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package RSS
 * @author Jonatan Heyman <http://heyman.info>
 * @author Pierre-Luc Paour
 * @author Daniel Grund <http://www.photogrund.nl>
 */

/**
 * @package RSS
 * @subpackage Classes
 */
class RssGenerator {
    /**
     * An array of all the items (in the RSS sense of the term) in the feed
     *
     * @var array $_items
     * @access private
     */
    var $_items = array();

    /**
     * An array of global properties for the feed
     *
     * @var array $_properties
     * @access private
     */
    var $_properties = array();

    /**
     * Add an item to the RSS feed that will be generated
     *
     * @param array item properties array
     * @param string optional key for the item array
     */
    function addItem($properties, $key='') {
	/*
	 * create new item
	 * remove bb tags and convert < and > to html codes
	 */
	$properties = $this->sanitizeStrings($properties);

	/*
	 * add the new item to our items array
	 */
	if ($key == '') {
	    $this->_items[] = $properties;
	} else {
	    $this->_items[$key] = $properties;
	}
    }

    /**
     * Function to set the items array that will be used when generated the feed
     *
     * @param array items array
     */
    function setItems($items) {
	$this->_items = $items;
    }

    /**
     * Add a channel property to the feed that will be generated
     *
     * @param string property name
     * @param string property value
     */
    function addProperty($name, $value) {
	$this->_properties[$name] = $value;
    }

    /**
     * Set the channel properties of the feed that will be generated
     *
     * @param array properties
     */
    function setProperties($properties) {
	$this->_properties = $properties;
    }

    /**
     * Change the order of the items in the $_items array
     * (useful if $key variable is used when items are added)
     *
     * @param order Can either be ASC ort DESC
     */
    function sortItems($order) {
	if ($order == 'ASC') {
	    ksort($this->_items);
	} elseif ($order == 'DESC') {
	    krsort($this->_items);
	}
    }

    /**
     * Removes all items except the first $count items
     *
     * @param int count
     */
    function sliceItems($count) {
	$this->_items = array_slice($this->_items, 0, $count);
    }

    /**
     * Remove BBtags and replace < and > with html code in all array elements that are strings and
     * the elements that are strings of all sub arrays etc. (recursive)
     *
     * @param either a string or an array of strings to be sanitized
     * @return sanitized string or array of strings
     */
    function sanitizeStrings($arr) {
	if (is_array($arr)) {
	    $newarr = array();
	    foreach ($arr as $key => $value) {
		$newarr[$key] = $this->sanitizeStrings($value);
	    }
	    return $newarr;
	} else if (is_string($arr)) {
	    return GalleryUtilities::markup($arr);
	} else {
	    return $arr;
	}
    }

    /**
     * Generate the RSS data string of the items added by addItem()
     *
     * @param string the rss version number
     * @return string rss stream
     */
    function generate($version) {
	switch ($version) {
	case '0.91':
	    return $this->generate091();
	    break;
	case '2.0':
	    return $this->generate200();
	    break;
	}
    }

    /**
     * Generate RSS 0.91 data
     *
     * @return string rss stream
     */
    function generate091() {
	global $gallery;
	
	if (!isset($this->_properties['title']) ||
	    !isset($this->_properties['link']) ||
	    !isset($this->_properties['description']) ||
	    !count($this->_items))
	    return '';

	$linefeed = $gallery->getPlatform()->getLineEnding();

	$data = '<?xml version="1.0"?>' . $linefeed .
	    '<!DOCTYPE rss SYSTEM "http://my.netscape.com/publish/formats/rss-0.91.dtd">' .
	    $linefeed . '<rss version="0.91"><channel>' . $linefeed .
	    '<title>' . $this->_properties['title'] . '</title>' . $linefeed .
	    '<link>' . $this->_properties['link'] . '</link>' . $linefeed .
	    '<description>' . $this->_properties['description'] . '</description>' . $linefeed .
	    (isset($this->_properties['language']) ? '<language>' . $this->_properties['language'] .
		'</language>' : '') . $linefeed .
	    (!empty($this->_properties['copyright']) ?
		'<copyright>' . $this->_properties['copyright'] . '</copyright>' : '');

	if (isset($this->_properties['webmaster'])) {
	    $data .= '<webMaster>' . $this->_properties . '</webMaster>'. $linefeed ;
	}

	if (isset($this->_properties['image'])) {
	    $data .= '<image>' . $linefeed .
		' <title>' . $this->_properties['image']['title'] . '</title>' . $linefeed .
		' <link>' . $this->_properties['image']['link'] . '</link>' . $linefeed .
		' <url>' . $this->_properties['image']['url'] . '</url>' . $linefeed .
		'</image>'.$linefeed ;
	}

	foreach ($this->_items as $item) {
	    if (!isset($item['title']))	return "";

	    $data .= '<item>' . $linefeed .
		' <title>' . $item['title'] . '</title>' . $linefeed .
		' <link>' . $item['link'] . '</link>' . $linefeed .
		' <description>' . $item['description'] . '</description>' . $linefeed .
		'</item>'. $linefeed;
	}

	$data .= '</channel>'. $linefeed.'</rss>';

	return $data;
    }

    /**
     * Generate RSS 2.0 data
     *
     * @return string rss stream
     */
    function generate200() {
	global $gallery;
	
	$linefeed = $gallery->getPlatform()->getLineEnding();

	$data = '<rss version="2.0">'.$linefeed.'<channel>' . $linefeed .
	    '<title>' . $this->_properties['title'] . '</title>' . $linefeed .
	    '<link>' . $this->_properties['link'] . '</link>' . $linefeed .
	    '<description>' . $this->_properties['description'] . '</description>' . $linefeed .
	    (isset($this->_properties['language']) ?
		'<language>' . $this->_properties['language'] . '</language>' . $linefeed  : '') .
	    (!empty($this->_properties['copyright']) ?
		'<copyright>' . $this->_properties['copyright'] . '</copyright>'. $linefeed  : '') .
	    (!empty($this->_properties['category']) ?
		'<category>' . $this->_properties['category'] . '</category>'. $linefeed  : '') .
	    (isset($this->_properties['generator']) ?
		'<generator>' . $this->_properties['generator'] . '</generator>'. $linefeed  : '') .
	    (isset($this->_properties['lastBuildDate']) ?
		'<lastBuildDate>' .
		$this->_properties['lastBuildDate'] . '</lastBuildDate>'. $linefeed  : '') .
	    (isset($this->_properties['ttl']) ?
		'<ttl>' . $this->_properties['ttl'] . '</ttl>'. $linefeed : '') .
	    (isset($this->_properties['cloud']) ?
		'<cloud domain="' . $this->_properties['cloud']['domain'] .
		'" port="' . $this->_properties['cloud']['port'] .
		'" path="' . $this->_properties['cloud']['path'] .
		'" registerProcedure="' . $this->_properties['cloud']['registerProcedure'] .
		'" protocol="' . $this->_properties['cloud']['protocol'] . '" />' . $linefeed : '')
	    . (isset($this->_properties['image']) ?
		'<image><url>' . $this->_properties['image']['url'] . '</url>' . $linefeed .
		' <title>' . $this->_properties['image']['title'] . '</title>' . $linefeed .
		' <link>' . $this->_properties['image']['link'] . '</link></image>' : '');

	foreach ($this->_items as $item) {
	    if (!isset($item['title']) || !isset($item['link']) || !isset($item['description']))
		return 'Error! title, link or description is not set for an item.';

	    $data .= '<item>' . $linefeed .
		' <title>' . $item['title'] . '</title>' . $linefeed .
		' <link>' . $item['link'] . '</link>' . $linefeed .
		' <guid isPermaLink="false">' . $item['link'] . '</guid>' . $linefeed .
		' <description><![CDATA[' . $item['description'] . ']]></description>' . $linefeed;

	    if (isset($item['author']))
		$data .= ' <author>' . $item['author'] . '</author>' . $linefeed;
	    if (isset($item['category']))
		$data .= ' <category>' . $item['category'] . '</category>' . $linefeed;
	    if (isset($item['comments']))
		$data .= ' <comments>' . $item['comments'] . '</comments>' . $linefeed;
	    if (isset($item['enclosure']))
		$data .= ' <enclosure url="' . $item['enclosure']['url'] . '" length="' .
		    $item['enclosure']['length'] . '" type="' .
		    $item['enclosure']['type'] . '" />' . $linefeed;
	    if (isset($item['guid']))
		$data .= ' <guid>' . $item['guid'] . '</guid>' . $linefeed;
	    if (isset($item['pubDate']))
		$data .= ' <pubDate>' . $item['pubDate'] . '</pubDate>' . $linefeed;
	    if (isset($item['source']))
		$data .= ' <source>' . $item['source'] . '</source>' . $linefeed;
	    $data .= '</item>'. $linefeed;
	}

	$data .= '</channel>'. $linefeed.'</rss>';
	return $data;
    }
}
?>
