<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * @version $Revision$ $Date$
 * @package Comment
 * @subpackage UserInterface
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * This controller will handle the changes made to a comment
 *
 * @package Comment
 * @subpackage UserInterface
 */
class EditCommentController extends GalleryController {

    /**
     * @see GalleryController::handleRequest()
     */
    function handleRequest($form) {
	global $gallery;

	list ($itemId, $commentId) = GalleryUtilities::getRequestVariables('itemId', 'commentId');

	/* Make sure we have permission to edit a comment */
	$ret = GalleryUserHelper::assertHasItemPermission($itemId, 'comment.edit');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$status = array();
	$error = array();
	if (isset($form['action']['save'])) {
	    /* Edit the comment */
	    list ($ret, $comment) = $gallery->loadEntitiesById($commentId);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    /* Make sure that the comment<->parent relationship is right */
	    if ($comment->getParentId() != $itemId) {
		return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null);
	    }

	    /* Verify the input parameters */
	    if (empty($form['commenterName'])) {
		$error[] = 'form[error][commenterName][missing]';
	    } else {
		list ($ret, $commenter) = GalleryUserHelper::fetchUserByUsername($form['commenterName']);
		if ($ret->isError()) {
		    $error[] = 'form[error][commenterName][invalid]';
		}
	    }

	    $longDate = null;
	    if (empty($form['date'])) {
		$error[] = 'form[error][date][missing]';
	    } else {
		$longDate = strtotime($form['date']);
		if ($longDate == -1) {
		    $error[] = 'form[error][invalidDate]';
		}
	    }

	    if (empty($form['subject'])) {
		$error[] = 'form[error][subject][missing]';
	    }

	    if (empty($form['comment'])) {
		$error[] = 'form[error][comment][missing]';
	    }

	    if (empty($error)) {
		list ($ret, $lockId) = $gallery->acquireWriteLock(array($comment->getId()));
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}

		list ($ret, $comment) = $comment->refresh();
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}

		$comment->setCommenterId($commenter->getId());
		$comment->setHost($form['host']);
		$comment->setSubject($form['subject']);
		$comment->setComment($form['comment']);
		$comment->setDate($longDate);
		$ret = $comment->save();
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}

		$ret = $gallery->releaseLocks($lockId);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}

		$status['changed'] = 1;
		$redirect['view'] = 'core:ItemAdmin';
		$redirect['subView'] = 'comment:CommentChangeConfirmation';
		$redirect['itemId'] = (int)$itemId;
	    }
	} else if (isset($form['action']['cancel'])) {
	    /* Where to go on a cancel?  Go to item admin.*/
	    $redirect['view'] = 'core:ItemAdmin';
	    $redirect['itemId'] = (int)$itemId;
	}

	if (!empty($redirect)) {
	    /* Redirect back to the confirmation page by default */
	    $results['return'] = 1;
	    $results['redirect'] = $redirect;
	} else {
	    /* Stay on the same page */
	    $results['delegate']['view'] = 'core:ItemAdmin';
	    $results['delegate']['subView'] = 'comment:EditComment';
	}
	$results['status'] = $status;
	$results['error'] = $error;

	return array(GalleryStatus::success(), $results);
    }
}

/**
 * This view shows a form to edit a comment
 *
 * @package Comment
 * @subpackage UserInterface
 *
 */
class EditCommentView extends GalleryView {

    /**
     * @see GalleryView::loadTemplate
     */
    function loadTemplate(&$template, &$form) {
	global $gallery;

	/* Load our item */
	list ($ret, $item) = $this->_getItem();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Make sure we have permission to edit a comment */
	$ret = GalleryUserHelper::assertHasItemPermission($item->getId(), 'comment.edit');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$commentId = GalleryUtilities::getRequestVariables('commentId');

	/* Load the specific comment */
	list ($ret, $comment) = $gallery->loadEntitiesById($commentId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	/* Make sure the comment is associated with the item */
	if ($comment->getParentId() != $item->getId()) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__), null);
	}

	/* Associate the commenter's info */
	$commenterId = $comment->getCommenterId();
	list ($ret, $commenter) = $gallery->loadEntitiesById($commenterId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if ($form['formName'] != 'EditComment') {
	    $form['commenterName'] = $commenter->getUserName();
	    $form['host'] = $comment->getHost();
	    $form['comment'] = $comment->getComment();
	    $form['subject'] = $comment->getSubject();
	    $form['formName'] = 'EditComment';

	    // XXX: this needs internationalization
	    $form['date'] = strftime('%D %T', $comment->getDate());
	}

	$EditComment['comment'] = $comment->getMemberData();

	$template->setVariable('EditComment', $EditComment);
	$template->setVariable('controller', 'comment:EditComment');
	
	return array(GalleryStatus::success(),
		     array('body' => 'modules/comment/templates/EditComment.tpl'));
    }
}
?>
