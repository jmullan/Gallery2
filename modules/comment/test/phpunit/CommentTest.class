<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test Comment functionality
 *
 * @package Comment
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 * @version $Revision$
 */
class CommentTest extends GalleryTestCase {

    function CommentTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_album);

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	/* Create 4 comments.  The 4th one is unpublished. */
	for ($i = 0; $i < 4; $i++) {
	    list ($ret, $this->_comment[$i]) =
		GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryComment');
	    if ($ret) {
		return $ret;
	    }

	    $this->assert(isset($this->_comment[$i]), 'Missing comment instance');
	    $this->_comment[$i]->create($this->_item->getId());
	    $this->_comment[$i]->setCommenterId($gallery->getActiveUserId());
	    $this->_comment[$i]->setHost('127.0.0.1');
	    $this->_comment[$i]->setComment('this is a test comment #' . $i);
	    $this->_comment[$i]->setDate(time()+$i);
	    if ($i == 3) {
		$this->_comment[$i]->setPublishStatus(COMMENT_PUBLISH_STATUS_UNPUBLISHED);
	    }
	    $ret = $this->_comment[$i]->save();
	    if ($ret) {
		return $ret;
	    }
	}
    }

    function testFetchComments() {
	list ($ret, $comments) =
	    GalleryCommentHelper::fetchComments($this->_item->getId(), 2, ORDER_ASCENDING);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array($this->_comment[0],
				  $this->_comment[1]), $comments);
    }

    function testFetchCommentCounts() {
	list ($ret, $counts) =
	    GalleryCommentHelper::fetchCommentCounts(array($this->_item->getId()));
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(3, $counts[$this->_item->getId()], 'Count is wrong');
    }

    function testFetchAllComments() {
	global $gallery;
	list ($ret, $item2) = $this->_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::removeItemPermissions($item2->getId());
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $item2->getId(), $gallery->getActiveUserId(), 'core.all');
	if ($ret) {
	    return $ret;
	}
	list ($ret, $everybodyGroupId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.everybodyGroup');
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addGroupPermission(
	    $this->_item->getId(), $everybodyGroupId, 'comment.view');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $comment) =
	    GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryComment');
	if ($ret) {
	    return $ret;
	}
	$this->assert(isset($comment), 'Missing comment instance');
	$comment->create($item2->getId());
	$comment->setCommenterId($gallery->getActiveUserId());
	$comment->setHost('127.0.0.1');
	$comment->setComment('this is a test comment');
	$comment->setDate(time() + 5);
	$ret = $comment->save();
	if ($ret) {
	    return $ret;
	}

	list ($ret, $comments) = GalleryCommentHelper::fetchAllComments(
	    $this->_album->getId(), 3, null, ORDER_DESCENDING);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(array($comment, $this->_comment[2], $this->_comment[1]), $comments);

	$this->_becomeGuestUser();

	list ($ret, $comments) = GalleryCommentHelper::fetchAllComments($this->_album->getId());
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(array($this->_comment[0], $this->_comment[1], $this->_comment[2]),
			    $comments, 'guest');

	list ($ret, $comments) = GalleryCommentHelper::fetchAllComments(
	    $this->_album->getId(), 4, null, ORDER_ASCENDING, null);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(array($this->_comment[0], $this->_comment[1],
				  $this->_comment[2], $this->_comment[3]),
			    $comments, 'all publish status types');

	list ($ret, $comments) =
	    GalleryCommentHelper::fetchAllComments($this->_album->getId(), 2, 2, ORDER_DESCENDING);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(array($this->_comment[0]), $comments, 'guest/offset');

	/* This multiroot setting used to break query */
	$gallery->setConfig('breadcrumbRootId', $this->_album->getId());
	list ($ret, $comments) = GalleryCommentHelper::fetchAllComments($this->_album->getId());
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(array($this->_comment[0], $this->_comment[1], $this->_comment[2]),
			    $comments, 'multiroot');
    }

    function testGetItemSummaries() {
	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'comment');
	if ($ret) {
	    return $ret;
	}
	$itemId = $this->_item->getId();
	/* Verify we get a non empty item summary for the item */
	$permissions[$itemId]['comment.view'] = 1;
	$permissions[$itemId]['core.view'] = 1;
	$unused = null;
	list ($ret, $content) =
	    $module->getItemSummaries(array($this->_item), $permissions, $unused);
	if ($ret) {
	    return $ret;
	}
	$this->assert(isset($content[$itemId]) && !empty($content[$itemId]),
		      'did not get item summary');

	/* Get the item summary again, but without having the permissions */
	unset($content);
	list ($ret, $content) = $module->getItemSummaries(array($this->_item),
							  array($itemId => array()), $unused);
	if ($ret) {
	    return $ret;
	}
	$this->assert(!isset($content[$itemId]), 'got an item summary');
    }

    function testCreateModifyAndDeleteComment() {
	global $gallery;

	/* Create a comment */
	list ($ret, $comment) =
	    GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryComment');
	if ($ret) {
	    return $ret;
	}
	$this->assert(isset($comment), 'Missing comment instance');
	$comment->create($this->_item->getId());
	$comment->setCommenterId($gallery->getActiveUserId());
	$comment->setHost('127.0.0.1');
	$comment->setComment('this is a test comment');
	$comment->setDate(time());
	$ret = $comment->save();
	if ($ret) {
	    return $ret;
	}

	/* Modify it */
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($comment->getId());
	if ($ret) {
	    return $ret;
	}

	$comment->setComment('foo bar');
	$ret = $comment->save();
	if ($ret) {
	    return $ret;
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $ret;
	}

	/* Delete it */
	$ret = GalleryCoreApi::deleteEntityById($comment->getId(), 'GalleryComment');
	if ($ret) {
	    return $ret;
	}
    }

    /* Verify that the comments are deleted if the commenter is deleted */
    function testDeleteCommentsOnDeleteUserEvent() {
	global $gallery;

	/* Create a user that we can delete */
	list ($ret, $user) = $this->_createRandomUser();
	if ($ret) {
	    return $ret;
	}

	/* Create a few comments */
	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $myComment[$i]) =
		GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryComment');
	    if ($ret) {
		return $ret;
	    }

	    $this->assert(isset($myComment[$i]), 'Missing comment instance');
	    $myComment[$i]->create($this->_item->getId());
	    $myComment[$i]->setCommenterId($user->getId());
	    $myComment[$i]->setHost('127.0.0.1');
	    $myComment[$i]->setComment('my comment #' . $i);
	    $myComment[$i]->setDate(time()+$i);
	    $ret =$myComment[$i]->save();
	    if ($ret) {
		return $ret;
	    }
	}

	/* Assert that everything is as expected before executing the test */
	list ($ret, $comments) = GalleryCommentHelper::fetchComments(
	    $this->_item->getId(), null, ORDER_ASCENDING, null);
	if ($ret) {
	    return $ret;
	}
	$otherCommentsCount = count($this->_comment);
	$this->assertEquals($otherCommentsCount + 3, count($comments),
			    'nr of comments before the test');
	foreach ($comments as $comment) {
	    $commentsById[$comment->getId()] = $comment;
	}
	foreach ($myComment as $comment) {
	    $this->assertEquals($commentsById[$comment->getId()]->getCommenterId(), $user->getId(),
				'commenterId (user) wrong before the test');
	}
	foreach ($this->_comment as $comment) {
	    $this->assertEquals($commentsById[$comment->getId()]->getCommenterId(),
				$this->_item->getOwnerId(),
				'commenterId (admin) wrong before the test');
	}

	/* The event listener is deactivated during unit tests, register it */
	$listener = new GalleryCommentHelper();
	$this->_registerTestEventListener('GalleryEntity::delete', $listener);

	/* Delete the user (execute the test) */
	$ret = GalleryCoreApi::deleteEntityById($user->getId(), 'GalleryUser');
	if ($ret) {
	    return $ret;
	}

	/* Verify that all comments by this user are gone */
	list ($ret, $comments) = GalleryCommentHelper::fetchComments($this->_item->getId());
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(3, count($comments), 'nr of comments after the test');
	foreach ($comments as $comment) {
	    $this->assertEquals($this->_item->getOwnerId(), $comment->getCommenterId(),
				'commenterId wrong after the test');
	}
    }

    function testFetchCommentsWithPublishStatus() {
	list ($ret, $comments) = GalleryCommentHelper::fetchComments(
		$this->_item->getId(), 2, ORDER_ASCENDING, COMMENT_PUBLISH_STATUS_UNPUBLISHED);
	if ($ret) {
	    return $ret;
	}

	$this->assertEquals(array($this->_comment[3]), $comments);
    }

    function testFetchAllCommentsWithPublishStatus() {
	list ($ret, $comments) = GalleryCommentHelper::fetchAllComments(
	    $this->_album->getId(), 3, null, ORDER_DESCENDING, COMMENT_PUBLISH_STATUS_UNPUBLISHED);
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(array($this->_comment[3]), $comments);
    }

    function testSaveCommentChecksWithAkismetWhenAkismetActive() {
	$ret = $this->_markPluginParametersForCleanup('module', 'comment');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $akismetActive) =
	    GalleryCoreApi::setPluginParameter('module', 'comment', 'akismet.active', 1);
	if ($ret) {
	    return $ret;
	}

	$helper = new CommentTest_GalleryCommentHelper_MockCheckWithAkismet();
	$event = new GalleryEvent();
	$event->setEventName('GalleryEntity::save');
	$event->setEntity(new GalleryComment());
	$helper->handleEvent($event);

	$this->assert($helper->wasCalled('checkWithAkismet'));
    }

    function testSaveCommentDoesntCheckWithAkismetWhenAkismetIsInactive() {
	$ret = $this->_markPluginParametersForCleanup('module', 'comment');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $akismetActive) =
	    GalleryCoreApi::setPluginParameter('module', 'comment', 'akismet.active', 0);
	if ($ret) {
	    return $ret;
	}

	$helper = new CommentTest_GalleryCommentHelper_MockCheckWithAkismet();
	$event = new GalleryEvent();
	$event->setEventName('GalleryEntity::save');
	$event->setEntity(new GalleryComment());
	$helper->handleEvent($event);

	$this->assert(!$helper->wasCalled('checkWithAkismet'));
    }

    function testSaveCommentDoesntCheckWithAkismetWhenListenerIsDisabled() {
	$ret = $this->_markPluginParametersForCleanup('module', 'comment');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $akismetActive) =
	    GalleryCoreApi::setPluginParameter('module', 'comment', 'akismet.active', 0);
	if ($ret) {
	    return $ret;
	}

	GalleryCommentHelper::setAkismetSaveListenerSwitch(false);

	$helper = new CommentTest_GalleryCommentHelper_MockCheckWithAkismet();
	$event = new GalleryEvent();
	$event->setEventName('GalleryEntity::save');
	$event->setEntity(new GalleryComment());
	$helper->handleEvent($event);

	$this->assert(!$helper->wasCalled('checkWithAkismet'));

	GalleryCommentHelper::setAkismetSaveListenerSwitch(true);
    }

    function testCheckWithAkismet_NewSpamComment() {
	$comment = new GalleryComment();
	$comment->setPublishStatus(COMMENT_PUBLISH_STATUS_PUBLISHED);
	$comment->setPersistentFlag(STORAGE_FLAG_NEWLY_CREATED);
	$akismet = new CommentTest_MockAkismetApi();
	$akismet->setReturnFor('checkComment', array(null, true));
	$ret = GalleryCommentHelper::checkWithAkismet($comment, $akismet);
	if ($ret) {
	    return $ret;
	}

	$this->assert($akismet->wasCalled('checkComment'));
	$this->assertEquals(COMMENT_PUBLISH_STATUS_SPAM, $comment->getPublishStatus());
    }

    function testCheckWithAkismet_NewNonSpamComment() {
	$comment = new GalleryComment();
	$comment->setPublishStatus(COMMENT_PUBLISH_STATUS_PUBLISHED);
	$comment->setPersistentFlag(STORAGE_FLAG_NEWLY_CREATED);
	$akismet = new CommentTest_MockAkismetApi();
	$akismet->setReturnFor('checkComment', array(null, false));
	$ret = GalleryCommentHelper::checkWithAkismet($comment, $akismet);
	if ($ret) {
	    return $ret;
	}

	$this->assert($akismet->wasCalled('checkComment'));
	$this->assertEquals(COMMENT_PUBLISH_STATUS_PUBLISHED, $comment->getPublishStatus());
    }

    function testCheckWithAkismet_MarkedAsSpam() {
	$comment = new GalleryComment();
	$comment->_persistentStatus['originalValue']['publishStatus'] =
	    COMMENT_PUBLISH_STATUS_PUBLISHED;
	$comment->setPublishStatus(COMMENT_PUBLISH_STATUS_SPAM);
	$akismet = new CommentTest_MockAkismetApi();
	$akismet->setReturnFor('submitSpam', null);
	$ret = GalleryCommentHelper::checkWithAkismet($comment, $akismet);
	if ($ret) {
	    return $ret;
	}

	$this->assert($akismet->wasCalled('submitSpam'));
    }

    function testCheckWithAkismet_MarkedAsHam() {
	$comment = new GalleryComment();
	$comment->_persistentStatus['originalValue']['publishStatus'] = COMMENT_PUBLISH_STATUS_SPAM;
	$comment->setPublishStatus(COMMENT_PUBLISH_STATUS_PUBLISHED);
	$akismet = new CommentTest_MockAkismetApi();
	$akismet->setReturnFor('submitHam', null);
	$ret = GalleryCommentHelper::checkWithAkismet($comment, $akismet);
	if ($ret) {
	    return $ret;
	}

	$this->assert($akismet->wasCalled('submitHam'));
    }
    
    function testGetLatestCommentTime() {
	list ($ret, $commentTime) = GalleryCommentHelper::getLatestCommentTime('301.302.303.304');
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals(0, $commentTime, 'No comments');
	
	list ($ret, $commentTime) = GalleryCommentHelper::getLatestCommentTime('127.0.0.1');
	if ($ret) {
	    return $ret;
	}
	$this->assertEquals($this->_comment[3]->getDate(), $commentTime, 'Comment 4');
    }
}

class CommentTest_MockAkismetApi {
    function checkComment($comment) {
	$_GET['mock']['called']['checkComment'] = true;
	return $_GET['mock']['returnFor']['checkComment'];
    }

    function submitSpam($comment) {
	$_GET['mock']['called']['submitSpam'] = true;
	return $_GET['mock']['returnFor']['submitSpam'];
    }

    function submitHam($comment) {
	$_GET['mock']['called']['submitHam'] = true;
	return $_GET['mock']['returnFor']['submitHam'];
    }

    function setReturnFor($function, $return) {
	$_GET['mock']['returnFor'][$function] = $return;
    }

    function wasCalled($function) {
	return !empty($_GET['mock']['called'][$function]);
    }
}

class CommentTest_GalleryCommentHelper_MockCheckWithAkismet extends GalleryCommentHelper {
    function GalleryCommentHelper_MockCheckWithAkismet() {
	$this->_checkWithAkismetCalled = false;
    }

    function wasCalled($function) {
	return !empty($this->_calls[$function]);
    }

    function checkWithAkismet() {
	$this->_calls['checkWithAkismet'] = true;
	return null;
    }
}
?>
