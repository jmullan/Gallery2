<?php
/*
 * $RCSfile: CommentTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.10 $ $Date: 2005/08/23 03:49:02 $
 * @package Comment
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Comment functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class CommentTest extends GalleryTestCase {

    function CommentTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    /**
     *
     */
    function setUp() {
	global $gallery;

	parent::setUp();

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_item);

	/* Create a few comments */
	for ($i = 0; $i < 3; $i++) {
	    list ($ret, $this->_comment[$i]) =
		GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryComment');
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->assert(isset($this->_comment[$i]), 'Missing comment instance');
	    $this->_comment[$i]->create($this->_item->getId());
	    $this->_comment[$i]->setCommenterId($gallery->getActiveUserId());
	    $this->_comment[$i]->setHost('127.0.0.1');
	    $this->_comment[$i]->setComment('this is a test comment #' . $i);
	    $this->_comment[$i]->setDate(time()+$i);
	    $ret = $this->_comment[$i]->save();
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
    }

    function testFetchComments() {
	list ($ret, $comments) =
	    GalleryCommentHelper::fetchComments($this->_item->getId(), 2, ORDER_ASCENDING);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array($this->_comment[0],
				  $this->_comment[1]), $comments);
    }

    function testFetchCommentCounts() {
	list ($ret, $counts) = GalleryCommentHelper::fetchCommentCounts(array($this->_item->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(3, $counts[$this->_item->getId()], 'Count is wrong');
    }

    function testGetItemSummaries() {
	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'comment');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$itemId = $this->_item->getId();
	/* Verify we get a non empty item summary for the item */
	$permissions[$itemId]['comment.view'] = 1;
	list ($ret, $content) = $module->getItemSummaries(array($this->_item), $permissions);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($content[$itemId]) && !empty($content[$itemId]),
		      'did not get item summary');
	
	/* Get the item summary again, but without having the permissions */
	unset($content);
	list ($ret, $content) = $module->getItemSummaries(array($this->_item),
							  array($itemId => array()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!isset($content[$itemId]), 'got an item summary');
    }

    function testCreateModifyAndDeleteComment() {
	global $gallery;

	/* Create a comment */
	list ($ret, $comment) = GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryComment');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($comment), 'Missing comment instance');
	$comment->create($this->_item->getId());
	$comment->setCommenterId($gallery->getActiveUserId());
	$comment->setHost('127.0.0.1');
	$comment->setComment('this is a test comment');
	$comment->setDate(time());
	$ret = $comment->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Modify it */
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($comment->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$comment->setComment('foo bar');
	$ret = $comment->save();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Delete it */
	$ret = GalleryCoreApi::deleteEntityById($comment->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }
}

?>
