<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2007 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test the ShowAllComments view
 *
 * @package Comment
 * @subpackage PHPUnit
 * @author Andy Staudacher <ast@gmx.ch>
 * @version $Revision$
 */
class ShowAllCommentsViewTest extends GalleryViewTestCase {

    function ShowAllCommentsViewTest($methodName) {
	$this->GalleryViewTestCase($methodName, 'comment.ShowAllComments');
    }

    function setUp() {
	global $gallery;
	$ret = parent::setUp();
	if ($ret) {
	   return $ret;
	}

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    return $ret;
	}
	$this->_markForCleanup($this->_album);

	$ret = GalleryCoreApi::removeItemPermissions($this->_album->getId());
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_album->getId(), $gallery->getActiveUserId(), 'core.view');
	if ($ret) {
	    return $ret;
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $this->_album->getId(), $gallery->getActiveUserId(), 'comment.all');
	if ($ret) {
	    return $ret;
	}

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}
	list ($ret, $this->_item2) = $this->_createRandomDataItem($this->_album->getId());
	if ($ret) {
	    return $ret;
	}

	/* Create 4 comments */
	for ($i = 0; $i < 4; $i++) {
	    $itemId = $i < 2 ? $this->_item->getId() : $this->_item2->getId();

	    list ($ret, $this->_comment[$i]) =
		GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryComment');
	    if ($ret) {
		return $ret;
	    }

	    $this->assert(isset($this->_comment[$i]), 'Missing comment instance');
	    $this->_comment[$i]->create($itemId);
	    $this->_comment[$i]->setCommenterId($gallery->getActiveUserId());
	    $this->_comment[$i]->setHost('127.0.0.1');
	    $this->_comment[$i]->setComment('this is a test comment #' . $i);
	    $this->_comment[$i]->setDate(time()+$i);
	    if ($i == 3) {
		$this->_comment[$i]->setPublishStatus(COMMENT_PUBLISH_STATUS_UNPUBLISHED);
	    }
	    $ret = $this->_comment[$i]->save();
	    if ($ret) {
		return $ret;
	    }
	}

	$ret = GalleryCoreApi::removeUserPermission(
	    $this->_item2->getId(), $gallery->getActiveUserId(), 'comment.delete');
	if ($ret) {
	    return $ret;
	}
    }

    function testShowAllComments() {
	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());

	$results = $this->loadTemplate();
	if (empty($results)) {
	    $this->fail('No results returned');
	    return null;
	}

	$this->assertEquals(array('body' => 'modules/comment/templates/ShowAllComments.tpl'),
			    $results);

	$data = $this->_template->getVariable('ShowAllComments');
	$this->assertEquals(3, count($data['comments']), 'comment count');
	$this->assertEquals((array)$this->_album, $data['item'], 'item');

	foreach ($this->_comment as $comment) {
	    foreach (array('delete', 'edit', 'markSpam') as $canFlag) {
		$can[$comment->getid()][$canFlag] = true;
	    }
	}
	$can[$this->_comment[2]->getId()]['delete'] = false;
	$can[$this->_comment[3]->getId()]['delete'] = false;

	$this->assertEquals(sort($can), sort($data['can']), 'permissions');	
    }

    function testShowAllCommentsFailsWithoutViewItemPermission() {
    	global $gallery;

	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());

	$ret = GalleryCoreApi::removeUserPermission(
	    $this->_album->getId(), $gallery->getActiveUserId(), 'core.view');
	if ($ret) {
	    return $ret;
	}

	$results = $this->loadTemplate(ERROR_MISSING_OBJECT);
    }

    function testShowAllCommentsRequiresViewItemPermissionForComments() {
    	global $gallery;

	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());

	$ret = GalleryCoreApi::removeUserPermission(
	    $this->_item->getId(), $gallery->getActiveUserId(), 'core.view');
	if ($ret) {
	    return $ret;
	}

	$results = $this->loadTemplate();
	if (empty($results)) {
	    $this->fail('No results returned');
	    return null;
	}

	$this->assertEquals(array('body' => 'modules/comment/templates/ShowAllComments.tpl'),
			    $results);

	$data = $this->_template->getVariable('ShowAllComments');
	$this->assertEquals(1, count($data['comments']), 'comment count');
	$this->assertEquals($this->_comment[2]->getId(), $data['comments'][0]['id'], 'comment id');
	$this->assertEquals((array)$this->_album, $data['item'], 'item');
    }
}
?>