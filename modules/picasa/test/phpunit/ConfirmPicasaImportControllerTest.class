<?php
/*
 * $RCSfile: ConfirmPicasaImportControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
* @version $Revision: 1.4 $ $Date: 2005/10/11 01:44:40 $
* @package Picasa
* @subpackage PHPUnit
* @author Waldemar Schlackow <gallery@schlackow.de> based on code by Bharat Mediratta
*/

GalleryCoreApi::requireOnce('modules/picasa/classes/Picasa2DataParser.class');
GalleryCoreApi::requireOnce('modules/picasa/test/phpunit/MockLockSystem.class');

/**
 * ConfirmPicasaImport controller tests
 * @package Picasa
 * @subpackage PHPUnit
 */
class ConfirmPicasaImportControllerTest extends GalleryControllerTestCase {

    /**
     * The id of the album to which all sub-items will be added - this is
     * deleted in the teardown
     * @access protected
     */
    var $_temporaryAlbumId;
    /**
     * The mock platform
     * @access protected
     */

    var $_platform;
    var $_origMarkup;

    function ConfirmPicasaImportControllerTest($methodName) {
        $this->GalleryControllerTestCase($methodName, 'picasa.ConfirmPicasaImport');
    }

    function setUp() {
        global $gallery;
	parent::setUp();

	/* Make sure translate calls during test won't generate any platform calls */
	list ($ret) = GalleryCoreApi::getPermissionIds();
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

        list ($ret, $this->_temporaryAlbum) = GalleryCoreApi::createAlbum(
    	    $this->_getRootId(), 'albumtest',
    	    'This is my title', 'This is my summary',
    	    'This is my description', null);
        if ($ret) {
            print $ret->getAsHtml();
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_temporaryAlbum);
        $this->_temporaryAlbumId = $this->_temporaryAlbum->getId();

        list ($ret, $this->_origMarkup) =
            GalleryCoreApi::getPluginParameter('module', 'core', 'misc.markup');
        if ($ret) {
            print $ret->getAsHtml();
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        $this->_platform = new UnitTestPlatform();
        $gallery->setPlatform($this->_platform);
        $gallery->_lockSystem = new MockLockSystem();
    }

    function tearDown() {
        global $gallery;

        $ret = GalleryCoreApi::setPluginParameter('module', 'core',
            'misc.markup', $this->_origMarkup);
        if ($ret) {
            $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        $this->assert($this->_platform->isComplete(), $this->_platform->getRemaining());
        parent::tearDown();
    }

    function _runBackgroundTask($expectedProgressBarDump) {
        global $gallery;

        $mockAdapter = new MockTemplateAdapter();
        $gallery->_templateAdapter =& $mockAdapter;
        $mockGenerator = new ConfirmPicasaImportControllerTestUrlGenerator();
        $gallery->_urlGenerator =& $mockGenerator;

        $results = $this->handleRequest();
        $this->assertEquals(array('delegate' => array('view' => 'core.ProgressBar'),
            'status' => array(), 'error' => array()), $results);

        $this->assertEquals(1, $mockAdapter->getCallbackCount());
        $ret = $mockAdapter->runCallbacks();
        if ($ret) {
            return array($ret->wrap(__FILE__, __LINE__), null);
        }

        if (is_array($expectedProgressBarDump)) {
            $this->assertEquals($expectedProgressBarDump, $mockAdapter->getProgressBarDump());
        } else {
            $pattern = '/^' . $expectedProgressBarDump . '$/';
            $dump = join(' ', $mockAdapter->getProgressBarDump());
            $this->assert(preg_match($pattern, $dump),
                'Dump ['.$dump.'] did not match pattern ['.$pattern.']');
        }

        $session =& $gallery->getSession();
        $status = $session->getStatus($mockGenerator->getStatusId());

        return array(null, $status);
    }

    /**
     * Test what the controller does when you cancel the Import
     */
    function testCancelImport() {
        global $gallery;
        GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

        $results = $this->handleRequest();
        $this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
            'subView' => 'picasa.SelectPicasaExportPath'), 'status' => array(),
            'error' => array()), $results);
    }

    /**
     * Test whether the actual importing works successfully
     */
    function testImportAlbumSuccessful() {
        global $gallery;

        /*
         * The test data, containing only the necessary tags (some are not used yet, but will be
         * later). Hence differing from a real Picasa export
         */
        $testXmlData = array('<?xml version="1.0" encoding="utf-8" ?>',
            '<album><albumName>GalleryTest 2</albumName>',
            '<albumItemCount>2</albumItemCount>',
            '<albumCaption>This is a test</albumCaption>',
            '<images>',
            '<image>',
        	'<itemLargeImage>images/ajipankachile5.jpg0</itemLargeImage>',
        	'<itemWidth>171</itemWidth>',
            '<itemHeight>426</itemHeight>',
        	'<itemThumbnailImage>thumbnails/ajipankachile5.jpg0</itemThumbnailImage>',
        	'<itemThumbnailWidth>42</itemThumbnailWidth>',
        	'<itemThumbnailHeight>90</itemThumbnailHeight>',
        	'<itemName>ajipankachile5.jpg0</itemName>',
        	'<itemCaption>Testpicture</itemCaption>',
            '</image>',
            '<image>',
        	'<itemLargeImage>images/californiadriedchile5.jpg0</itemLargeImage>',
        	'<itemWidth>171</itemWidth>',
            '<itemHeight>426</itemHeight>',
        	'<itemThumbnailImage>thumbnails/californiadriedchile5.jpg0</itemThumbnailImage>',
        	'<itemThumbnailWidth>42</itemThumbnailWidth>',
        	'<itemThumbnailHeight>90</itemThumbnailHeight>',
        	'<itemName>californiadriedchile5.jpg0</itemName>',
        	'<itemCaption>californiadriedchile5.jpg0</itemCaption>',
            '</image>',
            '<image>',
        	'<itemLargeImage>images/cascabelchiles5.jpg0</itemLargeImage>',
        	'<itemWidth>171</itemWidth>',
            '<itemHeight>426</itemHeight>',
        	'<itemThumbnailImage>thumbnails/cascabelchiles5.jpg0</itemThumbnailImage>',
        	'<itemThumbnailWidth>42</itemThumbnailWidth>',
        	'<itemThumbnailHeight>90</itemThumbnailHeight>',
        	'<itemName>cascabelchiles5.jpg0</itemName>',
        	'<itemCaption>cascabelchiles5.jpg0</itemCaption>',
            '</image>',
            '</images>',
            '</album>');
        /* Calls that read the mock xml and create the album */
        $this->_platform->setReply('getDirectorySeparator', array(), '/');
        $this->_platform->setReply('file_exists', array('/index.xml'), true);
        $this->_platform->setReply('is_readable', array('/index.xml'), true);
        $this->_platform->setReply('file', array('/index.xml', ''), $testXmlData);
        $this->_platform->setReply('legalizePathComponent', array('GalleryTest 2'),
            'GalleryTest 2');
        $this->_platform->setReply('isLegalPathComponent', array('GalleryTest 2'), true);
        $this->_platform->setReply('legalizePathComponent', array('GalleryTest 2'),
            'GalleryTest 2');
        $this->_platform->setReply('getDirectorySeparator', array(), '/');
        $this->_platform->setReply('file_exists', array('fuzzy' => '{.*GalleryTest 2}'), false);
        $this->_platform->setReply('mkdir', array('fuzzy' => '{.*GalleryTest 2}', '0755'), true);

        /* Image creation */
        $testImages = array('ajipankachile5.jpg0', 'californiadriedchile5.jpg0',
            'cascabelchiles5.jpg0');

        foreach ($testImages as $testImage) {

            $this->_platform->setReply('is_uploaded_file', array('/images/' . $testImage . ''),
                true);
            $this->_platform->setReply('legalizePathComponent', array($testImage), $testImage);
            $this->_platform->setReply('getDirectorySeparator', array(), '/');
            $this->_platform->setReply('copy',
                array('/images/' . $testImage . '', 'fuzzy'=>'{.*/' . $testImage . '}'),
                true);
            $this->_platform->setReply('filesize',
                array('fuzzy'=>'{.*/' . $testImage . '}'), 10000);
        }

        GalleryUtilities::putRequestVariable('form[picasaXmlPath]','/');
        GalleryUtilities::putRequestVariable('form[action][import]', 1);
        GalleryUtilities::putRequestVariable('form[destinationAlbumId]', $this->_temporaryAlbumId);
        GalleryUtilities::putRequestVariable('form[set][title]', 'caption');
        GalleryUtilities::putRequestVariable('form[set][summary]', 'blank');
        GalleryUtilities::putRequestVariable('form[set][description]', 'filename');


        list ($ret, $status) = $this->_runBackgroundTask(
            '0 [\d\.\d\d].* ' .
            'complete:view=core.SiteAdmin,subView=picasa.ImportResults,statusId=STATUSID');
        if ($ret) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        $results = $this->handleRequest();
        $this->assertEquals(array('GalleryTest 2'),
            array_keys($status['albumImportSuccess']));
        $this->assertEquals(array(), $status['albumImportFailure']);
        $testAlbumId = $status['albumImportSuccess']['GalleryTest 2'];

        /* Get the allegedly successfully imported album */
        list($ret, $testAlbum) = GalleryCoreApi::loadEntitiesById($testAlbumId);
        if ($ret) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        $this->assertEquals(array('GalleryTest 2',  // title
              'This is a test',                     // summary
              'This is a test',                     // description
              ),
            array($testAlbum->getTitle(),           // title
              $testAlbum->getSummary(),             // summary
              $testAlbum->getDescription(),         // description
              )
            );

        /* Verify item attributes (like order weight) */
        list ($ret, $ids) = GalleryCoreApi::fetchChildItemIds($testAlbum);
        if ($ret) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $this->assertEquals(3, count($ids), 'number of children');

        /* Get the allegedly successfully imported items */
        list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[0]);
        if ($ret) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $this->assertEquals(array ('ajipankachile5',    // title
                'Testpicture',                          // summary
                'Testpicture',                          // description
            ),
            array($testItem->getTitle(),                // title
                $testItem->getSummary(),                // summary
                $testItem->getDescription(),            // description
            ),
            'item 0');

        list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[1]);
        if ($ret) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        $this->assertEquals(array('californiadriedchile5',      // title
                'californiadriedchile5.jpg0',                   // summary
                'californiadriedchile5.jpg0',                   //description
            ),
            array($testItem->getTitle(),            // title
                $testItem->getSummary(),            // summary
                $testItem->getDescription(),        // description
            ),
            'item 1');

        list($ret, $testItem) = GalleryCoreApi::loadEntitiesById($ids[2]);
        if ($ret) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        $this->assertEquals(array('cascabelchiles5',    // title
                'cascabelchiles5.jpg0',                 // summary
                'cascabelchiles5.jpg0',                 //description
            ),
            array($testItem->getTitle(),                // title
                $testItem->getSummary(),                // summary
                $testItem->getDescription(),            // description
            ),
            'item 2');
    }
}

class ConfirmPicasaImportControllerTestUrlGenerator {
    function generateUrl($args) {
        $buf = array();
        foreach ($args as $key => $value) {
            if ($key == 'statusId') {
                $this->_statusId = $value;
                $value = 'STATUSID';
            }
            $buf[] = "$key=$value";
        }
        return join(',', $buf);
    }

    function getStatusId() {
        return $this->_statusId;
    }
}
?>
