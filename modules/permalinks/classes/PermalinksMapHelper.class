<?php
/*
* $RCSfile: PermalinksMapHelper.class,v $
*
* Gallery - a web based photo album viewer and editor
* Copyright (C) 2000-2006 Bharat Mediratta
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the GNU General Public License as published by
* the Free Software Foundation; either version 2 of the License, or (at
* your option) any later version.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* General Public License for more details.
*
* You should have received a copy of the GNU General Public License
* along with this program; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
*/
/**
 * @version $Revision: 1.4 $ $Date: 2006/02/09 10:36:15 $
 * @package Permalinks
 * @author Pierre-Luc Paour <gallery@paour.com>
 */

/**
 * A helper class for Permalinkss
 *
 * Utility functions useful in managing Permalinkss
 *
 * @package Permalinks
 * @subpackage Helpers
 */
class PermalinksMapHelper {

    /**
     * Return the aliases defined for a given item
     *
     *  @param int item id or null for all aliases
     * @return array object GalleryStatus a status code
     *         array of aliase names
     * @static
     */
    function fetchAliasesForItem($itemId=null) {
	global $gallery;

	if (isset($itemId)) {
	    $query = '
	    SELECT
	      [PermalinksMap::aliasName]
	    FROM
	      [PermalinksMap]
	    WHERE
	      [PermalinksMap::destId] = ?
	    ';

	    $data = array((int)$itemId);

	    list ($ret, $searchResults) = $gallery->search($query, $data);
	    if ($ret) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	} else {
	    $query = '
	    SELECT
	      [PermalinksMap::aliasName]
	    FROM
	      [PermalinksMap]
	    ';

	    list ($ret, $searchResults) = $gallery->search($query);
	    if ($ret) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	$aliases = array();
	while ($result = $searchResults->nextResult()) {
	    $aliases[] = $result[0];
	}
	return array(null, $aliases);
    }

    /**
     * Return the item id the alias name refers to, if any
     *
     * @param string alias name
     * @return array object GalleryStatus a status code
     *               int item id
     * @static
     */
    function fetchItemIdForAlias($aliasName) {
	global $gallery;

	$query = '
	SELECT
	  [PermalinksMap::destId]
	FROM
	  [PermalinksMap]
	WHERE
	  [PermalinksMap::aliasName] = ?
	';

	$data = array($aliasName);

	list ($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if ($result = $searchResults->nextResult()) {
	    $destId = (int)$result[0];
	} else {
	    $destId = null;
	}
	return array(null, $destId);
    }

    /**
     * Create an alias
     *
     * @param string alias name
     * @param    int item Id
     * @return object GalleryStatus a status code
     * @static
     */
    function createAlias($aliasName, $itemId) {
	global $gallery;

	/* first, check for collision */
	list($ret, $collisionId) = PermalinksMapHelper::fetchItemIdForAlias($aliasName);
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	if (isset($collisionId)) {
	    /* we expected null, this means we have a collision. Throw it */
	    return GalleryCoreApi::error(ERROR_COLLISION, __FILE__, __LINE__);
	}

	/* Add a new alias */
	$ret = GalleryCoreApi::addMapEntry('PermalinksMap',
					   array('aliasName' => $aliasName, 'destId' => $itemId));
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return null;
    }

    /**
     * Delete an alias
     *
     * @param int alias name
     * @return object GalleryStatus a status code
     * @static
     */
    function deleteAlias($aliasName) {
	global $gallery;

	/* Remove this alias from our groups table. */
	$ret = GalleryCoreApi::removeMapEntry('PermalinksMap', array('aliasName' => $aliasName));
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return null;
    }
}
?>
