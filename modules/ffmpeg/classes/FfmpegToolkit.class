<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Ffmpeg
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Load required classes
 */
require_once(dirname(__FILE__) . '/../../core/classes/GalleryToolkit.class');

/**
 * A Ffmpeg version of GalleryToolkit
 *
 * This class implements the GalleryToolkit API using Ffmpeg.
 *
 * @package Ffmpeg
 * @subpackage Classes
 */
class FfmpegToolkit extends GalleryToolkit {
    /*
     * ****************************************
     *                 Methods
     * ****************************************
     */

    /**
     * @see GalleryToolkit::getProperty()
     */
    function getProperty($mimeType, $propertyName, $sourceFilename) {

	switch($propertyName) {
	case 'dimensions':
	    list ($ret, $width, $height) = $this->_getMovieDimensions($mimeType, $sourceFilename);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__),
			     null);
	    }
	    $results = array($width, $height);
	    break;

	case 'dimensions_and_duration':
	    list ($ret, $width, $height, $duration) = $this->_getMovieDimensions($mimeType, $sourceFilename);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__),
			     null);
	    }
	    $results = array($width, $height, $duration);
	    break;

	default:
	    return array(GalleryStatus::error(ERROR_UNIMPLEMENTED,
					      __FILE__, __LINE__),
			 null);
	}

	return array(GalleryStatus::success(), $results);
    }

    /**
     * @see GalleryToolkit::performOperation()
     */
    function performOperation($mimeType, $operationName, $sourceFilename,
			      $destFilename, $parameters) {

	/* We don't support any operations .. yet */
    }

    function _getMovieDimensions($mimeType, $sourceFilename) {
	global $gallery;

	list ($ret, $results) = $this->_ffmpeg($sourceFilename, array('-vstats'));

	/*
	 * Ffmpeg 0.4.6 demands an output file and we're not providing one, so we'll always get a toolkit
	 * failure here.  :-/  Ignore it for now, but fail if we don't get the output we want.
	 */
	if ($ret->isError() && !($ret->getErrorCode() & ERROR_TOOLKIT_FAILURE)) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	/* Search for a line like:
	 *
	 *   Duration: 00:00:03.0
	 *   Stream #0.0: Video: svq1, 200x240, 15.00 fps
	 */
	$unknownFormat = false;
	$successfulRun = false;
	$width = $height = $duration = 0;
	foreach ($results as $resultLine) {
	    if (preg_match("/Unknown format/", $resultLine, $regs)) {
		$unknownFormat = true;
		$successfulRun = true;
	    }

	    if (preg_match("/Duration: (\d+):(\d+):(\d+)\.(\d+)/", $resultLine, $regs)) {
		$successfulRun = true;
		$duration = 3600*$regs[1] + 60*$regs[2] + $regs[3];
	    }
	    
	    if (preg_match("/Stream.*?Video:.*?(\d+)x(\d+)/", $resultLine, $regs)) {
		$successfulRun = true;
		list ($width, $height) = array($regs[1], $regs[2]);
	    }
	}
	if ($successfulRun) {
	    return array(GalleryStatus::success(), $width, $height, $duration);
	} else {
	    return array(GalleryStatus::error(ERROR_TOOLKIT_FAILURE, __FILE__, __LINE__), null, null);
	}
    }

    /**
     * Run a given ffmpeg command on the source file name and return the
     * command line results.
     *
     * @param string the input file name
     * @param array the command line arguments
     */
    function _ffmpeg($sourceFilename, $args) {
	global $gallery;
	list ($ret, $ffmpegPath) = $gallery->getModuleParameter('ffmpeg', 'path');
	$platform = $gallery->getPlatform();
	list ($success, $results) =
	    $platform->exec(array(array_merge(array($ffmpegPath, '-i', $sourceFilename), $args)));

	if (!$success) {
	    /* Return the debug results even if there's a failure */
	    return array(GalleryStatus::error(ERROR_TOOLKIT_FAILURE, __FILE__, __LINE__), $results);
	}

	return array(GalleryStatus::success(), $results);
    }
}
?>
