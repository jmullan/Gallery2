<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Gd
 * @subpackage PHPUnit
 * @author Ernesto Baschny <ernst@baschny.de>
 */

/**
 * Required classes
 */
require_once(dirname(__FILE__) . '/../../classes/GdToolkitHelper.class');
require_once(dirname(__FILE__) . '/../../classes/GdToolkit.class');

/**
 * Test GdToolkit functionality
 *
 * @package Gd
 * @subpackage PHPUnit
 */
class GdToolkitTest extends GalleryTestCase {

    /*
     * The possible environments to simulate
     */
    var $_gdEnvironments;
    var $_toolkit;
    
    function GdToolkitTest($methodName) {
	$this->GalleryTestCase($methodName);
	include(dirname(__FILE__) . '/GdFunctionMatrix.inc');
	$this->_gdEnvironments = $gdEnvironments;
    }

    /**
     * 
     */
    function setUp() {
	global $gallery;
	
	parent::setUp();
	
	$this->_save = array();
	foreach (array('jpegQuality') as $key) {
	    list ($ret, $this->_save[$key]) = GalleryCoreApi::getPluginParameter('module', 'gd', $key);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	/* Reset to the defaults -- tearDown will undo this */
	foreach (array('jpegQuality' => 75) as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'gd', $key, $value);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	
	/* Get a toolkit to work with */
	$this->_toolkit = new GdToolkit();
	$this->_gdFunctionality =& new TestGdFunctionality();
    }

    /**
     *
     */
    function tearDown() {
	global $gallery;
	
	foreach ($this->_save as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'gd', $key, $value);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	parent::tearDown();
    }

    function testPerformOperations() {
	foreach ($this->_gdEnvironments as $environment) {
	    /*
	     * Test each PHP environment we know
	     */
	    $this->_gdFunctionality->setEnvironment($environment);
	    $this->_toolkit->setGdFunctionality($this->_gdFunctionality);
	
	    list ($ret, $isSupported) = GdToolkitHelper::isGdVersionSupported('', $this->_gdFunctionality);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    if (! $isSupported) {
		continue;
	    }
	    
	    list ($ret, $mimeTypes) = GdToolkitHelper::discoverMimeTypes($this->_gdFunctionality);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    
	    foreach ($mimeTypes as $mimeType) {
		/* 
		 * Check operations on the mime types this PHP environment seems
		 * to understand
		 */
		list ($ret, $mimeType) =
		    $this->_toolkit->performOperation($mimeType, 'thumbnail',
						      '200x200.ext',
						      '/valid/thumbnail.ext',
						      array(100, 100));
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		$this->assertEquals($this->_gdFunctionality->getOutputFileData('/valid/thumbnail.ext'),
				    array('x' => '100', 'y' => '100', 'mimeType' => $mimeType));
		
		list ($ret, $mimeType) =
		    $this->_toolkit->performOperation($mimeType, 'crop',
						      '300x300.ext',
						      '/valid/cropped.ext',
						      array(1, 2, 3, 4));
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		$this->assertEquals($this->_gdFunctionality->getOutputFileData('/valid/cropped.ext'),
				    array('x' => '3', 'y' => '4', 'mimeType' => $mimeType));
	
		list ($ret, $mimeType) =
		    $this->_toolkit->performOperation($mimeType, 'rotate',
						      '300x200.ext',
						      '/valid/rotated.ext',
						      array(90));
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		$this->assertEquals($this->_gdFunctionality->getOutputFileData('/valid/rotated.ext'),
				    array('x' => '200', 'y' => '300', 'mimeType' => $mimeType));

		list ($ret, $mimeType) =
		    $this->_toolkit->performOperation($mimeType, 'convert-to-image/jpeg',
						      '400x400.ext',
						      '/valid/converted.jpeg',
						      array());
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		$this->assertEquals($this->_gdFunctionality->getOutputFileData('/valid/converted.jpeg'),
				    array('x' => '400', 'y' => '400', 'mimeType' => 'image/jpeg'));
		
		/* Test a basic composite operation (top right corner) */
		list ($ret, $mimeType) =
		    $this->_toolkit->performOperation($mimeType, 'composite',
						      '300x300.ext', // composite
						      '/valid/composited.ext', // composited
						      array('50x50.ext', // image
							    $mimeType, // mimeType
							    50, 50, // image width, height
							    0, 0, // image alignment x, y
							    3));    // alignment type
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
	
		/* Test another composite with out of range params that should
		 * get corrected
		 */
		list ($ret, $mimeType) =
		    $this->_toolkit->performOperation($mimeType, 'composite',
						      '300x300.png', // composite (200x200)
						      '/valid/composited.ext', // composited
						      array('50x50.ext', // image
							    $mimeType, // mimeType
							    50, 50, // image width, height
							    151, 151, // image alignment x, y
							    0));    // alignment type
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
	
	    }
	}

	/* Test a functionality that doesn't exist */
	list ($ret, $mimeType) =
	    $this->_toolkit->performOperation('image/png', 'BOGUS',
					      'BOGUS',
					      'BOGUS',
					      array('BOGUS'));

	$this->assert($ret->getErrorCode() & ERROR_UNIMPLEMENTED);
    }

    function testGetProperties() {
	foreach ($this->_gdEnvironments as $environment) {
	    /*
	     * Test each PHP environment we know
	     */
	    $this->_gdFunctionality->setEnvironment($environment);
	    $this->_toolkit->setGdFunctionality($this->_gdFunctionality);
	    
	    list ($ret, $isSupported) = GdToolkitHelper::isGdVersionSupported('', $this->_gdFunctionality);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    if (! $isSupported) {
		continue;
	    }
	    
	    list ($ret, $results) =
		$this->_toolkit->getProperty('image/gif', 'dimensions', '300x300.gif');
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals(array(300, 300), $results);
    
	    /* Test a property that doesn't exist */
	    list ($ret, $results) =
		$this->_toolkit->getProperty('image/gif', 'BOGUS', 'BOGUS');
	    $this->assert($ret->getErrorCode() & ERROR_UNIMPLEMENTED);
	}
    }

    function testMergeOperations() {
	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('crop', array(1, 2), 'crop', array(3, 4));
	$this->assert($success);
	$this->assertEquals('crop', $operation);
	$this->assertEquals(array(3, 4), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('resize', array(1, 2), 'resize', array(3, 4));
	$this->assert($success);
	$this->assertEquals('resize', $operation);
	$this->assertEquals(array(3, 4), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('thumbnail', array(1, 2), 'resize', array(3, 4));
	$this->assert($success);
	$this->assertEquals('resize', $operation);
	$this->assertEquals(array(3, 4), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('thumbnail', array(1, 2), 'thumbnail', array(3, 4));
	$this->assert($success);
	$this->assertEquals('thumbnail', $operation);
	$this->assertEquals(array(3, 4), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('scale', array(1, 2), 'thumbnail', array(3, 4));
	$this->assert($success);
	$this->assertEquals('thumbnail', $operation);
	$this->assertEquals(array(3, 4), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(90), 'rotate', array(90));
	$this->assert($success);
	$this->assertEquals('rotate', $operation);
	$this->assertEquals(array(180), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(90), 'rotate', array(-90));
	$this->assert($success);
	$this->assertEquals(null, $operation);
	$this->assertEquals(null, $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(270), 'rotate', array(180));
	$this->assert($success);
	$this->assertEquals('rotate', $operation);
	$this->assertEquals(array(90), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(90), 'rotate', array(-180));
	$this->assert($success);
	$this->assertEquals('rotate', $operation);
	$this->assertEquals(array(-90), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(90), 'rotate', array(180));
	$this->assert($success);
	$this->assertEquals('rotate', $operation);
	$this->assertEquals(array(-90), $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('rotate', array(270), 'rotate', array(90));
	$this->assert($success);
	$this->assertEquals(null, $operation);
	$this->assertEquals(null, $args);

	list ($success, $operation, $args) =
	    $this->_toolkit->mergeOperations('crop', array(1, 2), 'thumbnail', array(3, 4));
	$this->assert(!$success);
    }

    function testDiscoverMimeTypes() {
	foreach ($this->_gdEnvironments as $environment) {
	    /*
	     * Test each PHP environment we know
	     */
	    $this->_gdFunctionality->setEnvironment($environment);
	    
	    list ($ret, $results) = GdToolkitHelper::discoverMimeTypes($this->_gdFunctionality);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals($environment['mimeTypes'],
				$results);
	}
    }

    function testGetOperationsAndProperties() {
	foreach ($this->_gdEnvironments as $environment) {
	    /*
	     * Test each PHP environment we know
	     */
	    $this->_gdFunctionality->setEnvironment($environment);
	    
	    list ($ret, $isSupported) = GdToolkitHelper::isGdVersionSupported('', $this->_gdFunctionality);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    
	    list ($ret, $results) = GdToolkitHelper::getOperationsAndProperties($this->_gdFunctionality);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    if (! $isSupported) {
		/* No support, so the function should return empty maps */
		$this->assertEquals(array(), $results['operations']);
		$this->assertEquals(array(), $results['properties']);
		continue;
	    }
	    $this->assertEquals(array(
		'convert-to-image/jpeg' => array(
		    'params' => array(),
		    'description' => 'Convert to a JPEG',
		    'mimeTypes' => $environment['mimeTypes'],
		    'outputMimeType' => 'image/jpeg'),
		'scale' => array(
		    'params' => array(
			array(
			    'type' => 'int',
			    'description' => 'target size'
			    )
			),
		    'description' => 'Scale the image to the target size',
		    'mimeTypes' => $environment['mimeTypes'],
		    ),
		'thumbnail' => array(
		    'params' => array(
			array(
			    'type' => 'int',
			    'description' => 'target size'
			    )
			),
		    'description' => 'Scale the image to the target size',
		    'mimeTypes' => $environment['mimeTypes'],
		    ),
		'resize' => array(
		    'params' => array(
			array(
			    'type' => 'int',
			    'description' => 'target width'
			    ),
			array(
			    'type' => 'int',
			    'description' => 'target height'
			    )
			),
		    'description' => 'Resize the image to the target dimensions',
		    'mimeTypes' => $environment['mimeTypes'],
		    ),
		'rotate' => array(
		    'params' => array(
			array(
			    'type' => 'int',
			    'description' => 'rotation degrees'
			    )
			),
		    'description' => 'Rotate the image',
		    'mimeTypes' => $environment['mimeTypes'],
		    ),
		'crop' => array(
		    'params' => array(
			array('type' => 'int',
			      'description' => 'left edge'),
			array('type' => 'int',
			      'description' => 'top edge'),
			array('type' => 'int',
			      'description' => 'width'),
			array('type' => 'int',
			      'description' => 'height')
			),
		    'description' => 'Crop the image',
		    'mimeTypes' => $environment['mimeTypes'],
		    ),
		'composite' => array(
		    'params' => array(
			array('type' => 'string',
			      'description' => 'overlay path'),
			array('type' => 'string',
			      'description' => 'overlay mime type'),
			array('type' => 'int',
			      'description' => 'overlay width'),
			array('type' => 'int',
			      'description' => 'overlay height'),
			array('type' => 'int',
			      'description' => 'alignment location x'),
			array('type' => 'int',
			      'description' => 'alignment location y'),
			array('type' => 'int',
			      'description' => 'alignment type')
			),
		    'description' => 'Composite the image',
		    'mimeTypes' => $environment['mimeTypes'],
		    )
		),
		$results['operations']);
	    
	    $this->assertEquals(array(
		'dimensions' => array(
		    'type' => 'int,int',
		    'description' => 'Get the width and height of the image',
		    'mimeTypes' => $environment['mimeTypes'],
		    )
		),
		$results['properties']);
	}
    }

}

/**
 * Test Gd Functionality
 *
 * @package Gd
 * @subpackage PHPUnit
 */
class TestGdFunctionality {

    /*
     * Our current environment
     */
    var $_gdEnvironment;

    /*
     * Keep track of our resources
     */
    var $_resourceCounter = 0;
    var $_resources;
    var $_outputFiles;

    function TestGdFunctionality() {
    }
    
    function functionExists($fct) {
	$fct = strtolower($fct);
	if (isset($this->_gdEnvironment['function_exists'][$fct])) {
	    return $this->_gdEnvironment['function_exists'][$fct];
	}
	return false;
    }
    
    /**
     * Set the environment we want to simulate
     * -> 1. PHP 4.1.0, GD 1.6.2 not bundled (4.1.0|1.6.2|0)
     *    2. PHP 4.2.0, GD 1.8.2 not bundled
     * -> 3. PHP 4.3.1, GD 2.0 bundled       (4.3.1|2.0|1)
     *    4. PHP 4.3.9, GD 1.6.2 not bundled 
     * -> 5. PHP 4.3.9RC1, GD 2.0.28 bundled (4.3.9RC1|2.0.28|1)
     *    6. PHP 5.0.1, GD 2.0.28 bundled
     */
    function setEnvironment($environment) {
	$this->_gdEnvironment = $environment;
    }
    
    function getEnvironmentName() {
	return $this->_gdEnvironment['name'];
    }

    function discoverGdVersion() {
	return $this->_gdEnvironment['gdVersion'];
    }

    function isBundled() {
	return $this->_gdEnvironment['gdBundled'];
    }
    
    function canRotate() {
	return $this->functionExists('imageRotate');
    }

    /**
     * Return the name of a new resource
     * 
     * From a filename like '200x300.gif' set the sizes x=200 y=300
     *
     */
    function getNewResource($filename = '') {
	$this->_resourceCounter++;
	$name = 'res #' . $this->_resourceCounter;
	$this->_resources[$name] = array(
	    'x' => 0,
	    'y' => 0,
	    'trueColor' => false,
	);
	if ($filename != '') {
	    if (preg_match('/(\d+)x(\d+)\./i', $filename, $matches)) {
		$this->_resources[$name]['x'] = (int) $matches[1];
		$this->_resources[$name]['y'] = (int) $matches[2];
	    }
	}
	return $name;
    }
    /**
     * Make a copy of some resource
     */
    function copyResource($otherRes) {
	$this->_resourceCounter++;
	$newRes = 'Resource #' . $this->_resourceCounter;
	$this->_resources[$newRes] = $this->_resources[$otherRes];
	return $newRes;
    }
    function setResourceData($res, $field, $value) {
	$this->_resources[$res][$field] = $value;
    }
    function getResourceData($res, $field) {
	if (isset($this->_resources[$res][$field])) {
	    return $this->_resources[$res][$field];
	}
	return '';
    }
    function isValidResource($res) {
	return isset($this->_resources[$res]);
    }
    function saveResource($res, $filename, $mimeType) {
	$this->_outputFiles[$filename] = array(
	    'x' => $this->getResourceData($res, 'x'),
	    'y' => $this->getResourceData($res, 'y'),
	    'mimeType' => $mimeType,
	);
    }
    function getOutputFileData($filename) {
	if (! isset($this->_outputFiles[$filename])) {
	    return null;
	}
	return $this->_outputFiles[$filename];
    }

    function isValidFile($filename) {
	if (preg_match('/valid/i', $filename)) {
	    return true;
	} else {
	    return false;
	}
    }

    /*
     * Here is our implementation of the GdFunctionality-interface
     * This will do nothing with images, but simulate what might
     * happen.
     */
    
    function getImageSize($filename) {
	return array(0, 0);
    }
    
    function imageTypes() {
	return $this->_gdEnvironment['imageTypes'];
    }
    
    function imageCreate($width, $height) {
	if (! $this->functionExists('imageCreate')) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					'Environment: ' . $this->getEnvironmentName());
	}
	$res = $this->getNewResource();
	$this->setResourceData($res, 'x', $width);
	$this->setResourceData($res, 'y', $height);
	$this->setResourceData($res, 'trueColor', false);
	return array(GalleryStatus::success(), $res);
    }

    function imageCreateTruecolor($width, $height) {
	if (! $this->functionExists('imageCreateTruecolor')) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					'Environment: ' . $this->getEnvironmentName());
	}
	$res = $this->getNewResource();
	$this->setResourceData($res, 'x', $width);
	$this->setResourceData($res, 'y', $height);
	$this->setResourceData($res, 'trueColor', true);
	return array(GalleryStatus::success(), $res);
    }

    function imageCreateFromGif($filename) {   
	if (! $this->functionExists('imageCreateFromGif')) {
	    return array(GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					      'Environment: ' . $this->getEnvironmentName()),
			 null);
	}
	$res = $this->getNewResource($filename);
	return array(GalleryStatus::success(), $res);
    }

    function imageCreateFromJpeg($filename) {   
	if (! $this->functionExists('imageCreateFromJpeg')) {
	    return array(GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					      'Environment: ' . $this->getEnvironmentName()),
			 null);
	}
	$res = $this->getNewResource($filename);
	return array(GalleryStatus::success(), $res);
    }

    function imageCreateFromPng($filename) {   
	if (! $this->functionExists('imageCreateFromPng')) {
	    return array(GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					      'Environment: ' . $this->getEnvironmentName()),
			 null);
	}
	$res = $this->getNewResource($filename);
	return array(GalleryStatus::success(), $res);
    }

    function imageCreateFromWbmp($filename) {
	if (! $this->functionExists('imageCreateFromWbmp')) {
	    return array(GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					      'Environment: ' . $this->getEnvironmentName()),
			 null);
	}
	$res = $this->getNewResource($filename);
	return array(GalleryStatus::success(), $res);
    }

    function imageCreateFromXbm($filename) {   
	if (! $this->functionExists('imageCreateFromXbm')) {
	    return array(GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					      'Environment: ' . $this->getEnvironmentName()),
			 null);
	}
	$res = $this->getNewResource($filename);
	return array(GalleryStatus::success(), $res);
    }

    function imageCreateFromXpm($filename) {   
	if (! $this->functionExists('imageCreateFromXpm')) {
	    return array(GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					      'Environment: ' . $this->getEnvironmentName()),
			 null);
	}
	$res = $this->getNewResource($filename);
	return array(GalleryStatus::success(), $res);
    }

    function imageGif($res, $filename) {
	if (! $this->functionExists('imageGif')) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					'Environment: ' . $this->getEnvironmentName());
	}
	if (! $this->isValidResource($res)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
	}
	if (! $this->isValidFile($filename)) {
	    return GalleryStatus::error(ERROR_TOOLKIT_FAILURE, __FILE__, __LINE__);
	}
	$this->saveResource($res, $filename, 'image/gif');
	return GalleryStatus::success();
    }

    function imageJpeg($res, $filename) {
	if (! $this->functionExists('imageJpeg')) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					'Environment: ' . $this->getEnvironmentName());
	}
	if (! $this->isValidResource($res)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
	}
	if (! $this->isValidFile($filename)) {
	    return GalleryStatus::error(ERROR_TOOLKIT_FAILURE, __FILE__, __LINE__);
	}
	$this->saveResource($res, $filename, 'image/jpeg');
	return GalleryStatus::success();
    }

    function imagePng($res, $filename) {
	if (! $this->functionExists('imagePng')) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					'Environment: ' . $this->getEnvironmentName());
	}
	if (! $this->isValidResource($res)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
	}
	if (! $this->isValidFile($filename)) {
	    return GalleryStatus::error(ERROR_TOOLKIT_FAILURE, __FILE__, __LINE__);
	}
	$this->saveResource($res, $filename, 'image/png');
	return GalleryStatus::success();
    }

    function imageWbmp($res, $filename) {
	if (! $this->functionExists('imageWbmp')) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					'Environment: ' . $this->getEnvironmentName());
	}
	if (! $this->isValidResource($res)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
	}
	if (! $this->isValidFile($filename)) {
	    return GalleryStatus::error(ERROR_TOOLKIT_FAILURE, __FILE__, __LINE__);
	}
	$this->saveResource($res, $filename, 'image/vnd.wap.wbmp');
	return GalleryStatus::success();
    }

    function imageXbm($res, $filename) {
	if (! $this->functionExists('imageXbm')) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					'Environment: ' . $this->getEnvironmentName());
	}
	if (! $this->isValidResource($res)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
	}
	if (! $this->isValidFile($filename)) {
	    return GalleryStatus::error(ERROR_TOOLKIT_FAILURE, __FILE__, __LINE__);
	}
	$this->saveResource($res, $filename, 'image/x-xbitmap');
	return GalleryStatus::success();
    }

    function imageXpm($res, $filename) {
	if (! $this->functionExists('imageXpm')) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					'Environment: ' . $this->getEnvironmentName());
	}
	if (! $this->isValidResource($res)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
	}
	if (! $this->isValidFile($filename)) {
	    return GalleryStatus::error(ERROR_TOOLKIT_FAILURE, __FILE__, __LINE__);
	}
	$this->saveResource($res, $filename, 'image/x-xpixmap');
	return GalleryStatus::success();
    }

    function imageCopyResampled($dstRes, $srcRes, $dstX, $dstY, $srcX, $srcY, $dstW, $dstH, $srcW, $srcH) {
	if (! $this->functionExists('imageCopyResampled')) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					'Environment: ' . $this->getEnvironmentName());
	}
	if (! $this->isValidResource($srcRes) || ! $this->isValidResource($dstRes)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    function imageCopyResized($dstRes, $srcRes, $dstX, $dstY, $srcX, $srcY, $dstW, $dstH, $srcW, $srcH) {
	if (! $this->functionExists('imageCopyResized')) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					'Environment: ' . $this->getEnvironmentName());
	}
	if (! $this->isValidResource($srcRes) || ! $this->isValidResource($dstRes)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    function imageCopyMerge($dstRes, $srcRes, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH, $pct) {
	if (! $this->functionExists('imageCopyMerge')) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					'Environment: ' . $this->getEnvironmentName());
	}
	if (! $this->isValidResource($srcRes) || ! $this->isValidResource($dstRes)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    function imageCopy($dstRes, $srcRes, $dstX, $dstY, $srcX, $srcY, $srcW, $srcH) {
	if (! $this->functionExists('imageCopy')) {
	    return GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					'Environment: ' . $this->getEnvironmentName());
	}
	if (! $this->isValidResource($srcRes) || ! $this->isValidResource($dstRes)) {
	    return GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }

    function imageSx($res) {
	if (! $this->functionExists('imageSx')) {
	    return array(GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					      'Environment: ' . $this->getEnvironmentName()),
			 null);
	}
	if (! $this->isValidResource($res)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__),
			 null);
	}
	return array(GalleryStatus::success(), $this->getResourceData($res, 'x'));
    }

    function imageSy($res) {
	if (! $this->functionExists('imageSy')) {
	    return array(GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					      'Environment: ' . $this->getEnvironmentName()),
			 null);
	}
	if (! $this->isValidResource($res)) {
	    return array(GalleryStatus::error(ERROR_BAD_PARAMETER, __FILE__, __LINE__),
			 null);
	}
	return array(GalleryStatus::success(), $this->getResourceData($res, 'y'));
    }

    /* Currently this only handles rotation in 90deg-steps */
    function imageRotate($srcRes, $angle, $bgdColor) {
	if (! $this->functionExists('imageRotate')) {
	    return array(GalleryStatus::error(ERROR_UNSUPPORTED_OPERATION, __FILE__, __LINE__,
					      'Environment: ' . $this->getEnvironmentName()),
			 null);
	}
	if ($angle % 90 == 0) {
	    /* Swap width and height */
	    $newX = $this->getResourceData($srcRes, 'y');
	    $newY = $this->getResourceData($srcRes, 'x');
	} else {
	    $newX = $this->getResourceData($srcRes, 'x');
	    $newY = $this->getResourceData($srcRes, 'y');
	}
	$res = $this->copyResource($srcRes);
	$this->setResourceData($res, 'x', $newX);
	$this->setResourceData($res, 'y', $newY);
	return array(GalleryStatus::success(), $res);
    }
}

?>
