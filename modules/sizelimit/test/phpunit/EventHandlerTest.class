<?php
/*
 * $RCSfile: EventHandlerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.6 $ $Date: 2005/08/23 03:49:55 $
 * @package SizeLimit
 * @subpackage PHPUnit
 * @author Felix Rabinovich <felix@rabinovich.org>
 */

/**
 * SizeLimitOption tests
 * @package SizeLimit
 * @subpackage PHPUnit
 */
class EventHandlerTest extends GalleryTestCase {
    function EventHandlerTest($methodname) {
	$this->GalleryTestCase($methodname);
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);
    }

    function testCopy() {
	$event = GalleryCoreApi::newEvent('GalleryEntity::save');
	foreach (array('width' => 768, 'height' => 1024, 'size' => 1000, 'keepOriginal' => 1)
	    as $key => $value) {
	    $ret = GalleryCoreApi::setPluginParameter('module', 'sizelimit',
		$key, $value, $this->_album->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	list ($ret, $this->_childAlbum) = $this->_createRandomAlbum($this->_album->getId());
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

	GalleryCoreApi::relativeRequireOnce('modules/sizelimit/module.inc');
	list($ret, $data) = SizeLimitModule::handleEvent($event);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters(
	    'module', 'sizelimit', $this->_album->getId());
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
	$this->assertEquals(array('width' => 768, 'height' => 1024, 'size' => 1000,
	    'keepOriginal' => 1), $params, 'Copied Album');
    }
}
?>
