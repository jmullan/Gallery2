<?php
/*
 * $RCSfile: SizeLimitOptionTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.9 $ $Date: 2005/08/23 03:49:55 $
 * @package SizeLimit
 * @subpackage PHPUnit
 * @author Felix Rabinovich <felix@rabinovich.org>
 */

GalleryCoreApi::relativeRequireOnce('lib/tools/phpunit/ItemEditOptionTestCase.class');

/**
 * SizeLimitOption tests
 * @package SizeLimit
 * @subpackage PHPUnit
 */
class SizeLimitOptionTest extends ItemEditOptionTestCase {

    function SizeLimitOptionTest($methodName) {
	$this->ItemEditOptionTestCase(
	    $methodName, 'sizelimit', 'SizeLimitOption');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	/* create custom platform to return dummy filesize, imagesize, etc. */
	$gallery->setPlatform(new SizeLimitOptionTestPlatform($gallery->getPlatform()));

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);
    }

    function testAppropriate() {
	list ($ret, $appropriate) = $this->_option->isAppropriate($this->_album, null);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($appropriate, 'appropriate');
    }

    function testNone() {
	$form['SizeLimitOption']['dimensionChoice'] = 'unlimited';
	$form['SizeLimitOption']['sizeChoice'] = 'unlimited';
	list ($error, $warning) = $this->_handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array(), $error);
	$this->assertEquals(array(), $warning);
	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters(
	    'module', 'sizelimit', $this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(empty($params), 'Params not empty:');
    }

    function testDimWidth() {
	$form['SizeLimitOption']['dimensionChoice'] = 'explicit';
	$form['SizeLimitOption']['dimensions']['width'] = 1024;
	$form['SizeLimitOption']['dimensions']['height'] = '';
	$form['SizeLimitOption']['sizeChoice'] = 'unlimited';
	list ($error, $warning) = $this->_handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array(), $error);
	$this->assertEquals(array(), $warning);
	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters(
	    'module', 'sizelimit', $this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('height' => 1024, 'width' => 1024, 'keepOriginal' => 0), $params);
    }

    function testDimHeight() {
	$form['SizeLimitOption']['dimensionChoice'] = 'explicit';
	$form['SizeLimitOption']['dimensions']['width'] = '';
	$form['SizeLimitOption']['dimensions']['height'] = 768;
	$form['SizeLimitOption']['sizeChoice'] = 'unlimited';
	$form['SizeLimitOption']['keepOriginal'] = 'checked';
	list ($error, $warning) = $this->_handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array(), $error);
	$this->assertEquals(array(), $warning);
	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters(
	    'module', 'sizelimit', $this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('height' => 768, 'width' => 768, 'keepOriginal' => 1), $params);
    }

    function testDimXY() {
	$form['SizeLimitOption']['dimensionChoice'] = 'explicit';
	$form['SizeLimitOption']['dimensions']['width'] = 1024;
	$form['SizeLimitOption']['dimensions']['height'] = 768;
	$form['SizeLimitOption']['sizeChoice'] = 'unlimited';
	list ($error, $warning) = $this->_handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array(), $error);
	$this->assertEquals(array(), $warning);
	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters(
	    'module', 'sizelimit', $this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('keepOriginal' => '0',
	    'width' => '1024', 'height' => '768'), $params);
    }

    function testSize() {
	$form['SizeLimitOption']['dimensionChoice'] = 'unlimited';
	$form['SizeLimitOption']['sizeChoice'] = 'explicit';
	$form['SizeLimitOption']['filesize'] = 2000;
	list ($error, $warning) = $this->_handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array(), $error);
	$this->assertEquals(array(), $warning);
	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters(
	    'module', 'sizelimit', $this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('keepOriginal' => 0, 'size' => 2000), $params);
    }

    function testBadSize() {
	$form['SizeLimitOption']['dimensionChoice'] = 'unlimited';
	$form['SizeLimitOption']['sizeChoice'] = 'explicit';
	$form['SizeLimitOption']['filesize'] = 'bad';
	list ($error, $warning) = $this->_handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array('form[error][SizeLimitOption][filesize][invalid]'), $error);
	$this->assertEquals(array(), $warning);
	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters(
	    'module', 'sizelimit', $this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(empty($params));
    }

    function test0Size() {
	$form['SizeLimitOption']['dimensionChoice'] = 'unlimited';
	$form['SizeLimitOption']['sizeChoice'] = 'explicit';
	$form['SizeLimitOption']['filesize'] = '0';
	list ($error, $warning) = $this->_handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array('form[error][SizeLimitOption][filesize][invalid]'),
	    $error, 'Invalid file size');
	$this->assertEquals(array(), $warning);
	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters(
	    'module', 'sizelimit', $this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(empty($params));
    }

    function testApplyToDescendents() {
	global $gallery;

	$ret = $this->_registerToolkit();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$platform = $gallery->getPlatform();
	$form['SizeLimitOption']['dimensionChoice'] = 'unlimited';
	$form['SizeLimitOption']['sizeChoice'] = 'explicit';
	$form['SizeLimitOption']['filesize'] = 2000;
	$form['SizeLimitOption']['applyToDescendents'] = 'on';
	$results = $this->_handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array(array(), array()), $results, 'Results');
	list ($ret, $params) = GalleryCoreApi::fetchAllPluginParameters(
	    'module', 'sizelimit', $this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('keepOriginal' => 0, 'size' => 2000), $params);

	$platform->clearstatcache();
	list ($ret, $this->_item) = $this->_item->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(1000, $this->_item->getSize(), 'Size');
    }

    /**
     * Register dummy toolkit and operations
     */
    function _registerToolkit() {
	$ret = GalleryCoreApi::registerFactoryImplementation(
	    'GalleryToolkit', 'SizeLimitOptionTestToolkit', 'SizeLimitOptionTestToolkit',
	    'modules/sizelimit/test/phpunit/SizeLimitOptionTest.class', 'sizelimitTest', null);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$this->_markToolkitForCleanup('SizeLimitOptionTestToolkit');

	/* applying size limits uses 'compress' */
	$ret = GalleryCoreApi::registerToolkitOperation('SizeLimitOptionTestToolkit',
	    array('image/known'), 'compress',
	    array(array('type' => 'int', 'description' => 'size')), 'desc');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* applying dimension limits uses 'scale' */
	$ret = GalleryCoreApi::registerToolkitOperation('SizeLimitOptionTestToolkit',
	    array('image/known'), 'scale',
	    array(array('type' => 'int', 'description' => 'width'),
	    array('type' => 'int', 'description' => 'height')), 'desc');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* we will return dimensions to whoever asks */
	$ret = GalleryCoreApi::registerToolkitProperty('SizeLimitOptionTestToolkit',
	    array('image/known'), 'dimensions', 'int,int', 'desc');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	list ($ret, $this->_item) =
	    $this->_createRandomDataItem($this->_album->getId(), 'image/known',
					 array('summary' => 'original summary 0',
					 'description' => 'original description 0'));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return (GalleryStatus::success());
    }
}

/**
 * Test platform
 *
 * @package SizeLimit
 * @subpackage PHPUnit
 */
class SizeLimitOptionTestPlatform extends GalleryPlatform {

    function SizeLimitOptionTestPlatform($originalPlatform) {
	$this->_savedPlatform = $originalPlatform;
	GalleryUtilities::putRequestVariable('resizePerformed', false);
	GalleryUtilities::putRequestVariable('compressPerformed', false);
    }

    function filesize($file) {
	$size = GalleryUtilities::getRequestVariables('size_' . basename($file));
	if ($size) {
	    return $size;
	}
	return 26031966;
    }

    function getimagesize($file) {
	$imagesize = GalleryUtilities::getRequestVariables('imagesize_' . basename($file));
	if ($imagesize) {
  	    return array($imagesize[0], $imagesize[1]); /* doing it this way keeps CodeAudit happy */
	}
	return array(1728, 2304);
    }

    function file_exists($filename) {
	$compressPerformed = GalleryUtilities::getRequestVariables('compressPerformed');
	$resizePerformed = GalleryUtilities::getRequestVariables('resizePerformed');

	/* if we created a derivative make-believe that the file exists */
	if ($resizePerformed || $compressPerformed) {
	    return true;
	} else {
	    return $this->_savedPlatform->file_exists($filename);
	}
    }

    function unlink($filename) {
	/* if it is a derivative - we didn't really create it */
	if ($this->_savedPlatform->file_exists($filename)) {
	    return $this->_savedPlatform->unlink($filename);
	} else {
	    return true;
	}
    }
}

/**
 * Test toolkit
 * @package SizeLimit
 * @subpackage PHPUnit
 */
class SizeLimitOptionTestToolkit extends GalleryToolkit {
    /**
     * @see GalleryToolkit::performOperation()
     */
    function performOperation($mimeType, $operationName, $sourceFilename,
			      $destFilename, $parameters, $context=array()) {
	/* Here we are pretending that conversion happened by setting the flag */
	switch($operationName) {
	case 'compress':
	    GalleryUtilities::putRequestVariable('compressPerformed', true);
	    GalleryUtilities::putRequestVariable('size_' . basename($destFilename), 1000);
	    break;

	case 'scale':
	    GalleryUtilities::putRequestVariable('resizePerformed', true);
	    GalleryUtilities::putRequestVariable(
		'imagesize_' . basename($destFilename), array(768, 1024));
	    break;

	default:
	    return array(GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__), null, null);
	}

	$operations = array();
	$operationRequest = GalleryUtilities::getRequestVariables('operation');
	if (!empty($operationRequest)) {
	      $operations = $operationRequest;
	}
	$operations[] = $operationName;
	GalleryUtilities::putRequestVariable('operation', $operations);

	return array(GalleryStatus::success(), $mimeType, $context);
    }

    /**
     * @see GalleryToolkit::getProperty()
     */
    function getProperty($mimeType, $propertyName, $file) {
	global $gallery;

	/* Our 'mime type' has to support dimensions */
	switch($propertyName) {
	case 'dimensions':
	    $platform = $gallery->getPlatform();
	    $results = $platform->getimagesize($file);
	    break;

	default:
	    return array(GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $results);
    }
}
?>
