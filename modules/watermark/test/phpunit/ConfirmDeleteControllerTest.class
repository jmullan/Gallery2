<?php
/*
 * $RCSfile: ConfirmDeleteControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.8 $ $Date: 2005/08/23 03:49:57 $
 * @package Watermark
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Load required classes
 */
GalleryCoreApi::relativeRequireOnce('modules/watermark/classes/WatermarkHelper.class');
GalleryCoreApi::relativeRequireOnce('modules/watermark/classes/WatermarkImage.class');

/**
 * ConfirmDelete controller tests
 *
 * @package Watermark
 * @subpackage PHPUnit
 */
class ConfirmDeleteControllerTest extends GalleryControllerTestCase {

    function ConfirmDeleteControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'watermark.ConfirmDelete');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	list ($ret, $this->_user) = $this->_createUser();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_user);

	$this->_saveUser = $gallery->getActiveUser();
	$gallery->setActiveUser($this->_user);

	/* Create a watermark (it'll be created as our active user) */
	$watermark = new WatermarkImage();
	$ret = $watermark->create(__FILE__, 'test/file', 'phpunit_' . rand() . '.gif');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = $watermark->save();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $id) = GalleryCoreApi::getPluginParameter('module', 'core', 'id.adminGroup');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addGroupPermission($watermark->getId(), $id, 'core.all');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addUserPermission(
	    $watermark->getId(), $this->_user->getId(), 'core.all');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_watermark = $watermark;

	/* Create watermarked item */
	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_item);
	list ($ret, $this->_derivative) = $this->_createDerivative(
	    $this->_item, $this->_item->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL, '', 'test/file',
	    array('postfilterOperations' =>
		      'composite|plugins_data/modules/watermark/' .
		      $watermark->getFileName() . ',...'));
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testUserCancel() {
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);
	GalleryUtilities::putRequestVariable('form[watermarkId]', $this->_watermark->getId());

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'watermark.UserWatermarks'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testAdminCancel() {
	global $gallery;
	$gallery->setActiveUser($this->_saveUser);

	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);
	GalleryUtilities::putRequestVariable('form[watermarkId]', $this->_watermark->getId());
	GalleryUtilities::putRequestVariable('form[fromAdmin]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'watermark.WatermarkSiteAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testUserDelete() {
	GalleryUtilities::putRequestVariable('form[action][delete]', 1);
	GalleryUtilities::putRequestVariable('form[watermarkId]', $this->_watermark->getId());

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'watermark.UserWatermarks'),
				  'status' => array('delete' => 1),
				  'error' => array()),
			    $results);

	$ret = $this->_verifyMissing($this->_watermark->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $derivative) = $this->_derivative->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(null, $derivative->getPostfilterOperations(), 'not watermarked');
    }

    function testAdminDelete() {
	global $gallery;
	$gallery->setActiveUser($this->_saveUser);

	GalleryUtilities::putRequestVariable('form[action][delete]', 1);
	GalleryUtilities::putRequestVariable('form[watermarkId]', $this->_watermark->getId());
	GalleryUtilities::putRequestVariable('form[fromAdmin]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'watermark.WatermarkSiteAdmin'),
				  'status' => array('delete' => 1),
				  'error' => array()),
			    $results);

	$ret = $this->_verifyMissing($this->_watermark->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $derivative) = $this->_derivative->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(null, $derivative->getPostfilterOperations(), 'not watermarked');
    }
}
?>
