<?php
/*
 * $RCSfile: UserWatermarkEditControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.8 $ $Date: 2005/08/23 03:49:57 $
 * @package Watermark
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Load required classes
 */
GalleryCoreApi::relativeRequireOnce('modules/watermark/classes/WatermarkHelper.class');
GalleryCoreApi::relativeRequireOnce('modules/watermark/classes/WatermarkImage.class');

/**
 * UserWatermarkEdit controller tests
 *
 * @package Watermark
 * @subpackage PHPUnit
 */
class UserWatermarkEditControllerTest extends GalleryControllerTestCase {

    function UserWatermarkEditControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'watermark.UserWatermarkEdit');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	list ($ret, $this->_user) = $this->_createUser();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_user);

	$this->_saveUser = $gallery->getActiveUser();
	$gallery->setActiveUser($this->_user);

	/* Create a watermark */
	list ($ret, $this->_watermark) = $this->_createWatermark();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus(__FILE__, __LINE__);
	}
    }

    function _createWatermark() {
	global $gallery;

	$watermark = new WatermarkImage();
	$ret = $watermark->create(__FILE__, 'test/file', 'phpunit_' . rand() . '.gif');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$ret = $watermark->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$ret = GalleryCoreApi::addUserPermission($watermark->getId(),
						 $gallery->getActiveUserId(), 'core.all');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $watermark);
    }

    function tearDown() {
	if (isset($this->_idToDelete)) {
	    $ret = GalleryCoreApi::deleteEntityById($this->_idToDelete);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
	parent::tearDown();
    }

    function testEditWatermarkEverything() {
	GalleryUtilities::putRequestVariable('watermarkId', $this->_watermark->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[name]', 'foo bar');
	GalleryUtilities::putRequestVariable('form[xPercentage]', '25.51');
	GalleryUtilities::putRequestVariable('form[yPercentage]', '50.12');
	GalleryUtilities::putRequestVariable('form[whichDerivative][preferred]', 'on');
	GalleryUtilities::putRequestVariable('form[whichDerivative][resizes]', 'on');
	GalleryUtilities::putRequestVariable('form[whichDerivative][thumbnail]', 'on');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'watermark.UserWatermarks'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	// Verify the watermark
	list ($ret, $this->_watermark) = $this->_watermark->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('foo bar', $this->_watermark->getName());
	$this->assertEquals('25.51', $this->_watermark->getXPercentage());
	$this->assertEquals('50.12', $this->_watermark->getYPercentage());
	$this->assert($this->_watermark->getApplyToPreferred(), 'missing preferred');
	$this->assert($this->_watermark->getApplyToResizes(), 'missing resizes');
	$this->assert($this->_watermark->getApplyToThumbnail(), 'missing thumbnail');
    }

    function testEditWatermarkThumbnailOnly() {
	GalleryUtilities::putRequestVariable('watermarkId', $this->_watermark->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[name]', 'foo bar');
	GalleryUtilities::putRequestVariable('form[xPercentage]', '25.51');
	GalleryUtilities::putRequestVariable('form[yPercentage]', '50.12');
	GalleryUtilities::putRequestVariable('form[whichDerivative][thumbnail]', 'on');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'watermark.UserWatermarks'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	// Verify the watermark
	list ($ret, $this->_watermark) = $this->_watermark->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('foo bar', $this->_watermark->getName());
	$this->assertEquals('25.51', $this->_watermark->getXPercentage());
	$this->assertEquals('50.12', $this->_watermark->getYPercentage());
	$this->assert(!$this->_watermark->getApplyToPreferred(), 'shouldn\'t have preferred');
	$this->assert(!$this->_watermark->getApplyToResizes(), 'shouldn\'t have resizes');
	$this->assert($this->_watermark->getApplyToThumbnail(), 'missing thumbnail');
    }

    function testEditMissingEverything() {
	GalleryUtilities::putRequestVariable('watermarkId', $this->_watermark->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
						      'subView' => 'watermark.UserWatermarkEdit'),
				  'status' => array(),
				  'error' => array('form[error][name][missing]',
						   'form[error][whichDerivative][missing]')),
			    $results);

	// Verify the watermark
	list ($ret, $this->_watermark) = $this->_watermark->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(1, $this->_watermark->getSerialNumber());
    }

    function testEditWatermarkDuplicateName() {
	list ($ret, $watermark) = $this->_createWatermark();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('watermarkId', $this->_watermark->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[name]', $watermark->getName());
	GalleryUtilities::putRequestVariable('form[xPercentage]', '25.51');
	GalleryUtilities::putRequestVariable('form[yPercentage]', '50.12');
	GalleryUtilities::putRequestVariable('form[whichDerivative][resizes]', 'on');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.UserAdmin',
						      'subView' => 'watermark.UserWatermarkEdit'),
				  'status' => array(),
				  'error' => array('form[error][name][duplicate]')),
			    $results);
    }

    function testEditWatermarkSameNameAsOtherUserWatermark() {
	global $gallery;
	$gallery->setActiveUser($this->_saveUser);
	list ($ret, $watermark) = $this->_createWatermark();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_idToDelete = $watermark->getId();
	$gallery->setActiveUser($this->_user);

	GalleryUtilities::putRequestVariable('watermarkId', $this->_watermark->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[name]', $watermark->getName());
	GalleryUtilities::putRequestVariable('form[xPercentage]', '25.51');
	GalleryUtilities::putRequestVariable('form[yPercentage]', '50.12');
	GalleryUtilities::putRequestVariable('form[whichDerivative][resizes]', 'on');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'watermark.UserWatermarks'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	// Verify the watermark
	list ($ret, $this->_watermark) = $this->_watermark->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals($watermark->getName(), $this->_watermark->getName());
	$this->assertEquals('25.51', $this->_watermark->getXPercentage());
	$this->assertEquals('50.12', $this->_watermark->getYPercentage());
	$this->assert(!$this->_watermark->getApplyToPreferred(), 'shouldn\'t have preferred');
	$this->assert($this->_watermark->getApplyToResizes(), 'missing resizes');
	$this->assert(!$this->_watermark->getApplyToThumbnail(), 'shouldn\'t have thumbnail');
    }

    function testCancel() {
	GalleryUtilities::putRequestVariable('watermarkId', $this->_watermark->getId());
	GalleryUtilities::putRequestVariable('form[action][cancel]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'watermark.UserWatermarks'),
				  'status' => array(),
				  'error' => array()),
			    $results);

	// Verify the watermark
	list ($ret, $this->_watermark) = $this->_watermark->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(1, $this->_watermark->getSerialNumber());
    }

    function testBadCoordinates() {
	GalleryUtilities::putRequestVariable('watermarkId', $this->_watermark->getId());
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[name]', 'foo bar');
	GalleryUtilities::putRequestVariable('form[xPercentage]', '101.51');
	GalleryUtilities::putRequestVariable('form[yPercentage]', '-5.12');
	GalleryUtilities::putRequestVariable('form[whichDerivative][thumbnail]', 'on');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.UserAdmin',
						      'subView' => 'watermark.UserWatermarks'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	// Verify the watermark
	list ($ret, $this->_watermark) = $this->_watermark->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('100', $this->_watermark->getXPercentage());
	$this->assertEquals('0', $this->_watermark->getYPercentage());
    }
}
?>
