<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Watermark
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Load required classes
 */
GalleryCoreApi::relativeRequireOnce('modules/watermark/classes/WatermarkHelper.class');
GalleryCoreApi::relativeRequireOnce('modules/watermark/classes/WatermarkImage.class');

/**
 * UserWatermarks controller tests
 *
 * @package Watermark
 * @subpackage PHPUnit
 */
class UserWatermarksControllerTest extends GalleryControllerTestCase {

    function UserWatermarksControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'watermark:UserWatermarks');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	list ($ret, $this->_user) = $this->_createUser();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_saveUser = $gallery->getActiveUser();
	$gallery->setActiveUser($this->_user);
    }

    function tearDown() {
	global $gallery;
	$ret = $this->_deleteUser($this->_user);
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$gallery->setActiveUser($this->_saveUser);
	parent::tearDown();
    }

    function testAddWatermark() {
	global $gallery;
	$platform = $gallery->getPlatform();

	$dataFile = dirname(__FILE__) . '/../../../core/test/data/test1.gif';
	$rand = rand();
	$targetName = sprintf('phpunit_%s.gif', $rand);
	$expectedName = sprintf('phpunit_%s_gif', $rand);
	GalleryUtilities::putRequestVariable('form[action][add]', 1);
	GalleryUtilities::putRequestVariable('form[name][1]', $targetName);
	GalleryUtilities::putRequestVariable('form[type][1]', 'image/gif');
	GalleryUtilities::putRequestVariable('form[tmp_name][1]', $dataFile);
	GalleryUtilities::putRequestVariable('form[size][1]', $platform->filesize($dataFile));
	GalleryUtilities::putRequestVariable('form[error][1]', 0);

	$results = $this->handleRequest();
	$counter =& GalleryTestCase::getEntityCounter();
	$expectedId = $counter->getRecentEntityId('WatermarkImage');
	$this->assertEquals(array('redirect' => array('view' => 'core:UserAdmin',
						      'subView' => 'watermark:UserWatermarkEdit',
						      'itemId' => $expectedId),
				  'status' => array(),
				  'error' => array()),
			    $results);


	// Verify the watermark exists
	list ($ret, $map) = $this->_fetchWatermarkMapByFilename();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(isset($map[$expectedName]), 'Watermark not added');
    }

    function testAddWatermarkMissing() {
	global $gallery;
	GalleryUtilities::putRequestVariable('form[action][add]', 1);

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core:UserAdmin',
						      'subView' => 'watermark:UserWatermarks'),
				  'status' => array(),
				  'error' => array('form[error][missingFile]')),
			    $results);
    }

    function testDeleteWatermark() {
	global $gallery;
	
	/* Create a watermark (it'll be created as our active user) */
	$watermark = new WatermarkImage();
	$ret = $watermark->create(__FILE__, 'test/file', 'phpunit_' . rand() . '.gif');
	if ($ret->isError()) {
	    return $this->failWithStatus(__FILE__, __LINE__);
	}
	
	$ret = $watermark->save();
	if ($ret->isError()) {
	    return $this->failWithStatus(__FILE__, __LINE__);
	}

	GalleryUtilities::putRequestVariable('form[action][delete]', 1);
	GalleryUtilities::putRequestVariable('form[delete][itemId]', $watermark->getId());

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:UserAdmin',
						      'subView' => 'watermark:UserWatermarks'),
				  'status' => array('delete' => 1),
				  'error' => array()),
			    $results);

	$ret = $this->_verifyMissing($watermark->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus(__FILE__, __LINE__);
	}
    }

    function testIllegalDeleteWatermark() {
	GalleryUtilities::putRequestVariable('form[action][delete]', 1);
	GalleryUtilities::putRequestVariable('form[delete][itemId]', 1); // valid, but illegal

	$results = $this->handleRequest(ERROR_PERMISSION_DENIED);

	GalleryUtilities::putRequestVariable('form[action][delete]', 1);
	GalleryUtilities::putRequestVariable('form[delete][itemId]', 123456789); // invvalid and illegal

	$results = $this->handleRequest(ERROR_PERMISSION_DENIED);
    }

    function testAddMaliciousFile() {
	global $gallery;
	$platform = $gallery->getPlatform();

	$dataFile = dirname(__FILE__) . '/../../../core/test/data/test1.gif';
	$rand = rand();
	$targetName = sprintf('phpunit_%s.php', $rand);
	$expectedName = sprintf('phpunit_%s_php', $rand);
	GalleryUtilities::putRequestVariable('form[action][add]', 1);
	GalleryUtilities::putRequestVariable('form[name][1]', $targetName);
	GalleryUtilities::putRequestVariable('form[type][1]', 'image/gif');
	GalleryUtilities::putRequestVariable('form[tmp_name][1]', $dataFile);
	GalleryUtilities::putRequestVariable('form[size][1]', $platform->filesize($dataFile));
	GalleryUtilities::putRequestVariable('form[error][1]', 0);

	$results = $this->handleRequest();
	$counter =& GalleryTestCase::getEntityCounter();
	$expectedId = $counter->getRecentEntityId('WatermarkImage');
	$this->assertEquals(array('redirect' => array('view' => 'core:UserAdmin',
						      'subView' => 'watermark:UserWatermarkEdit',
						      'itemId' => $expectedId),
				  'status' => array(),
				  'error' => array()),
			    $results);


	// Verify the watermark exists
	list ($ret, $map) = $this->_fetchWatermarkMapByFilename();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	if (!isset($map[$expectedName])) {
	    return $this->assert(isset($map[$expectedName]), 'Watermark not added');
	}

	list ($ret, $path) = $map[$expectedName]->fetchPath();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	// We're expecting the same name, but the . changed to _ in the file extension
	$this->assertEquals($expectedName, basename($path));
    }

    function _fetchWatermarkMapByFilename() {
	list ($ret, $watermarks) = WatermarkHelper::fetchWatermarks();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$results = array();
	foreach ($watermarks as $id => $watermark) {
	    $results[$watermark->getFilename()] = $watermark;
	}
	return array(GalleryStatus::success(), $results);
    }
}
?>
