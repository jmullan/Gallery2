<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */
GalleryCoreApi::relativeRequireOnce('modules/watermark/classes/WatermarkHelper.class');

/**
 * Test WatermarkHelper functionality
 *
 * @package GalleryCore
 * @subpackage PHPUnit
 *
 */
class WatermarkTest extends GalleryTestCase {

    function WatermarkTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	/* Create a watermark */
	$watermark = new WatermarkImage();
	$ret = $watermark->create(__FILE__, 'test/file', 'phpunit_' . rand() . '.gif');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus(__FILE__, __LINE__);
	}
	
	$ret = $watermark->save();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus(__FILE__, __LINE__);
	}

	$this->_watermark = $watermark;
    }

    function tearDown() {
	global $gallery;

	$ret = GalleryCoreApi::deleteEntityById($this->_watermark->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus(__FILE__, __LINE__);
	}
	    
	parent::tearDown();
    }

    function testFetchWatermarks1() {
	global $gallery;
	
	/* We never gave permission to our test watermark, so it shouldn't show up */
	list ($ret, $watermarks) = WatermarkHelper::fetchWatermarks();
	if ($ret->isError()) {
	    return $this->failWithStatus(__FILE__, __LINE__);
	}

	$this->assert(!isset($watermarks[$this->_watermark->getId()]), 'Watermark appears when it shouldn\'t');
    }
    
    function testFetchWatermarks2() {
	global $gallery;
	
	/* Give permission for us to see the watermark */
	$ret = GalleryCoreApi::addUserPermission($this->_watermark->getId(), $gallery->getActiveUserId(),
						 'core.all');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list ($ret, $watermarks) = WatermarkHelper::fetchWatermarks();
	if ($ret->isError()) {
	    return $this->failWithStatus(__FILE__, __LINE__);
	}

	$this->assert(isset($watermarks[$this->_watermark->getId()]), 'Watermark doesn\'t appear when it should');
    }

    function testFetchWatermarksByOwnerId1() {
	global $gallery;
	
	list ($ret, $watermarkIds) = WatermarkHelper::fetchWatermarkIdsByOwnerId($gallery->getActiveUserId());
	if ($ret->isError()) {
	    return $this->failWithStatus(__FILE__, __LINE__);
	}

	$this->assert(in_array($this->_watermark->getId(), $watermarkIds), 'Watermark doesn\'t appear when it should');
    }

    function testFetchWatermarksByOwnerId2() {
	global $gallery;

        // Use a random/bogus user id
	list ($ret, $watermarkIds) = WatermarkHelper::fetchWatermarkIdsByOwnerId(1234567);
	if ($ret->isError()) {
	    return $this->failWithStatus(__FILE__, __LINE__);
	}

	$this->assert(!in_array($this->_watermark->getId(), $watermarkIds), 'Watermark appears when it shouldn\'t');
    }
}

?>
