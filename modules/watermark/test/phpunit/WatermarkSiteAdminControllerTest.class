<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Watermark
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Load required classes
 */
require_once(dirname(__FILE__) . '/../../classes/WatermarkHelper.class');

/**
 * WatermarkSiteAdmin controller tests
 * Also tests WatermarkHelper::fetchWatermarks()
 *
 * @package Watermark
 * @subpackage PHPUnit
 */
class WatermarkSiteAdminControllerTest extends GalleryControllerTestCase {

    function WatermarkSiteAdminControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'watermark:WatermarkSiteAdmin');
    }

    function setUp() {
	parent::setUp();
	$this->_randomName = 'phpunit_' . rand() . '.jpg';

	// Get the list of watermarks before, then after delete any that we created
	list ($ret, $this->_beforeWatermarks) = WatermarkHelper::fetchWatermarks();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	// Get the list of watermarks before, then after delete any that we created
	list ($ret, $this->_afterWatermarks) = WatermarkHelper::fetchWatermarks();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	foreach (array_keys($this->_afterWatermarks) as $id) {
	    if (!isset($this->_beforeWatermarks[$id])) {
		$ret = GalleryCoreApi::deleteEntityById($id);
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
	    }
	}

	parent::tearDown();
    }

    function testNoFile() {
	// No file
	GalleryUtilities::putRequestVariable('form[action][add]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'watermark:WatermarkSiteAdmin'),
				  'status' => array('add_error' => 1),
				  'error' => array()),
			    $results, 'No file');
    }

    function testAdd() {
	// Add
	GalleryUtilities::putRequestVariable('form[action][add]', '1');
	GalleryUtilities::putRequestVariable('form[name][1]', $this->_randomName);
	GalleryUtilities::putRequestVariable('form[type][1]', 'image/jpeg');
	GalleryUtilities::putRequestVariable('form[tmp_name][1]',
	    dirname(__FILE__) . '/../../../core/test/data/test1.jpg');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'watermark:WatermarkSiteAdmin'),
				  'status' => array('add' => 1),
				  'error' => array()),
			    $results, 'Add');

	// Verify 
	list ($ret, $map) = $this->_fetchWatermarkMap();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(isset($map[$this->_randomName]), 'Watermark is missing');
    }

    function testAddDuplicate() {
	for ($i = 0; $i < 2; $i++) {
	    // Add
	    GalleryUtilities::putRequestVariable('form[action][add]', '1');
	    GalleryUtilities::putRequestVariable('form[name][1]', $this->_randomName);
	    GalleryUtilities::putRequestVariable('form[type][1]', 'image/jpeg');
	    GalleryUtilities::putRequestVariable('form[tmp_name][1]',
                dirname(__FILE__) . '/../../../core/test/data/test1.jpg');

	    $results = $this->handleRequest();
	    $this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
							  'subView' => 'watermark:WatermarkSiteAdmin'),
				      'status' => array('add' => 1),
				      'error' => array()),
				$results, 'Add');
	}

	// Verify 
	list ($ret, $map) = $this->_fetchWatermarkMap();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(isset($map[$this->_randomName]), 'Watermark is missing');
	$this->assert(isset($map['_' . $this->_randomName]), 'Watermark 2 is missing');
    }

    function testAddWrongMimeType() {
	// Add same name, browser doesn't send correct mime type
	GalleryUtilities::putRequestVariable('form[action][add]', '1');
	GalleryUtilities::putRequestVariable('form[name][1]', $this->_randomName);
	GalleryUtilities::putRequestVariable('form[type][1]', 'image/jpeg');
	GalleryUtilities::putRequestVariable('form[type][1]', 'application/octet-stream');
	GalleryUtilities::putRequestVariable('form[tmp_name][1]',
            dirname(__FILE__) . '/../../../core/test/data/test1.jpg');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'watermark:WatermarkSiteAdmin'),
				  'status' => array('add' => 1),
				  'error' => array()),
			    $results, 'Add same name, bad mime');

	list ($ret, $map) = $this->_fetchWatermarkMap();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $item) = GalleryCoreApi::loadEntitiesById($map[$this->_randomName]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('image/jpeg', $item->getMimeType(), 'Watermark mime type incorrect');
    }

    function testDelete() {
	// Create something to delete
	GalleryUtilities::putRequestVariable('form[action][add]', '1');
	GalleryUtilities::putRequestVariable('form[name][1]', $this->_randomName);
	GalleryUtilities::putRequestVariable('form[type][1]', 'image/jpeg');
	GalleryUtilities::putRequestVariable('form[tmp_name][1]',
	    dirname(__FILE__) . '/../../../core/test/data/test1.jpg');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'watermark:WatermarkSiteAdmin'),
				  'status' => array('add' => 1),
				  'error' => array()),
			    $results, 'Add');

	list ($ret, $map) = $this->_fetchWatermarkMap();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	// Delete it
	GalleryUtilities::removeFormVariables('form');
	GalleryUtilities::putRequestVariable('form[action][delete]', '1');
	GalleryUtilities::putRequestVariable('form[delete][itemId]', $map[$this->_randomName]);

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
						      'subView' => 'watermark:WatermarkSiteAdmin'),
				  'status' => array('delete' => 1),
				  'error' => array()),
			    $results, 'Delete');

	// Verify that it's gone
	$ret = $this->_verifyMissing($map[$this->_randomName]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function _fetchWatermarkMap() {
	list ($ret, $items) = WatermarkHelper::fetchWatermarks();
	if ($ret->isError()) {
	    return array($this->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), array_flip($items));
    }
}
?>
