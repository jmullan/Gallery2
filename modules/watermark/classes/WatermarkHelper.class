<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Watermark
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * A helper class for the Watermark module.
 *
 * @package Watermark
 * @subpackage Classes
 */
class WatermarkHelper {

    /**
     * Return a map of itemId => fileName
     *
     * You can specify how many items to list, and where the windows is in
     * the list of all items.
     *
     * @param int [optional] the number of items desired
     * @param int [optional] the start of the range
     * @param string [optional] a substring to match
     * @return array object GalleryStatus a status code
     *               array of itemId=>fileName
     * @static
     */
    function fetchWatermarks($count=null, $offset=null, $substring=null) {
	global $gallery;

	list ($ret, $permissionBits) =
	    GalleryCoreApi::convertPermissionIdsToBits(array('core.viewSource'));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	list ($ret, $groupIds) = GalleryCoreApi::fetchGroupsForUser($gallery->getActiveUserId());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$storage =& $gallery->getStorage();
	$groupIds = array_keys($groupIds);
	$groupIdMarkers = GalleryUtilities::makeMarkers($groupIds);
	list ($ret, $andPermission) =
	    $storage->getFunctionSql('BITAND', array('[GalleryPermissionMap::permission]', '?'));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	
	$data = array();
	$query = '
	SELECT
	  [WatermarkImage::id],
	  [WatermarkImage::ownerId],
	  [WatermarkImage::fileName]
	FROM
	  [WatermarkImage], [GalleryPermissionMap]
	WHERE
          [GalleryPermissionMap::itemId] = [WatermarkImage::id]
          AND
          ([GalleryPermissionMap::userId] = ?
           OR
           [GalleryPermissionMap::groupId] IN (' . $groupIdMarkers . '))
          AND ' . $andPermission . ' = ?';
	$data[] = $gallery->getActiveUserId();
	array_splice($data, sizeof($data), 0, $groupIds);
	$data[] = $storage->convertIntToBits($permissionBits);
	$data[] = $storage->convertIntToBits($permissionBits);

	if (!empty($substring)) {
	    $query .= '
          AND
	  [WatermarkImage::fileName] LIKE ?
	    ';
	    $data[] = "%$substring%";
	}

	$query .= '
	ORDER BY
	  [WatermarkImage::fileName] ASC
	';

	list ($ret, $searchResults) =
	    $gallery->search($query, $data,
			     array('limit' => array('count' => $count,
						    'offset' => $offset)));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$items = array();
	while ($result = $searchResults->nextResult()) {
	    list($items[$result[0]]['ownerId'],
		 $items[$result[0]]['fileName']) = array($result[1], $result[2]);
	}

	return array(GalleryStatus::success(), $items);
    }

    /**
     * Return all watermark ids owned by a given user id
     *
     * @param int the owner id
     * @return array object GalleryStatus a status code
     *               array of itemIds
     * @static
     */
    function fetchWatermarkIdsByOwnerId($ownerId) {
	global $gallery;
	
	$query = '
	SELECT
	  [WatermarkImage::id]
	FROM
	  [WatermarkImage]
	WHERE
          [WatermarkImage::ownerId] = ?
	';
	$data = array($ownerId);

	list ($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$ids = array();
	while ($result = $searchResults->nextResult()) {
	    $ids[] = $result[0];
	}

	return array(GalleryStatus::success(), $ids);
    }
    
}
?>
