<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Hidden
 * @author Alan Harder <alan.harder@sun.com>
 */

GalleryCoreApi::requireOnce('modules/hidden/classes/HiddenInterface_1_0.class');

/**
 * Hidden Items Helper provides functions that assist the UI by changing permissions
 * on items and other necessary things.
 *
 * @package Hidden
 * @subpackage Classes
 */
class HiddenHelper extends HiddenInterface_1_0 {

    /**
     * Hides an item.
     *
     * Remove public view permission (core.view for anonymous user or everybody group)
     * and add session based permission for core.view.  Add an onLoadHandler that will
     * grant this permission to the session when core.ShowItem view is directly accessed
     * for this item.
     * If an album, cascades the effects to all contained items that aren't already hidden.
     * Thus all contents of the album are hidden and become visible when the album is accessed.
     *
     * @param object GalleryItem the item to be hidden
     * @param used in recursive calls
     * @param used in recursive calls
     * @return object GalleryStatus a status code
     * @static
     */
    function hideItem(&$item, $hideId=null, $hiddenAncestor=null) {
	/* If item is already hidden, we're done */
	if ($item->hasOnLoadHandler('Hidden')) {
	    return null;
	}
	$itemId = $item->getId();
	if (!isset($hideId)) {
	    $hideId = $itemId;
	}

	/* Remove public view permission */
	static $coreParams;
	if (!isset($coreParams)) {
	    list ($ret, $coreParams) = GalleryCoreApi::fetchAllPluginParameters('module', 'core');
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}
	$ret = GalleryCoreApi::removeUserPermission(
		$itemId, $coreParams['id.anonymousUser'], 'core.view');
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$ret = GalleryCoreApi::removeGroupPermission(
		$itemId, $coreParams['id.everybodyGroup'], 'core.view');
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Remove session based permission for a hidden ancestor */
	if (!isset($hiddenAncestor)) {
	    list ($ret, $parents) = GalleryCoreApi::fetchParents($item);
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $hiddenAncestor = false;
	    foreach ($parents as $parent) {
		if ($parent->hasOnLoadHandler('Hidden')) {
		    $hiddenAncestor = $parent->getId();
		}
	    }
	}
	if ($hiddenAncestor) {
	    $ret = GalleryCoreApi::removeEntityPermission($itemId, $hiddenAncestor, 'core.view');
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	/* Add session based permission */
	$ret = GalleryCoreApi::addEntityPermission($itemId, $hideId, 'core.view');
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Set onLoadHandler */
	if ($itemId == $hideId) {
	    list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($itemId);
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    list ($ret, $item) = $item->refresh();
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $item->addOnLoadHandler('Hidden');
	    $ret = $item->save();
	    if ($ret) {
		GalleryCoreApi::releaseLocks($lockId);
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $ret = GalleryCoreApi::releaseLocks($lockId);
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	/* Now apply to children as well */
	if ($item->getCanContainChildren()) {
	    list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIdsIgnorePermissions($item);
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    if (!empty($childIds)) {
		list ($ret, $childItems) = GalleryCoreApi::loadEntitiesById($childIds);
		if ($ret) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		foreach ($childItems as $child) {
		    $ret = HiddenHelper::hideItem($child, $hideId, $hiddenAncestor);
		    if ($ret) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		}
	    }
	}

	if ($hideId == $itemId) {
	    $ret = GalleryCoreApi::maybeCompactAccessLists();
	    if ($ret && !($ret->getErrorCode() & ERROR_LOCK_TIMEOUT)) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	return null;
    }

    /**
     * Remove the hiding of the item by adding back core.view permissions to either anonymous
     * user or everybody group if they have either core.viewResizes or core.viewSource.
     * If an album, cascade the effects to all child items that are not hidden themselves.
     *
     * @param object GalleryItem the item to unhide
     * @param used in recursive calls
     * @param used in recursive calls
     * @return object GalleryStatus a status code
     * @static
     */
    function unHideItem(&$item, $hideId=null, $hiddenAncestor=null) {
	/* If given item is not hidden or subitem is hidden, we're done */
	if ($item->hasOnLoadHandler('Hidden') == isset($hideId)) {
	    return null;
	}
	$itemId = $item->getId();
	if (!isset($hideId)) {
	    $hideId = $itemId;
	}

	/* Remove session based permission */
	$ret = GalleryCoreApi::removeEntityPermission($itemId, $hideId, 'core.view');
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	/* Check for a hidden ancestor */
	if (!isset($hiddenAncestor)) {
	    list ($ret, $parents) = GalleryCoreApi::fetchParents($item);
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $hiddenAncestor = false;
	    foreach ($parents as $parent) {
		if ($parent->hasOnLoadHandler('Hidden')) {
		    $hiddenAncestor = $parent->getId();
		}
	    }
	}
	if ($hiddenAncestor) {
	    /* Mark as hidden under a different id */
	    $ret = GalleryCoreApi::addEntityPermission($itemId, $hiddenAncestor, 'core.view');
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	} else {
	    /* Restore public view permission */
	    static $coreParams;
	    if (!isset($coreParams)) {
		list ($ret, $coreParams) =
		    GalleryCoreApi::fetchAllPluginParameters('module', 'core');
		if ($ret) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	    list ($ret, $permissions) = GalleryCoreApi::fetchAllPermissionsForItem($itemId);
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $userSee = $groupSee = false;
	    foreach ($permissions as $permission) {
		if (!in_array($permission['permission'],
			      array('core.viewResizes', 'core.viewSource'))) {
		    continue;
		}
		if (!$userSee && isset($permission['userId'])
			&& $permission['userId'] == $coreParams['id.anonymousUser']) {
		    $ret = GalleryCoreApi::addUserPermission(
			    $itemId, $coreParams['id.anonymousUser'], 'core.view');
		    if ($ret) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		}
		if (!$groupSee && isset($permission['groupId'])
			&& $permission['groupId'] == $coreParams['id.everybodyGroup']) {
		    $ret = GalleryCoreApi::addGroupPermission(
			    $itemId, $coreParams['id.everybodyGroup'], 'core.view');
		    if ($ret) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		}
	    }
	}

	/* Remove onLoadHandler */
	if ($itemId == $hideId) {
	    list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($itemId);
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    list ($ret, $item) = $item->refresh();
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $item->removeOnLoadHandler('Hidden');
	    $ret = $item->save();
	    if ($ret) {
		GalleryCoreApi::releaseLocks($lockId);
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $ret = GalleryCoreApi::releaseLocks($lockId);
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	/* Now apply to children as well */
	if ($item->getCanContainChildren()) {
	    list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIdsIgnorePermissions($item);
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    if (!empty($childIds)) {
		list ($ret, $childItems) = GalleryCoreApi::loadEntitiesById($childIds);
		if ($ret) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		foreach ($childItems as $child) {
		    $ret = HiddenHelper::unHideItem($child, $hideId, $hiddenAncestor);
		    if ($ret) {
			return $ret->wrap(__FILE__, __LINE__);
		    }
		}
	    }
	}

	if ($hideId == $itemId) {
	    $ret = GalleryCoreApi::maybeCompactAccessLists();
	    if ($ret && !($ret->getErrorCode() & ERROR_LOCK_TIMEOUT)) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	return null;
    }

    /**
     * Update permissions as needed for appropriate hidden status when moving an item.
     *
     * @param object GalleryItem item that has moved
     * @return object GalleryStatus a status code
     */
    function handleMoveItem($item) {
	$oldParentId = $item->getOriginalValue('parentId');
	$newParentId = $item->getParentId();
	list ($ret, $parents) =
	    GalleryCoreApi::loadEntitiesById(array($oldParentId, $newParentId));
	if ($ret) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	foreach ($parents as $parent) {
	    list ($ret, $ancestors) = GalleryCoreApi::fetchParents($parent);
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $ancestors[] = $parent;
	    $hiddenAncestor = false;
	    foreach ($ancestors as $ancestor) {
		if ($ancestor->hasOnLoadHandler('Hidden')) {
		    $hiddenAncestor = $ancestor->getId();
		}
	    }
	    $hiddenAncestors[] = $hiddenAncestor;
	}
	if ($hiddenAncestors[1]) {
	    /* New location is hidden */
	    $ret = HiddenHelper::hideItem($item, $hiddenAncestors[1], $hiddenAncestors[0]);
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	} else if ($hiddenAncestors[0]) {
	    /* Old location was hidden, new location is not */
	    $ret = HiddenHelper::unHideItem($item, $hiddenAncestors[0], false);
	    if ($ret) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}
	return null;
    }

    /**
     * See HiddenInterface_1_0::isHidden
     */
    function isHidden($item) {
	return (null, $item->hasOnLoadHandler('Hidden'));
    }
}
?>
