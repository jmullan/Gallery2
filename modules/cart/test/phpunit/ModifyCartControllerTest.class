<?php
/*
 * $RCSfile: ModifyCartControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.11 $ $Date: 2005/08/23 03:49:01 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * ModifyCart controller tests
 * @package GalleryCore
 * @subpackage PHPUnit
 */
class ModifyCartControllerTest extends GalleryControllerTestCase {

    function ModifyCartControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'cart.ModifyCart');
    }

    function setUp() {
	global $gallery;

	parent::setUp();

	/* create an album to hold all of the test items */
	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_album);

	/* Save the existing cart */
	list($ret, $this->_saveCartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$cartItemCounts = array(1 => 3,
				2 => 3);
	$ret = CartHelper::setCartItemCounts($cartItemCounts);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	global $gallery;

	/* Restore the existing cart */
	$ret = CartHelper::setCartItemCounts($this->_saveCartItemCounts);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::tearDown();
    }

    function testUpdateCart() {

	GalleryUtilities::putRequestVariable('form[delete][1]', 'on');
	GalleryUtilities::putRequestVariable('form[counts][2]', 5);
	GalleryUtilities::putRequestVariable('form[action][modify]', 1);
	GalleryUtilities::putRequestVariable('form[pluginId]', 'updateCart');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'cart.ViewCart'),
				  'status' => array('cartModified' => 1),
				  'error' => array()),
			    $results);

	/* Verify our cart */
	list($ret, $cartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array(2 => 5), $cartItemCounts);
    }

    function testEmptyCart() {
	GalleryUtilities::putRequestVariable('form[action][modify]', 1);
	GalleryUtilities::putRequestVariable('form[pluginId]', 'emptyCart');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'cart.ViewCart'),
				  'status' => array('cartModified' => 1),
				  'error' => array()),
			    $results);


	/* Verify our cart */
	list($ret, $cartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array(), $cartItemCounts);
    }
}
?>
