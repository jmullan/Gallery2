<?php
/*
 * $RCSfile: CartHelperTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.11 $ $Date: 2005/09/03 13:44:59 $
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Required classes
 */
GalleryCoreApi::relativeRequireOnce('modules/cart/classes/CartHelper.class');

/**
 * Test Cart functionality
 *
 * @package Cart
 * @subpackage PHPUnit
 *
 */
class CartHelperTest extends GalleryTestCase {

    function CartHelperTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	/* Save the existing cart */
	list($ret, $this->_saveCartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$cartItemCounts = array(1 => 3,
				2 => 3);
	$ret = CartHelper::setCartItemCounts($cartItemCounts);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	/* Restore the existing cart */
	$ret = CartHelper::setCartItemCounts($this->_saveCartItemCounts);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	parent::tearDown();
    }

    function testAddItemsToCart() {
	$ret = CartHelper::addItemsToCart(array(4, 5));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify */
	list($ret, $newCartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array(1 => 3,
				  2 => 3,
				  4 => 1,
				  5 => 1),
			    $newCartItemCounts);
    }

    function testEmptyCart() {
	$ret = CartHelper::setCartItemCounts(array());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify */
	list($ret, $newCartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array(), $newCartItemCounts);
    }

    function testSetCartItemCounts() {
	$ret = CartHelper::setCartItemCounts(array(2 => 3, 4 => 5));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify */
	list($ret, $newCartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array(2 => 3, 4 => 5), $newCartItemCounts);
    }

    function testSetCartItemCounts2() {
	/* Empty it out */
	$ret = CartHelper::setCartItemCounts(array());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Fill it again */
	$ret = CartHelper::setCartItemCounts(array(2 => 3, 4 => 5));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify */
	list($ret, $newCartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array(2 => 3, 4 => 5), $newCartItemCounts);
    }

    function testLoadCartItems() {
	list ($ret, $item) = $this->_createRandomDataItem($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($item);
	list ($ret, $item2) = $this->_createRandomDataItem($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($item2);
	$ret = GalleryCoreApi::removeItemPermissions($item2->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = CartHelper::setCartItemCounts(
	    array($item2->getId() => 1, '1000000' => 3, $item->getId() => 2));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Load cart items and verify invalid id and no-permission item were removed from cart */
	list ($ret, $cartItems) = CartHelper::loadCartItems();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($item), $cartItems, 'cart items');

	list($ret, $cartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($item->getId() => 2), $cartItemCounts, 'deleted invalid');
    }

    /* Make sure it works even when the cart is empty */
    function testLoadEmptyCartItems() {
	/* Set an empty cart */
	$ret = CartHelper::setCartItemCounts(array());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Just make sure it's really empty */
	list($ret, $cartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), $cartItemCounts, 'preparation of test failed');
	
	/* Load the items */
	list ($ret, $cartItems) = CartHelper::loadCartItems();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), $cartItems, 'cart items');
    }
}
?>
