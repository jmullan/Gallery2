<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package GalleryCore
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Required classes
 */
require_once(dirname(__FILE__) . '/../../classes/CartHelper.class');

/**
 * Test Cart functionality
 *
 * @package Cart
 * @subpackage PHPUnit
 *
 */
class CartHelperTest extends GalleryTestCase {

    function CartHelperTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;

	/* Save the existing cart */
	list($ret, $this->_saveCartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$cartItemCounts = array(1 => 3,
				2 => 3);
	$ret = CartHelper::setCartItemCounts($cartItemCounts);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	parent::setUp();
    }

    function tearDown() {
	global $gallery;

	/* Restore the existing cart */
	$ret = CartHelper::setCartItemCounts($this->_saveCartItemCounts);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	parent::tearDown();
    }

    function testAddItemsToCart() {
	$ret = CartHelper::addItemsToCart(array(4, 5));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify */
	list($ret, $newCartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array(1 => 3,
				  2 => 3,
				  4 => 1,
				  5 => 1),
			    $newCartItemCounts);
    }

    function testEmptyCart() {
	$ret = CartHelper::setCartItemCounts(array());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify */
	list($ret, $newCartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array(), $newCartItemCounts);
    }
    
    function testSetCartItemCounts() {
	$ret = CartHelper::setCartItemCounts(array(2 => 3, 4 => 5));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify */
	list($ret, $newCartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array(2 => 3, 4 => 5), $newCartItemCounts);
    }

    function testSetCartItemCounts2() {
	/* Empty it out */
	$ret = CartHelper::setCartItemCounts(array());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Fill it again */
	$ret = CartHelper::setCartItemCounts(array(2 => 3, 4 => 5));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Verify */
	list($ret, $newCartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals(array(2 => 3, 4 => 5), $newCartItemCounts);
    }

    function testDeleteItemWhileInCart() {
	/* Add item and verify */
	list ($ret, $item) = $this->_createRandomDataItem($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = CartHelper::addItemsToCart(array($item->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list($ret, $cartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(1 => 3,
				  2 => 3,
				  $item->getId() => 1), $cartItemCounts, 'add item');

	/* Delete item and verify it was removed from cart */
	$ret = GalleryCoreApi::deleteEntityById($item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list($ret, $cartItemCounts) = CartHelper::fetchCartItemCounts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(1 => 3,
				  2 => 3), $cartItemCounts, 'deleted item');
    }
}
?>
