<?php
/*
 * $RCSfile: NewItemsSiteAdminControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.6 $ $Date: 2005/08/23 03:49:47 $
 * @package NewItems
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Load required classes
 */
GalleryCoreApi::relativeRequireOnce('modules/newitems/classes/NewItemsHelper.class');

/**
 * NewItemsSiteAdmin controller tests
 * Also tests NewItemsHelper::fetchAlbumCount,resetNewItemSorts
 *
 * @package NewItems
 * @subpackage PHPUnit
 */
class NewItemsSiteAdminControllerTest extends GalleryControllerTestCase {

    function NewItemsSiteAdminControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'newitems.NewItemsSiteAdmin');
    }

    function setUp() {
	parent::setUp();

	$ret = $this->_markPluginParametersForCleanup('module', 'newitems');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $this->_markPluginParametersForCleanup('module', 'core');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::setPluginParameter('module', 'core', 'default.orderBy', 'NewItems');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId(),
	    array('orderBy' => 'NewItems', 'orderDirection' => ORDER_DESCENDING));
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_album);
    }

    function testNewItemsSiteAdminControllerUndo() {

	GalleryUtilities::putRequestVariable('form[action][undo]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'newitems.NewItemsSiteAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }

    function testNewItemsSiteAdminControllerSave() {

	GalleryUtilities::putRequestVariable('form[days][new]', '13');
	GalleryUtilities::putRequestVariable('form[days][updated]', '11');
	GalleryUtilities::putRequestVariable('form[action][save]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'newitems.NewItemsSiteAdmin'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	list ($ret, $days) = GalleryCoreApi::getPluginParameter('module', 'newitems', 'days.new');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('13', $days, 'days');
    }

    function testNewItemsSiteAdminControllerSaveNoData() {

	GalleryUtilities::putRequestVariable('form[action][save]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'newitems.NewItemsSiteAdmin'),
				  'status' => array(),
				  'error' => array('form[error][new]', 'form[error][updated]')),
			    $results);
    }

    function testNewItemsSiteAdminControllerSaveBadData() {

	GalleryUtilities::putRequestVariable('form[days][new]', '30');
	GalleryUtilities::putRequestVariable('form[days][updated]', 'abc123');
	GalleryUtilities::putRequestVariable('form[action][save]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('delegate' => array('view' => 'core.SiteAdmin',
						      'subView' => 'newitems.NewItemsSiteAdmin'),
				  'status' => array(),
				  'error' => array('form[error][updated]')),
			    $results);
    }

    function testNewItemsSiteAdminControllerReset() {
	$ret = $this->_saveNewItemSorts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $count) = NewItemsHelper::fetchAlbumCount();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($count > 0, 'Should be at least one NewItems sort in db');

	GalleryUtilities::putRequestVariable('form[action][reset]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'newitems.NewItemsSiteAdmin'),
				  'status' => array('reset' => 1),
				  'error' => array()),
			    $results);

	list ($ret, $count) = NewItemsHelper::fetchAlbumCount();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(0, $count, 'Should be no NewItems sorts in db after reset');

	$ret = $this->_restoreNewItemSorts();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $defaultSort) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'default.orderBy');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('orderWeight', $defaultSort, 'default sort');
    }

    function _saveNewItemSorts() {
	global $gallery;
	$query = 'SELECT [GalleryAlbumItem::id], [GalleryAlbumItem::orderDirection]
	FROM [GalleryAlbumItem] WHERE [GalleryAlbumItem::orderBy] = \'NewItems\'';

	list ($ret, $results) = $gallery->search($query);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$ids = array();
	while ($result = $results->nextResult()) {
	    $ids[(int)$result[0]] = $result[1];
	}
	$this->_newItemSortIds = $ids;
	return GalleryStatus::success();
    }

    function _restoreNewItemSorts() {
	if (empty($this->_newItemSortIds)) {
	    return GalleryStatus::success();
	}
	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock(array_keys($this->_newItemSortIds));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	list ($ret, $items) = GalleryCoreApi::loadEntitiesById(array_keys($this->_newItemSortIds));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	foreach ($items as $item) {
	    $item->setOrderBy('NewItems');
	    $item->setOrderDirection($this->_newItemSortIds[$item->getId()]);
	    $ret = $item->save();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	return GalleryStatus::success();
    }
}
?>
