<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package NewItems
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * NewItems tests
 *
 * @package NewItems
 * @subpackage PHPUnit
 */
class NewItemsTest extends GalleryTestCase {

    function NewItemsTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	$ret = $this->_markPluginParametersForCleanup('module', 'newitems');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'newitems', 'days.new', '1');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'newitems', 'days.updated', '1');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId(),
		array('orderBy' => 'NewItems|title', 'orderDirection' => ORDER_DESCENDING));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$this->_markForCleanup($this->_album);

	for ($i = 1; $i <= 3; $i++) {
	    $fields = array('title' => 'title ' . $i);
	    if ($i != 2) {
		$fields['creationTimestamp'] = time() - 108000;
	    }
	    list ($ret, $this->_items[$i]) = $this->_createRandomDataItem($this->_album->getId(),
									  'test/file', $fields);
	    if ($ret) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret);
	    }
	}
    }

    function testGetItemSummaries() {
	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'newitems');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $content) = $module->getItemSummaries($this->_items, array());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals(3, count($content), 'item count');
	$this->assert(strpos($content[$this->_items[1]->getId()], 'giUpdated'), '1=Updated');
	$this->assert(strpos($content[$this->_items[2]->getId()], 'giNew'), '2=New');
	$this->assert(strpos($content[$this->_items[3]->getId()], 'giUpdated'), '3=Updated');
    }

    function testSortOrder() {
	list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($this->_album);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(
	    array($this->_items[2]->getId(), $this->_items[3]->getId(), $this->_items[1]->getId()),
	    $childIds, 'order of child ids');
    }
}
?>
