<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Mime
 * @subpackage PHPUnit
 * @author Felix Rabinovich <felix@rabinovich.org>
 */

GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryMimeTypeMap.class');
class MimeAdminControllerTest extends GalleryControllerTestCase {

    function MimeAdminControllerTest($methodName) {
        $this->GalleryControllerTestCase($methodName, 'mime:MimeAdmin');
    }

    function setUp() {
        parent::setUp();        
        $mimeTypeMap = array('extension' => 'xxx', 'mimeType' => 'test/test',
            'viewable' => 0);
        $ret = GalleryMimeTypeMap::addMapEntry($mimeTypeMap);    
        if ($ret->isError()) {
            print $ret->getAsHtml();
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
    }
    
    function tearDown() {
        $ret = GalleryMimeTypeMap::removeMapEntry(array('mimeType' =>'test/test'));    
        if ($ret->isError()) {
            print $ret->getAsHtml();
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }
        parent::tearDown();
    }
        
    function testDelete() {
        GalleryUtilities::putRequestVariable('form[action][delete]', 'test/test');
        $results = $this->handleRequest();
        $this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
                  'subView' => 'mime:MimeAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results, 'Delete');
        list ($ret, $extensions) = GalleryCoreApi::convertMimeToExtensions('test/test');
        if ($ret->isError()) {
            return array($ret->wrap(__FILE__, __LINE__), null);
        }
        $this->assertEquals(null, $extensions, 'Delete results');
    }    
    
    function testAdd() {
        GalleryUtilities::putRequestVariable('form[action][addNew]', 1);
        $results = $this->handleRequest();
        $this->assertEquals(array('redirect' => array('view' => 'core:SiteAdmin',
                  'subView' => 'mime:MimeEdit'),
				  'status' => array(),
				  'error' => array()),
			    $results, 'Add New');
    }    
}

?>
