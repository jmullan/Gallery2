<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Mime
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

GalleryCoreApi::requireOnce('lib/tools/phpunit/ItemAddOptionTestCase.class');

/**
 * RestrictMimeOption tests
 * @package Mime
 * @subpackage PHPUnit
 */
class RestrictMimeOptionTest extends ItemAddOptionTestCase {

    function RestrictMimeOptionTest($methodName) {
	$this->ItemAddOptionTestCase($methodName, 'quotas', 'RestrictMimeOption');
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$this->_markForCleanup($this->_album);

	$ret = $this->_markPluginParametersForCleanup('module', 'mime');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	list ($ret, $this->_module) = GalleryCoreApi::loadPlugin('module', 'mime');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$this->_rejectMessage =
	    $this->_module->translate('This type of file not allowed; item will not be added.');

	/*
	 * We'll be running shutdown actions in these tests, but we don't want to update
	 * the modification timestamp of the root album (due to adding a subalbum) so
	 * clear the list before we start our tests.
	 */
	$gallery->_shutdownActions = null;
    }

    function testAllowAll() {
	$ret = $this->_module->setParameter('allowMime', 'all');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $isAppropriate) = $this->_option->isAppropriate();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assert(!$isAppropriate);
    }

    function testAllow() {
	global $gallery;

	$ret = $this->_module->setParameter('allowMime', 'allow');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$ret = $this->_module->setParameter('mimeList', 'image/jpeg | test/file | image/gif');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $item) = $this->_createRandomDataItem($this->_album->getId(), 'test/file');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	list ($ret, $badItem) = $this->_createRandomDataItem($this->_album->getId(), 'test/bad');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($errors, $warnings) = $this->_handleRequestAfterAdd(array(), array($item));
	$this->assertEquals(array(), $errors, 'no errors');
	$this->assertEquals(array(), $warnings, 'no warnings');

	list ($errors, $warnings) = $this->_handleRequestAfterAdd(array(), array($badItem));
	$this->assertEquals(array(), $errors, 'errors');
	$this->assertEquals(array($this->_rejectMessage), $warnings, 'warnings');

	$gallery->performShutdownActions();

	$ret = $this->_verifyMissing($badItem->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
    }

    function testBlock() {
	global $gallery;

	$ret = $this->_module->setParameter('allowMime', 'block');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$ret = $this->_module->setParameter('mimeList', 'video/mpeg | test/bad');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $item) = $this->_createRandomDataItem($this->_album->getId(), 'test/file');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	list ($ret, $badItem) = $this->_createRandomDataItem($this->_album->getId(), 'test/bad');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($errors, $warnings) = $this->_handleRequestAfterAdd(array(), array($item));
	$this->assertEquals(array(), $errors, 'no errors');
	$this->assertEquals(array(), $warnings, 'no warnings');

	list ($errors, $warnings) = $this->_handleRequestAfterAdd(array(), array($badItem));
	$this->assertEquals(array(), $errors, 'errors');
	$this->assertEquals(array($this->_rejectMessage), $warnings, 'warnings');

	$gallery->performShutdownActions();

	$ret = $this->_verifyMissing($badItem->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
    }
}
?>
