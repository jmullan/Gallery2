<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package SlideshowApplet
 * @subpackage PHPUnit
 * @author Pierre-Luc Paour <paour@users.sf.net>
 */

/**
 * SlideshowAppletSiteAdmin controller tests
 *
 * @package SlideshowApplet
 * @subpackage PHPUnit
 */
class SlideshowAppletSiteAdminControllerTest extends GalleryControllerTestCase {

    function SlideshowAppletSiteAdminControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'slideshowapplet.SlideshowAppletSiteAdmin');
    }

    function setUp() {
	parent::setUp();

	$ret = $this->_markPluginParametersForCleanup('module', 'slideshowapplet');
	if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /*function testSlideshowAppletSiteAdminControllerReset() {
	GalleryUtilities::putRequestVariable('form[action][reset]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'slideshowapplet.SlideshowAppletSiteAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results);
    }*/

    /*function testSlideshowAppletSiteAdminControllerSave() {
	GalleryUtilities::putRequestVariable('form[slideshowMaxPictures]', '100');
	GalleryUtilities::putRequestVariable('form[slideshowRecursive]', '1');
	GalleryUtilities::putRequestVariable('form[action][save]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'slideshowapplet.SlideshowAppletSiteAdmin'),
				  'status' => array('saved' => 1),
				  'error' => array()),
			    $results);

	foreach (array('slideshowMaxPictures' => '100', 'slideshowRecursive' => '1') as $key => $expectedValue) {
	    list ($ret, $value) = GalleryCoreApi::getPluginParameter('module', 'slideshowapplet', $key);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals($expectedValue, $value, $key);
	}
    }*/
	
	function testSlideshowAppletSiteAdminControllerAddReplaceDefault() {
	    list ($ret, $orig) = GalleryCoreApi::getPluginParameter('module', 'slideshowapplet', 'slideshowdefaultVariables');
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	GalleryUtilities::putRequestVariable('form[default][name]', 'name');
	GalleryUtilities::putRequestVariable('form[default][value]', 'value');
	GalleryUtilities::putRequestVariable('form[variable][type]', 'default');
	GalleryUtilities::putRequestVariable('form[action][add]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'slideshowapplet.SlideshowAppletSiteAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results);
	
	$target = empty($orig)?'name=value':$orig.'|name=value';
	foreach (array('slideshowdefaultVariables' => $target) as $key => $expectedValue) {
	    list ($ret, $value) = GalleryCoreApi::getPluginParameter('module', 'slideshowapplet', $key);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals($expectedValue, $value, $key);
	}
	
	/* now test replacing */
	GalleryUtilities::putRequestVariable('form[default][value]', 'value1');
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'slideshowapplet.SlideshowAppletSiteAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results);

	$target = empty($orig)?'name=value1':$orig.'|name=value1';
	foreach (array('slideshowdefaultVariables' => $target) as $key => $expectedValue) {
	    list ($ret, $value) = GalleryCoreApi::getPluginParameter('module', 'slideshowapplet', $key);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals($expectedValue, $value, $key);
	}
    }

	function testSlideshowAppletSiteAdminControllerAddOverride() {
	    list ($ret, $orig) = GalleryCoreApi::getPluginParameter('module', 'slideshowapplet', 'slideshowoverrideVariables');
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	GalleryUtilities::putRequestVariable('form[override][name]', 'name');
	GalleryUtilities::putRequestVariable('form[override][value]', 'value');
	GalleryUtilities::putRequestVariable('form[variable][type]', 'override');
	GalleryUtilities::putRequestVariable('form[action][add]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'slideshowapplet.SlideshowAppletSiteAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results);

	$target = empty($orig)?'name=value':$orig.'|name=value';
	foreach (array('slideshowoverrideVariables' => $target) as $key => $expectedValue) {
	    list ($ret, $value) = GalleryCoreApi::getPluginParameter('module', 'slideshowapplet', $key);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals($expectedValue, $value, $key);
	}
    }

	function testSlideshowAppletSiteAdminControllerDelete() {
	    list ($ret, $orig) = GalleryCoreApi::getPluginParameter('module', 'slideshowapplet', 'slideshowdefaultVariables');
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	GalleryUtilities::putRequestVariable('form[default][name]', 'name');
	GalleryUtilities::putRequestVariable('form[default][value]', 'value');
	GalleryUtilities::putRequestVariable('form[variable][type]', 'default');
	GalleryUtilities::putRequestVariable('form[action][add]', '1');

	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'slideshowapplet.SlideshowAppletSiteAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results);

	$target = empty($orig)?'name=value':$orig.'|name=value';
	foreach (array('slideshowdefaultVariables' => $target) as $key => $expectedValue) {
	    list ($ret, $value) = GalleryCoreApi::getPluginParameter('module', 'slideshowapplet', $key);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals($expectedValue, $value, $key);
	}
	
	/* now test deleting */
	GalleryUtilities::removeRequestVariable('form[action][add]');
	GalleryUtilities::removeRequestVariable('form[default][name]');
	GalleryUtilities::removeRequestVariable('form[default][value]');
	GalleryUtilities::putRequestVariable('form[action][delete]', '1');
	GalleryUtilities::putRequestVariable('form[delete][variable]', 'name');
	$results = $this->handleRequest();
	$this->assertEquals(array('redirect' => array('view' => 'core.SiteAdmin',
						      'subView' => 'slideshowapplet.SlideshowAppletSiteAdmin'),
				  'status' => array(),
				  'error' => array()),
			    $results);

	foreach (array('slideshowdefaultVariables' => $orig) as $key => $expectedValue) {
	    list ($ret, $value) = GalleryCoreApi::getPluginParameter('module', 'slideshowapplet', $key);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals($expectedValue, $value, $key);
	}
    }
}
?>
