<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/core/classes/GallerySmarty.class');
GalleryCoreApi::requireOnce('modules/keyalbum/Callbacks.inc');

/**
 * Keyword Album callback tests
 * @package KeyAlbum
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision$ $Date$
 */
class KeywordAlbumCallbacksTest extends GalleryTestCase {

    function KeywordAlbumCallbacksTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp();
	$this->_userId = $gallery->getActiveUserId();

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId(),
		array('keywords' => 'testkeyword12345'));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$this->_markForCleanup($this->_album);

	$ret = GalleryCoreApi::removeItemPermissions($this->_album->getId());
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	list ($ret, $everybodyGroupId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.everybodyGroup');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$ret = GalleryCoreApi::addUserPermission(
		$this->_album->getId(), $this->_userId, 'core.all');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$ret = GalleryCoreApi::addGroupPermission(
		$this->_album->getId(), $everybodyGroupId, 'core.viewAll');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_album->getId(),
		'test/file', array('keywords' => 'testkeyword54321; testkeyword99999'));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$ret = GalleryCoreApi::removeGroupPermission(
		$this->_item->getId(), $everybodyGroupId, 'core.viewAll');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	$ret = $this->_markPluginParametersForCleanup('module', 'keyalbum');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'keyalbum', 'allKeywords.time', 0);
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'keyalbum',
						  'allKeywords.public.time', 0);
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	$this->_smarty = new GallerySmarty();
	$this->_callbacks = new KeyAlbumCallbacks();
    }

    function testLoadKeywords() {
	$ret = $this->_callbacks->callback(
		array('onlyPublic' => false, 'sizeLimit' => 0, 'maxCloudFontEnlargement' => 3),
		$this->_smarty, 'LoadKeywords', $this->_userId);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$data = $this->_smarty->_tpl_vars['block']['keyalbum']['keywords'];
	foreach ($data as $keyword) {
	    $found[$keyword['name']] = true;
	    $this->assert(
		    isset($keyword['weight']) && $keyword['weight'] >= 0 && $keyword['weight'] <= 3,
		    'bad/missing weight: ' . print_r($keyword, true));
	}
	$this->assert(isset($found['testkeyword12345']), 'album keyword');
	$this->assert(isset($found['testkeyword54321']), 'item keyword 1');
	$this->assert(isset($found['testkeyword99999']), 'item keyword 2');
    }

    function testLoadKeywordsPublic() {
	$ret = $this->_callbacks->callback(
		array('onlyPublic' => true, 'sizeLimit' => 0, 'maxCloudFontEnlargement' => 5),
		$this->_smarty, 'LoadKeywords', $this->_userId);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$data = $this->_smarty->_tpl_vars['block']['keyalbum']['keywords'];
	foreach ($data as $keyword) {
	    $found[$keyword['name']] = true;
	}
	$this->assert(isset($found['testkeyword12345']), 'album keyword');
	$this->assert(!isset($found['testkeyword54321']), 'item not public!');
	$this->assert(!isset($found['testkeyword99999']), 'item not public!');
    }

    function testLoadKeywordsSizeLimit() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'keyalbum', 'allKeywords.3.time', '0');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$ret = $this->_callbacks->callback(
		array('onlyPublic' => false, 'sizeLimit' => 3, 'maxCloudFontEnlargement' => 7),
		$this->_smarty, 'LoadKeywords', $this->_userId);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$data = $this->_smarty->_tpl_vars['block']['keyalbum']['keywords'];
	$this->assertEquals(3, count($data), '3 keywords');

	list ($ret, $param) =
	    GalleryCoreApi::getPluginParameter('module', 'keyalbum', 'allKeywords.3');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals(serialize($data), $param, 'param');
    }

    function testKeywordCache() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'keyalbum',
						  'allKeywords', serialize(array()));
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'keyalbum', 'allKeywords.time', time());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$ret = $this->_callbacks->callback(
		array('onlyPublic' => false, 'sizeLimit' => 0, 'maxCloudFontEnlargement' => 5),
		$this->_smarty, 'LoadKeywords', $this->_userId);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$data = $this->_smarty->_tpl_vars['block']['keyalbum']['keywords'];
	$this->assertEquals(array(), $data, 'cached data');
    }
}
?>
