<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

/**
 * Test KeywordAlbum view
 *
 * @package KeyAlbum
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision$ $Date$
 */
class KeywordAlbumTest extends GalleryTestCase {

    function KeywordAlbumTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId(),
		array('keywords' => 'abc testkey def'));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$this->_markForCleanup($this->_album);

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_album->getId(),
		'test/item', array('keywords' => 'testkeyfun'));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	list ($ret, $this->_module) = GalleryCoreApi::loadPlugin('module', 'keyalbum');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	list ($ret, $this->_view) = GalleryView::loadView('keyalbum.KeywordAlbum');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	GalleryCoreApi::requireOnce('modules/core/classes/GalleryTemplate.class');
	$this->_template =
	    new GalleryTemplate(dirname(dirname(dirname(dirname(dirname(__FILE__))))));
    }

    function testLoadThemeAndSettingsForAlbum() {
	$ret = $this->_markPluginParametersForCleanup('module', 'keyalbum');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$ret = GalleryCoreApi::setPluginParameter('module', 'keyalbum', 'description', 'desc');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	GalleryUtilities::putRequestVariable('keyword', 'testkey');

	list ($ret, $theme, $params, $item) = $this->_view->loadThemeAndParameters();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assert(GalleryUtilities::isA($theme, 'GalleryTheme'), 'theme');
	$this->assert(is_array($params), 'theme settings');
	$this->assert(GalleryUtilities::isA($item, 'GalleryDynamicAlbum'), 'item');
	$this->assert(!isset($item->parent), 'item parent');
	$this->assertEquals('desc', $item->getDescription(), 'description');
    }

    function testLoadThemeAndSettingsForItem() {
	GalleryUtilities::putRequestVariable('keyword', 'testkey');
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());

	list ($ret, $theme, $params, $item) = $this->_view->loadThemeAndParameters();
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assert(GalleryUtilities::isA($theme, 'GalleryTheme'), 'theme');
	$this->assert(is_array($params), 'theme settings');
	$this->assert(GalleryUtilities::isA($item, 'GalleryDataItem'), 'item');
	$this->assert(isset($item->parent), 'item parent');
	$this->assert(GalleryUtilities::isA($item->parent, 'GalleryDynamicAlbum'), 'parent type');
	$this->assertEquals(array('KeywordAlbumView', 'getChildIds'),
			    $item->parent->getChildrenFunction, 'get children function');
    }

    function testLoadTemplateForAlbum() {
	global $gallery;
	$theme =& $this->_template->getVariableByReference('theme');
	$theme['actingUserId'] = $gallery->getActiveUserId();

	GalleryUtilities::putRequestVariable('keyword', 'testkey');

	list ($ret, $result) = $this->_view->loadTemplate($this->_template, $form = array());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(array('view' => 'keyalbum.KeywordAlbum', 'keyword' => 'testkey'),
			    $theme['pageUrl'], 'page url');
	$this->assert(in_array($this->_album->getId(), $theme['allChildIds']), 'album id');
	$this->assert(in_array($this->_item->getId(), $theme['allChildIds']), 'item id');
    }

    function testLoadTemplateForItem() {
	list ($ret, $count) = GalleryCoreApi::fetchItemViewCount($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals(0, $count, 'count before');

	GalleryUtilities::putRequestVariable('keyword', 'testkey');
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());

	list ($ret, $result) = $this->_view->loadTemplate($this->_template, $form = array());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$theme =& $this->_template->getVariableByReference('theme');
	$this->assertEquals(array('view' => 'keyalbum.KeywordAlbum', 'keyword' => 'testkey'),
			    $theme['pageUrl'], 'page url');

	list ($ret, $count) = GalleryCoreApi::fetchItemViewCount($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals(1, $count, 'count after');
    }

    function testLoadTemplateForItemNoPermission() {
	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	GalleryUtilities::putRequestVariable('keyword', 'testkey');
	GalleryUtilities::putRequestVariable('itemId', $this->_item->getId());

	list ($ret, $result) = $this->_view->loadTemplate($this->_template, $form = array());
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$this->assertEquals(
	    array('redirect' => array('view' => 'core.ShowItem', 'itemId' => $this->_getRootId())),
	    $result, 'redirect');
    }

    function testItemSummaries() {
	$itemList = array($this->_album, $this->_item);
	$idList = array($this->_album->getId(), $this->_item->getId());
	$permissions = array();
	$ret = $this->_markPluginParametersForCleanup('module', 'keyalbum');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	$ret = $this->_module->setParameter('summaryLinks', 'all');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	GalleryUtilities::putRequestVariable('view', 'test.TestView');

	list ($ret, $summaries) = $this->_module->getItemSummaries($itemList, $permissions);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals($idList, array_keys($summaries), 'all');

	$ret = $this->_module->setParameter('summaryLinks', 'none');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	GalleryUtilities::putRequestVariable('view', 'keyalbum.KeywordAlbum');

	list ($ret, $summaries) = $this->_module->getItemSummaries($itemList, $permissions);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals(array(), $summaries, 'none');

	$ret = $this->_module->setParameter('summaryLinks', 'key');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $summaries) = $this->_module->getItemSummaries($itemList, $permissions);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals($idList, array_keys($summaries), 'key');

	GalleryUtilities::putRequestVariable('view', 'core.ShowItem');
	list ($ret, $summaries) = $this->_module->getItemSummaries($itemList, $permissions);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals(array(), $summaries, 'key not');

	$ret = $this->_module->setParameter('summaryLinks', 'album');
	if ($ret) {
	    return $this->failWithStatus($ret);
	}

	list ($ret, $summaries) = $this->_module->getItemSummaries($itemList, $permissions);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals($idList, array_keys($summaries), 'album');

	GalleryUtilities::putRequestVariable('view', 'keyalbum.KeywordAlbum');
	list ($ret, $summaries) = $this->_module->getItemSummaries($itemList, $permissions);
	if ($ret) {
	    return $this->failWithStatus($ret);
	}
	$this->assertEquals(array(), $summaries, 'album not');
    }
}
?>
