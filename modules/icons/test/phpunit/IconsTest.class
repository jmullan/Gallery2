<?php
/*
 * $RCSfile: IconsTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.2 $ $Date: 2005/08/23 03:49:43 $
 * @package Icons
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

GalleryCoreApi::relativeRequireOnce('modules/icons/classes/IconsImpl.class');

/**
 * Iconpack tests
 *
 * @package Icons
 * @subpackage PHPUnit
 */
class IconsTest extends GalleryControllerTestCase {

    function IconsTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	global $gallery;
	parent::setUp();

	$ret = $this->_markPluginParametersForCleanup('module', 'icons');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$this->_icons = new IconsImpl();
	$this->_saveRtl = $gallery->_translator->_isRightToLeft;
	$gallery->_translator->_isRightToLeft = false;
    }

    function tearDown() {
	global $gallery;
	$gallery->_translator->_isRightToLeft = $this->_saveRtl;

	parent::tearDown();
    }

    function testGetIconPacks() {
	list ($ret, $list) = $this->_icons->getIconPacks();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assert(isset($list['paularmstrongdesigns']),
		      'paularmstrongdesigns iconpack not found');
    }

    function testNewFactoryInstance() {
	list ($ret, $iconpack) = GalleryCoreApi::newFactoryInstance('IconsInterface_1_0');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($iconpack), 'Icon pack was not set');
	$this->assert(GalleryUtilities::isA($iconpack, 'IconsImpl'),
		      'The factory instance was not an IconsImpl');
    }

    function testSetupTemplateNone() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'icons', 'iconpack', '');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$template = new IconsDummyGalleryTemplate();
	$ret = $this->_icons->init($template);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(null, $template->style);
    }

    function testSetupTemplateIcons() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'icons', 'iconpack', '_phpunitfoo');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$template = new IconsDummyGalleryTemplate();
	$ret = $this->_icons->init($template);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('modules/icons/iconpacks/_phpunitfoo/icons.css', $template->style);
    }

    function testRightToLeft() {
	global $gallery;
	$gallery->_translator->_isRightToLeft = true;

	$ret = GalleryCoreApi::setPluginParameter('module', 'icons', 'iconpack', '_phpunitfoo');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$template = new IconsDummyGalleryTemplate();
	$ret = $this->_icons->init($template);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('modules/icons/iconpacks/_phpunitfoo/icons-rtl.css', $template->style);
    }
}

/**
 * @package Icons
 * @subpackage PHPUnit
 */
class IconsDummyGalleryTemplate {
    var $data = array();
    var $style = null;
    function setVariable($key, $value) {
	$this->data[$key] = $value;
    }
    function style($path) {
	$this->style = $path;
    }
    function javascript($path) {
    }
}
?>
