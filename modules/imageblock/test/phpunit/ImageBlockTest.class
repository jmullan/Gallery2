<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package ImageBlock
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Test Image Block functionality
 *
 * @package ImageBlock
 * @subpackage PHPUnit
 */
class ImageBlockTest extends GalleryTestCase {

    function ImageBlockTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    /**
     * Create an album for testing
     */
    function setUp() {
	parent::setUp();
	global $gallery;

	/* Register a dummy toolkit and operation */
	$ret = GalleryCoreApi::registerFactoryImplementation(
	    'GalleryToolkit', 'ImageBlockToolkit', 'ImageBlockToolkit',
	    'modules/imageblock/test/phpunit/ImageBlockTest.class', 'imageblockTest', null);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markFactoryModuleForCleanup('imageblockTest');

	$ret = GalleryCoreApi::registerToolkitOperation('ImageBlockToolkit',
	    array('image/gif'), 'testoperation',
	    array(array('type' => 'int', 'description' => 'size')), 'desc');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create a new album and image, set thumbnail and highlight */
	list ($ret, $album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($album);

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($album->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$imagePath = dirname(__FILE__) . '/../../../core/test/data/test1.gif';
	list ($ret, $photo, $thumbId) = $this->_addPhoto($album->getId(), $imagePath);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $tmpId) =
	    $this->_addDerivative($album, $photo, DERIVATIVE_TYPE_IMAGE_THUMBNAIL, 150);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Add permission so album/item can appear in dailyImage, monthlyAlbum, etc. */
	list ($ret, $everybodyGroupId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.everybodyGroup');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addGroupPermission(
	    $album->getId(), $everybodyGroupId, 'core.view', true);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'imageblock');
	if ($ret->isError() || !isset($module)) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $view) = GalleryView::loadView('imageblock:ImageBlockSiteAdmin');
	if ($ret->isError() || !isset($view)) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $blocks) = $module->getParameter('blocks');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$params = array();
	foreach (array('dailyImage', 'weeklyImage', 'monthlyImage',
		       'dailyAlbum', 'weeklyAlbum', 'monthlyAlbum') as $key) {
	    list ($ret, $value) = $module->getParameter($key);
	    if ($ret->isError()) {
		print $ret->getAsHtml();
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    if (isset($value)) {
		$params[$key] = $value;
		$ret = GalleryCoreApi::removePluginParameter('module', 'imageblock', $key);
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
	    }
	}

	$this->_album = $album;
	$this->_photo = $photo;
	$this->_module = $module;
	$this->_view = $view;
	$this->_blocks = $blocks;
	$this->_params = $params;
	$this->_everybodyGroupId = $everybodyGroupId;
    }

    function _addPhoto($parentId, $imagePath) {
	list ($ret, $photo) =
	    GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryPhotoItem');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list ($ret, $mimeType) = GalleryCoreApi::getMimeType($imagePath);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$ret = $photo->create($parentId, $imagePath, $mimeType,
			      'testitem_' . time() . substr($imagePath, -4));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$photo->setTitle('Test Item');
	$ret = $photo->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	/* add thumbnail */
	list ($ret, $thumbId) = $this->_addDerivative($photo, $photo,
	    DERIVATIVE_TYPE_IMAGE_THUMBNAIL, 150);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $photo, $thumbId);
    }

    function _addDerivative(&$item, &$src, $derivativeType, $size) {
	list ($ret, $derivative) =
	    GalleryCoreApi::newFactoryInstanceByHint('GalleryDerivative', $item->getEntityType());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	if (!isset($derivative)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	}
	$ret = $derivative->create($item->getId(), $derivativeType);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$derivative->setDerivativeSourceId($src->getId());
	$derivative->setMimeType($src->getMimeType());
	$derivative->setDerivativeOperations('testoperation|0');
	if ($size) {
	    /* Set scaled size: */
	    $w = $src->getWidth();
	    $h = $src->getHeight();
	    if ($w <= $size && $h <= $size &&
		    $derivativeType==DERIVATIVE_TYPE_IMAGE_THUMBNAIL) {
		$derivative->setWidth($w);
		$derivative->setHeight($h);
	    } else if ($w >= $h) {
		$derivative->setWidth($size);
		$derivative->setHeight((int)($size*$h/$w));
	    } else {
		$derivative->setHeight($size);
		$derivative->setWidth((int)($size*$w/$h));
	    }
	} else {
	    /* Set rotated size (swap wd/ht): */
	    $derivative->setWidth($src->getHeight());
	    $derivative->setHeight($src->getWidth());
	}
	$ret = $derivative->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $derivative->getId());
    }

    /**
     * Delete the album that was used for testing
     */
    function tearDown() {
	global $gallery;
	$ret = $this->_module->setParameter('blocks', $this->_blocks);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	foreach (array('dailyImage', 'weeklyImage', 'monthlyImage',
		       'dailyAlbum', 'weeklyAlbum', 'monthlyAlbum') as $key) {
	    if (isset($this->_params[$key])) {
		$ret = GalleryCoreApi::setPluginParameter(
		       'module', 'imageblock', $key, $this->_params[$key]);
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
	    } else {
		$ret = GalleryCoreApi::removePluginParameter('module', 'imageblock', $key);
		if ($ret->isError()) {
		    print $ret->getAsHtml();
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
	    }
	}
	/* Unregister dummy toolkit */
	$ret = GalleryCoreApi::unregisterToolkit('ImageBlockToolkit');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	parent::tearDown();
    }

    function assertBlock($block) {
	$this->assert(isset($block['id']), 'Missing id');
	$this->assert(isset($block['viewCount']), 'Missing viewCount');
	$this->assert(isset($block['title']), 'Missing title');
	$this->assert(isset($block['item']), 'Missing item');
	$this->assert(isset($block['thumb']), 'Missing thumb');
	return $block['id'];
    }

    function testImageBlock() {
	$ret = $this->_module->setParameter('blocks', '');
	if ($ret->isError()) {
	    $this->assert(false, 'Set blocks parameter');
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$template = new ImageBlockDummyGalleryTemplate();
	list ($ret, $tpl) = $this->_module->loadSystemContent($template);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(count($tpl) == 0, 'No template should have been returned');
	$this->assert(!isset($template->data['ImageBlockSystemContent']), 'No blocks');

	$ret = $this->_module->setParameter('blocks', 'randomImage');
	if ($ret->isError()) {
	    $this->assert(false, 'Set blocks parameter');
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$template = new ImageBlockDummyGalleryTemplate();
	list ($ret, $tpl) = $this->_module->loadSystemContent($template);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(count($tpl) > 0, 'A template should have been returned');
	$this->assertEquals(1, count($template->data['ImageBlockSystemContent']['blocks']),
			    'One block');
	$this->assertBlock($template->data['ImageBlockSystemContent']['blocks'][0]);

	$ret = $this->_module->setParameter('blocks', 'randomImage|recentImage|viewedImage|' .
					    'viewedAlbum|recentAlbum|randomAlbum');
	if ($ret->isError()) {
	    $this->assert(false, 'Set blocks parameter');
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$template = new ImageBlockDummyGalleryTemplate();
	list ($ret, $tpl) = $this->_module->loadSystemContent($template);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(count($tpl) > 0, 'A template should have been returned');
	$this->assertEquals(6, count($template->data['ImageBlockSystemContent']['blocks']),
			    'All blocks');
	$gotAlbum = $gotPhoto = 0;
	foreach ($template->data['ImageBlockSystemContent']['blocks'] as $block) {
	    $this->assertBlock($block);
	    if ($block['id'] == $this->_album->getId()) {
		$gotAlbum = 1;
	    }
	    if ($block['id'] == $this->_photo->getId()) {
		$gotPhoto = 1;
	    }
	}
	$this->assertEquals(1, $gotAlbum, 'Test album not in "newest album" block');
	$this->assertEquals(1, $gotPhoto, 'Test photo not in "newest photo" block');
    }

    function testExternalImageBlock() {
	$form = array();
	list ($ret, $external) = GalleryView::loadView('imageblock:External');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('blocks', 'randomImage');
	GalleryUtilities::putRequestVariable('show', 'none');

	$template = new ImageBlockDummyGalleryTemplate();
	list ($ret, $tpl) = $external->loadTemplate($template, $form);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('html' => 'modules/imageblock/templates/ImageBlock.tpl'), $tpl);
	$this->assertEquals(1, count($template->data['ImageBlockSystemContent']['blocks']),
			    'One block');
	$this->assertBlock($template->data['ImageBlockSystemContent']['blocks'][0]);

	/* Select only from subtree.. */
	GalleryUtilities::putRequestVariable('blocks', 'recentImage|viewedAlbum');
	GalleryUtilities::putRequestVariable('show', 'title');
	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());

	$template = new ImageBlockDummyGalleryTemplate();
	list ($ret, $tpl) = $external->loadTemplate($template, $form);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('html' => 'modules/imageblock/templates/ImageBlock.tpl'), $tpl);
	$this->assertEquals(1, count($template->data['ImageBlockSystemContent']['blocks']),
			    'One block');
	$this->assertBlock($template->data['ImageBlockSystemContent']['blocks'][0]);
	$this->assertEquals($this->_photo->getId(),
	    $template->data['ImageBlockSystemContent']['blocks'][0]['id'], 'Photo id');

	/* Select specific item, scaled full size with link target.. */
	GalleryUtilities::putRequestVariable('blocks', 'specificItem');
	GalleryUtilities::putRequestVariable('show', 'title|views|fullSize');
	GalleryUtilities::putRequestVariable('itemId', $this->_photo->getId());
	GalleryUtilities::putRequestVariable('linkTarget', '_blank');
	GalleryUtilities::putRequestVariable('maxSize', '500');

	$template = new ImageBlockDummyGalleryTemplate();
	list ($ret, $tpl) = $external->loadTemplate($template, $form);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('html' => 'modules/imageblock/templates/ImageBlock.tpl'), $tpl);
	$this->assertEquals(1, count($template->data['ImageBlockSystemContent']['blocks']),
			    'One block');
	$this->assertBlock($template->data['ImageBlockSystemContent']['blocks'][0]);
	$this->assertEquals($this->_photo->getId(),
	    $template->data['ImageBlockSystemContent']['blocks'][0]['id'], 'Photo id');
    }

    function testPeriodicBlocks() {
	$ret = $this->_module->setParameter('blocks', 'dailyImage');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$template = new ImageBlockDummyGalleryTemplate();
	list ($ret, $tpl) = $this->_module->loadSystemContent($template);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(count($tpl) > 0, 'A template should have been returned');
	$this->assertEquals(1, count($template->data['ImageBlockSystemContent']['blocks']),
			    'One block');
	$itemId = $this->assertBlock($template->data['ImageBlockSystemContent']['blocks'][0]);

	/* Next call should return same id */
	$template = new ImageBlockDummyGalleryTemplate();
	list ($ret, $tpl) = $this->_module->loadSystemContent($template);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(count($tpl) > 0, 'A template should have been returned');
	$this->assertEquals(1, count($template->data['ImageBlockSystemContent']['blocks']),
			    'One block');
	$nextItemId = $this->assertBlock($template->data['ImageBlockSystemContent']['blocks'][0]);
	$this->assertEquals($itemId, $nextItemId, 'keep same id');

	/* Set invalid id in property to force picking new id */
	$now = localtime();
	$ret = $this->_module->setParameter('monthlyAlbum', '-1|' . $now[4]);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = $this->_module->setParameter('blocks', 'monthlyAlbum');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$template = new ImageBlockDummyGalleryTemplate();
	list ($ret, $tpl) = $this->_module->loadSystemContent($template);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(count($tpl) > 0, 'A template should have been returned');
	$this->assertEquals(1, count($template->data['ImageBlockSystemContent']['blocks']),
			    'One block');
	$itemId = $this->assertBlock($template->data['ImageBlockSystemContent']['blocks'][0]);
	$this->assert($itemId > 0, 'valid id');

	/* Next call should return same id */
	$template = new ImageBlockDummyGalleryTemplate();
	list ($ret, $tpl) = $this->_module->loadSystemContent($template);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(count($tpl) > 0, 'A template should have been returned');
	$this->assertEquals(1, count($template->data['ImageBlockSystemContent']['blocks']),
			    'One block');
	$nextItemId = $this->assertBlock($template->data['ImageBlockSystemContent']['blocks'][0]);
	$this->assertEquals($itemId, $nextItemId, 'keep same album id');
    }

    function testPeriodicPermission() {
	/* Ensure periodic blocks only pick from publically visible items */
	global $gallery;

	list ($ret, $groupIds) = GalleryCoreApi::fetchGroupsForUser($gallery->getActiveUserId());
	foreach (array_keys($groupIds) as $groupId) {
	    $ret = GalleryCoreApi::removeGroupPermission(
		$this->_album->getId(), $groupId, 'core.view', true);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}

	list ($ret, $external) = GalleryView::loadView('imageblock:External');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('blocks', 'weeklyImage');
	GalleryUtilities::putRequestVariable('itemId', $this->_album->getId());

	$form = array();
	$template = new ImageBlockDummyGalleryTemplate();
	list ($ret, $tpl) = $external->loadTemplate($template, $form);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array('html' => null), $tpl, 'No tpl');
	$this->assertEquals(array(), $template->data, 'No block');
    }
}

/**
 * Required classes
 */
GalleryCoreApi::relativeRequireOnce('modules/core/classes/GalleryToolkit.class');

/**
 * Test toolkit
 * @package ImageBlock
 * @subpackage PHPUnit
 */
class ImageBlockToolkit extends GalleryToolkit {
    function performOperation($mimeType, $operationName, $sourceFilename,
			      $destFilename, $parameters, $context=array()) {
	/* Just copy file and return dummy mime type */
	global $gallery;
	if ($sourceFilename != $destFilename) {
	    $platform = $gallery->getPlatform();
	    if (!$platform->copy($sourceFilename, $destFilename)) {
		return array(GalleryStatus::error(ERROR_PLATFORM_FAILURE, __FILE__, __LINE__),
			     null, null);
	    }
	}
	return array(GalleryStatus::success(), 'test/image', $context);
    }
}

/**
 * @package ImageBlock
 * @subpackage PHPUnit
 */
class ImageBlockDummyGalleryTemplate {
    var $data = array();
    function setVariable($key, $value) {
	$this->data[$key] = $value;
    }
    function &getVariableByReference($key) {
	return $this->data[$key];
    }
    function &_getSmarty() {
	return $this;
    }
    function register_block() { }
    function register_function() { }
    function head() { }
}
?>
