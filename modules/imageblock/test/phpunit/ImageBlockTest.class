<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package ImageBlock
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Test Image Block functionality
 *
 * @package ImageBlock
 * @subpackage PHPUnit
 */
class ImageBlockTest extends GalleryTestCase {

    function ImageBlockTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    /**
     * Create an album for testing
     */
    function setUp() {
	parent::setUp();
	global $gallery;

	// Create a new album and image, set thumbnail and highlight
	list ($ret, $album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($album->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$imagePath = dirname(__FILE__) . '/../../../core/test/data/test1.gif';
	list ($ret, $photo, $thumbId) = $this->_addPhoto($album->getId(), $imagePath);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $success) = GalleryCoreApi::setThumbnailFromItem($album->getId(), $photo->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'imageblock');
	if ($ret->isError() || !isset($module)) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $view) = GalleryView::loadView('imageblock:ImageBlockSiteAdmin');
	if ($ret->isError() || !isset($view)) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $blocks) = $module->getModuleParameter('blocks');
	if ($ret->isError() || !isset($view)) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_album = $album;
	$this->_photo = $photo;
	$this->_module = $module;
	$this->_view = $view;
	$this->_blocks = $blocks;
    }

    function _addPhoto($parentId, $imagePath) {
	list ($ret, $photo) =
	    GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryPhotoItem');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$ret = $photo->create($parentId, $imagePath,
			      GalleryUtilities::getMimeType($imagePath),
			      'testitem_' . time() . substr($imagePath, -4));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$photo->setTitle("Test Item");
	$ret = $photo->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	// add thumbnail
	list ($ret, $thumbId) = $this->_addDerivative($photo,
	    'thumbnail', DERIVATIVE_TYPE_IMAGE_THUMBNAIL, 'thumbnail|150');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $photo, $thumbId);
    }

    function _addDerivative($photo, $toolkitType,
			    $derivativeType, $derivativeOperation) {
	list ($ret, $toolkit, $outputMimeType) =
	    GalleryCoreApi::getToolkitByOperation(
				  $photo->getMimeType(), $toolkitType);
	if ($ret->isError() || !isset($toolkit)) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list ($ret, $derivative) = GalleryCoreApi::newFactoryInstance(
				   'GalleryEntity', 'GalleryDerivativeImage');
	if ($ret->isError() || !isset($derivative)) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$ret = $derivative->create($photo->getId(), $derivativeType);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$derivative->setDerivativeSourceId($photo->getId());
	$derivative->setDerivativeOperations($derivativeOperation);
	$derivative->setDerivativeMimeType($outputMimeType);
	$ret = $derivative->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $derivative->getId());
    }

    /**
     * Delete the album that was used for testing
     */
    function tearDown() {
	global $gallery;
	$ret = GalleryCoreApi::deleteEntityById($this->_album->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = $this->_module->setModuleParameter('blocks', $this->_blocks);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	parent::tearDown();
    }

    function assertBlock($block) {
	$this->assert(isset($block['id']), 'Missing id');
	$this->assert(isset($block['creationTimestamp']), 'Missing creationTimestamp');
	$this->assert(isset($block['viewCount']), 'Missing viewCount');
	$this->assert(isset($block['title']), 'Missing title');
	$this->assert(isset($block['item']), 'Missing item');
	$this->assert(isset($block['thumb']), 'Missing thumb');
    }

    function testImageBlock() {
	$ret = $this->_module->setModuleParameter('blocks', '');
	if ($ret->isError()) {
	    $this->assert(false, "Set blocks parameter");
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$template = new DummyGalleryTemplate();
	list ($ret, $tpl) = $this->_module->loadSystemContent($template);
	$this->assert(!$tpl, 'Template should be empty');
	$this->assert(!isset($template->data['ImageBlockSystemContent']), 'No blocks');

	$ret = $this->_module->setModuleParameter('blocks', 'randomImage');
	if ($ret->isError()) {
	    $this->assert(false, "Set blocks parameter");
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$template = new DummyGalleryTemplate();
	list ($ret, $tpl) = $this->_module->loadSystemContent($template);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$this->assert(strlen($tpl) > 0, 'Template should not be empty');
	$this->assertEquals(1, count($template->data['ImageBlockSystemContent']['blocks']), 'One block');
	$this->assertBlock($template->data['ImageBlockSystemContent']['blocks'][0]);

	$ret = $this->_module->setModuleParameter('blocks', 'randomImage|recentImage|viewedImage|viewedAlbum|recentAlbum|randomAlbum');
	if ($ret->isError()) {
	    $this->assert(false, "Set blocks parameter");
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$template = new DummyGalleryTemplate();
	list ($ret, $tpl) = $this->_module->loadSystemContent($template);
	$this->assert(strlen($tpl) > 0, 'Template should not be empty');
	$this->assertEquals(6, count($template->data['ImageBlockSystemContent']['blocks']), 'All blocks');
	$gotAlbum = $gotPhoto = 0;
	foreach ($template->data['ImageBlockSystemContent']['blocks'] as $block) {
	    $this->assertBlock($block);
	    if ($block['id'] == $this->_album->getId()) {
		$gotAlbum = 1;
	    }
	    if ($block['id'] == $this->_photo->getId()) {
		$gotPhoto = 1;
	    }
	}
	$this->assertEquals(1, $gotAlbum, "Test album not in 'newest album' block");
	$this->assertEquals(1, $gotPhoto, "Test photo not in 'newest photo' block");

    }

}

/**
 * @package ImageBlock
 * @subpackage PHPUnit
 */
class DummyGalleryTemplate {
    var $data = array();
    function setVariable($key, $value) {
	$this->data[$key] = $value;
    }
}
?>
