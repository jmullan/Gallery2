<?php
/*
 * $RCSfile: ImageBlockHelperTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.8 $ $Date: 2005/08/23 03:49:44 $
 * @package ImageBlock
 * @subpackage PHPUnit
 * @author Jay Rossiter <cryptographite@users.sf.net>
 */
/**
 * Test Image Block functionality
 *
 * @package ImageBlock
 * @subpackage PHPUnit
 */
class ImageBlockHelperTest extends GalleryTestCase {

    function ImageBlockHelperTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    /**
     * Create an album for testing
     */
    function setUp() {
	global $gallery;
	parent::setUp();
	GalleryCoreApi::relativeRequireOnce(
	    'modules/imageblock/classes/ImageBlockDisabledMap.class');

	list ($ret, $this->_topAlbum, $this->_topItems) =
	    $this->_createSubAlbumWithItems($this->_getRootId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_markForCleanup($this->_topAlbum);

	list ($ret, $this->_subAlbum, $this->_subItems) =
	    $this->_createSubAlbumWithItems($this->_topAlbum->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function _createSubAlbumWithItems($parentId) {
	/* Create a new album and image, set thumbnail and highlight */
	list ($ret, $album) = $this->_createRandomAlbum($parentId);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null, null);
	}

	$items = array();
	for ($i = 0; $i < 5; $i++) {
	    list($ret, $items[$i]) = $this->_createRandomDataItem($album->getId());
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null, null);
	    }
	}

	return array(GalleryStatus::success(), $album, $items);
    }

    function testImageBlockHelperGetDisabledFlag() {
	$ret = ImageBlockDisabledMap::addMapEntry(array('itemId' => $this->_topAlbum->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $disabledFlag) = ImageBlockHelper::getDisabledFlag($this->_topAlbum->getId());
	$this->assert($disabledFlag, 'getDisabledFlag returned false');

    	$ret = ImageBlockDisabledMap::removeMapEntry(array('itemId' => $this->_topAlbum->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $disabledFlag) = ImageBlockHelper::getDisabledFlag($this->_topAlbum->getId());
	$this->assert(!$disabledFlag, 'getDisabledFlag returned true');
    }

    function testImageBlockHelperSetDisabledFlag() {
    	global $gallery;

	$ret = ImageBlockHelper::setDisabledFlag($this->_topAlbum, false, true);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        $itemIds = array();
    	foreach ($this->_topItems as $item) {
    	    $itemIds[] = $item->getId();
	}
	$itemIds[] = $this->_topAlbum->getId();
	sort($itemIds);

        $query = 'SELECT [ImageBlockDisabledMap::itemId] ' .
                 'FROM [ImageBlockDisabledMap] ' .
        	 'WHERE [ImageBlockDisabledMap::itemId] IN (' .
        	 GalleryUtilities::makeMarkers(sizeof($itemIds)) .
        	 ')';

	list ($ret, $searchResults) = $gallery->search($query, $itemIds);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

	$dbItemIds = array();
        while ($rec = $searchResults->nextResult()) {
            $dbItemIds[] = (int)$rec[0];
	}
	sort($itemIds);
	sort($dbItemIds);
	$this->assertEquals($itemIds, $dbItemIds, 'Items not added to the DisableMap');

	$ret = ImageBlockHelper::setDisabledFlag($this->_topAlbum, false, false);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        list ($ret, $searchResults) = $gallery->search($query, $itemIds);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        $dbItemIds = array();
        while ($rec = $searchResults->nextResult()) {
            $dbItemIds[] = (int)$rec[0];
	}
	$this->assertEquals(array(), $dbItemIds, 'Items not removed from the DisabledMap');
    }

    function testImageBlockHelperSetDisabledFlagRecursive() {
    	global $gallery;

	$ret = ImageBlockHelper::setDisabledFlag($this->_topAlbum, true, true);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        $itemIds = array();
    	foreach (array_merge($this->_topItems, $this->_subItems) as $item) {
    	    $itemIds[] = $item->getId();
	}
	$itemIds[] = $this->_topAlbum->getId();
	$itemIds[] = $this->_subAlbum->getId();
	sort($itemIds);

        $query = 'SELECT [ImageBlockDisabledMap::itemId] ' .
                 'FROM [ImageBlockDisabledMap] ' .
        	 'WHERE [ImageBlockDisabledMap::itemId] IN (' .
        	 GalleryUtilities::makeMarkers(sizeof($itemIds)) .
        	 ')';

        list ($ret, $searchResults) = $gallery->search($query, $itemIds);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        $dbItemIds = array();
        while ($rec = $searchResults->nextResult()) {
            $dbItemIds[] = (int)$rec[0];
	}
	sort($dbItemIds);
	$this->assertEquals($itemIds, $dbItemIds, 'Items not added to the DisableMap');

        $ret = ImageBlockHelper::setDisabledFlag($this->_topAlbum, true, false);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        $query = 'SELECT [ImageBlockDisabledMap::itemId] ' .
                 'FROM [ImageBlockDisabledMap] ' .
        	 'WHERE [ImageBlockDisabledMap::itemId] IN (' .
        	 GalleryUtilities::makeMarkers(sizeof($itemIds)) .
        	 ')';

        list ($ret, $searchResults) = $gallery->search($query, $itemIds);
        if ($ret->isError()) {
            return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
        }

        $dbItemIds = array();
        while ($rec = $searchResults->nextResult()) {
            $dbItemIds[] = (int)$rec[0];
	}
	$this->assertEquals(array(), $dbItemIds, 'Items not removed from the DisabledMap');
    }
}
?>
