<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package ImageBlock
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Random item
 */
define('IMAGE_BLOCK_RANDOM', 1);

/**
 * Most recent item
 */
define('IMAGE_BLOCK_RECENT', 2);

/**
 * Most viewed item
 */
define('IMAGE_BLOCK_VIEWED', 3);

/**
 * A helper class for the Image Block module.
 *
 * @package ImageBlock
 * @subpackage Classes
 */
class ImageBlockHelper {

    /**
     * Fetch item data for use in image block
     *
     * @param string the item type
     * @param int the order type (use defined constant from above)
     * @return array GalleryStatus a status code
     *               mixed containing id, creationTimestamp, viewCount of
     *                     item or null if none found
     * @static
     */
    function fetchViewableData($itemType, $order) {
	global $gallery;
	$storage = $gallery->getStorage();

	list ($ret, $permissionBits) = GalleryCoreApi::convertPermissionIdsToBits('core.view');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	switch ($order) {
	case IMAGE_BLOCK_RANDOM:
	    list ($ret, $orderBy) = $storage->getFunctionSql('RAND', array());
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    break;
	case IMAGE_BLOCK_RECENT:
	    $orderBy = '[GalleryEntity::creationTimestamp] DESC';
	    break;
	case IMAGE_BLOCK_VIEWED:
	    $orderBy = '[GalleryItemAttributesMap::viewCount] DESC';
	    break;
	default:
	    return array(GalleryStatus::ERROR_UNIMPLEMENTED(__FILE__, __LINE__), null);
	}

	/* Prepare the query */
	$query = '
	SELECT
	  [GalleryEntity::id], [GalleryEntity::creationTimestamp], [GalleryItemAttributesMap::viewCount]
	FROM
	  [GalleryEntity], [GalleryUserGroupMap], [GalleryPermissionMap], [GalleryItemAttributesMap], [GalleryChildEntity], [GalleryDerivative]
	WHERE
	  ([GalleryPermissionMap::userId] = ?
	   OR
	   ([GalleryUserGroupMap::userId] = ?
	    AND
	    [GalleryPermissionMap::groupId] = [GalleryUserGroupMap::groupId]))
	  AND
	  [GalleryPermissionMap::permission] & ? > ?
	  AND
	  [GalleryPermissionMap::itemId] = [GalleryEntity::id]
	  AND
	  [GalleryEntity::entityType] = ?
	  AND
	  [GalleryItemAttributesMap::itemId] = [GalleryEntity::id]
	  AND
	  [GalleryChildEntity::parentId] = [GalleryEntity::id]
	  AND
	  [GalleryDerivative::id] = [GalleryChildEntity::id]
	  AND
	  [GalleryDerivative::derivativeType] = ' .
	    DERIVATIVE_TYPE_IMAGE_THUMBNAIL . '
	GROUP BY
	  [GalleryEntity::id]
	ORDER BY ' .  $orderBy . ' LIMIT 1';

	$data[] = $gallery->getActiveUserId();
	$data[] = $gallery->getActiveUserId();
	$data[] = $storage->convertIntToBits($permissionBits);
	$data[] = $storage->convertIntToBits(0);
	$data[] = $itemType;

	list ($ret, $searchResults) = $gallery->search($query, $data, array());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$data = null;
	while ($result = $searchResults->nextResult()) {
	     $data = array('id' => (int)$result[0],
			   'creationTimestamp' => (int)$result[1],
			   'viewCount' => (int)$result[2]);
	}
	return array(GalleryStatus::success(), $data);
    }

}
?>
