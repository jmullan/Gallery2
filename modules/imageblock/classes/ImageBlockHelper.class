<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package ImageBlock
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Random item
 */
define('IMAGE_BLOCK_RANDOM', 1);

/**
 * Most recent item
 */
define('IMAGE_BLOCK_RECENT', 2);

/**
 * Most viewed item
 */
define('IMAGE_BLOCK_VIEWED', 3);

/**
 * A helper class for the Image Block module.
 *
 * @package ImageBlock
 * @subpackage Classes
 */
class ImageBlockHelper /* extends GalleryEventListener */ {

    /**
     * Fetch item data for use in image block
     *
     * @param string the item type
     * @param int the order type (use defined constant from above)
     * @param int limit item selection to descendents of this item (optional)
     * @return array GalleryStatus a status code
     *               mixed containing id, creationTimestamp, viewCount of
     *                     item or null if none found
     * @static
     */
    function fetchViewableData($itemType, $order, $parentId=null) {
	global $gallery;
	$storage =& $gallery->getStorage();
	$typeMap = array('GalleryPhotoItem' => 1, 'GalleryAlbumItem' => 2);

	/* Prepare the query */
	$select[] = '[ImageBlockCacheMap::itemId]';
	$select[] = '[ImageBlockCacheMap::itemTimestamp]';
	$from[] = '[ImageBlockCacheMap] LEFT JOIN [ImageBlockDisabledMap] ON ' .
	    '[ImageBlockCacheMap::itemId]=[ImageBlockDisabledMap::itemId]';
	$where[] = '[ImageBlockCacheMap::userId] = ?';
	$where[] = '[ImageBlockCacheMap::itemType] = ?';
	$where[] = '[ImageBlockDisabledMap::itemId] IS NULL';
	$data[] = $gallery->getActiveUserId();
	$data[] = $typeMap[$itemType];

	list ($ret, $orderBy) = ImageBlockHelper::_buildOrderBy($order);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if ($order == IMAGE_BLOCK_VIEWED || isset($parentId)) {
	    $select[] = '[GalleryItemAttributesMap::viewCount]';
	    $from[] = '[GalleryItemAttributesMap]';
	    $where[] = '[ImageBlockCacheMap::itemId] = [GalleryItemAttributesMap::itemId]';
	}

	if (isset($parentId)) {
	    $where[] = '[GalleryItemAttributesMap::parentSequence] LIKE ?';
	    list ($ret, $sequence) = GalleryCoreApi::fetchParentSequence($parentId);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    $data[] = implode('/', $sequence) . (empty($sequence) ? '' : '/') . $parentId . '/%';
	}

	/* Build the query */
	$query = 'SELECT ' . implode(', ', $select) .
		 ' FROM ' . implode(', ', $from) .
		 ' WHERE ' . implode(' AND ', $where) .
		 ' ORDER BY ' . $orderBy;

	list ($ret, $query) = $storage->getFunctionSql('LIMIT', array(1, $query));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $result) = ImageBlockHelper::_runQuery($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $isCached) = ImageBlockHelper::_isCached($gallery->getActiveUserId());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (!$isCached) {
	    $ret = ImageBlockHelper::cacheViewableTree();
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    list ($ret, $result) = ImageBlockHelper::_runQuery($query, $data);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	if (isset($result) && !isset($result['viewCount'])) {
	    list ($ret, $result['viewCount']) = GalleryCoreApi::fetchItemViewCount($result['id']);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	return array(GalleryStatus::success(), $result);
    }

    /**
     * Build the 'ORDER BY' section of the fetchViewableData query
     *
     * @param int the order type (use defined constant from above)
     * @return array GalleryStatus a status code
     *               string containing SQL ORDER BY statement
     * @static
     */
    function _buildOrderBy($order) {
	global $gallery;
	$orderBy = null;

	switch ($order) {
	case IMAGE_BLOCK_RANDOM:
	    $storage =& $gallery->getStorage();
	    list ($ret, $orderBy) = $storage->getFunctionSql('RAND', array());
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    break;
	case IMAGE_BLOCK_RECENT:
	    $orderBy = '[ImageBlockCacheMap::itemTimestamp] DESC';
	    break;
	case IMAGE_BLOCK_VIEWED:
	    $orderBy = '[GalleryItemAttributesMap::viewCount] DESC';
	    break;
	default:
	    return array(GalleryStatus::error(ERROR_UNIMPLEMENTED, __FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $orderBy);
    }

    /** @static @private */
    function _runQuery($query, $data) {
	global $gallery;
	list ($ret, $searchResults) = $gallery->search($query, $data);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$result = null;
	if ($rec = $searchResults->nextResult()) {
	    $result = array('id' => (int)$rec[0],
			    'creationTimestamp' => (int)$rec[1]);
	    if (isset($rec[2])) {
		$result['viewCount'] = (int)$rec[2];
	    }
	}
	return array(GalleryStatus::success(), $result);
    }

    /** @static @private */
    function _isCached($userId) {
	global $gallery;
	list ($ret, $searchResults) = $gallery->search(
	    'SELECT COUNT(*) FROM [ImageBlockCacheMap] WHERE [ImageBlockCacheMap::userId] = ?',
	    array($userId));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$isCached = ($rec = $searchResults->nextResult()) && ($rec[0] > 0);
	return array(GalleryStatus::success(), $isCached);
    }

    /**
     * Cache viewable data for current user
     *
     * @return object GalleryStatus a status code
     * @static
     */
    function cacheViewableTree() {
	global $gallery;
	$storage =& $gallery->getStorage();

	list ($ret, $permissionBits) = GalleryCoreApi::convertPermissionIdsToBits('core.view');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$userId = $gallery->getActiveUserId();
	list ($ret, $groupIds) = GalleryCoreApi::fetchGroupsForUser($userId);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	$groupIds = array_keys($groupIds);
	$groupIdMarkers = GalleryUtilities::makeMarkers($groupIds);
	list ($ret, $andPermission) = $storage->getFunctionSql('BITAND',
						array('[GalleryPermissionMap::permission]', '?'));
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$query = '
	INSERT INTO
	  [ImageBlockCacheMap]
	SELECT DISTINCT
	  ?, ?, [GalleryEntity::creationTimestamp], [GalleryEntity::id]
	FROM
	  [GalleryEntity], [GalleryPermissionMap], [GalleryChildEntity], [GalleryDerivative]
	WHERE
	  [GalleryEntity::entityType] = ?
	  AND
	  ([GalleryPermissionMap::userId] = ?
	   OR
	   [GalleryPermissionMap::groupId] IN (' . $groupIdMarkers . '))
	  AND
	' . $andPermission . ' > ?
	  AND
	  [GalleryPermissionMap::itemId] = [GalleryEntity::id]
	  AND
	  [GalleryChildEntity::parentId] = [GalleryEntity::id]
	  AND
	  [GalleryDerivative::id] = [GalleryChildEntity::id]
	  AND
	  [GalleryDerivative::derivativeType] = ' . DERIVATIVE_TYPE_IMAGE_THUMBNAIL . '
	';

	$data = array($userId, 1, 'GalleryPhotoItem', $userId);
	array_splice($data, sizeof($data), 0, $groupIds);
	$data[] = $storage->convertIntToBits($permissionBits);
	$data[] = $storage->convertIntToBits(0);

	$ret = $storage->execute($query, $data);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	$data[1] = 2;
	$data[2] = 'GalleryAlbumItem';
	$ret = $storage->execute($query, $data);
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	return GalleryStatus::success();
    }

    /**
     * Event handler for Gallery::ViewableTreeChange, GalleryEntity::save, and GalleryEntity::delete
     *
     * @see GalleryEventListener::handleEvent
     */
    function handleEvent($event) {
	switch ($event->getEventName()) {
	case 'Gallery::ViewableTreeChange':
	    /*
	     * Invalidate image block cache for specified user, or entire cache if no user
	     * Event sends array('userId'=>id or array of ids or null, 'itemId'=>id or array of ids or null)
	     */
	    GalleryCoreApi::requireOnce(dirname(__FILE__) . '/ImageBlockCacheMap.class');
	    $param = $event->getEntity();
	    if (!empty($param['userId'])) {
		$ret = ImageBlockCacheMap::removeMapEntry(array('userId' => $param['userId']));
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
	    } else {
		$ret = ImageBlockCacheMap::removeAllMapEntries();
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
	    }
	    break;

	case 'GalleryEntity::delete':
	    /*
	     * Determines if the item being deleted is listed in the ImageBlockDisabledMap and remove it
	     */
	    $entity = $event->getEntity();

	    if (!GalleryUtilities::isA($entity, 'GalleryItem')) {
		break;
	    }

	    GalleryCoreApi::requireOnce(dirname(__FILE__) . '/ImageBlockDisabledMap.class');
	    if (ImageBlockHelper::getDisabledFlag($entity->getId())) {
		$ret = ImageBlockDisabledMap::removeMapEntry(array('itemId' => $entity->getId()));
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
	    }
	    break;

	case 'GalleryEntity::save':
	    /*
	     * Determines if the item being added has a parent that is listed in the
	     * ImageBlockDisabledMap and if so, adds it to the map
	     */
	    $entity = $event->getEntity();

	    if (!$entity->testPersistentFlag(STORAGE_FLAG_NEWLY_CREATED)) {
		break;
	    } else if (!GalleryUtilities::isA($entity, 'GalleryDataItem') &&
		       !GalleryUtilities::isA($entity, 'GalleryAlbumItem')) {
		break;
	    }

	    GalleryCoreApi::requireOnce(dirname(__FILE__) . '/ImageBlockDisabledMap.class');
	    $parentId = $entity->getParentId();

	    list ($ret, $disabledFlag) = ImageBlockHelper::getDisabledFlag($parentId);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }

	    if (!empty($disabledFlag)) {
		$ret = ImageBlockDisabledMap::addMapEntry(array('itemId' => $entity->getId()));
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
	    }
	    break;
	}
	return array(GalleryStatus::success(), null);
    }

    /**
     * Set the disabled flag on all album items.
     *
     * @param object GalleryAlbumItem AlbumItem which is to be flagged
     * @param string Flag to be set to album items
     * @return object GalleryStatus a status code
     * @static
     */
    function setDisabledFlag($parentAlbum, $recursive, $disabled) {
	global $gallery;
	GalleryCoreApi::requireOnce(dirname(__FILE__) . '/ImageBlockDisabledMap.class');

	if ($recursive) { 
	    $select[] = '[GalleryItemAttributesMap::itemId]';
	    $from[] = '[GalleryItemAttributesMap]';
	    $where[] = '[GalleryItemAttributesMap::parentSequence] LIKE ? OR [GalleryItemAttributesMap::itemId] = ?';
	    list ($ret, $sequence) = GalleryCoreApi::fetchParentSequence($parentAlbum->getId());

	    /* We don't care about ERROR_MISSING_OBJECT if it's a top-level album */
	    if ($ret->isError() & ERROR_MISSING_OBJECT) {
		    return $ret->wrap(__FILE__, __LINE__);
	    }
	    $data[] = (empty($sequence) ? '/' : implode('/', $sequence)) . (empty($sequence) ? '' : '/') . 
		    $parentAlbum->getId() . '/%';
	    $data[] = $parentAlbum->getId();

	    /* Build the query */
	    $query = 'SELECT ' . implode(', ', $select) .
		     ' FROM ' . implode(', ', $from) .
		     ' WHERE ' . implode(' AND ', $where);

	    list ($ret, $searchResult) = $gallery->search($query, $data);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }

	    while ($result = $searchResult->nextResult()) {
		$childIds[] = $result[0];
	    }
	} else {
	    list($ret, $childIds) = GalleryCoreApi::fetchChildDataItemIds($parentAlbum);
	    $childIds[] = $parentAlbum->getId();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	foreach ($childIds as $itemId) {
	    if ($disabled) {
		$ret = ImageBlockDisabledMap::addMapEntry(array('itemId' => $itemId));
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    } else {
		$ret = ImageBlockDisabledMap::removeMapEntry(array('itemId' => $itemId));
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	}
	return GalleryStatus::success();
    }

    /**
     * Get the disabled flag on all album items.
     *
     * @param object GalleryAlbumItem AlbumItem which contains the flag to be retrieved
     * @return bool Flag on all album items
     * @static
     */
    function getDisabledFlag($itemId) {
	global $gallery;

	GalleryCoreApi::requireOnce(dirname(__FILE__) . '/ImageBlockDisabledMap.class');
	$query = '
		SELECT
		    [ImageBlockDisabledMap::itemId]
		FROM
		    [ImageBlockDisabledMap]
		WHERE
		    [ImageBlockDisabledMap::itemId] = ?
		  ';
	list ($ret, $searchResults) = $gallery->search($query, array($itemId));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$result = false;
	if ($rec = $searchResults->nextResult()) {
	    $result = (bool)$rec[0];
	}
	return array(GalleryStatus::success(), $result);
    }
}
?>
