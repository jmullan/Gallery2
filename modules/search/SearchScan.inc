<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2003 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Search
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/* Pull in required classes */
require_once(dirname(__FILE__) . '/classes/SearchUtilities.class');

/**
 * @package Search
 * @subpackage UserInterface
 */
class SearchScanController extends GalleryController {

    /**
     * @see GalleryController::handleRequest
     */
    function handleRequest($form) {
	global $gallery;

	$results = array();
	if (isset($form['action']['showAll'])) {
	    $results['delegate']['view'] = 'search:SearchShowAll';
	} else {
	    $results['delegate']['view'] = 'search:SearchScan';
	}

	$results['status'] = array();
	$results['error'] = array();
	return array(GalleryStatus::success(), $results);
    }
}

/**
 * @package Search
 * @subpackage UserInterface
 */
class SearchScanView extends GalleryView {

    /**
     * @see GalleryView::loadTemplate
     */
    function loadTemplate(&$template, &$form) {
	global $gallery;

	// XXX: Parameterize this
	$scanSize = 3;

	/* Find all the modules that support the Search interface */
	$ids = GalleryFactory::getAllImplementationIds('GallerySearchInterface_1_0');
	foreach ($ids as $id => $className) {
	    list ($ret, $searchInstances[$id]) =
		GalleryFactory::newInstance('GallerySearchInterface_1_0', $className);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	/* Load the search info for each module */
	foreach ($searchInstances as $id => $instance) {
	    list ($ret, $modules[$id]) = $instance->getSearchModuleInfo();
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	$items = array();
	$thumbnails = array();
	$searchResults = array();
	$searchResultThumbnails = array();
	if ($form['formName'] == 'SearchScan' ||
	    $form['formName'] == 'SearchShowAll' ||
	    $form['formName'] == 'SearchSystemContent') {
	    
	    if (empty($form['searchCriteria'])) {
		$form['error']['searchCriteria']['missing'] = 1;
	    } else {

		$form['searchCriteria'] =
		    SearchUtilities::sanitizeSearchCriteria($form['searchCriteria']);
		
		if (isset($form['useDefaultSettings']) || $form['formName'] == 'SearchShowAll') {
		    foreach ($searchInstances as $id => $instance) {
			$form['options'][$id] = $modules[$id]['options'];
		    }
		}

		/* Execute a "scan" search */
		foreach ($searchInstances as $id => $instance) {
		    if (isset($form['options'][$id])) {
			list ($ret, $searchResults[$id]) =
			    $instance->search($form['options'][$id],
					      $form['searchCriteria'],
					      0,
					      $scanSize);
			if ($ret->isError()) {
			    return array($ret->wrap(__FILE__, __LINE__), null);
			}
		    }
		}
	    }

	    /* Pull out all the item ids and save them */
	    $itemIds = array();
	    foreach ($searchResults as $id => $resultSet) {
		foreach ($resultSet['results'] as $result) {
		    if (isset($result['itemId'])) {
			$itemIds[$result['itemId']] = 1;
		    }
		}
	    }
	    $itemIds = array_keys($itemIds);

	    $thumbnails = array();
	    if (!empty($itemIds)) {

		/* Fetch items */
		list ($ret, $itemList) = $gallery->loadEntitiesById($itemIds);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
		foreach ($itemList as $item) {
		    $items[$item->getId()] = $item->getMemberData();
		}
		
		/* Fetch thumbnails */
		list ($ret, $thumbnailList) =
		    GalleryDerivativeHelper::fetchThumbnailsByItemIds($itemIds);
		if ($ret->isError()) {
		    return array($ret->wrap(__FILE__, __LINE__), null);
		}
		foreach ($thumbnailList as $thumbnail) {
		    $thumbnails[$thumbnail->getParentId()] = $thumbnail->getMemberData();
		}
	    }
	} else {
	    $form['searchCriteria'] = '';
	}

	/* Render the HTML body */
	$SearchScan = array();
	$SearchScan['modules'] = $modules;
	$SearchScan['searchResults'] = $searchResults;
	$SearchScan['thumbnails'] = $thumbnails;
	$SearchScan['items'] = $items;
	$SearchScan['controller'] = 'search:SearchScan';

	$template->setVariable('SearchScan', $SearchScan);
	return array(GalleryStatus::success(),
		     array('head' => 'modules/search/templates/SearchHead.tpl',
			   'body' => 'modules/search/templates/SearchScan.tpl'));
    }
}
?>
