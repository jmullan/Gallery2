<?php
/*
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */

GalleryCoreApi::requireOnce('modules/thumbnail/classes/ThumbnailHelper.class');

/**
 * ThumbnailToolkit tests
 * @package Thumbnail
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @version $Revision$ $Date$
 */
class ThumbnailToolkitTest extends GalleryTestCase {

    function ThumbnailToolkitTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    function setUp() {
	parent::setUp();

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'thumbnail');
	if ($ret || !isset($module)) {
	    $this->failWithStatus($ret);
	}
	list ($ret, $this->_toolkit) =
	    GalleryCoreApi::newFactoryInstance('GalleryToolkit', 'ThumbnailToolkit');
	if ($ret || !isset($this->_toolkit)) {
	    $this->failWithStatus($ret);
	}

	/* Register high priority thumbnail operation for image/jpeg */
	$ret = GalleryCoreApi::registerFactoryImplementation(
	    'GalleryToolkit', 'ThumbnailTestToolkit', 'ThumbnailTestToolkit',
	    'modules/thumbnail/test/phpunit/ThumbnailToolkitTest.class', 'thumbnailTest', null);
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}
	$this->_markToolkitForCleanup('ThumbnailTestToolkit');

	$ret = GalleryCoreApi::registerToolkitOperation(
	    'ThumbnailTestToolkit', array('image/jpeg'), 'thumbnail',
	    array(array('type' => 'int', 'description' => 'foo'),
		  array('type' => 'int', 'description' => 'foo')),
	    'bar', null, 1);
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret);
	}

	list ($ret, $this->_itemId) = ThumbnailHelper::addItem('test/fakemime', null,
		'unittest.jpg', dirname(__FILE__) . '/../../images/G2video.jpg', 'image/jpeg');
	if ($ret || !isset($this->_itemId)) {
	    $this->failWithStatus($ret);
	}
    }

    function tearDown() {
	global $gallery;
	$ret = GalleryCoreApi::deleteEntityById($this->_itemId);
	if ($ret) {
	    $this->failWithStatus($ret);
	}
	$platform =& $gallery->getPlatform();
	if (!$platform->unlink($gallery->getConfig('data.gallery.base') . '/unittest.jpg')) {
	    $this->assert(false, 'Unlink failed');
	}
	$ret = GalleryCoreApi::unregisterToolkitOperation(
		'Thumbnail', 'thumbnail', array('test/fakemime'));
	if ($ret) {
	    $this->failWithStatus($ret);
	}

	parent::tearDown();
    }

    function testToolkit() {
	global $gallery;

	list ($ret, $outputMimeType) = $this->_toolkit->performOperation(
	    'test/badmime', 'thumbnail',
	    dirname(__FILE__) . '/x', dirname(__FILE__) . '/y', array(150));
	if ($ret) {
	    $this->assertEquals(GALLERY_ERROR | ERROR_UNSUPPORTED_OPERATION, $ret->getErrorCode(),
				'Error expected for bad mime');
	} else {
	    $this->assert(false, 'Error expected for bad mime');
	}

	list ($ret, $outputMimeType) = $this->_toolkit->performOperation(
	    'test/fakemime', 'bad-operation',
	    dirname(__FILE__) . '/x', dirname(__FILE__) . '/y', array(150));
	if ($ret) {
	    $this->assertEquals(GALLERY_ERROR | ERROR_UNSUPPORTED_OPERATION, $ret->getErrorCode(),
				'Error expected for bad operation');
	} else {
	    $this->assert(false, 'Error expected for bad operation');
	}

	$platform =& $gallery->getPlatform();
	$gallery->setPlatform(new ThumbnailToolkitTestDummyPlatform());

	list ($ret, $outputMimeType) = $this->_toolkit->performOperation(
	    'test/fakemime', 'thumbnail',
	    dirname(__FILE__) . '/x', $gallery->getConfig('data.gallery.base') . '/unittest.jpg',
	    array(150));
	if ($ret) {
	    $this->assertEquals(GALLERY_ERROR | ERROR_PLATFORM_FAILURE, $ret->getErrorCode(),
				'Error expected for copy failure');
	} else {
	    $this->assert(false, 'Error expected for copy failure');
	}

	$gallery->setPlatform($platform);

	list ($ret, $outputMimeType) = $this->_toolkit->performOperation(
	    'test/fakemime', 'thumbnail',
	    dirname(__FILE__) . '/x', $gallery->getConfig('data.gallery.base') . '/unittest.jpg',
	    array(150));
	if ($ret) {
	    $this->failWithStatus($ret);
	}
    }
}

/**
 * Test platform
 */
class ThumbnailToolkitTestDummyPlatform {
    function copy($source, $dest) {
	/* Simulate copy failure */
	return false;
    }
    function getDirectorySeparator() {
	return DIRECTORY_SEPARATOR;
    }
}

/**
 * Test toolkit
 */
class ThumbnailTestToolkit {
    function performOperation($mimeType, $operationName, $sourceFilename,
			      $destFilename, $parameters, $context=array()) {
	/* Do nothing */
	return array(null, $mimeType, $context);
    }
}
?>
