<?php
/*
 * $RCSfile: CustomThumbnailOptionTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.13 $ $Date: 2005/08/23 03:49:56 $
 * @package Thumbnail
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Load required classes
 */
GalleryCoreApi::relativeRequireOnce('lib/tools/phpunit/ItemEditOptionTestCase.class');
GalleryCoreApi::relativeRequireOnce('modules/thumbnail/classes/ThumbnailHelper.class');

/**
 * CustomThumbnailOption tests
 * Also tests ThumbnailHelper::fetchThumbnail
 * @package Thumbnail
 * @subpackage PHPUnit
 */
class CustomThumbnailOptionTest extends ItemEditOptionTestCase {

    function CustomThumbnailOptionTest($methodName) {
	$this->ItemEditOptionTestCase($methodName, 'thumbnail', 'CustomThumbnailOption');
    }

    function setUp() {
	parent::setUp();

	$ret = GalleryCoreApi::registerFactoryImplementation(
	  'GalleryToolkit', 'CustomThumbnailOptionTestToolkit', 'CustomThumbnailOptionTestToolkit',
	  'modules/thumbnail/test/phpunit/CustomThumbnailOptionTest.class', 'thumbnailTest', null);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markToolkitForCleanup('CustomThumbnailOptionTestToolkit');

	$ret = GalleryCoreApi::registerToolkitOperation('CustomThumbnailOptionTestToolkit',
		array('image/test'), 'thumbnail',
		array(array('type' => 'int', 'description' => 'foo'),
		      array('type' => 'int', 'description' => 'foo')), 'test-description');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);

	list ($ret, $this->_item) = $this->_createRandomDataItem($this->_album->getId(),
	    'text/test', array(), __FILE__, 'GalleryUnknownItem');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_image) = $this->_createRandomDataItem($this->_album->getId(),
	    'image/test', array(), __FILE__, 'GalleryPhotoItem');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_derivative) =
	    $this->_createDerivative($this->_image, $this->_image->getId(),
		DERIVATIVE_TYPE_IMAGE_THUMBNAIL, 'thumbnail|200', 'image/test');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testAddBadMime() {
	$form = array('name' => array(1 => 'test.gif'),
		      'type' => array(1 => 'image/gif'),
		      'tmp_name' => array(1 =>
			    dirname(__FILE__) . '/../../../core/test/data/test1.gif'));

	list ($error, $warning) = $this->_handleRequestAfterEdit($form, $this->_item);
	$this->assertEquals(array('form[CustomThumbnailOption][error][imageMime]'), $error);
	$this->assertEquals(array(), $warning);
    }

    function testAddRemoveThumbnail() {
	/* Add custom thumbnail to item with no thumbnail.. */
	$form = array('name' => array(1 => 'test.jpg'),
		      'type' => array(1 => 'image/jpeg'),
		      'tmp_name' => array(1 =>
			    dirname(__FILE__) . '/../../../core/test/data/test1.jpg'));

	$result = $this->_handleRequestAfterEdit($form, $this->_item);
	$this->assertEquals(array(array(), array()), $result);

	list ($ret, $thumbnailImage) = ThumbnailHelper::fetchThumbnail($this->_item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($thumbnailImage), 'thumbnailImage');

	list ($ret, $thumbnails) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_item->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($this->_item->getId()), array_keys($thumbnails), 'derivative');
	$thumbnail = array_shift($thumbnails);
	$this->assertEquals($thumbnailImage->getId(),
			    $thumbnail->getDerivativeSourceId(), 'source');

	/* Remove custom thumbnail.. */
	$form = array('CustomThumbnailOption' => array('delete' => '1'));
	$result = $this->_handleRequestAfterEdit($form, $this->_item);
	$this->assertEquals(array(array(), array()), $result);

	list ($ret, $thumbnailImage) = ThumbnailHelper::fetchThumbnail($this->_item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!isset($thumbnailImage), 'removed thumbnailImage');

	list ($ret, $thumbnails) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_item->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), $thumbnails, 'removed derivative');
    }

    function testAddDeleteThumbnail() {
	/* Add custom thumbnail to item with no thumbnail.. */
	$form = array('name' => array(1 => 'test.jpg'),
		      'type' => array(1 => 'image/jpeg'),
		      'tmp_name' => array(1 =>
			    dirname(__FILE__) . '/../../../core/test/data/test1.jpg'));

	$result = $this->_handleRequestAfterEdit($form, $this->_item);
	$this->assertEquals(array(array(), array()), $result);

	list ($ret, $thumbnailImage) = ThumbnailHelper::fetchThumbnail($this->_item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($thumbnailImage), 'thumbnailImage');

	list ($ret, $thumbnails) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_item->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($this->_item->getId()), array_keys($thumbnails), 'derivative');
	$thumbnail = array_shift($thumbnails);
	$this->assertEquals($thumbnailImage->getId(),
			    $thumbnail->getDerivativeSourceId(), 'source');

	/* Delete thumbnail from item and ensure ThumbnailImage is deleted too */
	$ret = GalleryCoreApi::deleteEntityById($thumbnail->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $thumbnailImage) = ThumbnailHelper::fetchThumbnail($this->_item->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!isset($thumbnailImage), 'thumbnailImage should have been deleted');

	if (isset($thumbnailImage)) {
	    /* In case test failed, delete ThumbnailImage */
	    $ret = GalleryCoreApi::deleteEntityById($thumbnailImage->getId());
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	}
    }

    function testChangeRestoreThumbnail() {
	/* Add custom thumbnail to image that has a thumbnail.. */
	$form = array('name' => array(1 => 'test.jpg'),
		      'type' => array(1 => 'image/jpeg'),
		      'tmp_name' => array(1 =>
			    dirname(__FILE__) . '/../../../core/test/data/test1.jpg'));

	$result = $this->_handleRequestAfterEdit($form, $this->_image);
	$this->assertEquals(array(array(), array()), $result);

	list ($ret, $thumbnailImage) = ThumbnailHelper::fetchThumbnail($this->_image->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($thumbnailImage), 'thumbnailImage');

	list ($ret, $thumbnails) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_image->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($this->_image->getId()), array_keys($thumbnails), 'derivative');
	$thumbnail = array_shift($thumbnails);
	$this->assertEquals($thumbnailImage->getId(),
			    $thumbnail->getDerivativeSourceId(), 'source');

	/* Remove custom thumbnail.. */
	$form = array('CustomThumbnailOption' => array('delete' => '1'));
	$result = $this->_handleRequestAfterEdit($form, $this->_image);
	$this->assertEquals(array(array(), array()), $result);

	list ($ret, $thumbnailImage) = ThumbnailHelper::fetchThumbnail($this->_image->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!isset($thumbnailImage), 'removed thumbnailImage');

	list ($ret, $thumbnails) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_image->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($this->_image->getId()),
			    array_keys($thumbnails), 'got derivative');
	$thumbnail = array_shift($thumbnails);
	$this->assertEquals($this->_image->getId(),
			    $thumbnail->getDerivativeSourceId(), 'got source');
    }

    function testAlbumHighlight() {
	/* Add custom thumbnail to album (also test browser not sending mime type..) */
	$form = array('name' => array(1 => 'test.jpg'),
		      'type' => array(1 => 'application/unknown'),
		      'tmp_name' => array(1 =>
			    dirname(__FILE__) . '/../../../core/test/data/test1.jpg'));

	$result = $this->_handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array(array(), array()), $result);

	list ($ret, $thumbnailImage) = ThumbnailHelper::fetchThumbnail($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	if (!isset($thumbnailImage)) {
	    $this->assert(false, 'thumbnailImage');
	    return;
	}

	list ($ret, $thumbnails) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_album->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($this->_album->getId()), array_keys($thumbnails), 'highlight');
	$thumbnail = array_shift($thumbnails);
	$this->assertEquals($thumbnailImage->getId(),
			    $thumbnail->getDerivativeSourceId(), 'source');

	/* Remove custom thumbnail.. */
	$form = array('CustomThumbnailOption' => array('delete' => '1'));
	$result = $this->_handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array(array(), array()), $result);

	list ($ret, $thumbnailImage) = ThumbnailHelper::fetchThumbnail($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!isset($thumbnailImage), 'removed thumbnailImage');

	list ($ret, $thumbnails) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_album->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($this->_album->getId()),
			    array_keys($thumbnails), 'got highlight');
	$thumbnail = array_shift($thumbnails);
	$this->assertEquals($this->_derivative->getId(), $thumbnail->getDerivativeSourceId(),
			    'source is derivative of first photo in album');
    }

    function testEmptyAlbumHighlight() {
	list ($ret, $album) = $this->_createRandomAlbum($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Add custom thumbnail to album.. */
	$form = array('name' => array(1 => 'test.jpg'),
		      'type' => array(1 => 'image/jpeg'),
		      'tmp_name' => array(1 =>
			    dirname(__FILE__) . '/../../../core/test/data/test1.jpg'));

	$result = $this->_handleRequestAfterEdit($form, $album);
	$this->assertEquals(array(array(), array()), $result);

	list ($ret, $thumbnailImage) = ThumbnailHelper::fetchThumbnail($album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($thumbnailImage), 'thumbnailImage');

	list ($ret, $thumbnails) = GalleryCoreApi::fetchThumbnailsByItemIds(array($album->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($album->getId()), array_keys($thumbnails), 'highlight');
	$thumbnail = array_shift($thumbnails);
	$this->assertEquals($thumbnailImage->getId(),
			    $thumbnail->getDerivativeSourceId(), 'source');

	/* Remove custom thumbnail.. */
	$form = array('CustomThumbnailOption' => array('delete' => '1'));
	$result = $this->_handleRequestAfterEdit($form, $album);
	$this->assertEquals(array(array(), array()), $result);

	list ($ret, $thumbnailImage) = ThumbnailHelper::fetchThumbnail($album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(!isset($thumbnailImage), 'removed thumbnailImage');

	list ($ret, $thumbnails) = GalleryCoreApi::fetchThumbnailsByItemIds(array($album->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array(), $thumbnails, 'no highlight');
    }

    /* Test that guaranteeAlbumHasThumbnail won't remove a custom thumbnail */
    function testGuarantee() {
	/* Add custom thumbnail to album.. */
	$form = array('name' => array(1 => 'test.jpg'),
		      'type' => array(1 => 'image/jpeg'),
		      'tmp_name' => array(1 =>
			    dirname(__FILE__) . '/../../../core/test/data/test1.jpg'));

	$result = $this->_handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array(array(), array()), $result);

	/* Call GalleryCoreApi::guaranteeAlbumHasThumbnail */
	list ($ret, $success) = GalleryCoreApi::guaranteeAlbumHasThumbnail($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($success, 'guarantee');

	list ($ret, $thumbnailImage) = ThumbnailHelper::fetchThumbnail($this->_album->getId());
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert(isset($thumbnailImage), 'thumbnailImage');

	list ($ret, $thumbnails) =
	    GalleryCoreApi::fetchThumbnailsByItemIds(array($this->_album->getId()));
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(array($this->_album->getId()), array_keys($thumbnails), 'highlight');
	$thumbnail = array_shift($thumbnails);
	$this->assertEquals($thumbnailImage->getId(),
			    $thumbnail->getDerivativeSourceId(), 'source');
    }
}

/**
 * Dummy test toolkit
 * @package Thumbnail
 * @subpackage PHPUnit
 */
class CustomThumbnailOptionTestToolkit extends GalleryToolkit { }
?>
