<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package RandomHighlight
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Load the parent class
 */
require_once(dirname(__FILE__) . '/../../core/classes/GalleryDerivativeImage.class');

/**
 * An extension of GalleryDerivativeImage to render in RandomHighlight mode
 *
 * @g2 <class-name>RandomHighlightDerivativeImage</class-name>
 * @g2 <parent-class-name>GalleryDerivativeImage</parent-class-name>
 * @g2 <schema>
 * @g2   <schema-major>1</schema-major>
 * @g2   <schema-minor>0</schema-minor>
 * @g2 </schema>
 * @g2 <requires-id/>
 *
 * @package RandomHighlight
 * @subpackage Classes
 */
class RandomHighlightDerivativeImage_core extends GalleryDerivativeImage {

    /**
     * @see GalleryEntity::onLoad
     */
    function onLoad() {
	global $gallery;

	$ret = parent::onLoad();
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	// Check age and set new highlight if needed..
	list ($ret, $duration) =
	    GalleryCoreApi::getPluginParameter('module', 'randomhighlight', 'duration');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}
	if (time() - $this->getModificationTimestamp() > $duration) {
	    list ($ret, $album) = GalleryCoreApi::loadEntitiesById($this->getParentId());
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    list ($ret, $childIds) = GalleryCoreApi::fetchChildItemIds($album);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    list ($ret, $thumbnails) = GalleryCoreApi::fetchThumbnailsByItemIds($childIds);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    if (empty($thumbnails)) {
		return GalleryStatus::success();
	    }
	    $thumbnails = array_values($thumbnails);
	    $highlight = $thumbnails[rand(0, count($thumbnails)-1)];

	    list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->getId());
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $this->setDerivativeSourceId($highlight->getId());
	    GalleryCoreApi::estimateDerivativeDimensions($this, $highlight);
	    $this->save();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $ret = GalleryCoreApi::expireDerivativeTreeBySourceIds(array($this->getId()));
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    $ret = GalleryCoreApi::releaseLocks($lockId);
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	return GalleryStatus::success();
    }
}

GalleryCoreApi::requireOnce(dirname(__FILE__) . '/interfaces/RandomHighlightDerivativeImage.inc');
?>
