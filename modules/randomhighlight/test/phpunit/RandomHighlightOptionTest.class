<?php
/*
 * $RCSfile: RandomHighlightOptionTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2006 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.14 $ $Date: 2006/01/29 00:17:18 $
 * @package RandomHighlight
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

GalleryCoreApi::requireOnce('lib/tools/phpunit/ItemEditOptionTestCase.class');

/**
 * Tests RandomHighlightOption and selection of random highlight.
 * @package RandomHighlight
 * @subpackage PHPUnit
 */
class RandomHighlightOptionTest extends ItemEditOptionTestCase {

    function RandomHighlightOptionTest($methodName) {
	$this->ItemEditOptionTestCase($methodName, 'randomhighlight', 'RandomHighlightOption');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_everybodyGroupId) =
	    GalleryCoreApi::getPluginParameter('module', 'core', 'id.everybodyGroup');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);

	$ret = GalleryCoreApi::addGroupPermission($this->_album->getId(),
						  $this->_everybodyGroupId, 'core.viewAll');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_item) = $this->_createRandomDataItem(
	    $this->_album->getId(), 'image/test',
	    array('width' => 400, 'height' => 300), __FILE__, 'GalleryPhotoItem');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_thumb) = $this->_createDerivative(
	    $this->_item, $this->_item->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
	    'thumbnail|100', 'image/test', array('width' => 100, 'height' => 75));
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_highlight) = $this->_createDerivative(
	    $this->_album, $this->_thumb->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
	    'thumbnail|200', 'image/test');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = $this->_markPluginParametersForCleanup('module', 'randomhighlight');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::setPluginParameter('module', 'randomhighlight', 'duration', '-100');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = GalleryCoreApi::registerFactoryImplementation(
	    'GalleryToolkit', 'RandomHighlightTestToolkit', 'RandomHighlightTestToolkit',
	    'modules/randomhighlight/test/phpunit/RandomHighlightOptionTest.class',
	    'randomhighlightTest', null);
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markToolkitForCleanup('RandomHighlightTestToolkit');

	$ret = GalleryCoreApi::registerToolkitOperation(
	    'RandomHighlightTestToolkit', array('image/test'), 'thumbnail',
	    array(array('type' => 'int', 'description' => 'test'),
		  array('type' => 'int', 'description' => 'test')), 'test');
	if ($ret) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Clean all cached variables */
	GalleryDataCache::reset();
	GalleryUtilities::putRequestVariable('view', null);
    }

    /* Create a photo item inclduing thumbnail */
    function _createPhotoItem() {
	list ($ret, $newItem) = $this->_createRandomDataItem(
	    $this->_album->getId(), 'image/test',
	    array('width' => 600, 'height' => 800), __FILE__, 'GalleryPhotoItem');
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	list ($ret, $newThumb) = $this->_createDerivative(
	    $newItem, $newItem->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL,
	    'thumbnail|150', 'image/test', array('width' => 150, 'height' => 200));
	if ($ret) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(null, $newThumb);
    }

    function testRandomHighlight() {
	list ($ret, $appropriate) = $this->_option->isAppropriate($this->_album, $this->_highlight);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($appropriate, 'appropriate');
	$this->assertEquals(0, $this->_highlight->getWidth(), 'no width yet');

	$form['RandomHighlightOption']['isRandomHighlight'] = 1;
	$result = $this->_handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array(array(), array()), $result, 'turn on');

	list ($ret, $highlight) = $this->_highlight->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('|RandomHighlight|', $highlight->getOnLoadHandlers(), 'on');

	/*
	 * Negative duration forces re-highlight; dummy toolkit sets width value.
	 * Here we also verify that if the source thumbnail is smaller than the desired
	 * album highlight size (150 -> 200 in this case) the estimated derivative size
	 * adheres to the highlight size, not the smaller size.
	 */
	$this->assertEquals(200, $highlight->getWidth(), 'new highlight width');
	$this->assertEquals(150, $highlight->getHeight(), 'new highlight height');

	$result = $this->_handleRequestAfterEdit(array(), $this->_album);
	$this->assertEquals(array(array(), array()), $result, 'turn off');

	GalleryDataCache::reset();
	list ($ret, $highlight) = $highlight->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals(null, $highlight->getOnLoadHandlers(), 'off');
    }

    function testRandomHighlighNew() {
	/*
	 * Verify reselect of highlight if there are 2 or more candidates
	 * (Do not reselect the same highlight if possible)
	 */

	/* Make the album use randomhighlight */
	$form['RandomHighlightOption']['isRandomHighlight'] = 1;
	$result = $this->_handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array(array(), array()), $result, 'turn on');

	list ($ret, $highlight) = $this->_highlight->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('|RandomHighlight|', $highlight->getOnLoadHandlers(), 'verify');

	/* Add a second photo item with another thumbnail dimension */
	list ($ret, $newThumb) = $this->_createPhotoItem();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Call the onLoad handler a few times and it should always alternate */
	for ($i = 0; $i < 4; $i++) {
	    /* Clean all cached variables */
	    GalleryDataCache::reset();
	    list ($ret, $highlight) = $this->_highlight->refresh();
	    if ($ret) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals('|RandomHighlight|', $highlight->getOnLoadHandlers(),
				    "random $i");
	    if ($i % 2 == 0) {
		$this->assertEquals($newThumb->getId(), $highlight->getDerivativeSourceId(),
				    "new source, iteration $i");
		$this->assertEquals(150, $highlight->getWidth(), "highlight width, iteration $i");
		$this->assertEquals(200, $highlight->getHeight(), "highlight height, iter. $i");
	    } else {
		$this->assertEquals($this->_thumb->getId(), $highlight->getDerivativeSourceId(),
				    "new source, iteration $i");
		$this->assertEquals(200, $highlight->getWidth(), "highlight width, iteration $i");
		$this->assertEquals(150, $highlight->getHeight(), "highlight height, iter. $i");
	    }
	}
    }

    function testHighlightPermission1() {
	/* Verify onLoadHandler is set to RandomHighlightPrivate if we pick a non-public item */
	global $gallery;

	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(),
						 $gallery->getActiveUserId(), 'core.all');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$form['RandomHighlightOption']['isRandomHighlight'] = 1;
	$result = $this->_handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array(array(), array()), $result, 'turn on');

	GalleryDataCache::reset();
	list ($ret, $highlight) = $this->_highlight->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('|RandomHighlightPrivate|', $highlight->getOnLoadHandlers(), 'on');
    }

    function testHighlightPermission2() {
	/* Verify reselect of highlight if a user w/o view permission on source item loads it */
	global $gallery;

	$ret = GalleryCoreApi::removeItemPermissions($this->_item->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::addUserPermission($this->_item->getId(),
						 $gallery->getActiveUserId(), 'core.all');
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Create second photo item (public) which should now be chosen */
	list ($ret, $newThumb) = $this->_createPhotoItem();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $lockId) = GalleryCoreApi::acquireWriteLock($this->_highlight->getId());
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_highlight->setOnLoadHandlers('|RandomHighlightPrivate|');
	$this->_highlight->save();
	if ($ret) {
	    GalleryCoreApi::releaseLocks($lockId);
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/* Set long duration so highlight will only repick due to permissions */
	$ret = GalleryCoreApi::setPluginParameter('module', 'randomhighlight', 'duration', 99999);
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_becomeGuestUser();

	/* Even in DownloadItem requests, it should change if the user can't see the highlight */
	GalleryUtilities::putRequestVariable('view', 'core.DownloadItem');

	GalleryDataCache::reset();
	list ($ret, $highlight) = $this->_highlight->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('|RandomHighlight|', $highlight->getOnLoadHandlers(), 'public now');
	$this->assertEquals($newThumb->getId(), $highlight->getDerivativeSourceId(), 'new source');
	$this->assertEquals(150, $highlight->getWidth(), 'highlight width');
	$this->assertEquals(200, $highlight->getHeight(), 'highlight height');
    }

    function testRandomHighlighDownloadItem() {
	/* Verify no reselect on DownloadItem requests (bug 1346044) */

	/* Make the album use randomhighlight */
	$form['RandomHighlightOption']['isRandomHighlight'] = 1;
	$result = $this->_handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array(array(), array()), $result, 'turn on');

	list ($ret, $highlight) = $this->_highlight->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('|RandomHighlight|', $highlight->getOnLoadHandlers(), 'verify');

	/* Add a second photo item with another thumbnail dimension */
	list ($ret, $newThumb) = $this->_createPhotoItem();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	GalleryUtilities::putRequestVariable('view', 'core.DownloadItem');

	/* Execute the test */
	GalleryDataCache::reset();
	list ($ret, $highlight) = $this->_highlight->refresh();
	if ($ret) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	/* Verify the results */
	$this->assertEquals('|RandomHighlight|', $highlight->getOnLoadHandlers(), 'type');
	$this->assertEquals($this->_thumb->getId(), $highlight->getDerivativeSourceId(),
			    'sourceId');
	$this->assertEquals(200, $highlight->getWidth(), 'highlight width');
	$this->assertEquals(150, $highlight->getHeight(), 'highlight height');
    }
}

/**
 * Test toolkit
 *
 * @package RandomHighlight
 * @subpackage PHPUnit
 */
class RandomHighlightTestToolkit extends GalleryToolkit {
}
?>
