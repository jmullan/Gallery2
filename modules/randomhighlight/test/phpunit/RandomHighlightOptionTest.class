<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package RandomHighlight
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

GalleryCoreApi::relativeRequireOnce('lib/tools/phpunit/ItemEditOptionTestCase.class');

/**
 * RandomHighlightOption tests
 * @package RandomHighlight
 * @subpackage PHPUnit
 */
class RandomHighlightOptionTest extends ItemEditOptionTestCase {

    function RandomHighlightOptionTest($methodName) {
	$this->ItemEditOptionTestCase(
	    $methodName, 'randomhighlight', 'ItemEditAlbum', 'RandomHighlightOption');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);

	list ($ret, $item) = $this->_createRandomDataItem(
	    $this->_album->getId(), 'image/test', array(), __FILE__, 'GalleryPhotoItem');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $thumb) = $this->_createDerivative(
	    $item, $item->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $this->_highlight) = $this->_createDerivative(
	    $this->_album, $thumb->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function testRandomHighlight() {
	list ($ret, $appropriate) = $this->_option->isAppropriate($this->_album, $this->_highlight);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($appropriate, 'appropriate');

	$form['RandomHighlightOption']['isRandomHighlight'] = 1;

	$error = $this->handleRequestAfterEdit($form, $this->_album);
	$this->assertEquals(array(), $error, 'turn on');

	list ($ret, $highlight) = $this->_highlight->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('RandomHighlightDerivativeImage', $highlight->getEntityType(), 'on');

	list ($ret, $count) = RandomHighlightHelper::fetchItemCount();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assert($count > 0, 'item count');

	$error = $this->handleRequestAfterEdit(array(), $this->_album);
	$this->assertEquals(array(), $error, 'turn off');

	list ($ret, $highlight) = $this->_highlight->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('GalleryDerivativeImage', $highlight->getEntityType(), 'off');
    }
}
?>
