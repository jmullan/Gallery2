<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package ThumbPage
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * ItemEditThumbPage controller tests
 * @package ThumbPage
 * @subpackage PHPUnit
 */
class ThumbPageItemEditPluginTest extends ItemEditPluginTestCase {

    function ThumbPageItemEditPluginTest($methodName) {
	$this->ItemEditPluginTestCase($methodName, 'thumbpage', 'ItemEditThumbPage');
    }

    function setUp() {
	parent::setUp();

	list ($ret, $this->_item) = $this->_createRandomDataItem(
	    $this->_getRootId(), 'image/tiff', array(),
	    dirname(__FILE__) . '/../../../imagemagick/test/data/test-multiscene.tif',
	    'GalleryPhotoItem');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_thumbnail) = $this->_createDerivative(
	    $this->_item, $this->_item->getId(), DERIVATIVE_TYPE_IMAGE_THUMBNAIL);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    function tearDown() {
	$ret = GalleryCoreApi::deleteEntityById($this->_item->getId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	parent::tearDown();
    }

    function testReset() {
	GalleryUtilities::putRequestVariable('form[action][reset]', 1);

	$preferred = null;
	$results = $this->handleRequest($this->_item, $preferred);
	$this->assertEquals(array(array(), null), $results);
    }

    function testSave() {
	GalleryUtilities::putRequestVariable('form[action][save]', 1);
	GalleryUtilities::putRequestVariable('form[page]', 2);

	$preferred = null;
	$results = $this->handleRequest($this->_item, $preferred);
	$this->assertEquals(array(array(), $this->_translate('Changes saved successfully')),
			    $results, 'page two result');

	list ($ret, $item) = $this->_thumbnail->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('select-page|2;test-operation|100', $item->getDerivativeOperations(),
			    'page two');

	// Set back to page one, which removes select-page operation..
	GalleryUtilities::putRequestVariable('form[page]', 1);

	$results = $this->handleRequest($this->_item, $preferred);
	$this->assertEquals(array(array(), $this->_translate('Changes saved successfully')),
			    $results, 'page one result');

	list ($ret, $item) = $this->_thumbnail->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->assertEquals('test-operation|100', $item->getDerivativeOperations(),
			    'page one');
    }
}
?>
