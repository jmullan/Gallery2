<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package ThumbPage
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Pick which page of a multi-page file to use for the thumbnail.
 *
 * @package ThumbPage
 */
class ThumbPageModule extends GalleryModule {

    function ThumbPageModule() {
	global $gallery;

	$this->setId('thumbpage');
	$this->setName($gallery->i18n('Thumbnail Page'));
	$this->setDescription($gallery->i18n('Select which page of a multi-page file to use for the thumbnail'));
	$this->setVersion('0.8');
	$this->setGroup('display', $gallery->i18n('Display'));
    }

    /**
     * @see GalleryModule::performFactoryRegistrations
     */
    function performFactoryRegistrations() {
	GalleryCoreApi::registerFactoryImplementation('ItemEditPlugin',
	    'ItemEditThumbPage', 'ItemEditThumbPage', dirname(__FILE__) . '/ItemEditThumbPage.inc');
    }

    /**
     * @see GalleryModule::registerEventListeners();
     */
    function registerEventListeners() {
	GalleryCoreApi::registerEventListener('Gallery::DeactivatePlugin', new ThumbPageModule());
    }

    /**
     * @see GalleryModule::install()
     */
    function install() {
	list ($ret, $version) = $this->getModuleParameter('version');
	if ($ret->isError()) {
	    return $ret->wrap(__FILE__, __LINE__);
	}

	if ($version != $this->getVersion()) {
	    $ret = $this->setModuleParameter('version', $this->getVersion());
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	}

	return GalleryStatus::success();
    }

    /**
     * @see GalleryModule::canBeAutoInstalled
     */
    function canBeAutoInstalled() {
	return true;
    }

    /**
     * @see GalleryModule::autoConfigure
     */
    function autoConfigure() {
	return array(GalleryStatus::success(), true);
    }

    /**
     * @see GalleryModule::activate()
     */
    function activate() {
	list ($ret, $list) = $this->_getSupportedMimeTypes();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	if (empty($list)) {
	    // Can't activate unless there's already toolkit support
	    return array(GalleryStatus::success(), array('view' => 'core:SiteAdmin',
							 'subView' => 'thumbpage:CantActivate'));
	} else {
	    $ret = $this->setModuleParameter('mimeTypes', implode('|', $list));
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	}

	list ($ret, $redirect) = parent::activate();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	return array(GalleryStatus::success(), $redirect);
    }

    /**
     * @see GalleryModule::getConfigurationView()
     */
    function getConfigurationView() {
	return 'thumbpage:CantActivate';
    }

    /**
     * Find out what mime types currently have support for:
     *    thumbnail, select-page, page-count
     *
     * @return array object GalleryStatus a status code
     *               array mime types
     */
    function _getSupportedMimeTypes() {
	list ($ret, $thumbnail) = GalleryCoreApi::getToolkitOperationMimeTypes('thumbnail');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list ($ret, $select) = GalleryCoreApi::getToolkitOperationMimeTypes('select-page');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}

	$mimeTypes = array();
	foreach (array_keys(array_merge($thumbnail, $select)) as $mimeType) {
	    list ($ret, $properties) = GalleryCoreApi::getToolkitProperties($mimeType);
	    if ($ret->isError()) {
		return array($ret->wrap(__FILE__, __LINE__), null);
	    }
	    foreach ($properties as $tmp) {
		if ($tmp['name'] == 'page-count') {
		    $mimeTypes[] = $mimeType;
		    break;
		}
	    }
	}

	return array(GalleryStatus::success(), $mimeTypes);
    }

    /**
     * Handler for Gallery::DeactivatePlugin event.
     *
     * @param object GalleryEvent the event
     * @return object GalleryStatus a status code
     */
    function handleEvent($event) {
	/*
	 * We're going to deactivate this module which will generate another Gallery::DeactivatePlugin
	 * event, so make sure that we don't handle *that* event and get into an infinite loop!
	 */
	$data = $event->getData();
	if ($event->getEventName() == 'Gallery::DeactivatePlugin' &&
		$data['pluginType'] == 'module' && $data['pluginId'] != 'thumbpage') {
	    list ($ret, $isActive) = $this->isActive();
	    if ($ret->isError()) {
		return $ret->wrap(__FILE__, __LINE__);
	    }
	    if ($isActive) {
		list ($ret, $redirect) = $this->deactivate();
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
		// Reactivate may fail if toolkit support no longer found..
		list ($ret, $redirect) = $this->activate();
		if ($ret->isError()) {
		    return $ret->wrap(__FILE__, __LINE__);
		}
	    }
	}
	return GalleryStatus::success();
    }
}
?>
