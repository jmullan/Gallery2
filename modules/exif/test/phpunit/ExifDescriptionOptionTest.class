<?php
/*
 * $RCSfile: ExifDescriptionOptionTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.8 $ $Date: 2005/08/23 03:49:42 $
 * @package Exif
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 * @author Georg Rehfeld <rehfeld@georg-rehfeld.de>
 */

GalleryCoreApi::relativeRequireOnce('lib/tools/phpunit/ItemAddOptionTestCase.class');
//GalleryCoreApi::relativeRequireOnce('modules/exif/ExifDescriptionOption.inc');

/**
 * ExifDescriptionOption tests
 * @package Exif
 * @subpackage PHPUnit
 */
class ExifDescriptionOptionTest extends ItemAddOptionTestCase {

    var $_album;

    function ExifDescriptionOptionTest($methodName) {
	$this->ItemAddOptionTestCase($methodName, 'exif', 'ExifDescriptionOption');
    }

    function setUp() {
	global $gallery;
	parent::setUp();
	GalleryCoreApi::relativeRequireOnce('modules/exif/classes/ExifHelper.class');

	list ($ret, $this->_album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($this->_album);

	$ret = $this->_markPluginParametersForCleanup('module', 'exif');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_items = array();
	list ($ret, $this->_items[0]) = 
	    $this->_createRandomDataItem(
		$this->_album->getId(),
		'image/jpeg',
		array('summary' => 'original summary 0', 
		      'description' => 'original description 0',
		      'keywords' => 'original keyword 0; original keyword 1'),
		dirname(__FILE__) . '/../data/descr.jpg');
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	$this->_noWarnings = array(array());
	$this->_noErrors = array();
    }

    function testCreateDescription() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'exif', 'addOption', 
						  EXIF_ITEM_DESCRIPTION);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$result = $this->_handleRequestAfterAdd(array(), $this->_items);
	$this->assertEquals(array($this->_noErrors, $this->_noWarnings), $result);

	list ($ret, $item) = $this->_items[0]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('exif description', $item->getDescription(), 'description 0');
	$this->assertEquals('original summary 0', $item->getSummary(), 'summary 0');
    }

    function testMultipleCreateDescription() {
	
	$totalTestItems = 3;
	for ($j = 1; $j < $totalTestItems; $j++) {
	    list ($ret, $this->_items[$j]) = 
		$this->_createRandomDataItem($this->_album->getId(), 'image/jpeg',
					     array('summary' => "original summary $j", 
						   'description' => "original description $j"),
					     dirname(__FILE__) . '/../data/descr.jpg');
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->_noWarnings[] = array();
	}

	$ret = GalleryCoreApi::setPluginParameter('module', 'exif', 'addOption', 
						  EXIF_ITEM_DESCRIPTION);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$result = $this->_handleRequestAfterAdd(array(), $this->_items);
	$this->assertEquals(array($this->_noErrors, $this->_noWarnings), $result);
	
	for ($j = 0; $j < $totalTestItems; $j++) {
	    list ($ret, $item) = $this->_items[$j]->refresh();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals('exif description', $item->getDescription(), "description $j");
	    $this->assertEquals("original summary $j", $item->getSummary(), "summary $j");
	}
    }

    function testCreateWithCheckDisabled() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'exif', 'addOption', '0');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$result = $this->_handleRequestAfterAdd(array(), $this->_items);
	$this->assertEquals(array($this->_noErrors, $this->_noWarnings), $result);

	list ($ret, $item) = $this->_items[0]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('original description 0', $item->getDescription(), 'description 0');
	$this->assertEquals('original summary 0', $item->getSummary(), 'summary 0');
	$this->assertEquals('original keyword 0; original keyword 1', $item->getKeywords(),
	    'keywords mismatch');
    }

    function testMultipleCreateWithCheckDisabled() {

	$totalTestItems = 3;
	for ($j = 1; $j < $totalTestItems; $j++) {
	    list ($ret, $this->_items[$j]) = 
		$this->_createRandomDataItem($this->_album->getId(), 'image/jpeg',
					     array('summary' => "original summary $j", 
						   'description' => "original description $j"),
					     dirname(__FILE__) . '/../data/descr.jpg');
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }

	    $this->_noWarnings[] = array();
	}  

	$ret = GalleryCoreApi::setPluginParameter('module', 'exif', 'addOption', '0');
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$result = $this->_handleRequestAfterAdd(array(), $this->_items);
	$this->assertEquals(array($this->_noErrors, $this->_noWarnings), $result);
	
	for ($j = 0; $j < $totalTestItems; $j++) {
	    list ($ret, $item) = $this->_items[$j]->refresh();
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $this->assertEquals("original description $j", $item->getDescription(), 
				"description $j");
	    $this->assertEquals("original summary $j", $item->getSummary(), "summary $j");
	}
    }

    function testReturnKeywords() {
	$ret = GalleryCoreApi::setPluginParameter('module', 'exif', 'addOption', 
						  IPTC_ITEM_KEYWORDS);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$result = $this->_handleRequestAfterAdd(array(), $this->_items);
	$this->assertEquals(array($this->_noErrors, $this->_noWarnings), $result);

	list ($ret, $item) = $this->_items[0]->refresh();
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->assertEquals('original keyword 0; original keyword 1', $item->getKeywords(),
	    'keywords mismatch');
    }

}
?>
