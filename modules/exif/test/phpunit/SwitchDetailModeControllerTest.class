<?php
/*
 * $RCSfile: SwitchDetailModeControllerTest.class,v $
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA  02110-1301, USA.
 */
/**
 * @version $Revision: 1.10 $ $Date: 2005/08/23 03:49:42 $
 * @package Exif
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

GalleryCoreApi::relativeRequireOnce('modules/core/classes/GallerySmarty.class');
GalleryCoreApi::relativeRequireOnce('modules/exif/Callbacks.inc');

/**
 * SwitchDetailMode controller tests
 * @package Exif
 * @subpackage PHPUnit
 */
class SwitchDetailModeControllerTest extends GalleryControllerTestCase {

    function SwitchDetailModeControllerTest($methodName) {
	$this->GalleryControllerTestCase($methodName, 'exif.SwitchDetailMode');
    }

    function testSwitchToSummary() {
	global $gallery;
	GalleryUtilities::putRequestVariable('mode', 'summary');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('return' => 1,
				  'redirect' => array('view' => 'core.ShowItem'),
				  'status' => array(),
				  'error' => array()),
			    $results);

	/* Verify that we're in the right mode now */
	$session =& $gallery->getSession();
	if (!$session->exists('exif.module.LoadExifInfo.mode')) {
	    $this->fail('Missing session value');
	}
	$this->assertEquals('summary', $session->get('exif.module.LoadExifInfo.mode'));
    }

    function testSwitchToDetailed() {
	global $gallery;
	GalleryUtilities::putRequestVariable('mode', 'detailed');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('return' => 1,
				  'redirect' => array('view' => 'core.ShowItem'),
				  'status' => array(),
				  'error' => array()),
			    $results);

	/* Verify that we're in the right mode now */
	$session =& $gallery->getSession();
	if (!$session->exists('exif.module.LoadExifInfo.mode')) {
	    $this->fail('Missing session value');
	}
	$this->assertEquals('detailed', $session->get('exif.module.LoadExifInfo.mode'));
    }

    function testSwitchToBogus() {
	global $gallery;
	GalleryUtilities::putRequestVariable('mode', 'BoGuS');

	/* Perform the request and verify that we succeeded */
	$results = $this->handleRequest();
	$this->assertEquals(array('return' => 1,
				  'redirect' => array('view' => 'core.ShowItem'),
				  'status' => array(),
				  'error' => array()),
			    $results);

	/* Verify that we're in the right mode now */
	$session =& $gallery->getSession();
	if (!$session->exists('exif.module.LoadExifInfo.mode')) {
	    $this->fail('Missing session value');
	}
	$this->assertEquals('summary', $session->get('exif.module.LoadExifInfo.mode'));
    }

    /* Test the Callback function */
    function testLoadExifInfoCallback() {
	global $gallery;
	$session =& $gallery->getSession();
	
	/* Create a test photo with exif data */
	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($this->_rootAlbumId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$title = '_test_exif_' . rand();
	$path = dirname(__FILE__) . '/../data/CanonS30.small.jpg';
	list ($ret, $item) =
	    GalleryCoreApi::addItemToAlbum($path, $title, $title, '', '', 'image/jpeg',
					   $this->_rootAlbumId, false);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$this->_markForCleanup($item);
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	
	foreach (array('detailed', 'summary') as $mode) {
	    /* Set the mode */
	    $session->put('exif.module.LoadExifInfo.mode', $mode);
	    $this->assertEquals($mode, $session->get('exif.module.LoadExifInfo.mode'),
				"initial assertion for mode $mode failed");

	    /* Get the expected result */
	    if ($mode == 'detailed') {
		$filter = EXIF_DETAILED;
	    } else {
		$filter = EXIF_SUMMARY;
	    }
	    $expModeSet = $expDataSet = true;
	    list ($ret, $exifData) = ExifHelper::getExifData($path, $filter);
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    if (empty($exifData)) {
		if ($filter == EXIF_SUMMARY) {
		    list ($ret, $exifData) = ExifHelper::getExifData($path, EXIF_DETAILED);
		} else {
		    list ($ret, $exifData) = ExifHelper::getExifData($path, EXIF_SUMMARY);
		}
		if ($ret->isError()) {
		    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
		}
		$mode = null;
	    }
	    if (empty($exifData)) {
		$expModeSet = $expDataSet = false;
	    }

	    $smarty = new GallerySmarty();
	    
	    /* Execute the method under test */
	    $callback = new ExifCallbacks;
	    $ret = $callback->callback(array('itemId' => $item->getId()), $smarty, 'LoadExifInfo');
	    if ($ret->isError()) {
		return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	
	    /* Verify the results */
	    $data = $smarty->_tpl_vars['block']['exif']['LoadExifInfo'];
	    $this->assertEquals($expModeSet, isset($data['mode']), "mode not set for mode $mode");
	    if (isset($data['mode'])) {
		$this->assertEquals($mode, $data['mode'],
				    "mode $mode was not set correctly in the template");
	    }
	    $this->assertEquals($expDataSet, isset($data['exifData']), "data not set for mode $mode");
	    if (isset($data['exifData'])) {
		$this->assertEquals($exifData, $data['exifData'], "data for mode $mode");
	    }
	}
    }
}
?>
