<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Exif
 * @subpackage PHPUnit
 * @author Alan Harder <alan.harder@sun.com>
 */

/**
 * Test ExifExtractor functionality
 *
 * @package Exif
 * @subpackage PHPUnit
 */
class ExifExtractorTest extends GalleryTestCase {

    function ExifExtractorTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    /**
     * Create an album for testing
     */
    function setUp() {
	parent::setUp();
	global $gallery;

	// Create a new subalbum and add some jpegs
	list ($ret, $album) = $this->_createRandomAlbum($this->_getRootId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $lockId) = GalleryCoreApi::acquireReadLock($album->getId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	$photoIds = array();
	$prefix = dirname(__FILE__) . '/../../../';
	$imagePaths = array($prefix . 'exif/test/data/CanonS30.small.jpg',
			    $prefix . 'core/test/data/test2.gif',
			    $prefix . 'exif/test/data/CanonS30.small.jpg',
			    $prefix . 'core/test/data/test1.jpg');
	for ($i = 0; $i < count($imagePaths); $i++) {
	    list ($ret, $photoId) = $this->_addPhoto(
		  $album->getId(), $imagePaths[$i], $i + 1);
	    if ($ret->isError()) {
		$this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	    }
	    $photoIds[] = $photoId;
	}
	$ret = GalleryCoreApi::releaseLocks($lockId);
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $module) = GalleryCoreApi::loadPlugin('module', 'exif');
	if ($ret->isError() || !isset($module)) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	list ($ret, $exif) =
	    GalleryCoreApi::newFactoryInstance('ExifInterface_1_0', 'ExifExtractor');
	if ($ret->isError() || !isset($exif)) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$this->_album = $album;
	$this->_photoIds = $photoIds;
	$this->_exif = $exif;
    }

    function _addPhoto($parentId, $imagePath, $index) {
	list ($ret, $photo) =
	    GalleryCoreApi::newFactoryInstance('GalleryEntity', 'GalleryPhotoItem');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$ret = $photo->create($parentId, $imagePath,
			      GalleryCoreApi::getMimeType($imagePath),
			      'testitem_' . time() . substr($imagePath, -4));
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$photo->setTitle("Item #$index");
	$photo->setSummary("Summary $index");
	$photo->setDescription("Description $index");
	$ret = $photo->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	// add thumbnail
	list ($ret, $thumbId) = $this->_addDerivative($photo,
	    'thumbnail', DERIVATIVE_TYPE_IMAGE_THUMBNAIL, 'thumbnail|150');
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $photo->getId());
    }

    function _addDerivative($photo, $toolkitType,
			    $derivativeType, $derivativeOperation) {
	list ($ret, $toolkit, $outputMimeType) =
	    GalleryCoreApi::getToolkitByOperation($photo->getMimeType(), $toolkitType);
	if ($ret->isError() || !isset($toolkit)) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	list ($ret, $derivative) =
	    GalleryCoreApi::newFactoryInstanceByHint('GalleryDerivative', $photo->getEntityType());
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	if (!isset($derivative)) {
	    return array(GalleryStatus::error(ERROR_MISSING_OBJECT, __FILE__, __LINE__), null);
	}
	
	$ret = $derivative->create($photo->getId(), $derivativeType);
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	$derivative->setDerivativeSourceId($photo->getId());
	$derivative->setDerivativeOperations($derivativeOperation);
	$derivative->setMimeType($outputMimeType);
	$ret = $derivative->save();
	if ($ret->isError()) {
	    return array($ret->wrap(__FILE__, __LINE__), null);
	}
	return array(GalleryStatus::success(), $derivative->getId());
    }

    /**
     * Delete the album that was used for testing
     */
    function tearDown() {
	global $gallery;
	$ret = GalleryCoreApi::deleteEntityById($this->_album->getId());
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
	parent::tearDown();
    }


    function testOneItemAllData() {
	list ($ret, $data) = $this->_exif->getMetaData($this->_photoIds[0]);
	$this->assert(!$ret->isError() && isset($data[$this->_photoIds[0]]));
	$this->assertEquals('1/59 sec',
	    $data[$this->_photoIds[0]]['ShutterSpeedValue']['value']);
    }

    function testMultiItemAllData() {
	list ($ret, $data) = $this->_exif->getMetaData(
	    array($this->_photoIds[0], $this->_photoIds[2]));
	$this->assert(!$ret->isError() && isset($data));
	$this->assertEquals(2, count($data), 'Data size');
	$this->assertEquals('1/59 sec',
	    $data[$this->_photoIds[0]]['ShutterSpeedValue']['value']);
	$this->assertEquals('21.31 mm',
	    $data[$this->_photoIds[2]]['FocalLength']['value']);
    }

    function testMultiItemMixedTypeAllData() {
	list ($ret, $data) = $this->_exif->getMetaData($this->_photoIds);
	$this->assert(!$ret->isError() && isset($data));
	$this->assertEquals(3, count($data), 'Data size');
	$this->assertEquals('1/59 sec',
	    $data[$this->_photoIds[0]]['ShutterSpeedValue']['value']);
	$this->assertEquals('21.31 mm',
	    $data[$this->_photoIds[2]]['FocalLength']['value']);
    }

    function testMultiItemSomeData() {
	list ($ret, $data) = $this->_exif->getMetaData(
	    $this->_photoIds, array('DateTime', 'ShutterSpeedValue'));
	$this->assert(!$ret->isError() && isset($data));
	$this->assertEquals(3, count($data), 'Data size');
	$this->assertEquals('1/59 sec',
	    $data[$this->_photoIds[0]]['ShutterSpeedValue']['value']);
	$this->assert(!isset($data[$this->_photoIds[2]]['FocalLength']));
    }
}
?>
