<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
/**
 * @version $Revision$ $Date$
 * @package Exif
 * @subpackage PHPUnit
 * @author Bharat Mediratta <bharat@menalto.com>
 */

/**
 * Test Exif Helper functionality
 *
 * @package Exif
 * @subpackage PHPUnit
 *
 */
class ExifHelperTest extends GalleryTestCase {

    function ExifHelperTest($methodName) {
	$this->GalleryTestCase($methodName);
    }

    /**
     * @see GalleryTestCase::setUp()
     */
    function setUp() {
	parent::setUp();

	list ($ret, $this->_save['summary']) = ExifPropertiesMap::getProperties(EXIF_SUMMARY);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	list ($ret, $this->_save['detailed']) = ExifPropertiesMap::getProperties(EXIF_DETAILED);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = ExifHelper::setDefaultProperties(EXIF_SUMMARY);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = ExifHelper::setDefaultProperties(EXIF_DETAILED);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * @see GalleryTestCase::tearDown()
     */
    function tearDown() {
	parent::tearDown();

	$ret = ExifPropertiesMap::setProperties(EXIF_SUMMARY, $this->_save['summary']);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	$ret = ExifPropertiesMap::setProperties(EXIF_DETAILED, $this->_save['detailed']);
	if ($ret->isError()) {
	    print $ret->getAsHtml();
	    return $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}
    }

    /**
     * Test getting EXIF data from a test file
     */
    function testGetExifData() {
	list ($ret, $exifData) =
	    ExifHelper::getExifData(dirname(__FILE__) . '/../data/CanonS30.small.jpg', EXIF_SUMMARY);
	if ($ret->isError()) {
	    $this->failWithStatus($ret->wrap(__FILE__, __LINE__));
	}

	/*
	 * What we get back depends on what options we've set for our mode, which will vary
	 * depending on the current settings of the database.  Even if we request a specific field,
	 * we still may not get it back if its not in the image.  Doh.  Let's do a quick and dirty
	 * test for now and just check for 'Make' and 'Model' to make sure that we got something.
	 */
	$verifiedCount = 0;
	for ($i = 0; $i < sizeof($exifData); $i++) {
	    if ($exifData[$i]['title'] == 'Make') {
		$this->assertEquals('Canon', $exifData[$i]['value']);
		$verifiedCount++;
	    }
	    if ($exifData[$i]['title'] == 'Model') {
		$this->assertEquals('Canon PowerShot S30', $exifData[$i]['value']);
		$verifiedCount++;
	    }
	}
	$this->assertEquals(2, $verifiedCount);

	/* Make sure there are no duplicates in the list */
	$seen = array();
	for ($i = 0; $i < sizeof($exifData); $i++) {
	    $title = $exifData[$i]['title'];
	    $this->assert(!isset($seen[$title]), "$title is duplicated");
	    $seen[$title] = 1;
	}
    }

    /**
     * Test getting all the EXIF keys
     */
    function testGetExifKeys() {
	/* There are a bajillion keys.  Do a quick sanity check */
	$exifKeys = ExifHelper::getExifKeys();
	$this->assertEquals(147, sizeof($exifKeys));
	$this->assert(isset($exifKeys['ImageType']));
    }

    /**
     * Check post processing code
     */
    function testPostProcessKeys() {
	$this->assertEquals(
            "1/400 sec", ExifHelper::postProcessValue("ShutterSpeedValue", "25/10000 sec"));
    }
}

?>
