<?php

class TestCase {
    var $_debugOutput = array();

    function requireDatabaseConnection() {
	return true;
    }

    function useDefaultDatabase() {
	return true;
    }

    function getDescription() {
    }

    function getIterations() {
	return array();
    }

    function start($iterations) {
	$this->traceStart();

	$this->startTiming($iterations);
	
	if ($iterations > 1) {
	    /* Temporarily turn off debug mode */
	    global $gallery;
	    $debug = $gallery->getDebug();
	    $gallery->setDebug(false);
	}

	$ret = $this->testStart($iterations);

	if ($iterations > 1) {
	    $gallery->setDebug($debug);
	}
	    
	$this->stopTiming();
	$this->timingReport();
	$this->traceStop();

	return $ret->wrap(__FILE__, __LINE__);
    }

    function getDependencies() {
	return array();
    }

    function testStart() {
    }

    function cleanup() {
	global $gallery;
	
	$this->traceStart();
	$ret = $this->testCleanup();
	$this->traceStop();

	return $ret->wrap(__FILE__, __LINE__);
    }

    function testCleanup() {
	return GalleryStatus::success();
    }

    function traceStart() {
	ob_start();
    }

    function traceStop() {
	$buf = ob_get_contents();
	ob_end_clean();

	foreach (split("\r", $buf) as $line) {
	    $this->_debugOutput[] = $line;
	}
    }

    function dump($ret, $item) {
	print "STATUS: $ret\n";
	print "ITEM:\n";
	print_r($item);
    }

    function getDebugOutput() {
	return $this->_debugOutput;
    }

    function startTiming($iterations) {
	list ($usec, $sec) = explode(" ", microtime());
	$this->_startTime = ((float)$usec + (float)$sec);
	$this->_iterations = $iterations;
    }

    function stopTiming() {
	list ($usec, $sec) = explode(" ", microtime());
	$this->_stopTime = ((float)$usec + (float)$sec);
    }

    function timingReport() {
	$elapsed = $this->_stopTime - $this->_startTime;
	$persec = $this->_iterations/$elapsed;
	print "Iterations: $this->_iterations\n";
	print "Elapsed: $elapsed\n";
	print "PerSec: $persec\n";
    }
}

?>