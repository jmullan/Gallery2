<?php

class TestCase {
    function getDescription() {
    }

    function getIterations() {
	return array();
    }

    function start($iterations) {
	$this->startTiming($iterations);
	
	if ($iterations > 1) {
	    /* Temporarily turn off debug mode */
	    global $gallery;
	    $debug = $gallery->getDebug();
	    $gallery->setDebug(false);
	}

	$ret = $this->testStart($iterations);

	if ($iterations > 1) {
	    $gallery->setDebug($debug);
	}

	$this->stopTiming();
	$timing = $this->timingReport();

	if ($ret->isError()) {
	    return array($timing, $ret->wrap(__FILE__, __LINE__));
	} else {
	    return array($timing, GalleryStatus::success());
	}
    }

    function getDependencies() {
	return array();
    }

    function testStart() {
    }

    function cleanup() {
	global $gallery;
	
	$ret = $this->testCleanup();

	return $ret->wrap(__FILE__, __LINE__);
    }

    function testCleanup() {
	return GalleryStatus::success();
    }

    function dump($ret, $item) {
	print "STATUS: $ret\n";
	print "ITEM:\n";
	print_r($item);
    }

    function startTiming($iterations) {
	list ($usec, $sec) = explode(" ", microtime());
	$this->_startTime = ((float)$usec + (float)$sec);
	$this->_iterations = $iterations;
    }

    function stopTiming() {
	list ($usec, $sec) = explode(" ", microtime());
	$this->_stopTime = ((float)$usec + (float)$sec);
    }

    function timingReport() {
	$elapsed = $this->_stopTime - $this->_startTime;
	$persec = $this->_iterations/$elapsed;
	return array('iterations' => $this->_iterations,
		     'elapsed' => round($elapsed, 4),
		     'persec' => round($persec, 4));
    }
}

?>