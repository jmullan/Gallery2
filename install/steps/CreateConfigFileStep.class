<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2005 Bharat Mediratta
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

class CreateConfigFileStep extends InstallStep {
    var $_firstTime;

    function CreateConfigFileStep() {
	$this->_firstTime = true;
    }

    function stepName() {
	return _('Create Config File');
    }

    function loadTemplateData(&$templateData) {
	global $galleryStub;

	$baseDir = dirname(dirname(dirname(__FILE__)));
	$configFilePath = $baseDir . '/config.php';
	if (file_exists($configFilePath) && !is_writable($configFilePath)) {
	    /* The file exists but we can't write to it */
	    $templateData['error'] = sprintf(_('Unable to write to the <b>config.php</b> configuration file in your <tt>%s</tt> directory.  Please change its permissions.  If you\'re on Unix you can do <i>chmod 666 config.php</i> to fix this.'), basename($baseDir));
	    $this->setInError(true);
	    $templateData['bodyFile'] = 'CreateConfigFileInstructions.html';
	    $templateData['galleryDir'] = basename($baseDir);
	} else {
	    $isNewSite = $galleryStub->getConfig('newsite');
	    $isMultisite = $galleryStub->getConfig('multisite');
	    $galleryId = $galleryStub->getConfig('galleryId');
	    $currentConfig = array();

	    if ($isNewSite || $isMultisite) {
		$currentConfig = @file($configFilePath);
		if (empty($currentConfig)) {
		    $templateData['error'] = _('Unable to read config.php');
		}
	    }

	    if (!$out = @fopen($configFilePath, 'w')) {
		/* Give the user instructions */
		$templateData['bodyFile'] = 'CreateConfigFileInstructions.html';
		$templateData['galleryDir'] = basename($baseDir);

		if (!$this->_firstTime) {
		    if (!file_exists($configFilePath)) {
			$templateData['error'] =
			    sprintf(_('The <b>config.php</b> file does not exist in your %s directory'),
				    $baseDir);
		    }
		}
	    } else {
		if ($isNewSite && !$isMultisite) {
		    $this->_newMultiConfig($out, $baseDir, $currentConfig, $galleryId);
		} else if ($isNewSite) {
		    $this->_addMultiConfig($out, $baseDir, $currentConfig, $galleryId);
		} else if ($isMultisite) {
		    $this->_updateMultiConfig($out, $baseDir, $currentConfig, $galleryId);
		} else {
		    $this->_writeSingleConfig($out, $baseDir, $galleryId);
		}
		fclose($out);
		$this->setComplete(true);
		$templateData['bodyFile'] = 'CreateConfigFileSuccess.html';
	    }
	}
	$this->_firstTime = false;
    }

    function _writeSingleConfig(&$out, $baseDir) {
	global $galleryStub;

	$newStoreConfig = $galleryStub->getConfig('storage.config');
	$in = @fopen($baseDir . '/install/config.php-template', 'r');
	while ($line = fgets($in, 2000)) {
	    if (trim($line) == '$gallery->setConfig(\'setup.password\', \'\');') {
		$tmp = addslashes($galleryStub->getConfig('setup.password'));
		$line = sprintf("\$gallery->setConfig('setup.password', '%s');\n", $tmp);
	    }

	    if (trim($line) == '$gallery->setConfig(\'data.gallery.base\', \'\');') {
		$tmp = addslashes($galleryStub->getConfig('data.gallery.base'));
		$line = sprintf("\$gallery->setConfig('data.gallery.base', '%s');\n", $tmp);
	    }

	    if (trim($line) == '$gallery->setConfig(\'galleryId\', \'\');') {
		$tmp = addslashes($galleryStub->getConfig('galleryId'));
		$line = sprintf("\$gallery->setConfig('galleryId', '%s');\n", $tmp);
	    }

	    foreach (array('type', 'hostname', 'database', 'username',
			   'password', 'tablePrefix', 'columnPrefix') as $key) {
		if (preg_match("/^.storeConfig\['$key'\] = '.*';/", $line)) {
		    $newStoreConfig[$key] = addslashes($newStoreConfig[$key]);
		    $line = "\$storeConfig['$key'] = '$newStoreConfig[$key]';\n";
		}
	    }

	    fwrite($out, $line);
	}
	fclose($in);
    }

    function _newMultiConfig(&$out, $baseDir, $currentConfig, $galleryId) {
	$in = @fopen($baseDir . '/install/multiconfig.php-template', 'r');
	while ($line = fgets($in, 2000)) {
	    fwrite($out, $line);
	    if (preg_match('{^/\*>-*<\*/$}', $line)) {
		fwrite($out, "case '" . $galleryId . "': ?>\n");
		$this->_writeSingleConfig($out, $baseDir);
		fwrite($out, "\n<?php\nbreak;\n${line}default: ?>\n");
		foreach ($currentConfig as $tmp) {
		    fwrite($out, $tmp);
		}
		fwrite($out, "<?php\n$line");
	    }
	}
	fclose($in);
    }

    function _addMultiConfig(&$out, $baseDir, $currentConfig, $galleryId) {
	$added = false;
	foreach ($currentConfig as $line) {
	    fwrite($out, $line);
	    if (preg_match('{^/\*>-*<\*/$}', $line) && !$added) {
		fwrite($out, "case '" . $galleryId . "': ?>\n");
		$this->_writeSingleConfig($out, $baseDir);
		fwrite($out, "<?php\nbreak;\n$line");
		$added = true;
	    }
	}
    }

    function _updateMultiConfig(&$out, $baseDir, $currentConfig, $galleryId) {
	$skip = $updated = false;
	foreach ($currentConfig as $line) {
	    if (preg_match('{^/\*>-*<\*/$}', $line)) {
		$skip = false;
	    }
	    if (!$skip) {
		fwrite($out, $line);
	    }
	    if (strpos($line, "case '$galleryId': ?>") === 0
		    || (!$updated && strpos($line, 'default:') === 0)) {
		$this->_writeSingleConfig($out, $baseDir);
		fwrite($out, "<?php\nbreak;\n");
		$skip = $updated = true;
	    }
	}
    }
}
?>
