<?php
/*
 * $RCSfile$
 *
 * Gallery - a web based photo album viewer and editor
 * Copyright (C) 2000-2004 Bharat Mediratta
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or (at
 * your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

class SystemChecksStep extends InstallStep {
    function stepName() {
	return _('System Checks');
    }

    /*
     * Returns the exact bytes value from a php.ini setting
     * 
     * Copied from PHP.net's manual entry for ini_get()
     */
    function _getBytes($val) {
	$val = trim($val);
	$last = $val{strlen($val)-1};
	switch($last) {
	case 'k':
	case 'K':
	    return (int) $val * 1024;
	    break;
	case 'm':
	case 'M':
	    return (int) $val * 1048576;
	    break;
	default:
	    return $val;
	}
    }

    function loadTemplateData(&$templateData) {
	$failCount = 0;

	$suggestedHtaccess = array();
	
	// assert compatible version of PHP
	if (!function_exists('version_compare') || version_compare(phpversion(), '4.1.0') < 0) {
	    $templateData['check'][] =
		array('title' => _('PHP Version'),
		      'error' => true,
		      'notice' => sprintf(_("Error: Gallery 2 requires PHP version 4.1.0 or newer. You have PHP version %s installed. Contact your webserver administrator to request an upgrade, available at the <a href=\"http://php.net/\">PHP website</a>."), phpversion()));
	    $failCount++;
	} else {
	    $templateData['check'][] =
		array('title' => _('PHP Version'), 'success' => true);
	}

	// assert that __FILE__ works correctly
	if (!SystemChecksStep::CheckFileDirective()) {
	    $templateData['check'][] =
		array('title' => _('FILE Directive'),
		      'error' => true,
		      'notice' => _('Error: your PHP __FILE__ directive is not functioning correctly. Please file a support request with your webserver administrator or in the Gallery forums.'));
	    $failCount++;
	} else {
	    $templateData['check'][] =
		array('title' => _('FILE Directive'), 'success' => true);
	}

	// Make sure that safe mode is not enabled
	if ((bool)ini_get('safe_mode')) {
	    $templateData['check'][] =
		array('title' => _('Safe Mode'),
		      'error' => true,
		      'notice' => _('Error: Your version of PHP is configured with safe mode enabled.  You must disable safe mode before Gallery will run.'));
	    $failCount++;
	} else {
	    $templateData['check'][] =
		array('title' => _('Safe Mode'), 'success' => true);
	}

	// Make sure session.auto_start is OFF during the installer
	if ((bool)ini_get('session.auto_start')) {
	    $templateData['check'][] =
		array('title' => _('Session Auto-Start Off'),
		      'error' => true,
		      'notice' => _('Error: Your PHP is configured to auto-start sessions (session.auto_start = 1 in php.ini). Please turn that feature off before continuing with the installer.'));
	    $suggestedHtaccess[] = 'php_value session.auto_start 0';
	    $failCount++;
	} else {
	    $templateData['check'][] =
		array('title' => _('Session Auto-Start'), 'success' => true);
	}

	// Warning when exec() is disabled
	if (in_array('exec', split(',\s*', ini_get('disable_functions')))) {
	    $templateData['check'][] =
		array('title' => _('exec() allowed'),
		      'warning' => true,
		      'notice' => _('Warning: The exec() function is disabled in your php by the <b>disabled_functions</b> parameter in php.ini. You won\'t be able to use modules that require external binaries (e.g. ImageMagick, NetPBM or Ffmpeg). This can only be set server-wide, so you will need to change it in the global php.ini.'),
		);
	} else {
	    $templateData['check'][] =
		array('title' => _('exec() allowed'), 'success' => true);
	}
	
	// Warning if memory_limit is set and is too low
	$memoryLimit = ini_get('memory_limit');
	$title = sprintf('%s (%s)', _('Memory Limit'), ($memoryLimit == '' ? 'no limit' : $memoryLimit . 'b'));
	$minimumMemoryLimit = 16;
	if ($memoryLimit != '' && ($this->_getBytes($memoryLimit) / (1024 * 1024)) < $minimumMemoryLimit) {
	    $templateData['check'][] =
		array('title' => $title,
		      'warning' => true,
		      'notice' => sprintf(_('Warning: Your PHP is configured to limit the memory to %sb (<b>memory_limit</b> parameter in php.ini). You should rise this limit to at least <b>%sMb</b> for proper Gallery operation.'), $memoryLimit, $minimumMemoryLimit),
		);
	    $suggestedHtaccess[] = sprintf('php_value memory_limit %sM', $minimumMemoryLimit);
	} else {
	    $templateData['check'][] =
		array('title' => $title, 'success' => true);
	}

	// Warning if file_uploads are not allowed
	if (! (bool)ini_get('file_uploads')) {
	    $templateData['check'][] =
		array('title' => 'File Uploads Allowed',
		      'warning' => true,
		      'notice' => _('Warning: Your PHP is configured not to allow file uploads (<b>file_uploads</b> parameter in php.ini). You will need to enable this option if you want to upload files to your Gallery with a web browser.'),
		);
	    $suggestedHtaccess[] = 'php_flag file_uploads on';
	} else {
	    $templateData['check'][] =
		array('title' => 'File Uploads Allowed', 'success' => true);
	}

	// Warning if upload_max_filesize is less than 2M
	$title = sprintf('%s (%sb)', _('Maximum Upload Size'), ini_get('upload_max_filesize'));
	$minimumUploadsize = 2;
	$uploadSize = $this->_getBytes(ini_get('upload_max_filesize')) / (1024 * 1024);
	if ($uploadSize < $minimumUploadsize) {
	    $templateData['check'][] =
		array('title' => $title,
		      'warning' => true,
		      'notice' => sprintf(_('Warning: Your PHP is configured to limit the size of file uploads to %sb (<b>upload_max_filesize</b> parameter in php.ini). You should rise this limit to allow uploading bigger files.'), ini_get('upload_max_filesize')),
		);
	    $suggestedHtaccess[] = sprintf('php_value upload_max_filesize %sM', $minimumUploadsize);
	} else {
	    $templateData['check'][] =
		array('title' => $title, 'success' => true);
	}

	// Warning if post_max_size is less than 2M
	$title = sprintf('%s (%sb)', _('Maximum POST Size'), ini_get('post_max_size'));
	$minimumPostsize = 2;
	if ((int)ini_get('post_max_size') < $minimumPostsize) {
	    $templateData['check'][] =
		array('title' => $title,
		      'warning' => true,
		      'notice' => sprintf(_('Warning: Your PHP is configured to limit the post data to a maximum of %sb (<b>post_max_size</b> parameter in php.ini). You should raise this limit to allow uploading bigger files.'), ini_get('post_max_size')),
		);
	    $suggestedHtaccess[] = sprintf('php_value post_max_size %sM', $minimumPostsize);
	} else {
	    $templateData['check'][] =
		array('title' => $title, 'success' => true);
	}

	// Check all files against MANIFEST
	$title = _('File Integrity');
	if (SystemChecksStep::CheckFileDirective()) {
	    $warnings = SystemChecksStep::CheckManifest();
	} else {
	    $warnings = array('skipped' => 1);
	}
	if (empty($warnings)) {
	    $templateData['check'][] = array('title' => $title, 'success' => true);
	} else {
	    $notice = isset($warnings['manifest']) ?
			    _('Manifest missing or inaccessible.') . '<br/>' : '';
	    if (isset($warnings['skipped'])) {
		$notice .= _('Test skipped due to other errors.') . '<br/>';
	    }
	    if (!empty($warnings['missing'])) {
		$notice .= _('Missing files:') .
			   '<ul>' . join('<br/>', $warnings['missing']) . '</ul>';
	    }
	    if (!empty($warnings['corrupt'])) {
		$notice .= _('Corrupt or modified files:') .
			   '<ul>' . join('<br/>', $warnings['corrupt']) . '</ul>';
	    }
	    $templateData['check'][] = array('title' => $title, 'warning' => true,
					     'notice' => $notice);
	}

	$templateData['suggestedHtaccess'] = join("\n", $suggestedHtaccess);
	$templateData['bodyFile'] = 'SystemChecks.html';
	$this->setComplete($failCount == 0);
	$this->setInError($failCount > 0);
    }

    function CheckFileDirective() {
	if (strstr(__FILE__, 'steps/SystemChecksStep.class') ||
	    strstr(__FILE__, 'steps\\SystemChecksStep.class')) {
	    return true;
	} else {
	    return false;
	}
    }

    function CheckManifest() {
	$base = realpath(dirname(__FILE__) . '/../..') . '/';
	require_once($base . 'modules/core/classes/GalleryUtilities.class');
	$manifest = GalleryUtilities::readManifest();
	if (empty($manifest)) {
	    return array('manifest' => 1);
	}
	$warnings = array();
	foreach ($manifest as $file => $info) {
	    $path = $base . $file;
	    if (!file_exists($path)) {
		$warnings['missing'][] = SystemChecksStep::_abbreviateInSpan($file, 60);
	    } else {
		$lines = @file($path);
		$actualChecksum = sprintf('%u', crc32(join('', $lines)));
		if ($actualChecksum != $info['checksum']) {
		    $warnings['corrupt'][] = SystemChecksStep::_abbreviateInSpan($file, 60);
		}
	    }
	}
	return $warnings;
    }

    function _abbreviateInSpan($str, $len) {
	$abbrev = (strlen($str) > $len) ? ('...' . substr($str, -1 * $len)) : $str;
	return sprintf('<span title="%s">%s</span>', $str, $abbrev);
    }
}
?>
