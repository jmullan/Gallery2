Welcome to Gallery 2.0.  Currently this is in a pre-alpha state.  I'm
still working on the overall framework, and I'm taking the time to
really do it right.  Once I'm satisfied that it's good and solid, I'll
start to add all the various application features.

You should be able to install and play with a new G2 by following
these instructions:

1. Get the latest G2 code

2. Wipe out your existing data tree and database.  You may not have to
do this after every single update, but I'm busy making structural
changes all the time so DON'T expect things to continue working.  I
reserve the right to change the data structures whenever I want.  If
you've got G2 installed, a fast way to do this is to go to the test
harness:

	setup/test/index.php

and run the "ReInitializeGallery" test case which does a whole lot of
stuff and should clean and reset your Gallery, however be warned: that
test case was written to help me do development and it has hardcoded
configuration settings (like the locations of the ImageMagick
binaries, etc).  Your mileage may vary.

3. Create a database.  Right now we support PostgreSQL and MySQL.  
Older versions of G2 would create your database for you, but that 
turned out not to be portable to Postgres so we now require that
you create the database yourself. 

4. Copy setup/config.php-dist to gallery/config.php and edit it.
There are instructions in the file.  It should be pretty self
explanatory.  I recommend setting your debug mode to 'buffered' so
that you can see what's happening.

5. Browse to gallery/setup/setup.php and follow its instructions.
They are pretty sparse at the moment, but it *should* walk you through
the process of creating a new data directory and a new database.  If
it fails, you might want to look through the code.  It's entirely in
setup/setup.php

6. Browse to the top level:

	http://your.server/gallery/main.php

   Click the [login] link and enter "admin" as the username and
   your setup password (the one you entered in config.php) as the
   password.  This should log you in.

7. You'll get a [site admin] link at the top.  Click that to go to
   the Gallery Site Administrator.  You can go to it by hand at:

	main.php?g2_view=core:SiteAdmin

   7a.  Go to the 'modules' tab.  Click the 'install' link next
        to NetPBM (or ImageMagick).  Then click the 'configure' link.
        Enter the path to your NetPBM (or ImageMagick) binaries and
        save it.  Repeat until all test results are positive.

   7b.  Go to the 'modules' tab.  Click the 'activate' link next to
	NetPBM (or ImageMagick).

   7c.  Go to the 'modules' tab.  Click the 'install' and then
	'activate' links next to 'comment'.

8. Go back to the top level of the Gallery.  There's no link back
   right now so you have to enter:

	main.php

   by hand.  Click [edit item] and edit the properties of the top
   level album.  When you're done adding photos, click on the icon
   in the top left (or "no thumbnail" if you're at the top level)
   to go back to the main album view.

9. Use the test harness to create a whole bunch of albums and photos
   (this is a nice way to see what a fully populated gallery is going to 
   look like).  Browse to the test harness:

	setup/test/index.php

   9a.  Click the 50, 500, 1K or 10K link next to 'CreateRandomTree'.
	This will create a relatively boring tree of albums and 
	photos for you.

   9b.  Click the 50, 500, 1K or 10K link next to 'CreateRandomUser'.
	This will create a relatively boring user base for you.

10. Go to the main interface:

	main.php

    and browse around.

11. Try adding a comment on an album or item.

12. Browse back to gallery/main.php and you should be able to 
    see your tree and wander around it.

13. Browse to gallery/main.php?g2_view=core:SiteAdmin and you'll
    see the Site Admin framework.  User and group management are
    functionally complete now.  Try creating and editing users and
    groups, and try adding and removing users from groups.  Install,
    activate and play with the search module.

14. Browse to gallery/setup/phpunit and you'll see the unit test 
    framework run through all of its tests.  They should all succeed.
    Note that some of them don't clean up after themselves fully!

